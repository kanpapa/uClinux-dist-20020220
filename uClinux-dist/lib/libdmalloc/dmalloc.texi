\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename dmalloc.info
@settitle Dmalloc Tutorial
@setchapternewpage odd
@headings double
@c %**end of header
  
@dircategory Libraries
@direntry
* Dmalloc: (dmalloc).			Malloc debug library.
@end direntry

@c ================================================================
@c This file has the new style title page commands.
@c Also, it uses `@@include' files instead of `@@input' files.

@c Run using special version of `texinfo.tex'.

@c Also, run `makeinfo' rather than `texinfo-format-buffer'.
@c ================================================================

@c ================================================================
@c $Id: dmalloc.texi,v 1.1 2000/11/01 01:19:03 pauli Exp $
@c ================================================================

@ifinfo
This file is an introduction to the Dmalloc library which handles general
memory heap management.

Copyright 1992 to 1998 by Gray Watson.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
chapter entitled ``Copying'' are included exactly as in the original,
and provided that the entire resulting derived work is distributed under
the terms of a permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that the chapter entitled ``Copying'' may be included in a
translation approved by the author instead of in the original English.
@end ifinfo

@titlepage
@title Debug Malloc Library
@subtitle Version 4.7.1
@subtitle July 2000
@author Gray Watson

@page
Copyright 1992 to 1998 by Gray Watson.

Published by Gray Watson

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
chapter entitled ``Copying'' are included exactly as in the original,
and provided that the entire resulting derived work is distributed under
the terms of a permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that the chapter entitled ``Copying'' may be included in a
translation approved by the author instead of in the original English.
@end titlepage

@node Top, Copying, (dir), (dir)
@top Debug Malloc Library

@ifinfo
Version 4.7.1 -- July 2000
@end ifinfo

@cindex introduction
@cindex author

The debug memory allocation or @dfn{dmalloc} library has been designed
as a drop in replacement for the system's @code{malloc}, @code{realloc},
@code{calloc}, @code{free} and other memory management routines while
providing powerful debugging facilities configurable at runtime.  These
facilities include such things as memory-leak tracking, fence-post write
detection, file/line number reporting, and general logging of
statistics.

The library is reasonably portable having been run successfully on at
least the following operating systems: AIX, BSD/OS, DG/UX, FreeBSD,
HPUX, Irix, Linux, MS-DOG, NeXT, OSF, SCO, Solaris, SunOS, Ultrix,
Unixware, Windoze and even Unicos on a Cray Y-MP.  It also provides
support for the debugging of threaded programs.  @xref{Using With
Threads}.

The package includes the library, configuration scripts, debug utility
application, test program, and documentation.  Online documentation as
well as the full source is available at URL @uref{http://dmalloc.com/}.
Details on the library's mailing list are available there as well.

My contact information is available on the web page.  I can be reached
with any questions or feedback.  Please include the version number of
the library that you are using as well as your machine and operating
system types.

Gray Watson.

@menu
* Copying::                     Library copying and licensing conditions.
* Overview::                    Description of features and how to get started.
* Programming::                 How to program with the library.
* Dmalloc Program::             Dmalloc Utility Program.
* Source Code::                 Information on the source code.
* Index of Concepts::           Index of concepts in the manual.
@end menu

@node Copying, Overview, Top, Top
@chapter Library Copying and Licensing Conditions

@cindex copying
@cindex license
@cindex library permissions
@cindex permissions of the library

Copyright 1992 to 2000 by Gray Watson.

Permission to use, copy, modify, and distribute this software for any
purpose and without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies, and
that the name of Gray Watson not be used in advertising or publicity
pertaining to distribution of the document or software without specific,
written prior permission.

Gray Watson makes no representations about the suitability of the
software described herein for any purpose.  It is provided ``as is''
without express or implied warranty.

@node Overview, Programming, Copying, Top
@chapter Description of Features and How to Get Started

@cindex overview

@menu
* Allocation Basics::           Basic description of terms and functions.
* Features::                    General features of the library.
* Installation::                How to install the library.
* Getting Started::             Getting started with the library.
* Troubleshooting::             Some solutions to common problems.
@end menu

@node Allocation Basics, Features, Overview, Overview
@section Basic Description of Terms and Functions

@cindex allocation basics
@cindex basic allocation information

@menu
* Basic Definitions::           General memory terms and concepts.
* Malloc Functions::            Functionality supported by all malloc libs.
@end menu

@node Basic Definitions, Malloc Functions, Allocation Basics, Allocation Basics
@subsection General Memory Terms and Concepts

@cindex basic definitions
@cindex memory definitions

Any program can be divided into 2 logical parts: text and data.  Text is
the actual program code in machine-readable format and data is the
information that the text operates on when it is executing.  The data,
in turn, can be divided into 3 logical parts according to where it is
stored: @dfn{static}, @dfn{stack}, and @dfn{heap}.

@cindex static memory

Static data is the information whose storage space is compiled into the
program.

@example
/* global variables are allocated as static data */
int numbers[10];

main()
@{
        @dots{}
@}
@end example

@cindex stack memory

Stack data is data allocated at runtime to hold information used inside
of functions.  This data is managed by the system in the space called
stack space.

@example
void foo()
@{
        /* this local variable is stored on the stack */
        float total;
        @dots{}
@}

main()
@{
        foo();
@}
@end example

@cindex heap memory

Heap data is also allocated at runtime and provides a programmer with
dynamic memory capabilities.

@example
main()
@{
        /* the address is stored on the stack */
        char * string;
        @dots{}

        /*
         * Allocate a string of 10 bytes on the heap.  Store the
         * address in string which is on the stack.
         */
        string = (char *)malloc(10);
        @dots{}

        /* de-allocate the heap memory now that we're done with it */
        (void)free(string);
        @dots{}
@}
@end example

It is the heap data that is managed by this library.

Although the above is an example of how to use the malloc and free
commands, it is not a good example of why using the heap for runtime
storage is useful.

Consider this: You write a program that reads a file into memory,
processes it, and displays results.  You would like to handle files with
arbitrary size (from 10 bytes to 1.2 megabytes and more).  One problem,
however, is that the entire file must be in memory at one time to do the
calculations.  You don't want to have to allocate 1.2 megabytes when you
might only be reading in a 10 byte file because it is wasteful of system
resources.  Also, you are worried that your program might have to handle
files of more than 1.2 megabytes.

A solution: first checkout the file's size and then, using the
heap-allocation routines, get enough storage to read the entire file
into memory.  The program will only be using the system resources
necessary for the job and you will be guaranteed that your program can
handle any sized file.

@node Malloc Functions,  , Basic Definitions, Allocation Basics
@subsection Functionality Supported by All Malloc Libraries

@cindex malloc functions

All malloc libraries support 4 basic memory allocation commands.  These
include @dfn{malloc}, @dfn{calloc}, @dfn{realloc}, and @dfn{free}.  For
more information about their capabilities, check your system's manual
pages -- in unix, do a @code{man 3 malloc}.

@deftypefun
void *malloc ( unsigned int @var{size} )
@cindex malloc

Usage: @code{pnt = (type *)malloc(size)}

The malloc routine is the basic memory allocation routine.  It allocates
an area of @code{size} bytes.  It will return a pointer to the space
requested.

@end deftypefun
@deftypefun
void *calloc ( unsigned int @var{number}, unsigned int
@var{size} )
@cindex calloc
@cindex Allocation of zeros
@cindex zeros, allocation of

Usage: @code{pnt = (type *)calloc(number, size)}

The calloc routine allocates a certain @code{number} of items, each of
@code{size} bytes, and returns a pointer to the space.  It is
appropriate to pass in a @code{sizeof(type)} value as the size argument.

Also, calloc nulls the space that it returns, assuring that the memory
is all zeros.

@end deftypefun
@deftypefun
void *realloc ( void *@var{old_pnt}, unsigned int
@var{new_size} )
@cindex realloc

Usage: @code{new_pnt = (type *)realloc(old_pnt, new_size)}

The realloc function expands or shrinks the memory allocation in
@code{old_pnt} to @code{new_size} number of bytes.  Realloc copies as
much of the information from @code{old_pnt} as it can into the
@code{new_pnt} space it returns, up to @code{new_size} bytes.  If there
is a problem allocating this memory, 0L will be returned.

If the @code{old_pnt} is 0L then realloc will do the equivalent of a
@code{malloc(new_size)}.  If @code{new_size} is 0 and @code{old_pnt} is
not 0L, then it will do the equivalent of @code{free(old_pnt)} and will
return 0L.

@end deftypefun
@deftypefun
void free ( void *@var{pnt} )
@cindex free

Usage: @code{free(pnt)}

The free routine releases allocation in @code{pnt} which was returned by
malloc, calloc, or realloc back to the heap.  This allows other parts of
the program to re-use memory that is not needed anymore.  It guarantees
that the process does not grow too big and swallow a large portion of
the system resources.

@end deftypefun

@emph{NOTE}: the returned address from the memory
allocation/reallocation functions should be cast to the appropriate
pointer type for the variable being assigned.  Also this may no longer
be necessary on your system, it can still provide some documentation
value to the code.

@emph{WARNING}: there is a quite common myth that all of the space that
is returned by malloc libraries has already been cleared.  @emph{Only}
the @code{calloc} routine will zero the memory space it returns.

@node Features, Installation, Allocation Basics, Overview
@section General Features of the Library

@cindex features

The debugging features that are available in this debug malloc library
can be divided into a couple basic classifications:

@table @asis
@item file and line number information
@cindex file/line numbers
@cindex cpp
One of the nice things about a good debugger is its ability to provide
the file and line number of an offending piece of code.  This library
attempts to give this functionality with the help of @dfn{cpp}, the C
preprocessor.  @xref{Allocation Macros}.

@item return-address information
@cindex return-address
To debug calls to the library from external sources (i.e. those files
that could not use the allocation macros), some facilities have been
provided to supply the caller's address.  This address, with the help of
a debugger, can help you locate the source of a problem.  @xref{Return
Address}.

@item fence-post (i.e. bounds) checking
@cindex fence-post checking
@cindex bounds checking
@cindex checking bounds
@dfn{Fence-post} memory is the area immediately above or below memory
allocations.  It is all too easy to write code that accesses above or
below an allocation -- especially when dealing with arrays or strings.
The library can write special values in the areas around every
allocation so it will notice when these areas have been overwritten.
@xref{Fence-Post Overruns}.

@emph{NOTE}: The library cannot notice when the program @emph{reads}
from these areas, only when it writes values.  Also, fence-post checking
will increase the amount of memory the program allocates.

@item heap-constancy verification
@cindex constancy verification
The administration of the library is reasonably complex.  If any of the
heap-maintenance information is corrupted, the program will either crash
or give unpredictable results.

By enabling heap-consistency checking, the library will run through its
administrative structures to make sure all is in order.  This will mean
that problems will be caught faster and diagnosed better.

The drawback of this is, of course, that the library often takes quite a
long time to do this.  It is suitable to enable this only during
development and debugging sessions.

@emph{NOTE}: the heap checking routines cannot guarantee that the tests
will not cause a segmentation-fault if the heap administration
structures are properly (or improperly if you will) overwritten.  In
other words, the tests will verify that everything is okay but may not
inform the user of problems in a graceful manner.

@item logging statistics
@cindex logging statistics
@cindex statistics
@cindex memory leaks
@cindex leaking memory
One of the reasons why the debug malloc library was initially developed
was to track programs' memory usage -- specifically to locate
@dfn{memory leaks} which are places where allocated memory is never
getting freed.  @xref{Memory Leaks}.

The library has a number of logging capabilities that can track un-freed
memory pointers as well as runtime memory usage, memory transactions,
administrative actions, and final statistics.

@item examining unfreed memory
@cindex unfreed memory
@cindex non-freed memory
Another common problem happens when a program frees a memory pointer but
goes on to use it again by mistake.  This can lead to mysterious crashes
and unexplained problems.

To combat this, the library can write special values into a block of
memory after it has been freed.  This serves two purposes: it will make
sure that the program will get garbage data if it trying to access the
area again, and it will allow the library to verify the area later for
signs of overwriting.
@end table

If any of the above debugging features detect an error, the library will
try to recover.  If logging is enabled then an error will be logged with
as much information as possible.

The error messages that the library displays are designed to give the
most information for developers.  If the error message is not
understood, then it is most likely just trying to indicate that a part
of the heap has been corrupted.

@cindex dump core
@cindex core dump
The library can be configured to quit immediately when an error is
detected and to dump a core file or memory-image.  This can be examined
with a debugger to determine the source of the problem.  The library can
either stop after dumping core or continue running.

@cindex system memory problems
@cindex memory problems in system functions
@emph{NOTE}: do not be surprised if the library catches problems with
your system's routines.  It took me hours to finally come to the
conclusion that the localtime call, included in SunOS release 4.1,
overwrites one of its fence-post markers.

@node Installation, Getting Started, Features, Overview
@section How to Install the Library

@cindex installing the library
@cindex compiling the library
@cindex building the library
@cindex configuring the library
@cindex making the library

To configure, compile, and install the library, follow these steps
carefully.

@enumerate

@item Make sure you have the latest version of the library available
from the home page @uref{http://dmalloc.com/}.

@cindex settings.dist file

@item You probably will want to edit the settings in
@file{settings.dist} to tune specific features of the library.  The
@file{configure} script will copy this file to @file{settings.h}
which is where you should be adding per-architecture settings.

@cindex configure script
@cindex conf.h file

@item Type @kbd{sh ./configure} to configure the library.  You may want
to first examine the @file{config.help} file for some information about
configure.  You may want to use the @kbd{--disable-cxx} option if you do
not want the Makefile to build the C++ version of dmalloc.  You may also
want to use the @kbd{--enable-threads} option to build the threaded
version of dmalloc.  Configure should generate the @file{Makefile} and
configuration files automatically.

@emph{NOTE}: It seems that some versions of tr (especially from HP-UX)
don't understand @code{tr '[a-z]' '[A-Z]'}.  Since configure uses tr
often, you may need to either get GNU's tr (in their textutils package)
or generate the @file{Makefile} and @file{conf.h} files by hand.

@item You may want to examine the @file{Makefile} and @file{conf.h} files
created by configure to make sure it did its job correctly.

@cindex settings.h file

@item You might want to tune the settings in @file{settings.h} file to
tune the library to the local architecture.  This file contains relevant
settings if you are using pthreads or another thread library.
@xref{Using With Threads}.  The @file{configure} script created this
file from the @file{settings.dist} file.  Any permanent changes to these
settings should made to the @file{settings.dist} file.  You then can run
@file{config.status} to re-create the @file{settings.h} file.

@cindex DMALLOC_SIZE variable

@item The @code{DMALLOC_SIZE} variable gets auto-configured in
@file{dmalloc.h.2} but it may not generate correct settings for all
systems.  You may have to alter the definitions in this file to get
things to stop complaining when you go to compile about the size
arguments to malloc routines.  Comments on this please.

@item Typing @kbd{make} should be enough to build @file{libdmalloc.a},
@file{libdmalloclp.a}, and @file{dmalloc} program.  If it does not work,
please see if there are any notes in the contrib directory about your
system-type.  If not and you figure your problem out, please send me
some notes so future users can profit from your experiences.

@emph{NOTE}: You may experience some errors compiling some of the
return.h assembly macros which attempt to determine the callers address
for logging purposes.  You may want to first try disabling any compiler
optimization flags.  If this doesn't work then you may need to disable
the @samp{USE_RETURN_MACROS} variable in the @file{settings.h} file.

@cindex ANSI-C compiler

@emph{NOTE}: The code is dependent on an ANSI-C compiler.  If the
configure script gives the @samp{WARNING} that you do not have an ANSI-C
compiler, you may still be able to add some sort of option to your
compiler to make it ANSI.  If there such is an option, please send it to
the author so it can be added to the configure script.

@item If you use threads, typing @kbd{make threads} should be enough
to build @file{libdmallocth.a} which is the threaded version of the
library.  This may or may not work depending on the configuration
scripts ability to detect your local thread functionality.  Feel free to
send me mail with improvements.

See the ``Using With Threads'' section for more information about the
operation of the library with your threaded program.  @xref{Using With
Threads}.

@item If you have a C++ compiler installed, the library should have
automatically built @file{libdmallocxx.a} which is the C++ version of
the library.  If it was not done automatically, you can build it by
typing @kbd{make cxx}.  You should link this library into your C++
programs instead of @file{libdmalloc.a}.  See the @file{dmallocc.cc} C++
file which contains basic code to overload the @code{new}, @code{new[]},
@code{delete}, and @code{delete[]} C++ operators.  My apologies on the
minimal C++ support.  I am still living in a mostly C world.  Any help
improving this interface without sacrificing portability would be
appreciated.

@cindex testing the library
@cindex dmalloc_t test program

@item Typing @kbd{make tests} should build the @file{dmalloc_t} test
program.

@item Typing @kbd{make light} should run the @file{dmalloc_t} test
program through a set of light trials.  By default this will execute
@file{dmalloc_t} 5 times -- each time will execute 10,000 malloc
operations in a very random manner.  Anal folks can type @kbd{make
heavy} to up the ante.  Use @kbd{dmalloc_t --usage} for the list of all
@file{dmalloc_t} options.

@item Typing @kbd{make install} should install the @file{libdmalloc.a} 
and @file{libdmalloc_lp.a} library files in @file{/usr/local/lib}, the
@file{dmalloc.h} include file in @file{/usr/local/include}, and the
@file{dmalloc} utility in @file{/usr/local/bin}.  You may also want to
type @kbd{make installth} to install the thread library into place
and/or @kbd{make installcc} to install the C++ library into place.

You may have specified a @samp{--prefix=PATH} option to configure in
which case @samp{/usr/local} will have been replaced with @samp{PATH}.

@end enumerate

See the ``Getting Started'' section to get up and running with the
library.  @xref{Getting Started}.

@node Getting Started, Troubleshooting, Installation, Overview
@section Getting Started with the Library

@cindex quick start
@cindex getting started
@cindex jump start
@cindex how to begin
@cindex where to begin
@cindex beginning

This section should give you a quick idea on how to get going.
Basically, you need to do the following things to make use of the
library:

@enumerate

@item Make sure you have the latest version of the library available
from the home page @uref{http://dmalloc.com/}.

@item Follow the installation instructions on how to configure and
make and install the library (i.e. type: @kbd{make install}).
@xref{Installation}.

@cindex automatic shutdown
@cindex shutdown, automatic

@item You need to make sure that the dmalloc building process
above was able to locate one of the the @code{on_exit} or @code{atexit}
functions.  If so, then the dmalloc library should be able to
automatically call @code{dmalloc_shutdown} when @code{exit} is called.
This causes the memory statistics and unfreed information to be dumped
to the log file.  However, if your system has neither, you will need to
call @code{dmalloc_shutdown} yourself before your program exits.

@item Add an alias for dmalloc to your shell's rc file if supported.
Bash, ksh, and zsh users should add the following to their
@file{.bashrc}, @file{.profile}, or @file{.zshrc} file respectively
(notice the @kbd{-b} option for bourne shell output):

@example
function dmalloc @{ eval `command dmalloc -b $*`; @}
@end example

By the way, if you are looking for a shell, I heartily recommend trying
out zsh.  It is a bourne shell written from scratch with much the same
features as tcsh without the csh crap.  If you are @emph{still} using
csh or tcsh, you should add the following to your @file{.cshrc} file
(notice the @kbd{-C} option for c-shell output):

@example
alias dmalloc 'eval `\dmalloc -C \!*`'
@end example

@item Although not necessary, you may want to include @file{dmalloc.h}
in your C files and recompile.  This will allow the library to report
the file/line numbers of calls that generate problems.  @xref{Allocation
Macros}.  It should be inserted at the @emph{bottom} of your include
files as to not conflict with other includes.  You may want to ifdef it
as well and compile with @kbd{cc -DDMALLOC @dots{}}:

@example
/* other includes above ^^^ */

#ifdef DMALLOC
#include "dmalloc.h"
#endif
@end example

@item Link the dmalloc library into your program.

@item Enable the debugging features by typing @kbd{dmalloc -l logfile
-i 100 low} (for example).  This will:

@itemize @bullet

@item set the malloc log path to @file{logfile} (@kbd{-l logfile})

@item have the library check itself every 100 iterations (@kbd{-i 100})

@item enable a number of debug features (@kbd{low}).  You can
also try @kbd{runtime} for minimal checking or @kbd{medium} or
@kbd{high} for more extensive heap verification.  @kbd{all} is also
provided but generates a multitude of log messages without many more
tests.

@end itemize

@kbd{dmalloc --usage} will provide verbose usage info for the dmalloc
program.  @xref{Dmalloc Program}.

You may also want to install the @file{dmallocrc} file in your home
directory as @file{.dmallocrc}.  This allows you to add your own
combination of debug tokens.  @xref{RC File}.

@cindex log-unknown
@item You may also want to enable the @code{log-unknown} token
(@kbd{dmalloc -p log-unknown}) which will log non-freed information
about ``unknown'' memory to the log file.  Unknown means memory that
does not have associated file and line information.  This is necessary
if you are @emph{not} including @file{dmalloc.h} in your C files or if
you want to track possible memory leaks in system functions.

@item Run your program, examine the logfile that should have been created by
dmalloc_shutdown, and use its information to help debug your program.
See the next section for help with this.  @xref{Troubleshooting}.

@end enumerate

@node Troubleshooting, , Getting Started, Overview
@section Some Solutions to Common Problems

@cindex troubleshooting
@cindex common problems
@cindex help 
@cindex how do i...
@cindex faq
@cindex questions
@cindex problems

This section provides some answers to some common problems and
questions.  Please feel free to send me mail with any additions to this
list -- either problems you are still having or tips that you would like
to pass on.

@table @samp

@item Why does my program run so slow?

@cindex check-heap
This library has never been (and maybe never will be) optimized for
space nor speed.  Some of its features make it unable to use some of the
organizational methods of other more efficient heap libraries.  If you
have the @code{check-heap} token enabled, see the @kbd{-i} option to the
dmalloc utility.  @xref{Dmalloc Program}.

@item Why was a log-file not produced after I ran my program?

This could be caused by a number of different problems.

@enumerate

@item Are you sure you followed all of the items in the ``Getting Started''
section?  Please review them if there is any doubt.  @xref{Getting
Started}.

@cindex env
@cindex printenv
@cindex DMALLOC_OPTIONS

@item Use the @kbd{env} or @kbd{printenv} commands to make sure that
the @samp{DMALLOC_OPTIONS} variable is set in your exported environment.
@xref{Environment Variable}.

@cindex ident
@cindex strings

@item Make sure that your program has been compiled correctly with the
dmalloc library.  The @kbd{ident} program should show chunk.c and other
dmalloc files compiled into your program.  You can also do @kbd{strings
-a your-program | grep chunk.c} and look for something like @samp{$Id:
chunk.c,v 1.152 1999/08/25 12:37:01 gray Exp $} with different versions
and date information.  If this doesn't show up then chances are dmalloc
was not linked into your program.

@item If your program changes its working directory, it may write the
dmalloc log-file somewhere else in the filesystem.  You will need to
check both where the program was started and to where it might change
directory.

@end enumerate

@item I don't see any information about my non-freed (leaked) memory?

The library will not (by default) report on ``unknown'' non-freed
memory.  Unknown means memory that does not have associated file and
line information.  To log information about unknown pointers you should
enable the @code{log-unknown} token (@kbd{dmalloc -p log-unknown}).
This will be necessary if you are @emph{not} including @file{dmalloc.h}
in all of your C files or if you are interested in tracking leaks in
system functions.

@end table

@node Programming, Dmalloc Program, Overview, Top
@chapter How to Program with the Library

@cindex programming

@menu
* Allocation Macros::           Macros providing file and line information.
* Return Address::              Getting caller address information.
* Argument Checking::           Checking of function arguments.
* Extensions::                  Additional non-standard routines.
* C++ and the Library::         Using the library with C++.
* Disabling the Library::       How to disable the library.
* Using With a Debugger::       Using a debugger with the library.
* Using With Threads::          Using the library with a thread package.
@end menu

@node Allocation Macros, Return Address, Programming, Programming
@section Macros Providing File and Line Information

@cindex allocation macros
@cindex macros, allocation
@cindex dmalloc.h file

By including @file{dmalloc.h} in your C files, your calls to malloc,
calloc, realloc, recalloc, memalign, valloc, strdup, and free are
replaced with calls to _malloc_leap, _calloc_leap, _realloc_leap,
_recalloc_leap, _memalign_leap, _valloc_leap, _strdup_leap, and
_free_leap.  Additionally the library replaces calls to xmalloc,
xcalloc, xrealloc, xrecalloc, xmemalign, xvalloc, xstrdup, and xfree
with associated _leap calls.

@cindex leap macros
@cindex macros, leap

These @dfn{leap macros} use the c-preprocessor @code{__FILE__} and
@code{__LINE__} macros which get replaced at compilation time with the
current file and line-number of the source code in question.  The leap
routines take this information and pass it on to the library making it
able to produce verbose reports on memory problems.

@example
not freed: '0x38410' (22 bytes) from 'dmalloc_t.c:92'
@end example

This line from a log file shows that memory was not freed from file
@file{dmalloc_t.c} line 92.  @xref{Memory Leaks}.

@cindex recalloc
@cindex memalign
@cindex valloc
@cindex strdup

You may notice some non standard memory allocation functions in the
above leap list.  Recalloc is a routine like realloc that reallocates
previously allocated memory to a new size.  If the new memory size is
larger than the old, recalloc initializes the new space to all zeros.
This may or may not be supported natively by your operating system.
Memalign is like malloc but should insure that the returned pointer is
aligned to a certain number of specified bytes.  Currently, the memalign
function is not supported by the library.  It defaults to returning
possibly non-aligned memory for alignment values less than a block-size.
Valloc is like malloc but insures that the returned pointer will be
aligned to a page boundary.  This may or may not be supported natively
by your operating system but is fully supported by the library.  Strdup
is a string duplicating routine which takes in a null terminated string
pointer and returns an allocated copy of the string that will need to be
passed to free later to deallocate.

The X versions of the standard memory functions (xmalloc, xfree, etc.)
will print out an error message to standard error and will stop if the
library is unable to allocate any additional memory.  It is useful to
use these routines instead of checking everywhere in your program for
allocation routines returning NULL pointers.

@emph{WARNING}: If you are including the @file{dmalloc.h} file in your
sources, it is recommended that it be at the end of your include file
list because dmalloc uses macros and may try to change declarations of
the malloc functions if they come after it.

@node Return Address, Argument Checking, Allocation Macros, Programming
@section Getting Caller Address Information

@cindex caller's address
@cindex return-address
@cindex return.h file
@cindex ra

Even though the allocation macros can provide file/line information for
some of your code, there are still modules which either you can't
include @file{dmalloc.h} (such as library routines) or you just don't
want to.  You can still get information about the routines that call
dmalloc function from the return-address information.  To accomplish
this, you must be using this library on one of the supported
architecture/compilers.  @xref{Portability}.

@cindex assembly hacks

@cindex log-unknown
The library attempts to use some assembly hacks to get the the
return-address or the address of the line that called the dmalloc
function.  If you have the @code{log-unknown} token enabled and you run
your program, you might see the following non-freed memory messages.

@example
not freed: '0x38410' (22 bytes) from 'ra=0xdd2c'
not freed: '0x38600' (10232 bytes) from 'ra=0x10234d'
not freed: '0x38220' (137 bytes) from 'ra=0x82cc'
@end example

@cindex gdb
With the help of a debugger, these return-addresses (or ra) can then be
identified.  I've provided a @file{ra_info.pl} perl script in the
@file{contrib/} directory with the dmalloc sources which seems to work
well with gdb.  You can also use the manual methods below for gdb.

@example
(gdb) x 0x10234d
0x10234d <_findbuf+132>: 0x7fffceb7

(gdb) info line *(0x82cc)
Line 1092 of argv.c starts at pc 0x7540 and ends at 0x7550.
@end example

In the above example, gdb was used to find that the two non-freed memory
pointers were allocated in @code{_findbuf()} and in file argv.c line
1092 respectively.  The @samp{x address} (for examine) can always be
used on the return-addresses but the @samp{info line *(address)} will
only work if that file was compiled using the @kbd{-g} option and has
not been stripped.  This limitation may not be true in later versions of
gdb.

@node Argument Checking, Extensions, Return Address, Programming
@section Checking of Function Arguments

@cindex argument checking
@cindex checking arguments
@cindex DMALLOC_FUNC_CHECK flag

One potential problem with the library and its multitude of checks and
diagnoses is that they only get performed when a dmalloc function is
called.  One solution this is to include @file{dmalloc.h} and compile
your source code with the @code{DMALLOC_FUNC_CHECK} flag defined and
enable the @code{check-funcs} token.  @xref{Debug Tokens}.

@example
cc -DDMALLOC_FUNC_CHECK file.c
@end example

@emph{NOTE}: Once you have compiled your source with DMALLOC_FUNC_CHECK
enabled, you will have to recompile with it off to disconnect the
library.  @xref{Disabling the Library}.

@emph{WARNING}: You should be sure to have @file{dmalloc.h} included at
the end of your include file list because dmalloc uses macros and may
try to change declarations of the checked functions if they come after
it.

When this is defined dmalloc will override a number of functions and
will insert a routine which knows how to check its own arguments and
then call the real function.  Dmalloc can check such functions as
@code{bcopy}, @code{index}, @code{strcat}, and @code{strcasecmp}.  For
the full list see the end of @file{dmalloc.h}.

When you call @code{strlen}, for instance, dmalloc will make sure the
string argument's fence-post areas have not been overwritten, its file
and line number locations are good, etc.  With @code{bcopy}, dmalloc
will make sure that the destination string has enough space to store the
number of bytes specified.

For all of the arguments checked, if the pointer is not in the heap then
it is ignored since dmalloc does not know anything about it.

@node Extensions, C++ and the Library, Argument Checking, Programming
@section Additional Non-standard Routines

@cindex extensions

The library has a number of variables that are not a standard part of
most malloc libraries:

@table @code
@item char * dmalloc_logpath
@cindex dmalloc_logpath variable
@cindex logfile name
This variable can be used to set the dmalloc log filename.  The env
variable DMALLOC_LOGFILE overrides this variable.

@item int dmalloc_errno
@cindex dmalloc_errno number
@cindex internal error number
@cindex error number
This variable stores the internal dmalloc library error number like errno
does for the system calls.  It can be passed to @code{dmalloc_strerror()}
(see below) to get a string version of the error.  It will have a value
of zero if the library has not detected any problems.

@item int dmalloc_address
@cindex dmalloc_address variable
@cindex address to look for
@cindex looking for an address
This variable holds the address to be specifically looked for when
allocating or freeing by the library.

@item int dmalloc_address_count
@cindex dmalloc_address_count variable
This variable stores the argument to the address library setting.  If it
is set to a greater than 0 value then after the library has seen the
@samp{addr} address this many times, it will call
@code{dmalloc_error()}.

This works well in conjunction with the @code{STORE_SEEN_COUNT} option.
@xref{Memory Leaks}.

@end table

Additionally the library provides a number of non-standard malloc
routines:

@deftypefun
void dmalloc_shutdown ( void )

@cindex dmalloc_shutdown function
@cindex shutdown the library

This function shuts the library down and logs the final statistics and
information especially the non-freed memory pointers.  The library has
code to support auto-shutdown if your system has @code{on_exit()} or
@code{atexit()} calls (see @file{conf.h}).  If you do not have these
routines, then @code{dmalloc_shutdown} should be called right before
@code{exit()} or as the last function in @code{main()}.

@example
main()
@{
        @dots{}
        dmalloc_shutdown();
        exit(0);
@}
@end example
@end deftypefun

@deftypefun
void dmalloc_log_heap_map ( void )

@cindex dmalloc_log_heap_map function
@cindex log a heap map
@cindex heap map

This routine logs to the logfile (if it is enabled) a graphical
representation of the current heap space.
@end deftypefun

@deftypefun
void dmalloc_log_stats ( void )
@cindex dmalloc_log_stats function
@cindex log statistics
@cindex statistics logging

This routine outputs the current dmalloc statistics to the log file.
@end deftypefun

@deftypefun
void dmalloc_log_unfreed( void )

@cindex dmalloc_log_unfreed function
@cindex log unfreed memory
@cindex unfreed memory log

This function dumps the unfreed-memory information to the log file.
This is also useful to dump the currently allocated points to the log
file to be compared against another dump later on.
@end deftypefun

@deftypefun
int dmalloc_verify ( char * @var{pnt} )

@cindex dmalloc_verify function
@cindex verify pointers
@cindex verify the heap

This function verifies individual memory pointers that are suspect of
memory problems.  To check the entire heap pass in a NULL or 0 pointer.
The routine returns DMALLOC_VERIFY_ERROR or DMALLOC_VERIFY_NOERROR.

@emph{NOTE}: @samp{dmalloc_verify()} can only check the heap with the
functions that have been enabled.  For example, if fence-post checking
is not enabled, @samp{dmalloc_verify()} cannot check the fence-post
areas in the heap.
@end deftypefun

@deftypefun
void dmalloc_debug ( long @var{debug} )

@cindex dmalloc_debug function
@cindex override debug settings

This routine overrides the debug setting from the environment variable
and sets the library debugging features explicitly.  For instance, if
debugging should never be enabled for a program, a call to
@code{dmalloc_debug(0)} as the first call in @code{main()} will disable
all the memory debugging from that point on.

One problem however is that some systems make calls to memory allocation
functions @emph{before} @code{main()} is reached therefore before
@code{dmalloc_debug()} can be called meaning some debugging information
may be generated regardless.
@end deftypefun

@deftypefun
long dmalloc_debug_current ( void )

@cindex dmalloc_debug_current function
@cindex current debug value

This routine returns the current debug value from the environment
variable.  This allows you to save a copy of the debug dmalloc settings
to be changed and then restored later.
@end deftypefun

@deftypefun
int dmalloc_examine ( char * @var{pnt}, int * @var{size},
char ** @var{file}, int * @var{line}, void ** @var{ret_address} )

@cindex dmalloc_examine function
@cindex examine a pointer
@cindex pointer information

This function returns the size of a pointer's allocation as well as the
file and line or the return-address from where it was allocated.  It
will return NOERROR or ERROR depending on whether pnt is good or not.

@emph{NOTE}: This function is @emph{certainly} not provided by most if
not all other malloc libraries.
@end deftypefun

@deftypefun
void dmalloc_message ( char * @var{format}, @var{...} )

@cindex dmalloc_message function

Write a message into the dmalloc logfile using printf-like arguments.

@emph{NOTE:} this is only available is STDARG is defined by the library
and you have the @file{stdarg.h} include file.
@end deftypefun

@deftypefun
void dmalloc_vmessage ( char * @var{format}, va_list @var{args} )

@cindex dmalloc_vmessage function

Write a message into the dmalloc logfile using vprintf-like arguments.

@emph{NOTE:} this is only available is STDARG is defined by the library
and you have the @file{stdarg.h} include file.
@end deftypefun

@deftypefun
void dmalloc_track ( dmalloc_track_t @var{track_func} )

@cindex dmalloc_track function
@cindex track memory calls

Register an allocation tracking function which will be called each time
an allocation occurs.  Pass in NULL to disable.  To take a look at what
information is provided, see the dmalloc_track_t function typedef in
dmalloc.h.
@end deftypefun

@deftypefun
unsigned long dmalloc_mark ( void )

@cindex dmalloc_mark function
@cindex memory position marker
@cindex mark memory position

Return to the caller the current "mark" which can be used later to
dmalloc_log_changed pointers since this point.  Multiple marks can be
saved and used.
@end deftypefun

@deftypefun
unsigned long dmalloc_log_changed ( unsigned long @var{mark},
int @var{not_freed_b}, int @var{freed_b}, int @var{details_b} )

@cindex dmalloc_log_changed function
@cindex changed memory
@cindex checkpoint memory usage
@cindex log memory changed

Dump the pointers that have changed since the mark which was returned by
dmalloc_mark.  If not_freed_b is set to non-0 then log the new pointers
that are non-freed.  If free_b is set to non-0 then log the new pointers
that are freed.  If details_b set to non-0 then dump the individual
pointers that have changed otherwise just dump the summaries.
@end deftypefun

@deftypefun
const char * dmalloc_strerror ( int @var{errnum} )

@cindex dmalloc_strerror function
@cindex string error message
@cindex error message

This function returns the string representation of the error value in
errnum (which probably should be dmalloc_errno).  This allows the
logging of more verbose memory error messages.

You can also display the string representation of an error value by a
call to the @file{dmalloc} program with a @samp{-e #} option.
@xref{Dmalloc Program}.
@end deftypefun

@node C++ and the Library, Disabling the Library, Extensions, Programming
@section Using the Library with C++

@cindex c++ usage
@cindex dmalloc.cc file

For those people using the C++ language, some special things need to be
done to get the library to work.  The problem exists with the fact that
the dynamic memory routines in C++ are @code{new()} and @code{delete()}
as opposed to @code{malloc()} and @code{free()}.

The file @file{dmalloc.cc} is provided in the distribution which
effectively redirects @code{new} to the more familiar @code{malloc} and
@code{delete} to the more familiar @code{free}.  Compile and link this
file in with the C++ program you want to debug.

@emph{NOTE}: The author is not a C++ hacker so feedback in the form of
other hints and ideas for C++ users would be much appreciated.

@node Disabling the Library, Using With a Debugger, C++ and the Library, Programming
@section How to Disable the library

@cindex disabling the library

When you are finished with the development and debugging sessions, you
may want to disable the dmalloc library and put in its place either the
system's memory-allocation routines, gnu-malloc, or maybe your own.
Attempts have been made to make this a reasonably painless process.  The
ease of the extraction depends heavily on how many of the library's
features your made use of during your coding.

Reasonable suggestions are welcome as to how to improve this process
while maintaining the effectiveness of the debugging.

@itemize @bullet
@item
If you want to @emph{totally} disable the dmalloc library then you will
need to recompile all the C files that include @file{dmalloc.h} while
defining @code{DMALLOC_DISABLE}.  This will cause the dmalloc leap
macros to not be applied.  @xref{Allocation Macros}.

@example
cc -g -DDMALLOC_DISABLE main.c
@end example

@item
If you compiled any of your source modules with @code{DMALLOC_FUNC_CHECK}
defined then you must first recompile all those modules without the flag
enabled.

@cindex leap library
@cindex libdmalloclp.a library

@item
If you have not compiled all your source with @code{DMALLOC_DISABLED}
defined then you need to link your program with the
@file{libdmalloclp.a} library.

@example
cc main.o -L/usr/local/lib -ldmalloclp -lgmalloc
@end example

If you have disabled dmalloc with the @code{DMALLOC_DISABLED} flag or
never included @file{dmalloc.h} in any of your C files, then you will
not need the @file{libdmalloclp.a} library.

@example
cc -g main.o -L/usr/local/lib -lgmalloc
@end example

If you get unresolved references like @code{_malloc_leap} or
@code{_dmalloc_bcopy} then something was not disabled as it should have
been.
@end itemize

@node Using With a Debugger, Using With Threads, Disabling the Library, Programming
@section Using Dmalloc With a Debugger

@cindex debugger usage with dmalloc
@cindex using a debugger with dmalloc

Here are a number of possible scenarios for using the dmalloc library to
track down problems with your program.

You should first enable a logfile filename (I use @file{dmalloc}) and
turn on a set of debug features.  You can use @kbd{dmalloc -l dmalloc
low} to accomplish this.  If you are interested in having the error
messages printed to your terminal as well, enable the @samp{print-error}
token by typing @kbd{dmalloc -p print-error} afterwards.  @xref{Dmalloc
Program}.

@cindex gdb
@cindex dmalloc_error() routine
Now you can enter your debugger (I use the @emph{excellent} GNU debugger
gdb), and put a break-point in @code{dmalloc_error()} which is the
internal error routine for the library.  When your program is run, it
will stop there if a memory problem is detected.

If you are using GDB, I would recommend adding the contents of
@file{dmalloc.gdb} in the @file{contrib} subdirectory to your
@file{.gdbinit} file in your home directory.  This enables the
@code{dmalloc} command which will prompt you for the arguments to the
dmalloc command and will set a break point in @code{dmalloc_error()}
automatically.

@menu
* General Errors::              Diagnosing general problems with a debugger.
* Memory Leaks::                Tracking down non-freed memory.
* Fence-Post Overruns::         Diagnosing fence-post overwritten memory.
@end menu

@node General Errors, Memory Leaks, Using With a Debugger, Using With a Debugger
@subsection Diagnosing General Problems with a Debugger

@cindex diagnosing errors
@cindex general errors

If your program stops at the @code{dmalloc_error()} routine then one of
a number of problems could be happening.  Incorrect arguments could have
been passed to a malloc call: asking for negative number of bytes,
trying to realloc a non-heap pointer, etc..  There also could be a
problem with the system's allocations: you've run out of memory, some
other function in your program is using @code{sbrk}, etc.  However, it
is most likely that some code that has been executed was naughty.

To get more information about the problem, first print via the debugger
the dmalloc_errno variable to get the library's internal error code.
You can suspend your debugger and run @kbd{dmalloc -e
value-returned-from-print} to get an English translation of the error.
A number of the error messages are designed to indicate specific
problems with the library administrative structures and may not be
user-friendly.

If the problem was due to the arguments or system allocations then the
source of the problem has been found.  However, if some code did
something wrong, you may have some more work to do to locate the actual
problem.  The @code{check-heap} token should be enabled and the interval
setting disabled or set to a low value so that the library can find the
problem as close as possible to its source.  The code that was execute
right before the library halted, can then be examined closely for
irregularities.  @xref{Debug Tokens}, @xref{Dmalloc Program}.

@cindex dmalloc_verify() routine

You may also want to put calls to @code{dmalloc_verify(0)} in your code
before the section which generated the error.  This should locate the
problem faster by checking the library's structures at that point.
@xref{Extensions}.

@node Memory Leaks, Fence-Post Overruns, General Errors, Using With a Debugger
@subsection Tracking Down Non-Freed Memory

@cindex memory leaks
@cindex leaking memory

So you've run your program, examined the log-file and discovered (to
your horror) some un-freed memory.  Memory leaks can become large
problems since even the smallest and most insignificant leak can starve
the program given the right circumstances.

@example
not freed: '0x45008' (12 bytes) from 'ra=0x1f8f4'
not freed: '0x45028' (12 bytes) from 'unknown'
not freed: '0x45048' (10 bytes) from 'argv.c:1077'
  known memory not freed: 1 pointer, 10 bytes
unknown memory not freed: 2 pointers, 24 bytes
@end example

Above you will see a sample of some non-freed memory messages from the
logfile.  In the first line the @samp{0x45008} is the pointer that was
not freed, the @samp{12 bytes} is the size of the unfreed block, and the
@samp{ra=0x1f8f4} or return-address shows where the allocation
originated from.  @xref{Return Address}.

The systems which cannot provide return-address information show
@samp{unknown} instead, as in the 2nd line in the sample above.

The @samp{argv.c:1077} information from the 3rd line shows the file and
line number which allocated the memory which was not freed.  This
information comes from the calls from C files which included
@file{dmalloc.h}.  @xref{Allocation Macros}.

At the bottom of the sample it totals the memory for you and breaks it
down to known memory (those calls which supplied the file/line
information) and unknown (the rest).

Often, you may allocate memory in via @code{strdup()} or another
routine, so the logfile listing where in the @code{strdup} routine the
memory was allocated does not help locate the true source of the memory
leak -- the routine that called @code{strdup}.  Without a mechanism to
trace the calling stack, there is no way for the library to see who the
caller of the caller (so to speak) was.

@cindex STORE_SEEN_COUNT option
@cindex pointer seen count

However, there is a way to track down unfreed memory in this
circumstance.  You need to compile the library with
@code{STORE_SEEN_COUNT} defined in @file{conf.h}.  The library will then
record how many times a pointer has been allocated or freed.  It will
display the unfreed memory as:

@example
not freed: '0x45008|s3' (12 bytes) from 'ra=0x1f8f4'
@end example

The @code{STORE_SEEN_COUNT} option adds a @samp{|s#} qualifier to the
address.  This means that the address in question was seen @samp{#} many
times.  In the above example, the address @samp{0x45008} was seen
@samp{3} times.  The last time it was allocated, it was not freed.

How can a pointer be ``seen'' 3 times?  Let say you @code{strdup} a
string of 12 characters and get address @samp{0x45008} -- this is #1
time the pointer is seen.  You then free the pointer (seen #2) but later
@code{strdup} another 12 character string and it gets the @samp{0x45008}
address from the free list (seen #3).

So to find out who is allocating this particular 12 bytes the 3rd time,
try @kbd{dmalloc -a 0x45008:3}.  The library will stop the program the
third time it sees the @samp{0x45008} address.  You then enter a
debugger and put a break point at @code{dmalloc_error}.  Run the program
and when the breakpoint is reached you can examine the stack frame to
determine who called @code{strdup} to allocate the pointer.

To not bother with the @code{STORE_SEEN_COUNT} feature, you can also run
your program with the @samp{never-reuse} token enabled.  This token will
cause the library to never reuse memory that has been freed.  Unique
addresses are always generated.  This should be used with caution since
it may cause your program to run out of memory.

@node Fence-Post Overruns,  , Memory Leaks, Using With a Debugger
@subsection Diagnosing Fence-Post Overwritten Memory

@cindex fence-post errors

For a definition of fence-posts please see the ``Features'' section.
@xref{Features}.

If you have encountered a fence-post memory error, the logfile should be
able to tell you the offending address.

@example
free: failed UNDER picket-fence magic-number checking: 
pointer '0x1d008' from 'dmalloc_t.c:427'
Dump of proper fence-bottom bytes: '\e\253\300\300\e\253\300\300'
Dump of '0x1d008'-8: '\e\253\300\300WOW!\003\001pforger\023\001\123'
@end example

The above sample shows that the pointer @samp{0x1d008} has had its lower
fence-post area overwritten.  This means that the code wrote below the
bottom of the address or above the address right below this one.  In the
sample, the string that did it was @samp{WOW!}.

The library first shows you what the proper fence-post information
should look like, and then shows what the pointer's bad information was.
If it cannot print the character, it will display the value as
@samp{\ddd} where ddd are three octal digits.

By enabling the @code{check-heap} debugging token and assigning the
interval setting to a low number, you should be able to locate
approximately when this problem happened.  @xref{Debug Tokens},
@xref{Dmalloc Program}.

@node Using With Threads, , Using With a Debugger, Programming
@section Using the Library with a Thread Package

@cindex threads

This is the newest section of the library and therefore contains the
least information about a subject on which I probably could write a
book.  My apologies.

@cindex pthreads

Threads are special operating system facilities which allow your
programs to have multiple threads of execution (hence the name).  In
effect your program can be doing a number of things ``at the same
time''.  This allows you to take full advantage of modern operating
system scheduling and multi-processor hardware.  If I've already lost
you or if any of the terminology below does not make sense, see manuals
about POSIX threads (pthreads) before going any further.  O'Reilly
publishes a pretty good pthreads manual for example.

The support for threads in dmalloc is minimal although probably adequate
for most if not all testing scenarios.  It provides support for mutex
locking itself to protect against race conditions that result in
multiple simultaneous execution.  One of the major problems is that most
thread libraries uses malloc themselves.  Since all of dmalloc's
initialization happens when a call to malloc is made, we may be
attempting to initialize or lock the mutex while the thread library is
booting up.  A baaaad thing since thread libraries aren't reentrant.

@cindex lock on

The solution to this problem is to have the library not initialize or
lock its mutex variable until after a certain number of allocation calls
have been completed.  If the library does not wait before initializing
the locks, the thread library will probably core dump.  If it waits too
long then it can't protect itself from multiple execution and it will
abort or other bad things might happen.  You adjust the number of times
to wait at runtime with the ``lock-on'' option to the dmalloc program
(for example @kbd{dmalloc -o 20}).  @xref{Dmalloc Program}.  Times
values between 2 and 30 are probably good although operating systems
will vary significantly.  You know its too low if your program core
dumps and too high if the library generates an exception.

An additional complexity is when we are initializing the lock before
mutex locking around the library.  As mentioned, the initialization
itself may generate a malloc call causing the library to go recursive
and the pthread library to possibly core dump. With the THREAD_INIT_LOCK
setting defined in @file{settings.h}, you can tune how many times before
we start locking to try and initialize the mutex lock.  It defaults to 2
which seems to work for me.  If people need to have this runtime
configurable or would like to present an alternative default, please let
me know.

To build the library with the threaded stubs type @kbd{make threads}
which should build @file{libdmallocth.a}.  The auto-configurations for
these functions is in its infancy and may or may not work depending on
the script's ability to detect your local thread functionality.  Feel
free to send me mail with comments or improvements to them.

So that's it.  If you have any specific questions or would like addition
information posted in this section, please let me know.  Experienced
thread programmers only please.

@node Dmalloc Program, Source Code, Programming, Top
@chapter Dmalloc Utility Program

@cindex dmalloc program
@cindex dmalloc utility
@cindex utility program
@cindex library utility

The dmalloc program is designed to assist in the setting of the
environment variable @samp{DMALLOC_OPTIONS}.  @xref{Environment
Variable}.  It is designed to print the shell commands necessary to make
the appropriate changes to the environment.  Unfortunately, it cannot
make the changes on its own so the output from dmalloc should be sent
through the @code{eval} shell command which will do the commands.

@menu
* Shell Alias::                 Using a shell alias with the utility.
* Utility Usage::               How to use the dmalloc program.
* Environment Variable::        Environment variable name and features.
* Debug Tokens::                Description of the debugging tokens.
* RC File::                     Format of the runtime configuration file.
@end menu

@node Shell Alias, Utility Usage, Dmalloc Program, Dmalloc Program
@section Using a Shell Alias with the Utility

The dmalloc program is designed to assist in the setting of the
environment variable @samp{DMALLOC_OPTIONS}.  @xref{Environment
Variable}.  It is designed to print the shell commands necessary to make
the appropriate changes to the environment.  Unfortunately, it cannot
make the changes on its own so the output from dmalloc should be sent
through the @code{eval} shell command which will do the commands.

With shells that have aliasing or macro capabilities: csh, bash, ksh,
tcsh, zsh, etc., setting up an alias to dmalloc to do the eval call is
recommended.  Bash, ksh, and zsh users should add the following to their
@file{.bashrc}, @file{.profile}, or @file{.zshrc} file respectively
(notice the @kbd{-b} option for bourne shell output):

@example
function dmalloc @{ eval `command dmalloc -b $*`; @}
@end example

If you are @emph{still} using csh or tcsh, you should add the following
to your @file{.cshrc} file (notice the @kbd{-C} option for c-shell
output):

@example
alias dmalloc 'eval `\dmalloc -C \!*`'
@end example

This allows the user to execute the dmalloc command as @samp{dmalloc
arguments}.

Users of versions of the Bourne shell (usually known as /bin/sh) that
don't have command functions will need to send the output to a temporary
file and the read it back in with the ``.'' command:

@example
$  dmalloc -b arguments... > /tmp/out
$  . /tmp/out
@end example

@node Utility Usage, Environment Variable, Shell Alias, Dmalloc Program
@section How to Use the Dmalloc Program

@cindex utility usage

The most basic usage for the program is @samp{dmalloc [-bC] tag}.  The
@samp{-b} or @samp{-C} (either but not both flags used at a time) are
for generating Bourne or C shell type commands respectively.  dmalloc
will try and use the @code{SHELL} environment variable to determine
whether bourne or C shell commands should be generated but you may want
to explicitly specify the correct flag.

The @samp{tag} argument to dmalloc should match a line from the user's
runtime configuration file or should be one of the built-in tags.
@xref{RC File}.  If no tag is specified and no other option-commands
used, dmalloc will display the current settings of the environment
variable.  It is useful to specify one of the verbose options when doing
this.

To find out the usage for the debug malloc program try @samp{dmalloc
--usage-long}.  The standardized usage message that will be displayed is
one of the many features of the argv library included with this package.

It is available on the web at @uref{http://256.com/sources/argv/}.  See
the documentation there for more information.

Here is a detailed list of the flags that can passed to dmalloc:

@table @code
@item -a address
Set the @samp{addr} part of the @samp{DMALLOC_OPTIONS} variable to
address (or alternatively address:number).

@item -b
Output Bourne shell type commands.

@item -C
Output C shell type commands.

@item -c
Clear/unset all of the settings not specified with other arguments.  You
can do this automatically when you set to a new tag with the @kbd{-r}
option.

@emph{NOTE}: clear will never unset the @samp{debug} setting.  Use
@kbd{-d 0} or a tag to @samp{none} to achieve this.

@item -d bitmask
Set the @samp{debug} part of the @samp{DMALLOC_OPTIONS} env variable to
the bitmask value which should be in hex.  This is overridden (and
unnecessary) if a tag is specified.

@item -D
List all of the debug-tokens.  Useful for finding a token to be used
with the @kbd{-p} or @kbd{-m} options.  Use with @kbd{-v} or @kbd{-V}
verbose options.

@item -e errno
Print the dmalloc error string that corresponds to the error number
errno.

@item -f filename
Use this configuration file instead of the RC file
@file{$HOME/.dmallocrc}.

@item -i number
@cindex interval setting
Set the checking interval to number.  If the @code{check-heap} token is
enabled, this causes the library to only check the heap every Nth time
which can @emph{significantly} increase the running speed of your
program.  If a problem is found, however, this limits your ability to
determine when the problem occurred.  Try values of 50 or 100 initially.

@item -k
Do not reset all of the settings when a tag is specified.  This
specifically overrides the @kbd{-r} option and is provided here to
override @kbd{-r} if it has been added to the dmalloc alias.

@item -l filename
Write the debugging output and other log-file information to filename.

@item -L
Output the debug-value not in hex but by individual debug-tokens in long
form.

@item -m token(s)
Remove (minus) the debug capabilities of token(s) from the current debug
setting or from the selected tag (or @kbd{-d} value).  Multiple @kbd{-m}
options can be specified.

@item -n
Without changing the environment, output the commands resulting from the
supplied options.

@cindex lock on
@item -o times
Set the ``lock-on'' period which dictates with the threaded version of
the library to not initialize or lock the mutex lock around the library
until after a certain number of allocation calls have been made.  Some
number between 2 and 30 is probably good.  See the ``Using With
Threads'' section for more information about the operation of the
library with threads.  @xref{Using With Threads}.

@item -p token(s)
Add (plus) the debug capabilities of token(s) to the current debug
setting or to the selected tag (or @kbd{-d} value).  Multiple @kbd{-p}
options can be specified.

@item -r
Remove (unset) all settings when using a tag.  This is useful when you
are returning to a standard development tag and want the logfile,
address, and interval settings to be cleared automatically.  If you want
this behavior by default, this can be put into the dmalloc alias.

@item -s number
Set the @samp{start} part of the @samp{DMALLOC_OPTIONS} env variable to
number (alternatively @samp{file:line}).

@item -S
Output the debug-value not in hex but by individual debug-tokens in short
form.

@item -t
List all of the tags in the rc-file.  Use with @kbd{-v} or @kbd{-V}
verbose options.

@item -v
Give verbose output.  Especially useful when dumping current settings or
listing all of the tags.
@end table

If no arguments are specified, dmalloc dumps out the current settings
that you have for the environment variable.  For example:

@example
Debug-Flags  '0x40005c7' (runtime)
Address      0x1f008, count = 3
Interval     100
Logpath      'malloc'
Start-File   not-set
@end example

With a -v option and no arguments, dmalloc dumps out the current
settings in a verbose manner.  For example:

@example
Debug-Flags  '0x40005c7' (runtime)
   log-stats, log-non-free, log-blocks, log-unknown, 
   log-bad-space, check-fence, catch-null
Address      0x1f008, count = 10
Interval     100
Logpath      'malloc'
Start-File   not-set
@end example

Here are some examples of dmalloc usage:

@example
# start tough debugging, check the heap every 100 times,
# send the log information to file 'dmalloc'
dmalloc high -i 100 -l dmalloc

# find out what error code 20 is (from the logfile)
dmalloc -e 20

# cause the library to halt itself when it sees the address 0x34238
# for the 6th time.
dmalloc -a 0x34238:6

# return to the normal 'runtime' settings and clear out all
# other settings
dmalloc -c runtime

# enable basic 'low' settings plus (-p) the logging of
# transactions (log-trans) to file 'dmalloc'
dmalloc low -p log-trans -l dmalloc

# print out the current settings with Very-verbose output
dmalloc -V

# list the available debug malloc tokens with Very-verbose output
dmalloc -DV

# list the available tags from the rc file with verbose output
dmalloc -tv
@end example

@node Environment Variable, Debug Tokens, Utility Usage, Dmalloc Program
@section Environment Variable Name and Features

@cindex environment variable
@cindex DMALLOC_OPTIONS

An @dfn{environment variable} is a variable that is part of the user's
working environment and is shared by all the programs.  The
@samp{DMALLOC_OPTIONS} variable is used by the dmalloc library to enable
or disable the memory debugging features, at runtime.  It can be set
either by hand or with the help of the dmalloc program.  @xref{Dmalloc
Program}.

@cindex Bourne shell usage
@cindex sh usage
@cindex bash usage
@cindex ksh usage
@cindex zsh usage
To set it by hand, Bourne shell (sh, bash, ksh, or zsh) users should use:

@example
DMALLOC_OPTIONS=value
export DMALLOC_OPTIONS
@end example

@cindex C shell usage
@cindex csh usage
@cindex tcsh usage
C shell (csh or tcsh) users need to invoke:

@example
setenv DMALLOC_OPTIONS value
@end example

The value in the above examples is a comma separated list of tokens each
having a corresponding value.  The tokens are described below:

@table @code
@item debug
@cindex debug setting
This should be set to a value in hexadecimal which corresponds to the
functionality token values added together.  @xref{Debug Tokens}.  For
instance, if the user wanted to enable the logging of memory
transactions (value @samp{0x008}) and wanted to check fence-post memory
(value @samp{0x400}) then @samp{debug} should be set to @samp{0x408}
(@samp{0x008} + @samp{0x400}).

@emph{NOTE}: You don't have to worry about remembering all the hex
values of the tokens because the dmalloc program automates the setting
of this variable especially.

@emph{NOTE}: You can also specify the debug tokens directly, separated
by commas.  @xref{Debug Tokens}.  If @samp{debug} and the tokens are
both used, the token values will be added to the debug value.

@item log
@cindex logfile setting
@cindex logging information to disk
Set this to a filename so that if @samp{debug} has logging enabled, the
library can log transactions, administration information, and/or errors
to the file so memory problems and usage can be tracked.

To get different logfiles for different processes, you can assign
@samp{log} to a string with @code{%d} in it (for instance
@samp{logfile.%d}).  This will be replaced with the pid of the running
process (for instance @samp{logfile.2451}).

@emph{WARNING}: it is easy to core dump any program with dmalloc, if
you send in a format with arguments other than the one @code{%d}.

@item addr
@cindex address setting
@cindex address locating
@cindex tracking addresses
When this is set to a hex address (taken from the dmalloc log-file for
instance) dmalloc will abort when it finds itself either allocating or
freeing that address.

The address can also have an @samp{:number} argument.  For instance, if
it was set it to @samp{0x3e45:10}, the library will kill itself the 10th
time it sees address @samp{0x3e45}.  By setting the number argument to
0, the program will never stop when it sees the address.  This is useful
for logging all activity on the address and makes it easier to track
down specific addresses not being freed.

This works well in conjunction with the @code{STORE_SEEN_COUNT} option.
@xref{Memory Leaks}.

@emph{NOTE}: dmalloc will also log all activity on this address along
with a count.

@item inter
@cindex interval setting
By setting this to a number X, dmalloc will only check the heap every X
times.  This means a number of debugging features can be enabled while
still running the program within a finite amount of time.

A setting of @samp{100} works well with reasonably memory intensive
programs.  This of course means that the library will not catch errors
exactly when they happen but possibly 100 library calls later.

@item start
@cindex start setting
Set this to a number X and dmalloc will begin checking the heap after X
times.  This means the intensive debugging can be started after a
certain point in a program.

@samp{start} also has the format file:line.  For instance, if it is set
to @samp{dmalloc_t.c:126} dmalloc will start checking the heap after it
sees a dmalloc call from the @file{dmalloc_t.c} file, line number 126.
If line number is 0 then dmalloc will start checking the heap after it
sees a call from anywhere in the @file{dmalloc_t.c} file.

This allows the intensive debugging to be started after a certain
routine or file has been reached in the program.
@end table

Some examples are:

@example
# turn on transaction and stats logging and set 'malloc' as the log-file
setenv DMALLOC_OPTIONS log-trans,log-stats,log=malloc

# enable debug flags 0x1f as well as heap-checking and set the interval
# to be 100
setenv DMALLOC_OPTIONS debug=0x1f,check-heap,inter=100

# enable 'malloc' as the log-file, watch for address '0x1234', and start
# checking when we see file.c line 123
setenv DMALLOC_OPTIONS log=malloc,addr=0x1234,start=file.c:123
@end example

@node Debug Tokens, RC File, Environment Variable, Dmalloc Program
@section Description of the Debugging Tokens

@cindex debug tokens
@cindex tokens, debug

The below tokens and their corresponding descriptions are for the
setting of the debug library setting in the environment variable.
@xref{Environment Variable}.  They should be specified in the user's
@file{.dmallocrc} file.  @xref{RC File}.

Each token, when specified, enables a specific debugging feature.  For
instance, if you have the log-stats token enabled, the library will log
general statistics to the logfile.

To get this information on the fly, use @kbd{dmalloc -DV}.  This will
print out the Debug tokens in Very-verbose mode.  @xref{Dmalloc
Program}.

@table @code
@cindex none token
@item none
No debugging functionality

@cindex log-stats
@item log-stats
Log general statistics when dmalloc_shutdown or dmalloc_log_stats is
called.

@cindex log-non-free
@item log-non-free
Log non-freed memory pointers when dmalloc_shutdown or dmalloc_log_unfreed
is called.

@cindex log-thread-id
@item log-thread-id
For systems that have multi-threaded programs (don't worry if this does
not make sense to you), log thread-id for allocated pointer (see
@file{conf.h}).

@cindex log-trans
@item log-trans
Log general memory transactions (quite verbose).

@cindex log-stamp
@item log-stamp
Log a time stamp for all messages.

@cindex log-admin
@item log-admin
Log administrative information (quite verbose).

@cindex log-blocks
@item log-blocks
Log detailed block information when dmalloc_log_heap_map is called.

@cindex log-unknown
@item log-unknown
Like log-non-free but logs non-freed memory pointers that did not have
file/line information associated with them.

@cindex log-bad-space
@item log-bad-space
Log actual bytes in and around bad pointers.

@cindex log-nonfree-space
@item log-nonfree-space
Log actual bytes in non-freed pointers.

@cindex log-elapsed-time
@item log-elapsed-time
Log elapsed-time for allocated pointers (see @file{conf.h}).

@cindex log-current-time
@item log-current-time
Log current-time for allocated pointers (see @file{conf.h}).

@cindex check-fence
@item check-fence
Check fence-post memory areas.

@cindex check-heap
@item check-heap
Verify heap administrative structure.

@cindex check-lists
@item check-lists
Examine internal heap linked-lists.

@cindex check-blank
@item check-blank
Check to see if space that was blanked by free-blank or alloc-blank has
been overwritten.  If this is enabled then it will enable free-blank and
alloc-blank automatically.

@cindex check-funcs
@item check-funcs
Check the arguments of some functions (mostly string operations) looking
for bad pointers.

@cindex force-linear
@item force-linear
Have the heap complain when additional program functionality seems to
have made use of the system's heap-allocation routine @code{sbrk}
directly behind the dmalloc library's back.  This is disabled by default
since an increasing number of operating system functions seem to be
doing this, especially pthreads packages.

@cindex catch-signals
@item catch-signals
Shutdown the library automatically on SIGHUP, SIGINT, or SIGTERM.  This
will cause the library to dump its statistics (if requested) when you
press control-c on the program (for example).

@cindex realloc-copy
@item realloc-copy
Always copy data to a new pointer when realloc.

@cindex blank space
@cindex blanking memory
@cindex overwriting memory
@cindex clearing memory
@cindex decimal 197
@cindex 197
@cindex octal 305
@cindex 305
@cindex 0305
@cindex hex 0xc5
@cindex 0xc5
@cindex c5
@cindex free-blank
@item free-blank
Write special bytes (decimal 197, octal 0305, hex 0xc5) into space when
it is freed.  The same bytes are written when memory is allocated if
alloc-blank is enabled.

@cindex dump core
@cindex core dump
@cindex error-abort
@item error-abort
Abort the program (and dump core) on errors.  See @code{error-dump} below.

@cindex blank space
@cindex blanking memory
@cindex overwriting memory
@cindex clearing memory
@cindex decimal 197
@cindex 197
@cindex octal 305
@cindex 305
@cindex 0305
@cindex hex 0xc5
@cindex 0xc5
@cindex c5
@cindex alloc-blank
@item alloc-blank
Write special bytes (decimal 197, octal 0305, hex 0xc5) into space when
it is allocated.  The same bytes are written when memory is freed if
free-blank is enabled.

@cindex heap-check-map
@item heap-check-map
Log a heap-map to the logfile every time the heap is checked.

@cindex print-messages
@item print-messages
Log any errors and messages to the screen via standard-error.

@cindex sbrk
@cindex catch-null
@item catch-null
Abort the program immediately if the library fails to get more heap
space from sbrk.

@cindex never-reuse
@item never-reuse
Have the heap never use space that has been used before and freed.
@xref{Memory Leaks}.  @emph{WARNING}: This should be used with caution
since you may run out of heap space.

@cindex allow-free-null
@item allow-free-null
The library will not generate an error when a program tries to free a
NULL pointer.  See ALLOW_FREE_NULL and ALLOW_FREE_NULL_MESSAGE settings
in the @file{settings.h} file which change the default behavior.

@emph{NOTE}: This does not impact the ALLOW_REALLOC_NULL compilation
options which can be adjusted in @file{conf.h}.

@cindex dump core
@cindex core dump
@cindex error-dump
@item error-dump
Dump core on error and then continue.  Later core dumps overwrite
earlier ones if the program encounters more than one error.  See
@code{error-abort} above.

@emph{NOTE}: This will only work if your system supports the @code{fork}
system call and the configuration utility was able to fork without going
recursive.

@end table

@node RC File,, Debug Tokens, Dmalloc Program
@section Format of the Runtime Configuration File

@cindex rc file
@cindex runtime-config file
@cindex configuration file
@cindex dmallocrc file
@cindex .dmallocrc file

By using a @dfn{RC File} (or runtime configuration file) you can alias
tags to combinations of debug tokens.  @xref{Debug Tokens}.

@emph{NOTE}: For beginning users, the dmalloc program has a couple of
tags built into it so it is not necessary for you to setup a RC file:

@table @code
@item runtime
enables basic runtime tests

@item low
turns on minimal checking of heap structures

@item medium
significant checking of heap areas

@item high
extensive checking of heap areas

@item all
turns on all the checking possible.  This generates a multitude of log
messages without many more tests than high.
@end table

For expert users, a sample @file{dmallocrc} file has been provided but
you are encouraged to roll your own combinations.  The name of default
rc-file is @file{$HOME/.dmallocrc}.  The @samp{$HOME} environment
variable should be set by the system to point to your home-directory.

The file should contain lines in the general form of:

@example
tag     token1, token2, @dots{}
@end example

@samp{tag} is to be matched with the tag argument passed to the dmalloc
program, while @samp{token1, token2, @dots{}} are debug capability
tokens.  @xref{Dmalloc Program}, @ref{Debug Tokens}.

A line can be finished with a @samp{\} meaning it continues onto the
next line.  Lines beginning with @samp{#} are treated as comments and
are ignored along with empty lines.

Here is an example of a @file{.dmallocrc} file:

@example
#
# Dmalloc runtime configuration file for the debug malloc library
#

# no debugging
none    none

# basic debugging
debug1  log-stats, log-non-free, check-fence

# more logging and some heap checking
debug2  log-stats, log-non-free, log-trans, \
        check-fence, check-heap, check-lists, error-abort

# good utilities
debug3  log-stats, log-non-free, log-trans, \
        log-admin, check-fence, check-heap, check-lists, realloc-copy, \
        free-blank, error-abort

@dots{}
@end example

For example, with the above file installed, you can type @code{dmalloc
debug1} after setting up your shell alias.  @xref{Dmalloc Program}.
This enables the logging of statistics, the logging of non-freed memory,
and the checking of fence-post memory areas.

Enter @code{dmalloc none} to disable all memory debugging features.

@node Source Code, Index of Concepts, Dmalloc Program, Top
@chapter Information on the Source Code

@cindex source code

@menu
* Definitions::                 Definition of terms and other information.
* Compatibility::               General compatibility concerns.
* Portability::                 Issues important for porting the library.
@end menu

@node Definitions, Compatibility, Source Code, Source Code
@section Definition of Terms and other Information

@cindex source definitions

Here are a couple definitions and other information for those interested
in ``picking the brain'' of the library.  The code is a little ugly here
and there and it conforms to the Gray-Watson handbook of coding
standards only.

@table @dfn
@item bblock
basic block containing 2 ^ BASIC_BLOCK bytes of info

@item bblock_adm
administration for a set of basic blocks

@item dblock
divided block containing some base 2 number of blocks smaller than a
basic block.

@item dblock_adm
administration for a set of divided blocks

@item chunk
some anonymous amount of memory
@end table

For more information about administration structures, see the code and
comments from @file{chunk_loc.h}.

@node Compatibility, Portability, Definitions, Source Code
@section General Compatibility Concerns

@cindex compatibility

@itemize @bullet
@item
Realloc() backwards compatibility with being able to realloc from the
last freed block is @emph{not} supported.  The author is interested to
know who is using this (cough, cough) feature and for what reason.

@item
Realloc() of a NULL pointer is supported in which case the library will
just make a call to malloc().  This can be disabled with the help of a
manual compilation option in the @file{conf.h} file.

@item
Some systems allow free(0) to not be an error for some reason.  Since 0
is not a valid address returned by the malloc call, it is debatable that
this should be allowed.  See @file{conf.h} for some manual compilation
options to handle this.

@item
Aside from possibly being slower than the system's memory allocation
functions, the library should be fully compatible with the standard
memory routines.  If this is @emph{not} the case, please bring this to
my attention.
@end itemize

@node Portability,  , Compatibility, Source Code
@section Issues Important for Porting the Library

@cindex portability

General portability issues center around:

@itemize @bullet
@item
@cindex sbrk
sbrk or compatible function usages

@item
@cindex heap growing
@cindex growing the heap
Whether the systems' heap grows towards high or low memory.  The chunk.c
code is designed (loosely) around the fact that consecutive calls to
sbrk should give higher memory addresses.

The library has not been tested on a system whose heap grows towards low
memory.  If you are trying to run the library on such a system please
contact the author.

@item
@cindex return-address
The locating of the caller's address from the dmalloc functions.
This is useful in locating problems from dmalloc functions called from C
files which did not include @file{dmalloc.h}: C library calls for
instance.

@cindex gcc
See @file{return.h} for the available architecture/compiler
combinations.  You may want to examine the assembly code from gcc (GNUs
superior c-compiler) version 2+ being run on the following code.  It
should give you a good start on building a hack for your box.

@example
static char * x;

a()
@{
        x = __builtin_return_address(0);
@}

main()
@{
        a();
@}
@end example

@end itemize

@node Index of Concepts, , Source Code, Top
@unnumbered Index of Concepts

@printindex cp
@contents

@bye
