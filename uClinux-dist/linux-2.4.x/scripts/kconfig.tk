#!/usr/local/bin/wish -f
# FILE: header.tk
# This file is boilerplate TCL/TK function definitions for 'make xconfig'.
#
# CHANGES
# =======
#
# 8 January 1999, Michael Elizabeth Chastain, <mec@shout.net>
# - Remove unused do_cmd function (part of the 2.0 sound support).
# - Arrange buttons in three columns for better screen fitting.
# - Add CONSTANT_Y, CONSTANT_M, CONSTANT_N for commands like:
#     dep_tristate 'foo' CONFIG_FOO m
#
# 23 January 1999, Michael Elizabeth Chastain, <mec@shout.net>
# - Shut vfix the hell up.
#
# 24 January 1999, Michael Elizabeth Chastain, <mec@shout.net>
# - Improve the exit message (Jeff Ronne).

#
# This is a handy replacement for ".widget cget" that requires neither tk4
# nor additional source code uglification.
#
proc cget { w option } {
	return "[lindex [$w configure $option] 4]"
}

#
# Function to compensate for broken config.in scripts like the sound driver,
# which make dependencies on variables that are never even conditionally
# defined.
#
proc vfix { var } {
	global $var
	if [ catch {eval concat $$var} ] {
		set $var 4
	}
}

#
# Constant values used by certain dep_tristate commands.
#
set CONSTANT_Y 1
set CONSTANT_M 2
set CONSTANT_N 0
set CONSTANT_E 4

#
# Create a "reference" object to steal colors from.
#
button .ref

#
# On monochrome displays, -disabledforeground is blank by default; that's
# bad.  Fill it with -foreground instead.
#
if { [cget .ref -disabledforeground] == "" } {
	.ref configure -disabledforeground [cget .ref -foreground]
}


#
# Define some macros we will need to parse the config.in file.
#

proc mainmenu_name { text } {
	wm title . "$text"
}

proc menu_option { w menu_num text } {
	global menus_per_column
	global processed_top_level
	set processed_top_level [expr $processed_top_level + 1]
	if { $processed_top_level <= $menus_per_column } then {
	    set myframe left
	} elseif { $processed_top_level <= [expr 2 * $menus_per_column] } then {
	    set myframe middle
	} else {
	    set myframe right
	} 
	button .f0.x$menu_num -anchor w -text "$text" \
	    -command "$w .$w \"$text\""
	pack .f0.x$menu_num -pady 0 -side top -fill x -in .f0.$myframe
}

proc load_configfile { w title func } {
	catch {destroy $w}
	toplevel $w -class Dialog
	global loadfile
	frame $w.x
	label $w.bm -bitmap questhead
	pack  $w.bm -pady 10 -side top -padx 10
	label $w.x.l -text "Enter filename:" -relief raised
	entry $w.x.x -width 35 -relief sunken -borderwidth 2 \
		-textvariable loadfile
	pack $w.x.l $w.x.x -anchor w -side left
	pack $w.x -side top -pady 10
	wm title $w "$title" 

	set oldFocus [focus]
	frame $w.f
	button $w.f.back -text "OK" -width 20 \
		-command "destroy $w; focus $oldFocus;$func .fileio"
	button $w.f.canc -text "Cancel" \
		-width 20 -command "destroy $w; focus $oldFocus"
	pack $w.f.back $w.f.canc -side left -pady 10 -padx 45
	pack $w.f -pady 10 -side bottom -padx 10 -anchor w
	focus $w
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
}

bind all <Alt-q> {maybe_exit .maybe}

proc maybe_exit { w } {
	catch {destroy $w}
	toplevel $w -class Dialog
	label $w.bm -bitmap questhead
	pack  $w.bm -pady 10 -side top -padx 10
	message $w.m -width 400 -aspect 300 \
		-text "Changes will be lost.  Are you sure?" -relief flat
	pack  $w.m -pady 10 -side top -padx 10
	wm title $w "Are you sure?" 

	set oldFocus [focus]
	frame $w.f
	button $w.f.back -text "OK" -width 20 \
		-command "exit"
	button $w.f.canc -text "Cancel" \
		-width 20 -command "destroy $w; focus $oldFocus"
	pack $w.f.back $w.f.canc -side left -pady 10 -padx 45
	pack $w.f -pady 10 -side bottom -padx 10 -anchor w
  	bind $w <Return> "exit"
    	bind $w <Escape> "destroy $w; focus $oldFocus"
	focus $w
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy
}

proc read_config_file { w } {
	global loadfile
	if { [string length $loadfile] != 0 && [file readable $loadfile] == 1 } then {
		read_config $loadfile
	} else {
		catch {destroy $w}
		toplevel $w -class Dialog
		message $w.m -width 400 -aspect 300 -text \
			"Unable to read file $loadfile" \
			 -relief raised 
		label $w.bm -bitmap error
		pack $w.bm $w.m -pady 10 -side top -padx 10
		wm title $w "Xconfig Internal Error" 

		set oldFocus [focus]
		frame $w.f
		button $w.f.back -text "Bummer" \
			-width 10 -command "destroy $w; focus $oldFocus"
		pack $w.f.back -side bottom -pady 10 -anchor s
		pack $w.f -pady 10 -side top -padx 10 -anchor s
		focus $w
		global winx; global winy
		set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
		wm geometry $w +$winx+$winy
	}
}

proc write_config_file  { w } {
	global loadfile
	if { [string length $loadfile] != 0 
    		&& ([file writable $loadfile] == 1 || ([file exists $loadfile] == 0 && [file writable [file dirname $loadfile]] == 1)) } then {
		writeconfig $loadfile /dev/null
	} else {
		catch {destroy $w}
		toplevel $w -class Dialog
		message $w.m -width 400 -aspect 300 -text \
			"Unable to write file $loadfile" \
			 -relief raised 
		label $w.bm -bitmap error
		pack $w.bm $w.m -pady 10 -side top -padx 10
		wm title $w "Xconfig Internal Error" 

		set oldFocus [focus]
		frame $w.f
		button $w.f.back -text "OK" \
			-width 10 -command "destroy $w; focus $oldFocus"
		pack $w.f.back -side bottom -pady 10 -anchor s
		pack $w.f -pady 10 -side top -padx 10 -anchor s
		focus $w
		global winx; global winy
		set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
		wm geometry $w +$winx+$winy
	}
}

proc read_config { filename } {
	set file1 [open $filename r]
	clear_choices
	while { [gets $file1 line] >= 0} {
		if [regexp {([0-9A-Za-z_]+)=([ynm])} $line foo var value] {
			if { $value == "y" } then { set cmd "global $var; set $var 1" }
			if { $value == "n" } then { set cmd "global $var; set $var 0" }
			if { $value == "m" } then { set cmd "global $var; set $var 2" }
			eval $cmd
		}
		if [regexp {# ([0-9A-Za-z_]+) is not set} $line foo var] {
			set cmd "global $var; set $var 0"
			eval $cmd
		}
		if [regexp {([0-9A-Za-z_]+)=([0-9A-Fa-f]+)} $line foo var value] {
			set cmd "global $var; set $var $value"
			eval $cmd
		}
		if [regexp {([0-9A-Za-z_]+)="([^"]*)"} $line foo var value] {
			set cmd "global $var; set $var \"$value\""
			eval $cmd
		}
	}
	close $file1
	update_choices
	update_mainmenu
}
proc write_comment { file1 file2 text } {
    	puts $file1 ""
	puts $file1 "#"
	puts $file1 "# $text"
	puts $file1 "#"
	puts $file2 "/*"
	puts $file2 " * $text"
	puts $file2 " */"
}

proc effective_dep { deplist } {
	global CONFIG_MODULES
	set depend 1
	foreach i $deplist {
		if {$i == 0} then {set depend 0}
		if {$i == 2 && $depend == 1} then {set depend 2}
	}
	if {$depend == 2 && $CONFIG_MODULES == 0} then {set depend 0}
	return $depend
}

proc sync_tristate { var dep } {
	global CONFIG_MODULES
	if {$dep == 0 && ($var == 1 || $var == 2)} then {
		set var 0
	} elseif {$dep == 2 && $var == 1} then {
		set var 2
	} elseif {$var == 2 && $CONFIG_MODULES == 0} then {
		if {$dep == 1} then {set var 1} else {set var 0}
	}
	return $var
}

proc sync_bool { var dep modset } {
	set var [sync_tristate $var $dep]
	if {$dep == 2 && $var == 2} then {
		set var $modset
	}
	return $var
}

proc write_tristate { file1 file2 varname variable deplist modset } {
	set variable [sync_tristate $variable [effective_dep $deplist]]
	if { $variable == 2 } \
		then { set variable $modset }
	if { $variable == 1 } \
		then { puts $file1 "$varname=y"; \
		       puts $file2 "#define $varname 1" } \
	elseif { $variable == 2 } \
		then { puts $file1 "$varname=m"; \
		       puts $file2 "#undef  $varname"; \
		       puts $file2 "#define ${varname}_MODULE 1" } \
	elseif { $variable == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else { \
	    puts stdout "ERROR - Attempting to write value for unconfigured variable ($varname)." \
	}
}

proc write_int { file1 file2 varname variable dep } {
	if { $dep == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else {
		puts $file1 "$varname=$variable"; \
		puts $file2 "#define $varname ($variable)"; \
	}
}

proc write_hex { file1 file2 varname variable dep } {
	if { $dep == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else {
		puts $file1 "$varname=$variable"; \
		puts -nonewline $file2 "#define $varname 0x"; \
		puts $file2 [exec echo $variable | sed s/^0\[xX\]//]; \
	}
}

proc write_string { file1 file2 varname variable dep } {
	if { $dep == 0 } \
		then { puts $file1 "# $varname is not set"; \
		       puts $file2 "#undef  $varname"} \
	else {
		puts $file1 "$varname=\"$variable\""; \
		puts $file2 "#define $varname \"$variable\""; \
	}
}

proc option_name {w mnum line text helpidx} {
	button $w.x$line.l -text "$text" -relief groove -anchor w
	$w.x$line.l configure -activefore [cget $w.x$line.l -fg] \
				-activeback [cget $w.x$line.l -bg]
	button $w.x$line.help -text "Help" -relief raised \
		-command "dohelp .dohelp $helpidx .menu$mnum"
	pack $w.x$line.help -side right -fill y
	pack $w.x$line.l -side right -fill both -expand on
}

proc toggle_switch2 {w mnum line text variable} {
	frame $w.x$line -relief sunken
	radiobutton $w.x$line.y -text "y" -variable $variable -value 1 \
		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.m -text "-"  -variable $variable -value 2 \
		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.n -text "n"  -variable $variable -value 0 \
		-relief groove -width 2 -command "update_active"

	option_name $w $mnum $line $text $variable

	pack $w.x$line.n $w.x$line.m $w.x$line.y -side right -fill y
}

proc toggle_switch3 {w mnum line text variable} {
	frame $w.x$line -relief sunken
	radiobutton $w.x$line.y -text "y" -variable $variable -value 1 \
		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.m -text "m"  -variable $variable -value 2 \
		-relief groove -width 2 -command "update_active"
	radiobutton $w.x$line.n -text "n"  -variable $variable -value 0 \
		-relief groove -width 2 -command "update_active"

	option_name $w $mnum $line $text $variable

	global CONFIG_MODULES
	if {($CONFIG_MODULES == 0)} then {
		$w.x$line.m configure -state disabled
	}
	pack $w.x$line.n $w.x$line.m $w.x$line.y -side right -fill y
}

proc bool {w mnum line text variable} {
	toggle_switch2 $w $mnum $line $text $variable
	$w.x$line.m configure -state disabled
	pack $w.x$line -anchor w -fill both -expand on
}

proc tristate {w mnum line text variable } {
	toggle_switch3 $w $mnum $line $text $variable
	pack $w.x$line -anchor w -fill both -expand on
}

proc dep_tristate {w mnum line text variable } {
	tristate $w $mnum $line $text $variable
}

proc dep_bool {w mnum line text variable } {
	bool $w $mnum $line $text $variable
}

proc int { w mnum line text variable } {
	frame $w.x$line
	entry $w.x$line.x -width 18 -relief sunken -borderwidth 2 \
		-textvariable $variable
	option_name $w $mnum $line $text $variable
	pack $w.x$line.x -anchor w -side right -fill y
	pack $w.x$line -anchor w -fill both -expand on
}

proc hex { w mnum line text variable } {
	int $w $mnum $line $text $variable
}

proc istring { w mnum line text variable } {
	frame $w.x$line
	entry $w.x$line.x -width 18 -relief sunken -borderwidth 2 \
		-textvariable $variable
	option_name $w $mnum $line $text $variable
	pack $w.x$line.x -anchor w -side right -fill y
	pack $w.x$line -anchor w -fill both -expand on
}

proc minimenu { w mnum line text variable helpidx } {
	frame $w.x$line
	menubutton $w.x$line.x -textvariable $variable -menu \
		$w.x$line.x.menu -relief raised \
		-anchor w
	option_name $w $mnum $line $text $helpidx
	pack $w.x$line.x -anchor w -side right -fill y
	pack $w.x$line -anchor w -fill both -expand on
}

proc menusplit {w m n} {
	if { $n > 2 } then {
		update idletasks
		set menuoptsize [expr [$m yposition 2] - [$m yposition 1]]   
		set maxsize [winfo screenheight $w]
		set splitpoint [expr $maxsize * 4 / 5 / $menuoptsize - 1]
		for {set i [expr $splitpoint + 1]} {$i <= $n} {incr i $splitpoint} {
			$m entryconfigure $i -columnbreak 1
		}
	}
}

proc menutitle {text menu w} {
	wm title $w "$text"
}

proc submenu { w mnum line text subnum } {
	frame $w.x$line
	button $w.x$line.l -text "" -width 15 -relief groove
	$w.x$line.l configure -activefore [cget $w.x$line.l -fg] \
		-activeback [cget $w.x$line.l -bg] -state disabled
	button $w.x$line.m -text "$text" -relief raised -anchor w \
		-command "catch {destroy .menu$subnum}; menu$subnum .menu$subnum \"$text\""
	pack $w.x$line.l -side left -fill both
	pack $w.x$line.m -anchor w -side right -fill both -expand on
	pack $w.x$line -anchor w -fill both -expand on
}

proc comment {w mnum line text } {
	frame $w.x$line
	button $w.x$line.l -text "" -width 15 -relief groove
	$w.x$line.l configure -activefore [cget $w.x$line.l -fg] \
		-activeback [cget $w.x$line.l -bg] -state disabled
	button $w.x$line.m -text "$text" -relief groove -anchor w
	$w.x$line.m configure -activefore [cget $w.x$line.m -fg] \
		-activeback [cget $w.x$line.m -bg]
	pack $w.x$line.l -side left -fill both
	pack $w.x$line.m -anchor w -side right -fill both -expand on
	pack $w.x$line -anchor w -fill both -expand on
}

proc dohelp {w var parent}  {
	catch {destroy $w}
	toplevel $w -class Dialog

	set filefound 0
	set found 0
	set lineno 0

	if { [file readable Documentation/Configure.help] == 1} then {
		set filefound 1
		# First escape sed regexp special characters in var:
		set var [exec echo "$var" | sed s/\[\]\[\/.^$*\]/\\\\&/g]
		# Now pick out right help text:
		set message [exec sed -n "
			/^$var\[ 	\]*\$/,\${
				/^$var\[ 	\]*\$/c\\
${var}:\\

				/^#/b
				/^\[^ 	\]/q
				s/^  //
				/<file:\\(\[^>\]*\\)>/s//\\1/g
				p
			}
			" Documentation/Configure.help]
		set found [expr [string length "$message"] > 0]
	}

	frame $w.f1
	pack $w.f1 -fill both -expand on

	# Do the OK button
	#
	set oldFocus [focus]
	frame $w.f2
	button $w.f2.ok -text "OK" \
		-width 10 -command "destroy $w; catch {focus $oldFocus}"
	pack $w.f2.ok -side bottom -pady 6 -anchor n
	pack $w.f2 -side bottom -padx 10 -anchor s

	scrollbar $w.f1.vscroll -command "$w.f1.canvas yview"
	pack $w.f1.vscroll -side right -fill y

	canvas $w.f1.canvas -relief flat -borderwidth 0 \
		-yscrollcommand "$w.f1.vscroll set"
	frame $w.f1.f
	pack $w.f1.canvas -side right -fill y -expand on

	if { $found == 0 } then {
		if { $filefound == 0 } then {
		message $w.f1.f.m -width 750 -aspect 300 -relief flat -text \
			"No help available - unable to open file Documentation/Configure.help.  This file should have come with your kernel."
		} else {
		message $w.f1.f.m -width 400 -aspect 300 -relief flat -text \
			"No help available for $var"
		}
		label $w.f1.bm -bitmap error
		wm title $w "RTFM"
	} else {
		text $w.f1.f.m -width 73 -relief flat -wrap word
		$w.f1.f.m insert 0.0 $message
		$w.f1.f.m conf -state disabled -height [$w.f1.f.m index end]

		label $w.f1.bm -bitmap info
		wm title $w "Configuration help" 
	}
	pack $w.f1.f.m -side left
	pack $w.f1.bm $w.f1.f -side left -padx 10

	focus $w
	set winx [expr [winfo x $parent]+20]
	set winy [expr [winfo y $parent]+20]
	wm geometry $w +$winx+$winy
	set sizok [expr [winfo reqheight $w.f2.ok] + 12]
	set maxy [expr [winfo screenheight .] * 3 / 4]
	set canvtotal [winfo reqheight $w.f1.f.m]
	if [expr $sizok + $canvtotal < $maxy] {
		set sizy $canvtotal
	} else {
		set sizy [expr $maxy - $sizok]
	}
	$w.f1.canvas configure -height $sizy -width [winfo reqwidth $w.f1.f.m] \
		-scrollregion "0 0 [winfo reqwidth $w.f1.f.m] \
			[winfo reqheight $w.f1.f.m]"
	$w.f1.canvas create window 0 0 -anchor nw -window $w.f1.f
	update idletasks

	set maxy [winfo screenheight .]
	if [expr $sizok + $canvtotal < $maxy] {
		set sizy [expr $sizok + $canvtotal]
	} else {
		set sizy $maxy
	}
	wm maxsize $w [winfo width $w] $sizy
}

bind all <Alt-s> { catch {exec cp -f .config .config.old}; \
		writeconfig .config include/linux/autoconf.h; wrapup .wrap }

proc wrapup {w }  {
	catch {destroy $w}
	toplevel $w -class Dialog

	global CONFIG_MODVERSIONS; vfix CONFIG_MODVERSIONS
	if { ([file exists .hdepend] != 1) || ($CONFIG_MODVERSIONS == 1) } then {
	    message $w.m -width 400 -aspect 300 -relief raised -text \
		"End of Linux kernel configuration.  Check the top-level Makefile for additional configuration.  Next, you must run 'make dep'."
	} else {
	    message $w.m -width 400 -aspect 300 -relief raised -text \
		"End of Linux kernel configuration.  Check the top-level Makefile for additional configuration.  Next, you may 'make bzImage', 'make bzdisk', or 'make bzlilo.'"
	}
	label $w.bm -bitmap info
	pack $w.bm $w.m -pady 10 -side top -padx 10
	wm title $w "Kernel build instructions" 

	set oldFocus [focus]
	frame $w.f
	button $w.f.back -text "OK" \
		-width 10 -command "exit"
	pack $w.f.back -side bottom -pady 10 -anchor s
	pack $w.f -pady 10 -side top -padx 10 -anchor s
	focus $w
        bind $w <Return> "exit"
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	wm geometry $w +$winx+$winy

}

proc unregister_active {num} {
	global active_menus
	set index [lsearch -exact $active_menus $num]
	if {$index != -1} then {set active_menus [lreplace $active_menus $index $index]}
}

proc update_active {} {
	global active_menus total_menus
	set max 0
	if {[llength $active_menus] > 0} then {
		set max [lindex $active_menus end]
		update_define [toplevel_menu [lindex $active_menus 0]] $max 0
	}
	foreach i $active_menus {
		if {[winfo exists .menu$i] == 0} then {
			unregister_active $i
		} else {
			update_menu$i
		}
	}
	update_define [expr $max + 1] $total_menus 1
	update_mainmenu
}

proc configure_entry {w option items} {
	foreach i $items {
		$w.$i configure -state $option
	}
}

proc validate_int {name val default} {
	if {([exec echo $val | sed s/^-//g | tr -d \[:digit:\] ] != "")} then {
		global $name; set $name $default
	}
}

proc validate_hex {name val default} {
	if {([exec echo $val | tr -d \[:xdigit:\] ] != "")} then {
		global $name; set $name $default
	}
}

proc update_define {first last allow_update} {
	for {set i $first} {$i <= $last} {incr i} {
		update_define_menu$i
		if {$allow_update == 1} then update
	}
}

#
# Next set up the particulars for the top level menu, and define a few
# buttons which we will stick down at the bottom.
#

frame .f0 
frame .f0.left
frame .f0.middle
frame .f0.right

set active_menus [list]
set processed_top_level 0
set menus_per_column 10
set total_menus 61

proc toplevel_menu {num} {
	if {$num == 5} then {return 4}
	if {$num == 7} then {return 6}
	if {$num == 8} then {return 6}
	if {$num == 9} then {return 6}
	if {$num == 10} then {return 6}
	if {$num == 15} then {return 14}
	if {$num == 16} then {return 14}
	if {$num == 17} then {return 14}
	if {$num == 20} then {return 19}
	if {$num == 22} then {return 21}
	if {$num == 23} then {return 21}
	if {$num == 27} then {return 26}
	if {$num == 28} then {return 26}
	if {$num == 29} then {return 26}
	if {$num == 30} then {return 26}
	if {$num == 31} then {return 26}
	if {$num == 32} then {return 26}
	if {$num == 33} then {return 26}
	if {$num == 34} then {return 26}
	if {$num == 35} then {return 26}
	if {$num == 37} then {return 36}
	if {$num == 39} then {return 38}
	if {$num == 41} then {return 40}
	if {$num == 42} then {return 40}
	if {$num == 43} then {return 40}
	if {$num == 46} then {return 45}
	if {$num == 47} then {return 45}
	if {$num == 48} then {return 45}
	if {$num == 49} then {return 45}
	if {$num == 50} then {return 45}
	if {$num == 51} then {return 45}
	if {$num == 53} then {return 52}
	if {$num == 54} then {return 52}
	if {$num == 55} then {return 52}
	if {$num == 57} then {return 56}
	if {$num == 60} then {return 59}
	return $num
}

mainmenu_name "uClinux/68k (w/o MMU) Kernel Configuration"
menu_option menu1 1 "Code maturity level options"
proc menu1 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 1}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 1]]
	message $w.m -width 400 -aspect 300 -text \
		"Code maturity level options"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Code maturity level options" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 1; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 1; menu2 .menu2 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 1"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 1; menu0 .menu0 \"$title\""
	$w.f.prev configure -state disabled
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 1 0 "Prompt for development and/or incomplete code/drivers" CONFIG_EXPERIMENTAL



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu1 {} {
}


proc update_define_menu1 {} {
	update_define_mainmenu
	global CONFIG_MODULES
}


menu_option menu2 2 "Loadable module support"
proc menu2 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 2}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 2]]
	message $w.m -width 400 -aspect 300 -text \
		"Loadable module support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Loadable module support" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 2; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 2; menu3 .menu3 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 2"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 2; menu1 .menu1 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 2; menu1 .menu1 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 2 0 "Enable loadable module support" CONFIG_MODULES
	bool $w.config.f 2 1 "  Set version information on all module symbols" CONFIG_MODVERSIONS
	bool $w.config.f 2 2 "  Kernel module loader" CONFIG_KMOD



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu2 {} {
	global CONFIG_MODULES
	global CONFIG_MODVERSIONS
	if {($CONFIG_MODULES == 1)} then {
	configure_entry .menu2.config.f.x1 normal {n l y}} else {configure_entry .menu2.config.f.x1 disabled {y n l}}
	global CONFIG_KMOD
	if {($CONFIG_MODULES == 1)} then {
	configure_entry .menu2.config.f.x2 normal {n l y}} else {configure_entry .menu2.config.f.x2 disabled {y n l}}
}


proc update_define_menu2 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_MODVERSIONS
set CONFIG_MODVERSIONS [expr $CONFIG_MODVERSIONS|16]
	global CONFIG_KMOD
set CONFIG_KMOD [expr $CONFIG_KMOD|16]
	if {($CONFIG_MODULES == 1)} then {
	set CONFIG_MODVERSIONS [expr $CONFIG_MODVERSIONS&15]}
	if {($CONFIG_MODULES == 1)} then {
	set CONFIG_KMOD [expr $CONFIG_KMOD&15]}
}


menu_option menu3 3 "Processor type and features"
proc menu3 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 3}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 3]]
	message $w.m -width 400 -aspect 300 -text \
		"Processor type and features"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Processor type and features" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 3; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 3; menu4 .menu4 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 3"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 3; menu2 .menu2 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 3; menu2 .menu2 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	global tmpvar_0
	minimenu $w.config.f 3 0 "CPU" tmpvar_0 CONFIG_M68000
	menu $w.config.f.x0.x.menu -tearoffcommand "menutitle \"CPU\""
	$w.config.f.x0.x.menu add radiobutton -label "MC68000" -variable tmpvar_0 -value "MC68000" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MC68EN302" -variable tmpvar_0 -value "MC68EN302" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MC68328" -variable tmpvar_0 -value "MC68328" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MC68EZ328" -variable tmpvar_0 -value "MC68EZ328" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MC68VZ328" -variable tmpvar_0 -value "MC68VZ328" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MC68332" -variable tmpvar_0 -value "MC68332" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MC68360" -variable tmpvar_0 -value "MC68360" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MCF5204" -variable tmpvar_0 -value "MCF5204" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MCF5206" -variable tmpvar_0 -value "MCF5206" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MCF5206e" -variable tmpvar_0 -value "MCF5206e" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MCF5272" -variable tmpvar_0 -value "MCF5272" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MCF5307" -variable tmpvar_0 -value "MCF5307" -command "update_active"
	$w.config.f.x0.x.menu add radiobutton -label "MCF5407" -variable tmpvar_0 -value "MCF5407" -command "update_active"
	menusplit $w $w.config.f.x0.x.menu 13
	comment $w.config.f 3 1 "Platform"
	bool $w.config.f 3 2 "Pilot 1000/5000, PalmPilot Personal/Pro, or PalmIII support" CONFIG_PILOT
	bool $w.config.f 3 3 "(X)Copilot support" CONFIG_XCOPILOT_BUGS
	bool $w.config.f 3 4 "Compile kernel as ELF - if your GCC is ELF-GCC" CONFIG_KERNEL_ELF
	bool $w.config.f 3 5 "Display memory usage on Pilot screen" CONFIG_PILOT_MEMORY_DISPLAY
	bool $w.config.f 3 6 "Pilot console" CONFIG_PILOT_CONSOLE
	bool $w.config.f 3 7 "Motorola M68EZ328ADS Dev. Board support" CONFIG_M68EZ328ADS
	bool $w.config.f 3 8 "ALMA Electronics board support" CONFIG_ALMA_ANS
	bool $w.config.f 3 9 "uCsimm module support" CONFIG_UCSIMM
	bool $w.config.f 3 10 "PalmV support" CONFIG_PILOT
	bool $w.config.f 3 11 "uCdimm module support" CONFIG_UCDIMM
	bool $w.config.f 3 12 "Dragon Engine II board support" CONFIG_DRAGEN2
	bool $w.config.f 3 13 "Read ETH address from EEPROM" CONFIG_HWADDR_FROMEEPROM
	int $w.config.f 3 14 "Offset from start of EEPROM" CONFIG_HWADDR_OFFSET
	bool $w.config.f 3 15 "Aplio/Pro or Aplio/Entrecote support" CONFIG_APLIO
	bool $w.config.f 3 16 "Aplio Pro" CONFIG_APLIO_PRO
	bool $w.config.f 3 17 "Aplio Entrecote" CONFIG_APLIO_ENTRECOTE
	bool $w.config.f 3 18 "SHGLCore support" CONFIG_SHGLCORE
	bool $w.config.f 3 19 "2Meg SHGLCore" CONFIG_SHGLCORE_2MEG
	bool $w.config.f 3 20 "Arnewsh 5206 board support" CONFIG_ARNEWSH
	bool $w.config.f 3 21 "Motorola M5206eC3 (Cadre-III) board support" CONFIG_CADRE3
	bool $w.config.f 3 22 "Motorola eLITE-5206e board support" CONFIG_ELITE
	bool $w.config.f 3 23 "    SRAM only eLITE-5206e support" CONFIG_SMALL
	bool $w.config.f 3 24 "SnapGear/SecureEdge/NETtel board support" CONFIG_NETtel
	bool $w.config.f 3 25 "Telos Omnia ToolVox board support" CONFIG_TELOS
	bool $w.config.f 3 26 "Netburner CFV2-40 board support" CONFIG_CFV240
	bool $w.config.f 3 27 "Motorola M5272C3 board support" CONFIG_MOTOROLA
	bool $w.config.f 3 28 "SnapGear/SecureEdge/NETtel board support" CONFIG_NETtel
	dep_bool $w.config.f 3 29 "  Reset switch support" CONFIG_RESETSWITCH
	bool $w.config.f 3 30 "Marconi/NAP board support" CONFIG_MARCONINAP
	bool $w.config.f 3 31 "ROMFS image not RAM resident" CONFIG_ROMFS_FROM_ROM
	bool $w.config.f 3 32 "Arnewsh 5307 board support" CONFIG_ARNEWSH
	bool $w.config.f 3 33 "SecureEdge/NETtel board support" CONFIG_NETtel
	bool $w.config.f 3 34 "eLIA board support" CONFIG_eLIA
	bool $w.config.f 3 35 "DISKtel board support" CONFIG_DISKtel
	bool $w.config.f 3 36 "SnapGear router board support" CONFIG_SNAPGEAR
	bool $w.config.f 3 37 "SecureEdge MP3 board support" CONFIG_SECUREEDGEMP3
	bool $w.config.f 3 38 "Motorola M5307C3 (Cadre-III) board support" CONFIG_CADRE3
	bool $w.config.f 3 39 "Feith CLEOPATRA board support" CONFIG_CLEOPATRA
	bool $w.config.f 3 40 "Old mask (broken watchdog timer)" CONFIG_OLDMASK
	bool $w.config.f 3 41 "Motorola M5407C3 board support" CONFIG_MOTOROLA
	bool $w.config.f 3 42 "Feith CLEOPATRA board support" CONFIG_CLEOPATRA
	bool $w.config.f 3 43 "Lineo uCquicc board support" CONFIG_UCQUICC
	bool $w.config.f 3 44 "Support UART on MC68360 SMC" CONFIG_M68360_SMC_UART
	bool $w.config.f 3 45 "Support UART on MC68360 SCC" CONFIG_M68360_SCC_UART
	bool $w.config.f 3 46 "  Initialize LCD" CONFIG_INIT_LCD
	int $w.config.f 3 47 "  Memory reservation (MB)" CONFIG_MEMORY_RESERVE
	global tmpvar_1
	minimenu $w.config.f 3 48 "CPU CLOCK Frequency" tmpvar_1 CONFIG_CLOCK_AUTO
	menu $w.config.f.x48.x.menu -tearoffcommand "menutitle \"CPU CLOCK Frequency\""
	$w.config.f.x48.x.menu add radiobutton -label "AUTO" -variable tmpvar_1 -value "AUTO" -command "update_active"
	$w.config.f.x48.x.menu add radiobutton -label "16MHz" -variable tmpvar_1 -value "16MHz" -command "update_active"
	$w.config.f.x48.x.menu add radiobutton -label "20MHz" -variable tmpvar_1 -value "20MHz" -command "update_active"
	$w.config.f.x48.x.menu add radiobutton -label "25MHz" -variable tmpvar_1 -value "25MHz" -command "update_active"
	$w.config.f.x48.x.menu add radiobutton -label "33MHz" -variable tmpvar_1 -value "33MHz" -command "update_active"
	$w.config.f.x48.x.menu add radiobutton -label "40MHz" -variable tmpvar_1 -value "40MHz" -command "update_active"
	$w.config.f.x48.x.menu add radiobutton -label "45MHz" -variable tmpvar_1 -value "45MHz" -command "update_active"
	$w.config.f.x48.x.menu add radiobutton -label "50MHz" -variable tmpvar_1 -value "50MHz" -command "update_active"
	$w.config.f.x48.x.menu add radiobutton -label "54MHz" -variable tmpvar_1 -value "54MHz" -command "update_active"
	$w.config.f.x48.x.menu add radiobutton -label "60MHz" -variable tmpvar_1 -value "60MHz" -command "update_active"
	$w.config.f.x48.x.menu add radiobutton -label "66MHz" -variable tmpvar_1 -value "66MHz" -command "update_active"
	menusplit $w $w.config.f.x48.x.menu 11
	global tmpvar_2
	minimenu $w.config.f 3 49 "RAM size" tmpvar_2 CONFIG_RAMAUTO
	menu $w.config.f.x49.x.menu -tearoffcommand "menutitle \"RAM size\""
	$w.config.f.x49.x.menu add radiobutton -label "AUTO" -variable tmpvar_2 -value "AUTO" -command "update_active"
	$w.config.f.x49.x.menu add radiobutton -label "4MB" -variable tmpvar_2 -value "4MB" -command "update_active"
	$w.config.f.x49.x.menu add radiobutton -label "8MB" -variable tmpvar_2 -value "8MB" -command "update_active"
	$w.config.f.x49.x.menu add radiobutton -label "16MB" -variable tmpvar_2 -value "16MB" -command "update_active"
	$w.config.f.x49.x.menu add radiobutton -label "32MB" -variable tmpvar_2 -value "32MB" -command "update_active"
	menusplit $w $w.config.f.x49.x.menu 5
	global tmpvar_3
	minimenu $w.config.f 3 50 "RAM bit width" tmpvar_3 CONFIG_AUTOBIT
	menu $w.config.f.x50.x.menu -tearoffcommand "menutitle \"RAM bit width\""
	$w.config.f.x50.x.menu add radiobutton -label "AUTO" -variable tmpvar_3 -value "AUTO" -command "update_active"
	$w.config.f.x50.x.menu add radiobutton -label "8bit" -variable tmpvar_3 -value "8bit" -command "update_active"
	$w.config.f.x50.x.menu add radiobutton -label "16bit" -variable tmpvar_3 -value "16bit" -command "update_active"
	$w.config.f.x50.x.menu add radiobutton -label "32bit" -variable tmpvar_3 -value "32bit" -command "update_active"
	menusplit $w $w.config.f.x50.x.menu 4
	global tmpvar_4
	minimenu $w.config.f 3 51 "FLASH type" tmpvar_4 CONFIG_NOFLASH
	menu $w.config.f.x51.x.menu -tearoffcommand "menutitle \"FLASH type\""
	$w.config.f.x51.x.menu add radiobutton -label "NONE" -variable tmpvar_4 -value "NONE" -command "update_active"
	$w.config.f.x51.x.menu add radiobutton -label "AMD" -variable tmpvar_4 -value "AMD" -command "update_active"
	$w.config.f.x51.x.menu add radiobutton -label "INTEL" -variable tmpvar_4 -value "INTEL" -command "update_active"
	menusplit $w $w.config.f.x51.x.menu 3
	global tmpvar_5
	minimenu $w.config.f 3 52 "FLASH size" tmpvar_5 CONFIG_FLASHAUTO
	menu $w.config.f.x52.x.menu -tearoffcommand "menutitle \"FLASH size\""
	$w.config.f.x52.x.menu add radiobutton -label "AUTO" -variable tmpvar_5 -value "AUTO" -command "update_active"
	$w.config.f.x52.x.menu add radiobutton -label "128KB" -variable tmpvar_5 -value "128KB" -command "update_active"
	$w.config.f.x52.x.menu add radiobutton -label "1MB" -variable tmpvar_5 -value "1MB" -command "update_active"
	$w.config.f.x52.x.menu add radiobutton -label "2MB" -variable tmpvar_5 -value "2MB" -command "update_active"
	$w.config.f.x52.x.menu add radiobutton -label "4MB" -variable tmpvar_5 -value "4MB" -command "update_active"
	$w.config.f.x52.x.menu add radiobutton -label "6MB" -variable tmpvar_5 -value "6MB" -command "update_active"
	$w.config.f.x52.x.menu add radiobutton -label "8MB" -variable tmpvar_5 -value "8MB" -command "update_active"
	$w.config.f.x52.x.menu add radiobutton -label "16MB" -variable tmpvar_5 -value "16MB" -command "update_active"
	menusplit $w $w.config.f.x52.x.menu 8
	global tmpvar_6
	minimenu $w.config.f 3 53 "FLASH bit width" tmpvar_6 CONFIG_FLASHAUTOBIT
	menu $w.config.f.x53.x.menu -tearoffcommand "menutitle \"FLASH bit width\""
	$w.config.f.x53.x.menu add radiobutton -label "AUTO" -variable tmpvar_6 -value "AUTO" -command "update_active"
	$w.config.f.x53.x.menu add radiobutton -label "8bit" -variable tmpvar_6 -value "8bit" -command "update_active"
	$w.config.f.x53.x.menu add radiobutton -label "16bit" -variable tmpvar_6 -value "16bit" -command "update_active"
	$w.config.f.x53.x.menu add radiobutton -label "32bit" -variable tmpvar_6 -value "32bit" -command "update_active"
	menusplit $w $w.config.f.x53.x.menu 4
	bool $w.config.f 3 54 "2nd 1MB flash in /dev/rom8" CONFIG_EXTRA_FLASH1MB
	global tmpvar_7
	minimenu $w.config.f 3 55 "Kernel executes from" tmpvar_7 CONFIG_RAMKERNEL
	menu $w.config.f.x55.x.menu -tearoffcommand "menutitle \"Kernel executes from\""
	$w.config.f.x55.x.menu add radiobutton -label "RAM" -variable tmpvar_7 -value "RAM" -command "update_active"
	$w.config.f.x55.x.menu add radiobutton -label "ROM" -variable tmpvar_7 -value "ROM" -command "update_active"
	$w.config.f.x55.x.menu add radiobutton -label "HIMEM" -variable tmpvar_7 -value "HIMEM" -command "update_active"
	menusplit $w $w.config.f.x55.x.menu 3



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu3 {} {
	global CONFIG_M68328
	global CONFIG_PILOT
	if {($CONFIG_M68328 == 1)} then {
	configure_entry .menu3.config.f.x2 normal {n l y}} else {configure_entry .menu3.config.f.x2 disabled {y n l}}
	global CONFIG_XCOPILOT_BUGS
	if {($CONFIG_M68328 == 1) && ($CONFIG_PILOT == 1)} then {
	configure_entry .menu3.config.f.x3 normal {n l y}} else {configure_entry .menu3.config.f.x3 disabled {y n l}}
	global CONFIG_KERNEL_ELF
	if {($CONFIG_M68328 == 1) && ($CONFIG_PILOT == 1)} then {
	configure_entry .menu3.config.f.x4 normal {n l y}} else {configure_entry .menu3.config.f.x4 disabled {y n l}}
	global CONFIG_PILOT_MEMORY_DISPLAY
	if {($CONFIG_M68328 == 1) && ($CONFIG_PILOT == 1)} then {
	configure_entry .menu3.config.f.x5 normal {n l y}} else {configure_entry .menu3.config.f.x5 disabled {y n l}}
	global CONFIG_PILOT_CONSOLE
	if {($CONFIG_M68328 == 1) && ($CONFIG_PILOT == 1)} then {
	configure_entry .menu3.config.f.x6 normal {n l y}} else {configure_entry .menu3.config.f.x6 disabled {y n l}}
	global CONFIG_M68EZ328
	global CONFIG_M68EZ328ADS
	if {($CONFIG_M68EZ328 == 1)} then {
	configure_entry .menu3.config.f.x7 normal {n l y}} else {configure_entry .menu3.config.f.x7 disabled {y n l}}
	global CONFIG_ALMA_ANS
	if {($CONFIG_M68EZ328 == 1)} then {
	configure_entry .menu3.config.f.x8 normal {n l y}} else {configure_entry .menu3.config.f.x8 disabled {y n l}}
	global CONFIG_UCSIMM
	if {($CONFIG_M68EZ328 == 1)} then {
	configure_entry .menu3.config.f.x9 normal {n l y}} else {configure_entry .menu3.config.f.x9 disabled {y n l}}
	if {($CONFIG_M68EZ328 == 1)} then {
	configure_entry .menu3.config.f.x10 normal {n l y}} else {configure_entry .menu3.config.f.x10 disabled {y n l}}
	global CONFIG_M68VZ328
	global CONFIG_UCDIMM
	if {($CONFIG_M68VZ328 == 1)} then {
	configure_entry .menu3.config.f.x11 normal {n l y}} else {configure_entry .menu3.config.f.x11 disabled {y n l}}
	global CONFIG_DRAGEN2
	if {($CONFIG_M68VZ328 == 1)} then {
	configure_entry .menu3.config.f.x12 normal {n l y}} else {configure_entry .menu3.config.f.x12 disabled {y n l}}
	global CONFIG_HWADDR_FROMEEPROM
	if {($CONFIG_M68VZ328 == 1) && ($CONFIG_DRAGEN2 == 1)} then {
	configure_entry .menu3.config.f.x13 normal {n l y}} else {configure_entry .menu3.config.f.x13 disabled {y n l}}
	global CONFIG_HWADDR_OFFSET
	if {($CONFIG_M68VZ328 == 1) && ($CONFIG_DRAGEN2 == 1) && ($CONFIG_HWADDR_FROMEEPROM == 1)} then {.menu3.config.f.x14.x configure -state normal -foreground [ cget .ref -foreground ]; .menu3.config.f.x14.l configure -state normal; } else {.menu3.config.f.x14.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu3.config.f.x14.l configure -state disabled}
	global CONFIG_M68EN302
	global CONFIG_APLIO
	if {($CONFIG_M68EN302 == 1)} then {
	configure_entry .menu3.config.f.x15 normal {n l y}} else {configure_entry .menu3.config.f.x15 disabled {y n l}}
	global CONFIG_APLIO_PRO
	if {($CONFIG_M68EN302 == 1) && ($CONFIG_APLIO == 1)} then {
	configure_entry .menu3.config.f.x16 normal {n l y}} else {configure_entry .menu3.config.f.x16 disabled {y n l}}
	global CONFIG_APLIO_ENTRECOTE
	if {($CONFIG_M68EN302 == 1) && ($CONFIG_APLIO == 1)} then {
	configure_entry .menu3.config.f.x17 normal {n l y}} else {configure_entry .menu3.config.f.x17 disabled {y n l}}
	global CONFIG_M68332
	global CONFIG_SHGLCORE
	if {($CONFIG_M68332 == 1)} then {
	configure_entry .menu3.config.f.x18 normal {n l y}} else {configure_entry .menu3.config.f.x18 disabled {y n l}}
	global CONFIG_SHGLCORE_2MEG
	if {($CONFIG_M68332 == 1) && ($CONFIG_SHGLCORE == 1)} then {
	configure_entry .menu3.config.f.x19 normal {n l y}} else {configure_entry .menu3.config.f.x19 disabled {y n l}}
	global CONFIG_M5206
	global CONFIG_ARNEWSH
	if {($CONFIG_M5206 == 1)} then {
	configure_entry .menu3.config.f.x20 normal {n l y}} else {configure_entry .menu3.config.f.x20 disabled {y n l}}
	global CONFIG_M5206e
	global CONFIG_CADRE3
	if {($CONFIG_M5206e == 1)} then {
	configure_entry .menu3.config.f.x21 normal {n l y}} else {configure_entry .menu3.config.f.x21 disabled {y n l}}
	global CONFIG_ELITE
	if {($CONFIG_M5206e == 1)} then {
	configure_entry .menu3.config.f.x22 normal {n l y}} else {configure_entry .menu3.config.f.x22 disabled {y n l}}
	global CONFIG_SMALL
	if {($CONFIG_M5206e == 1) && ($CONFIG_ELITE == 1)} then {
	configure_entry .menu3.config.f.x23 normal {n l y}} else {configure_entry .menu3.config.f.x23 disabled {y n l}}
	global CONFIG_NETtel
	if {($CONFIG_M5206e == 1)} then {
	configure_entry .menu3.config.f.x24 normal {n l y}} else {configure_entry .menu3.config.f.x24 disabled {y n l}}
	global CONFIG_TELOS
	if {($CONFIG_M5206e == 1)} then {
	configure_entry .menu3.config.f.x25 normal {n l y}} else {configure_entry .menu3.config.f.x25 disabled {y n l}}
	global CONFIG_CFV240
	if {($CONFIG_M5206e == 1)} then {
	configure_entry .menu3.config.f.x26 normal {n l y}} else {configure_entry .menu3.config.f.x26 disabled {y n l}}
	global CONFIG_M5272
	global CONFIG_MOTOROLA
	if {($CONFIG_M5272 == 1)} then {
	configure_entry .menu3.config.f.x27 normal {n l y}} else {configure_entry .menu3.config.f.x27 disabled {y n l}}
	if {($CONFIG_M5272 == 1)} then {
	configure_entry .menu3.config.f.x28 normal {n l y}} else {configure_entry .menu3.config.f.x28 disabled {y n l}}
	global CONFIG_RESETSWITCH
	if {($CONFIG_M5272 == 1) && ($CONFIG_NETtel == 1 || $CONFIG_NETtel == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NETtel]];set CONFIG_RESETSWITCH [sync_bool $CONFIG_RESETSWITCH $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu3.config.f.x29 disabled {y};} else {configure_entry .menu3.config.f.x29 normal {y};}; configure_entry .menu3.config.f.x29 normal {n l}} else {configure_entry .menu3.config.f.x29 disabled {y n l}}
	global CONFIG_MARCONINAP
	if {($CONFIG_M5272 == 1)} then {
	configure_entry .menu3.config.f.x30 normal {n l y}} else {configure_entry .menu3.config.f.x30 disabled {y n l}}
	global CONFIG_ROMFS_FROM_ROM
	if {($CONFIG_M5272 == 1)} then {
	configure_entry .menu3.config.f.x31 normal {n l y}} else {configure_entry .menu3.config.f.x31 disabled {y n l}}
	global CONFIG_M5307
	if {($CONFIG_M5307 == 1)} then {
	configure_entry .menu3.config.f.x32 normal {n l y}} else {configure_entry .menu3.config.f.x32 disabled {y n l}}
	if {($CONFIG_M5307 == 1)} then {
	configure_entry .menu3.config.f.x33 normal {n l y}} else {configure_entry .menu3.config.f.x33 disabled {y n l}}
	global CONFIG_eLIA
	if {($CONFIG_M5307 == 1)} then {
	configure_entry .menu3.config.f.x34 normal {n l y}} else {configure_entry .menu3.config.f.x34 disabled {y n l}}
	global CONFIG_DISKtel
	if {($CONFIG_M5307 == 1)} then {
	configure_entry .menu3.config.f.x35 normal {n l y}} else {configure_entry .menu3.config.f.x35 disabled {y n l}}
	global CONFIG_SNAPGEAR
	if {($CONFIG_M5307 == 1)} then {
	configure_entry .menu3.config.f.x36 normal {n l y}} else {configure_entry .menu3.config.f.x36 disabled {y n l}}
	global CONFIG_SECUREEDGEMP3
	if {($CONFIG_M5307 == 1)} then {
	configure_entry .menu3.config.f.x37 normal {n l y}} else {configure_entry .menu3.config.f.x37 disabled {y n l}}
	if {($CONFIG_M5307 == 1)} then {
	configure_entry .menu3.config.f.x38 normal {n l y}} else {configure_entry .menu3.config.f.x38 disabled {y n l}}
	global CONFIG_CLEOPATRA
	if {($CONFIG_M5307 == 1)} then {
	configure_entry .menu3.config.f.x39 normal {n l y}} else {configure_entry .menu3.config.f.x39 disabled {y n l}}
	global CONFIG_OLDMASK
	if {($CONFIG_M5307 == 1)} then {
	configure_entry .menu3.config.f.x40 normal {n l y}} else {configure_entry .menu3.config.f.x40 disabled {y n l}}
	global CONFIG_M5407
	if {($CONFIG_M5407 == 1)} then {
	configure_entry .menu3.config.f.x41 normal {n l y}} else {configure_entry .menu3.config.f.x41 disabled {y n l}}
	if {($CONFIG_M5407 == 1)} then {
	configure_entry .menu3.config.f.x42 normal {n l y}} else {configure_entry .menu3.config.f.x42 disabled {y n l}}
	global CONFIG_M68360
	global CONFIG_UCQUICC
	if {($CONFIG_M68360 == 1)} then {
	configure_entry .menu3.config.f.x43 normal {n l y}} else {configure_entry .menu3.config.f.x43 disabled {y n l}}
	global CONFIG_360QUICC
	global CONFIG_M68360_SMC_UART
	if {($CONFIG_360QUICC == 1)} then {
	configure_entry .menu3.config.f.x44 normal {n l y}} else {configure_entry .menu3.config.f.x44 disabled {y n l}}
	global CONFIG_M68360_SCC_UART
	if {($CONFIG_360QUICC == 1)} then {
	configure_entry .menu3.config.f.x45 normal {n l y}} else {configure_entry .menu3.config.f.x45 disabled {y n l}}
	global CONFIG_INIT_LCD
	if {($CONFIG_UCSIMM == 1 || $CONFIG_UCDIMM == 1 || $CONFIG_DRAGEN2 == 1)} then {
	configure_entry .menu3.config.f.x46 normal {n l y}} else {configure_entry .menu3.config.f.x46 disabled {y n l}}
	global CONFIG_MEMORY_RESERVE
	if {($CONFIG_UCSIMM == 1 || $CONFIG_UCDIMM == 1 || $CONFIG_DRAGEN2 == 1)} then {.menu3.config.f.x47.x configure -state normal -foreground [ cget .ref -foreground ]; .menu3.config.f.x47.l configure -state normal; } else {.menu3.config.f.x47.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu3.config.f.x47.l configure -state disabled}
	global CONFIG_AMDFLASH
	global CONFIG_INTELFLASH
	if {($CONFIG_AMDFLASH == 1 || $CONFIG_INTELFLASH == 1)} then {configure_entry .menu3.config.f.x52 normal {x l}} else {configure_entry .menu3.config.f.x52 disabled {x l}}
	if {($CONFIG_AMDFLASH == 1 || $CONFIG_INTELFLASH == 1)} then {configure_entry .menu3.config.f.x53 normal {x l}} else {configure_entry .menu3.config.f.x53 disabled {x l}}
	global CONFIG_FLASH1MB
	global CONFIG_EXTRA_FLASH1MB
	if {($CONFIG_AMDFLASH == 1 || $CONFIG_INTELFLASH == 1) && ($CONFIG_FLASH1MB == 1)} then {
	configure_entry .menu3.config.f.x54 normal {n l y}} else {configure_entry .menu3.config.f.x54 disabled {y n l}}
}


proc update_define_menu3 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_COLDFIRE
	global CONFIG_360QUICC
	global CONFIG_M68360_UART
	global CONFIG_PILOT
set CONFIG_PILOT [expr $CONFIG_PILOT|16]
	global CONFIG_XCOPILOT_BUGS
set CONFIG_XCOPILOT_BUGS [expr $CONFIG_XCOPILOT_BUGS|16]
	global CONFIG_KERNEL_ELF
set CONFIG_KERNEL_ELF [expr $CONFIG_KERNEL_ELF|16]
	global CONFIG_PILOT_MEMORY_DISPLAY
set CONFIG_PILOT_MEMORY_DISPLAY [expr $CONFIG_PILOT_MEMORY_DISPLAY|16]
	global CONFIG_PILOT_CONSOLE
set CONFIG_PILOT_CONSOLE [expr $CONFIG_PILOT_CONSOLE|16]
	global CONFIG_M68EZ328ADS
set CONFIG_M68EZ328ADS [expr $CONFIG_M68EZ328ADS|16]
	global CONFIG_ALMA_ANS
set CONFIG_ALMA_ANS [expr $CONFIG_ALMA_ANS|16]
	global CONFIG_UCSIMM
set CONFIG_UCSIMM [expr $CONFIG_UCSIMM|16]
set CONFIG_PILOT [expr $CONFIG_PILOT|16]
	global CONFIG_UCDIMM
set CONFIG_UCDIMM [expr $CONFIG_UCDIMM|16]
	global CONFIG_DRAGEN2
set CONFIG_DRAGEN2 [expr $CONFIG_DRAGEN2|16]
	global CONFIG_HWADDR_FROMEEPROM
set CONFIG_HWADDR_FROMEEPROM [expr $CONFIG_HWADDR_FROMEEPROM|16]
	global CONFIG_APLIO
set CONFIG_APLIO [expr $CONFIG_APLIO|16]
	global CONFIG_APLIO_PRO
set CONFIG_APLIO_PRO [expr $CONFIG_APLIO_PRO|16]
	global CONFIG_APLIO_ENTRECOTE
set CONFIG_APLIO_ENTRECOTE [expr $CONFIG_APLIO_ENTRECOTE|16]
	global CONFIG_SHGLCORE
set CONFIG_SHGLCORE [expr $CONFIG_SHGLCORE|16]
	global CONFIG_SHGLCORE_2MEG
set CONFIG_SHGLCORE_2MEG [expr $CONFIG_SHGLCORE_2MEG|16]
	global CONFIG_ARNEWSH
set CONFIG_ARNEWSH [expr $CONFIG_ARNEWSH|16]
	global CONFIG_CADRE3
set CONFIG_CADRE3 [expr $CONFIG_CADRE3|16]
	global CONFIG_ELITE
set CONFIG_ELITE [expr $CONFIG_ELITE|16]
	global CONFIG_SMALL
set CONFIG_SMALL [expr $CONFIG_SMALL|16]
	global CONFIG_NETtel
set CONFIG_NETtel [expr $CONFIG_NETtel|16]
	global CONFIG_TELOS
set CONFIG_TELOS [expr $CONFIG_TELOS|16]
	global CONFIG_CFV240
set CONFIG_CFV240 [expr $CONFIG_CFV240|16]
	global CONFIG_MOTOROLA
set CONFIG_MOTOROLA [expr $CONFIG_MOTOROLA|16]
set CONFIG_NETtel [expr $CONFIG_NETtel|16]
	global CONFIG_MARCONINAP
set CONFIG_MARCONINAP [expr $CONFIG_MARCONINAP|16]
	global CONFIG_ROMFS_FROM_ROM
set CONFIG_ROMFS_FROM_ROM [expr $CONFIG_ROMFS_FROM_ROM|16]
set CONFIG_ARNEWSH [expr $CONFIG_ARNEWSH|16]
set CONFIG_NETtel [expr $CONFIG_NETtel|16]
	global CONFIG_eLIA
set CONFIG_eLIA [expr $CONFIG_eLIA|16]
	global CONFIG_DISKtel
set CONFIG_DISKtel [expr $CONFIG_DISKtel|16]
	global CONFIG_SNAPGEAR
set CONFIG_SNAPGEAR [expr $CONFIG_SNAPGEAR|16]
	global CONFIG_SECUREEDGEMP3
set CONFIG_SECUREEDGEMP3 [expr $CONFIG_SECUREEDGEMP3|16]
set CONFIG_CADRE3 [expr $CONFIG_CADRE3|16]
	global CONFIG_CLEOPATRA
set CONFIG_CLEOPATRA [expr $CONFIG_CLEOPATRA|16]
	global CONFIG_OLDMASK
set CONFIG_OLDMASK [expr $CONFIG_OLDMASK|16]
set CONFIG_MOTOROLA [expr $CONFIG_MOTOROLA|16]
set CONFIG_CLEOPATRA [expr $CONFIG_CLEOPATRA|16]
	global CONFIG_UCQUICC
set CONFIG_UCQUICC [expr $CONFIG_UCQUICC|16]
	global CONFIG_M68360_SMC_UART
set CONFIG_M68360_SMC_UART [expr $CONFIG_M68360_SMC_UART|16]
	global CONFIG_M68360_SCC_UART
set CONFIG_M68360_SCC_UART [expr $CONFIG_M68360_SCC_UART|16]
	global CONFIG_INIT_LCD
set CONFIG_INIT_LCD [expr $CONFIG_INIT_LCD|16]
	global CONFIG_EXTRA_FLASH1MB
set CONFIG_EXTRA_FLASH1MB [expr $CONFIG_EXTRA_FLASH1MB|16]
	global tmpvar_0
	global CONFIG_M68000
	if {$tmpvar_0 == "MC68000"} then {set CONFIG_M68000 1} else {set CONFIG_M68000 0}
	global CONFIG_M68EN302
	if {$tmpvar_0 == "MC68EN302"} then {set CONFIG_M68EN302 1} else {set CONFIG_M68EN302 0}
	global CONFIG_M68328
	if {$tmpvar_0 == "MC68328"} then {set CONFIG_M68328 1} else {set CONFIG_M68328 0}
	global CONFIG_M68EZ328
	if {$tmpvar_0 == "MC68EZ328"} then {set CONFIG_M68EZ328 1} else {set CONFIG_M68EZ328 0}
	global CONFIG_M68VZ328
	if {$tmpvar_0 == "MC68VZ328"} then {set CONFIG_M68VZ328 1} else {set CONFIG_M68VZ328 0}
	global CONFIG_M68332
	if {$tmpvar_0 == "MC68332"} then {set CONFIG_M68332 1} else {set CONFIG_M68332 0}
	global CONFIG_M68360
	if {$tmpvar_0 == "MC68360"} then {set CONFIG_M68360 1} else {set CONFIG_M68360 0}
	global CONFIG_M5204
	if {$tmpvar_0 == "MCF5204"} then {set CONFIG_M5204 1} else {set CONFIG_M5204 0}
	global CONFIG_M5206
	if {$tmpvar_0 == "MCF5206"} then {set CONFIG_M5206 1} else {set CONFIG_M5206 0}
	global CONFIG_M5206e
	if {$tmpvar_0 == "MCF5206e"} then {set CONFIG_M5206e 1} else {set CONFIG_M5206e 0}
	global CONFIG_M5272
	if {$tmpvar_0 == "MCF5272"} then {set CONFIG_M5272 1} else {set CONFIG_M5272 0}
	global CONFIG_M5307
	if {$tmpvar_0 == "MCF5307"} then {set CONFIG_M5307 1} else {set CONFIG_M5307 0}
	global CONFIG_M5407
	if {$tmpvar_0 == "MCF5407"} then {set CONFIG_M5407 1} else {set CONFIG_M5407 0}
	if {($CONFIG_M68328 == 1)} then {
	set CONFIG_PILOT [expr $CONFIG_PILOT&15]}
	if {($CONFIG_M68328 == 1) && ($CONFIG_PILOT == 1)} then {
	set CONFIG_XCOPILOT_BUGS [expr $CONFIG_XCOPILOT_BUGS&15]}
	if {($CONFIG_M68328 == 1) && ($CONFIG_PILOT == 1)} then {
	set CONFIG_KERNEL_ELF [expr $CONFIG_KERNEL_ELF&15]}
	if {($CONFIG_M68328 == 1) && ($CONFIG_PILOT == 1)} then {
	set CONFIG_PILOT_MEMORY_DISPLAY [expr $CONFIG_PILOT_MEMORY_DISPLAY&15]}
	if {($CONFIG_M68328 == 1) && ($CONFIG_PILOT == 1)} then {
	set CONFIG_PILOT_CONSOLE [expr $CONFIG_PILOT_CONSOLE&15]}
	if {($CONFIG_M68EZ328 == 1)} then {
	set CONFIG_M68EZ328ADS [expr $CONFIG_M68EZ328ADS&15]}
	if {($CONFIG_M68EZ328 == 1)} then {
	set CONFIG_ALMA_ANS [expr $CONFIG_ALMA_ANS&15]}
	if {($CONFIG_M68EZ328 == 1)} then {
	set CONFIG_UCSIMM [expr $CONFIG_UCSIMM&15]}
	if {($CONFIG_M68EZ328 == 1)} then {
	set CONFIG_PILOT [expr $CONFIG_PILOT&15]}
	if {($CONFIG_M68VZ328 == 1)} then {
	set CONFIG_UCDIMM [expr $CONFIG_UCDIMM&15]}
	if {($CONFIG_M68VZ328 == 1)} then {
	set CONFIG_DRAGEN2 [expr $CONFIG_DRAGEN2&15]}
	if {($CONFIG_M68VZ328 == 1) && ($CONFIG_DRAGEN2 == 1)} then {
	set CONFIG_HWADDR_FROMEEPROM [expr $CONFIG_HWADDR_FROMEEPROM&15]}
	global CONFIG_HWADDR_OFFSET
	if {($CONFIG_M68VZ328 == 1) && ($CONFIG_DRAGEN2 == 1) && ($CONFIG_HWADDR_FROMEEPROM == 1)} then {validate_int CONFIG_HWADDR_OFFSET "$CONFIG_HWADDR_OFFSET" 2}
	if {($CONFIG_M68EN302 == 1)} then {
	set CONFIG_APLIO [expr $CONFIG_APLIO&15]}
	if {($CONFIG_M68EN302 == 1) && ($CONFIG_APLIO == 1)} then {
	set CONFIG_APLIO_PRO [expr $CONFIG_APLIO_PRO&15]}
	if {($CONFIG_M68EN302 == 1) && ($CONFIG_APLIO == 1)} then {
	set CONFIG_APLIO_ENTRECOTE [expr $CONFIG_APLIO_ENTRECOTE&15]}
	if {($CONFIG_M68332 == 1)} then {
	set CONFIG_SHGLCORE [expr $CONFIG_SHGLCORE&15]}
	if {($CONFIG_M68332 == 1) && ($CONFIG_SHGLCORE == 1)} then {
	set CONFIG_SHGLCORE_2MEG [expr $CONFIG_SHGLCORE_2MEG&15]}
	if {($CONFIG_M5204 == 1)} then {	global CONSTANT_Y
set CONFIG_COLDFIRE $CONSTANT_Y }
	if {($CONFIG_M5206 == 1)} then {	global CONSTANT_Y
set CONFIG_COLDFIRE $CONSTANT_Y }
	if {($CONFIG_M5206 == 1)} then {
	set CONFIG_ARNEWSH [expr $CONFIG_ARNEWSH&15]}
	if {($CONFIG_M5206e == 1)} then {	global CONSTANT_Y
set CONFIG_COLDFIRE $CONSTANT_Y }
	if {($CONFIG_M5206e == 1)} then {
	set CONFIG_CADRE3 [expr $CONFIG_CADRE3&15]}
	if {($CONFIG_M5206e == 1)} then {
	set CONFIG_ELITE [expr $CONFIG_ELITE&15]}
	if {($CONFIG_M5206e == 1) && ($CONFIG_ELITE == 1)} then {
	set CONFIG_SMALL [expr $CONFIG_SMALL&15]}
	if {($CONFIG_M5206e == 1)} then {
	set CONFIG_NETtel [expr $CONFIG_NETtel&15]}
	if {($CONFIG_M5206e == 1)} then {
	set CONFIG_TELOS [expr $CONFIG_TELOS&15]}
	if {($CONFIG_M5206e == 1)} then {
	set CONFIG_CFV240 [expr $CONFIG_CFV240&15]}
	if {($CONFIG_M5272 == 1)} then {	global CONSTANT_Y
set CONFIG_COLDFIRE $CONSTANT_Y }
	if {($CONFIG_M5272 == 1)} then {
	set CONFIG_MOTOROLA [expr $CONFIG_MOTOROLA&15]}
	if {($CONFIG_M5272 == 1)} then {
	set CONFIG_NETtel [expr $CONFIG_NETtel&15]}
	global CONFIG_RESETSWITCH
	if {($CONFIG_M5272 == 1) && ($CONFIG_NETtel == 1 || $CONFIG_NETtel == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NETtel]];set CONFIG_RESETSWITCH [sync_bool $CONFIG_RESETSWITCH $tmpvar_dep 0];set CONFIG_RESETSWITCH [expr $CONFIG_RESETSWITCH&15]}
	if {($CONFIG_M5272 == 1)} then {
	set CONFIG_MARCONINAP [expr $CONFIG_MARCONINAP&15]}
	if {($CONFIG_M5272 == 1)} then {
	set CONFIG_ROMFS_FROM_ROM [expr $CONFIG_ROMFS_FROM_ROM&15]}
	if {($CONFIG_M5307 == 1)} then {	global CONSTANT_Y
set CONFIG_COLDFIRE $CONSTANT_Y }
	if {($CONFIG_M5307 == 1)} then {
	set CONFIG_ARNEWSH [expr $CONFIG_ARNEWSH&15]}
	if {($CONFIG_M5307 == 1)} then {
	set CONFIG_NETtel [expr $CONFIG_NETtel&15]}
	if {($CONFIG_M5307 == 1)} then {
	set CONFIG_eLIA [expr $CONFIG_eLIA&15]}
	if {($CONFIG_M5307 == 1)} then {
	set CONFIG_DISKtel [expr $CONFIG_DISKtel&15]}
	if {($CONFIG_M5307 == 1)} then {
	set CONFIG_SNAPGEAR [expr $CONFIG_SNAPGEAR&15]}
	if {($CONFIG_M5307 == 1)} then {
	set CONFIG_SECUREEDGEMP3 [expr $CONFIG_SECUREEDGEMP3&15]}
	if {($CONFIG_M5307 == 1)} then {
	set CONFIG_CADRE3 [expr $CONFIG_CADRE3&15]}
	if {($CONFIG_M5307 == 1)} then {
	set CONFIG_CLEOPATRA [expr $CONFIG_CLEOPATRA&15]}
	if {($CONFIG_M5307 == 1)} then {
	set CONFIG_OLDMASK [expr $CONFIG_OLDMASK&15]}
	if {($CONFIG_M5407 == 1)} then {	global CONSTANT_Y
set CONFIG_COLDFIRE $CONSTANT_Y }
	if {($CONFIG_M5407 == 1)} then {
	set CONFIG_MOTOROLA [expr $CONFIG_MOTOROLA&15]}
	if {($CONFIG_M5407 == 1)} then {
	set CONFIG_CLEOPATRA [expr $CONFIG_CLEOPATRA&15]}
	if {($CONFIG_M68360 == 1)} then {	global CONSTANT_Y
set CONFIG_360QUICC $CONSTANT_Y }
	if {($CONFIG_M68360 == 1)} then {
	set CONFIG_UCQUICC [expr $CONFIG_UCQUICC&15]}
	if {($CONFIG_360QUICC == 1)} then {
	set CONFIG_M68360_SMC_UART [expr $CONFIG_M68360_SMC_UART&15]}
	if {($CONFIG_360QUICC == 1)} then {
	set CONFIG_M68360_SCC_UART [expr $CONFIG_M68360_SCC_UART&15]}
	if {($CONFIG_360QUICC == 1) && ($CONFIG_M68360_SMC_UART == 1 || $CONFIG_M68360_SCC_UART == 1)} then {	global CONSTANT_Y
set CONFIG_M68360_UART $CONSTANT_Y }
	if {($CONFIG_UCSIMM == 1 || $CONFIG_UCDIMM == 1 || $CONFIG_DRAGEN2 == 1)} then {
	set CONFIG_INIT_LCD [expr $CONFIG_INIT_LCD&15]}
	global CONFIG_MEMORY_RESERVE
	if {($CONFIG_UCSIMM == 1 || $CONFIG_UCDIMM == 1 || $CONFIG_DRAGEN2 == 1)} then {validate_int CONFIG_MEMORY_RESERVE "$CONFIG_MEMORY_RESERVE" 0}
	global tmpvar_1
	global CONFIG_CLOCK_AUTO
	if {$tmpvar_1 == "AUTO"} then {set CONFIG_CLOCK_AUTO 1} else {set CONFIG_CLOCK_AUTO 0}
	global CONFIG_CLOCK_16MHz
	if {$tmpvar_1 == "16MHz"} then {set CONFIG_CLOCK_16MHz 1} else {set CONFIG_CLOCK_16MHz 0}
	global CONFIG_CLOCK_20MHz
	if {$tmpvar_1 == "20MHz"} then {set CONFIG_CLOCK_20MHz 1} else {set CONFIG_CLOCK_20MHz 0}
	global CONFIG_CLOCK_25MHz
	if {$tmpvar_1 == "25MHz"} then {set CONFIG_CLOCK_25MHz 1} else {set CONFIG_CLOCK_25MHz 0}
	global CONFIG_CLOCK_33MHz
	if {$tmpvar_1 == "33MHz"} then {set CONFIG_CLOCK_33MHz 1} else {set CONFIG_CLOCK_33MHz 0}
	global CONFIG_CLOCK_40MHz
	if {$tmpvar_1 == "40MHz"} then {set CONFIG_CLOCK_40MHz 1} else {set CONFIG_CLOCK_40MHz 0}
	global CONFIG_CLOCK_45MHz
	if {$tmpvar_1 == "45MHz"} then {set CONFIG_CLOCK_45MHz 1} else {set CONFIG_CLOCK_45MHz 0}
	global CONFIG_CLOCK_50MHz
	if {$tmpvar_1 == "50MHz"} then {set CONFIG_CLOCK_50MHz 1} else {set CONFIG_CLOCK_50MHz 0}
	global CONFIG_CLOCK_54MHz
	if {$tmpvar_1 == "54MHz"} then {set CONFIG_CLOCK_54MHz 1} else {set CONFIG_CLOCK_54MHz 0}
	global CONFIG_CLOCK_60MHz
	if {$tmpvar_1 == "60MHz"} then {set CONFIG_CLOCK_60MHz 1} else {set CONFIG_CLOCK_60MHz 0}
	global CONFIG_CLOCK_66MHz
	if {$tmpvar_1 == "66MHz"} then {set CONFIG_CLOCK_66MHz 1} else {set CONFIG_CLOCK_66MHz 0}
	global tmpvar_2
	global CONFIG_RAMAUTO
	if {$tmpvar_2 == "AUTO"} then {set CONFIG_RAMAUTO 1} else {set CONFIG_RAMAUTO 0}
	global CONFIG_RAM4MB
	if {$tmpvar_2 == "4MB"} then {set CONFIG_RAM4MB 1} else {set CONFIG_RAM4MB 0}
	global CONFIG_RAM8MB
	if {$tmpvar_2 == "8MB"} then {set CONFIG_RAM8MB 1} else {set CONFIG_RAM8MB 0}
	global CONFIG_RAM16MB
	if {$tmpvar_2 == "16MB"} then {set CONFIG_RAM16MB 1} else {set CONFIG_RAM16MB 0}
	global CONFIG_RAM32MB
	if {$tmpvar_2 == "32MB"} then {set CONFIG_RAM32MB 1} else {set CONFIG_RAM32MB 0}
	global tmpvar_3
	global CONFIG_AUTOBIT
	if {$tmpvar_3 == "AUTO"} then {set CONFIG_AUTOBIT 1} else {set CONFIG_AUTOBIT 0}
	global CONFIG_RAM8BIT
	if {$tmpvar_3 == "8bit"} then {set CONFIG_RAM8BIT 1} else {set CONFIG_RAM8BIT 0}
	global CONFIG_RAM16BIT
	if {$tmpvar_3 == "16bit"} then {set CONFIG_RAM16BIT 1} else {set CONFIG_RAM16BIT 0}
	global CONFIG_RAM32bit
	if {$tmpvar_3 == "32bit"} then {set CONFIG_RAM32bit 1} else {set CONFIG_RAM32bit 0}
	global tmpvar_4
	global CONFIG_NOFLASH
	if {$tmpvar_4 == "NONE"} then {set CONFIG_NOFLASH 1} else {set CONFIG_NOFLASH 0}
	global CONFIG_AMDFLASH
	if {$tmpvar_4 == "AMD"} then {set CONFIG_AMDFLASH 1} else {set CONFIG_AMDFLASH 0}
	global CONFIG_INTELFLASH
	if {$tmpvar_4 == "INTEL"} then {set CONFIG_INTELFLASH 1} else {set CONFIG_INTELFLASH 0}
	global tmpvar_5
	global CONFIG_FLASHAUTO
	if {$tmpvar_5 == "AUTO"} then {set CONFIG_FLASHAUTO 1} else {set CONFIG_FLASHAUTO 0}
	global CONFIG_FLASH128KB
	if {$tmpvar_5 == "128KB"} then {set CONFIG_FLASH128KB 1} else {set CONFIG_FLASH128KB 0}
	global CONFIG_FLASH1MB
	if {$tmpvar_5 == "1MB"} then {set CONFIG_FLASH1MB 1} else {set CONFIG_FLASH1MB 0}
	global CONFIG_FLASH2MB
	if {$tmpvar_5 == "2MB"} then {set CONFIG_FLASH2MB 1} else {set CONFIG_FLASH2MB 0}
	global CONFIG_FLASH4MB
	if {$tmpvar_5 == "4MB"} then {set CONFIG_FLASH4MB 1} else {set CONFIG_FLASH4MB 0}
	global CONFIG_FLASH6MB
	if {$tmpvar_5 == "6MB"} then {set CONFIG_FLASH6MB 1} else {set CONFIG_FLASH6MB 0}
	global CONFIG_FLASH8MB
	if {$tmpvar_5 == "8MB"} then {set CONFIG_FLASH8MB 1} else {set CONFIG_FLASH8MB 0}
	global CONFIG_FLASH16MB
	if {$tmpvar_5 == "16MB"} then {set CONFIG_FLASH16MB 1} else {set CONFIG_FLASH16MB 0}
	global tmpvar_6
	global CONFIG_FLASHAUTOBIT
	if {$tmpvar_6 == "AUTO"} then {set CONFIG_FLASHAUTOBIT 1} else {set CONFIG_FLASHAUTOBIT 0}
	global CONFIG_FLASH8BIT
	if {$tmpvar_6 == "8bit"} then {set CONFIG_FLASH8BIT 1} else {set CONFIG_FLASH8BIT 0}
	global CONFIG_FLASH16BIT
	if {$tmpvar_6 == "16bit"} then {set CONFIG_FLASH16BIT 1} else {set CONFIG_FLASH16BIT 0}
	global CONFIG_FLASH32bit
	if {$tmpvar_6 == "32bit"} then {set CONFIG_FLASH32bit 1} else {set CONFIG_FLASH32bit 0}
	if {($CONFIG_AMDFLASH == 1 || $CONFIG_INTELFLASH == 1) && ($CONFIG_FLASH1MB == 1)} then {
	set CONFIG_EXTRA_FLASH1MB [expr $CONFIG_EXTRA_FLASH1MB&15]}
	global tmpvar_7
	global CONFIG_RAMKERNEL
	if {$tmpvar_7 == "RAM"} then {set CONFIG_RAMKERNEL 1} else {set CONFIG_RAMKERNEL 0}
	global CONFIG_ROMKERNEL
	if {$tmpvar_7 == "ROM"} then {set CONFIG_ROMKERNEL 1} else {set CONFIG_ROMKERNEL 0}
	global CONFIG_HIMEMKERNEL
	if {$tmpvar_7 == "HIMEM"} then {set CONFIG_HIMEMKERNEL 1} else {set CONFIG_HIMEMKERNEL 0}
}


menu_option menu4 4 "General setup"
proc menu4 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 4}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 4]]
	message $w.m -width 400 -aspect 300 -text \
		"General setup"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "General setup" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 4; break"
	set nextscript "catch {focus $oldFocus}; menu5 .menu5 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 4"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 4; menu3 .menu3 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 4; menu3 .menu3 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 4 0 "Networking support" CONFIG_NET
	bool $w.config.f 4 1 "SGI Visual Workstation support" CONFIG_VISWS
	bool $w.config.f 4 2 "PCI support" CONFIG_PCI
	global tmpvar_8
	minimenu $w.config.f 4 3 "  PCI access mode" tmpvar_8 CONFIG_PCI_GOBIOS
	menu $w.config.f.x3.x.menu -tearoffcommand "menutitle \"  PCI access mode\""
	$w.config.f.x3.x.menu add radiobutton -label "BIOS" -variable tmpvar_8 -value "BIOS" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "Direct" -variable tmpvar_8 -value "Direct" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "Any" -variable tmpvar_8 -value "Any" -command "update_active"
	menusplit $w $w.config.f.x3.x.menu 3
	bool $w.config.f 4 4 "PCI device name database" CONFIG_PCI_NAMES
	bool $w.config.f 4 5 "MCA support" CONFIG_MCA
	bool $w.config.f 4 6 "Support for hot-pluggable devices" CONFIG_HOTPLUG
	submenu $w.config.f 4 7 "PCMCIA/CardBus support" 5
	bool $w.config.f 4 8 "System V IPC" CONFIG_SYSVIPC
	bool $w.config.f 4 9 "BSD Process Accounting" CONFIG_BSD_PROCESS_ACCT
	bool $w.config.f 4 10 "Sysctl support" CONFIG_SYSCTL
	global tmpvar_9
	minimenu $w.config.f 4 11 "Kernel core (/proc/kcore) format" tmpvar_9 CONFIG_KCORE_ELF
	menu $w.config.f.x11.x.menu -tearoffcommand "menutitle \"Kernel core (/proc/kcore) format\""
	$w.config.f.x11.x.menu add radiobutton -label "ELF" -variable tmpvar_9 -value "ELF" -command "update_active"
	$w.config.f.x11.x.menu add radiobutton -label "A.OUT" -variable tmpvar_9 -value "A.OUT" -command "update_active"
	menusplit $w $w.config.f.x11.x.menu 2
	tristate $w.config.f 4 12 "Kernel support for flat binaries" CONFIG_BINFMT_FLAT
	bool $w.config.f 4 13 "    Enable ZFLAT support" CONFIG_BINFMT_ZFLAT
	tristate $w.config.f 4 14 "Kernel support for a.out binaries" CONFIG_BINFMT_AOUT
	tristate $w.config.f 4 15 "Kernel support for ELF binaries" CONFIG_BINFMT_ELF
	tristate $w.config.f 4 16 "Kernel support for MISC binaries" CONFIG_BINFMT_MISC
	bool $w.config.f 4 17 "Power Management support" CONFIG_PM
	dep_bool $w.config.f 4 18 "  ACPI support" CONFIG_ACPI
	bool $w.config.f 4 19 "    ACPI interpreter (EXPERIMENTAL)" CONFIG_ACPI_INTERPRETER
	bool $w.config.f 4 20 "    Enter S1 for sleep (EXPERIMENTAL)" CONFIG_ACPI_S1_SLEEP
	dep_tristate $w.config.f 4 21 "  Advanced Power Management BIOS support" CONFIG_APM
	bool $w.config.f 4 22 "    Ignore USER SUSPEND" CONFIG_APM_IGNORE_USER_SUSPEND
	bool $w.config.f 4 23 "    Enable PM at boot time" CONFIG_APM_DO_ENABLE
	bool $w.config.f 4 24 "    Make CPU Idle calls when idle" CONFIG_APM_CPU_IDLE
	bool $w.config.f 4 25 "    Enable console blanking using APM" CONFIG_APM_DISPLAY_BLANK
	bool $w.config.f 4 26 "    RTC stores time in GMT" CONFIG_APM_RTC_IS_GMT
	bool $w.config.f 4 27 "    Allow interrupts during APM BIOS calls" CONFIG_APM_ALLOW_INTS
	bool $w.config.f 4 28 "    Use real mode APM BIOS call to power off" CONFIG_APM_REAL_MODE_POWER_OFF



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu4 {} {
	global CONFIG_VISWS
	global CONFIG_PCI
	if {($CONFIG_VISWS != 1)} then {
	configure_entry .menu4.config.f.x2 normal {n l y}} else {configure_entry .menu4.config.f.x2 disabled {y n l}}
	if {($CONFIG_VISWS != 1) && ($CONFIG_PCI == 1)} then {configure_entry .menu4.config.f.x3 normal {x l}} else {configure_entry .menu4.config.f.x3 disabled {x l}}
	global CONFIG_PCI_NAMES
	if {($CONFIG_PCI == 1)} then {
	configure_entry .menu4.config.f.x4 normal {n l y}} else {configure_entry .menu4.config.f.x4 disabled {y n l}}
	global CONFIG_MCA
	if {($CONFIG_VISWS != 1)} then {
	configure_entry .menu4.config.f.x5 normal {n l y}} else {configure_entry .menu4.config.f.x5 disabled {y n l}}
	global CONFIG_HOTPLUG
	if {($CONFIG_HOTPLUG == 1)} then {configure_entry .menu4.config.f.x7 normal {m}} else {configure_entry .menu4.config.f.x7 disabled {m}}
	global CONFIG_PROC_FS
	if {($CONFIG_PROC_FS == 1)} then {configure_entry .menu4.config.f.x11 normal {x l}} else {configure_entry .menu4.config.f.x11 disabled {x l}}
	global CONFIG_BINFMT_FLAT
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu4.config.f.x12 normal {m}} else {configure_entry .menu4.config.f.x12 disabled {m}}
	global CONFIG_BINFMT_ZFLAT
	if {($CONFIG_BINFMT_FLAT != 0)} then {
	configure_entry .menu4.config.f.x13 normal {n l y}} else {configure_entry .menu4.config.f.x13 disabled {y n l}}
	global CONFIG_BINFMT_AOUT

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu4.config.f.x14 normal {m}} else {configure_entry .menu4.config.f.x14 disabled {m}}
	global CONFIG_BINFMT_ELF

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu4.config.f.x15 normal {m}} else {configure_entry .menu4.config.f.x15 disabled {m}}
	global CONFIG_BINFMT_MISC

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu4.config.f.x16 normal {m}} else {configure_entry .menu4.config.f.x16 disabled {m}}
	global CONFIG_PM
	global CONFIG_ACPI
	if {($CONFIG_PM == 1 || $CONFIG_PM == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PM]];set CONFIG_ACPI [sync_bool $CONFIG_ACPI $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu4.config.f.x18 disabled {y};} else {configure_entry .menu4.config.f.x18 normal {y};}; configure_entry .menu4.config.f.x18 normal {n l}} else {configure_entry .menu4.config.f.x18 disabled {y n l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_ACPI_INTERPRETER
	if {($CONFIG_ACPI != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu4.config.f.x19 normal {n l y}} else {configure_entry .menu4.config.f.x19 disabled {y n l}}
	global CONFIG_ACPI_S1_SLEEP
	if {($CONFIG_ACPI != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu4.config.f.x20 normal {n l y}} else {configure_entry .menu4.config.f.x20 disabled {y n l}}
	global CONFIG_APM
	if {($CONFIG_PM == 1 || $CONFIG_PM == 2 || $CONFIG_PM == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PM]];set CONFIG_APM [sync_tristate $CONFIG_APM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu4.config.f.x21 disabled {y}} else {configure_entry .menu4.config.f.x21 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu4.config.f.x21 disabled {m}} else {configure_entry .menu4.config.f.x21 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu4.config.f.x21 normal {m}} else {configure_entry .menu4.config.f.x21 disabled {m}}; configure_entry .menu4.config.f.x21 normal {n l}} else {configure_entry .menu4.config.f.x21 disabled {y n m l}}
	global CONFIG_APM_IGNORE_USER_SUSPEND
	if {($CONFIG_APM != 0)} then {
	configure_entry .menu4.config.f.x22 normal {n l y}} else {configure_entry .menu4.config.f.x22 disabled {y n l}}
	global CONFIG_APM_DO_ENABLE
	if {($CONFIG_APM != 0)} then {
	configure_entry .menu4.config.f.x23 normal {n l y}} else {configure_entry .menu4.config.f.x23 disabled {y n l}}
	global CONFIG_APM_CPU_IDLE
	if {($CONFIG_APM != 0)} then {
	configure_entry .menu4.config.f.x24 normal {n l y}} else {configure_entry .menu4.config.f.x24 disabled {y n l}}
	global CONFIG_APM_DISPLAY_BLANK
	if {($CONFIG_APM != 0)} then {
	configure_entry .menu4.config.f.x25 normal {n l y}} else {configure_entry .menu4.config.f.x25 disabled {y n l}}
	global CONFIG_APM_RTC_IS_GMT
	if {($CONFIG_APM != 0)} then {
	configure_entry .menu4.config.f.x26 normal {n l y}} else {configure_entry .menu4.config.f.x26 disabled {y n l}}
	global CONFIG_APM_ALLOW_INTS
	if {($CONFIG_APM != 0)} then {
	configure_entry .menu4.config.f.x27 normal {n l y}} else {configure_entry .menu4.config.f.x27 disabled {y n l}}
	global CONFIG_APM_REAL_MODE_POWER_OFF
	if {($CONFIG_APM != 0)} then {
	configure_entry .menu4.config.f.x28 normal {n l y}} else {configure_entry .menu4.config.f.x28 disabled {y n l}}
}


proc update_define_menu4 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_X86_VISWS_APIC
	global CONFIG_X86_LOCAL_APIC
	global CONFIG_PCI
	global CONFIG_PCI_BIOS
	global CONFIG_PCI_DIRECT
	global CONFIG_PCMCIA
	global CONFIG_BINFMT_FLAT
	global CONFIG_BINFMT_AOUT
	global CONFIG_BINFMT_ELF
	global CONFIG_BINFMT_MISC
set CONFIG_PCI [expr $CONFIG_PCI|16]
	global CONFIG_PCI_NAMES
set CONFIG_PCI_NAMES [expr $CONFIG_PCI_NAMES|16]
	global CONFIG_MCA
set CONFIG_MCA [expr $CONFIG_MCA|16]
	global CONFIG_BINFMT_ZFLAT
set CONFIG_BINFMT_ZFLAT [expr $CONFIG_BINFMT_ZFLAT|16]
	global CONFIG_ACPI_INTERPRETER
set CONFIG_ACPI_INTERPRETER [expr $CONFIG_ACPI_INTERPRETER|16]
	global CONFIG_ACPI_S1_SLEEP
set CONFIG_ACPI_S1_SLEEP [expr $CONFIG_ACPI_S1_SLEEP|16]
	global CONFIG_APM_IGNORE_USER_SUSPEND
set CONFIG_APM_IGNORE_USER_SUSPEND [expr $CONFIG_APM_IGNORE_USER_SUSPEND|16]
	global CONFIG_APM_DO_ENABLE
set CONFIG_APM_DO_ENABLE [expr $CONFIG_APM_DO_ENABLE|16]
	global CONFIG_APM_CPU_IDLE
set CONFIG_APM_CPU_IDLE [expr $CONFIG_APM_CPU_IDLE|16]
	global CONFIG_APM_DISPLAY_BLANK
set CONFIG_APM_DISPLAY_BLANK [expr $CONFIG_APM_DISPLAY_BLANK|16]
	global CONFIG_APM_RTC_IS_GMT
set CONFIG_APM_RTC_IS_GMT [expr $CONFIG_APM_RTC_IS_GMT|16]
	global CONFIG_APM_ALLOW_INTS
set CONFIG_APM_ALLOW_INTS [expr $CONFIG_APM_ALLOW_INTS|16]
	global CONFIG_APM_REAL_MODE_POWER_OFF
set CONFIG_APM_REAL_MODE_POWER_OFF [expr $CONFIG_APM_REAL_MODE_POWER_OFF|16]
	global CONFIG_VISWS
	if {($CONFIG_VISWS == 1)} then {	global CONSTANT_Y
set CONFIG_X86_VISWS_APIC $CONSTANT_Y }
	if {($CONFIG_VISWS == 1)} then {	global CONSTANT_Y
set CONFIG_X86_LOCAL_APIC $CONSTANT_Y }
	if {($CONFIG_VISWS == 1)} then {	global CONSTANT_Y
set CONFIG_PCI $CONSTANT_Y }
	if {($CONFIG_VISWS != 1)} then {
	set CONFIG_PCI [expr $CONFIG_PCI&15]}
	global tmpvar_8
	global CONFIG_PCI_GOBIOS
	if {$tmpvar_8 == "BIOS"} then {set CONFIG_PCI_GOBIOS 1} else {set CONFIG_PCI_GOBIOS 0}
	global CONFIG_PCI_GODIRECT
	if {$tmpvar_8 == "Direct"} then {set CONFIG_PCI_GODIRECT 1} else {set CONFIG_PCI_GODIRECT 0}
	global CONFIG_PCI_GOANY
	if {$tmpvar_8 == "Any"} then {set CONFIG_PCI_GOANY 1} else {set CONFIG_PCI_GOANY 0}
	if {($CONFIG_VISWS != 1) && ($CONFIG_PCI == 1) && ($CONFIG_PCI_GOBIOS == 1 || $CONFIG_PCI_GOANY == 1)} then {	global CONSTANT_Y
set CONFIG_PCI_BIOS $CONSTANT_Y }
	if {($CONFIG_VISWS != 1) && ($CONFIG_PCI == 1) && ($CONFIG_PCI_GODIRECT == 1 || $CONFIG_PCI_GOANY == 1)} then {	global CONSTANT_Y
set CONFIG_PCI_DIRECT $CONSTANT_Y }
	if {($CONFIG_PCI == 1)} then {
	set CONFIG_PCI_NAMES [expr $CONFIG_PCI_NAMES&15]}
	if {($CONFIG_VISWS != 1)} then {
	set CONFIG_MCA [expr $CONFIG_MCA&15]}
	global CONFIG_HOTPLUG
	if {($CONFIG_HOTPLUG != 1)} then {	global CONSTANT_N
set CONFIG_PCMCIA $CONSTANT_N }
	global tmpvar_9
	global CONFIG_KCORE_ELF
	if {$tmpvar_9 == "ELF"} then {set CONFIG_KCORE_ELF 1} else {set CONFIG_KCORE_ELF 0}
	global CONFIG_KCORE_AOUT
	if {$tmpvar_9 == "A.OUT"} then {set CONFIG_KCORE_AOUT 1} else {set CONFIG_KCORE_AOUT 0}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BINFMT_FLAT == 2)} then {set CONFIG_BINFMT_FLAT 1}}
	if {($CONFIG_BINFMT_FLAT != 0)} then {
	set CONFIG_BINFMT_ZFLAT [expr $CONFIG_BINFMT_ZFLAT&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BINFMT_AOUT == 2)} then {set CONFIG_BINFMT_AOUT 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BINFMT_ELF == 2)} then {set CONFIG_BINFMT_ELF 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BINFMT_MISC == 2)} then {set CONFIG_BINFMT_MISC 1}}
	global CONFIG_PM
	global CONFIG_ACPI
	if {($CONFIG_PM == 1 || $CONFIG_PM == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PM]];set CONFIG_ACPI [sync_bool $CONFIG_ACPI $tmpvar_dep 0];set CONFIG_ACPI [expr $CONFIG_ACPI&15]}
	global CONFIG_EXPERIMENTAL
	if {($CONFIG_ACPI != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_ACPI_INTERPRETER [expr $CONFIG_ACPI_INTERPRETER&15]}
	if {($CONFIG_ACPI != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_ACPI_S1_SLEEP [expr $CONFIG_ACPI_S1_SLEEP&15]}
	global CONFIG_APM
	if {($CONFIG_PM == 1 || $CONFIG_PM == 2 || $CONFIG_PM == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PM]]; set CONFIG_APM [sync_tristate $CONFIG_APM $tmpvar_dep]; set CONFIG_APM [expr $CONFIG_APM&15]}
	if {($CONFIG_APM != 0)} then {
	set CONFIG_APM_IGNORE_USER_SUSPEND [expr $CONFIG_APM_IGNORE_USER_SUSPEND&15]}
	if {($CONFIG_APM != 0)} then {
	set CONFIG_APM_DO_ENABLE [expr $CONFIG_APM_DO_ENABLE&15]}
	if {($CONFIG_APM != 0)} then {
	set CONFIG_APM_CPU_IDLE [expr $CONFIG_APM_CPU_IDLE&15]}
	if {($CONFIG_APM != 0)} then {
	set CONFIG_APM_DISPLAY_BLANK [expr $CONFIG_APM_DISPLAY_BLANK&15]}
	if {($CONFIG_APM != 0)} then {
	set CONFIG_APM_RTC_IS_GMT [expr $CONFIG_APM_RTC_IS_GMT&15]}
	if {($CONFIG_APM != 0)} then {
	set CONFIG_APM_ALLOW_INTS [expr $CONFIG_APM_ALLOW_INTS&15]}
	if {($CONFIG_APM != 0)} then {
	set CONFIG_APM_REAL_MODE_POWER_OFF [expr $CONFIG_APM_REAL_MODE_POWER_OFF&15]}
}


proc menu5 {w title} {
	set oldFocus [focus]
	catch {focus .menu4}
	catch {destroy $w; unregister_active 5}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 5]]
	message $w.m -width 400 -aspect 300 -text \
		"PCMCIA/CardBus support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "PCMCIA/CardBus support" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 5; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 5; catch {destroy .menu4}; unregister_active 4; menu6 .menu6 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 5"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 5; menu4 .menu4 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 5; menu4 .menu4 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 5 0 "PCMCIA/CardBus support" CONFIG_PCMCIA
	bool $w.config.f 5 1 "  CardBus support" CONFIG_CARDBUS
	dep_bool $w.config.f 5 2 "  i82092 compatible bridge support" CONFIG_I82092
	bool $w.config.f 5 3 "  i82365 compatible bridge support" CONFIG_I82365
	bool $w.config.f 5 4 "  Databook TCIC host bridge support" CONFIG_TCIC
	dep_tristate $w.config.f 5 5 "  CLPS6700 support" CONFIG_PCMCIA_CLPS6700
	dep_tristate $w.config.f 5 6 "  SA1100 support" CONFIG_PCMCIA_SA1100



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu4] == 0} then {menu4 .menu4 "General setup"}
	set winx [expr [winfo x .menu4]+30]; set winy [expr [winfo y .menu4]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu5 {} {
	global CONFIG_MODULES
	global CONFIG_HOTPLUG
	global CONFIG_PCMCIA
	if {($CONFIG_HOTPLUG == 1)} then {
	configure_entry .menu5.config.f.x0 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu5.config.f.x0 normal {m}} else {configure_entry .menu5.config.f.x0 disabled {m}}; configure_entry .menu5.config.f.x0 normal {n l}} else {configure_entry .menu5.config.f.x0 disabled {y n m l}}
	global CONFIG_PCI
	global CONFIG_CARDBUS
	if {($CONFIG_HOTPLUG == 1) && ($CONFIG_PCMCIA != 0) && ($CONFIG_PCI != 0)} then {
	configure_entry .menu5.config.f.x1 normal {n l y}} else {configure_entry .menu5.config.f.x1 disabled {y n l}}
	global CONFIG_I82092
	if {($CONFIG_HOTPLUG == 1) && ($CONFIG_PCMCIA != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_I82092 [sync_bool $CONFIG_I82092 $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu5.config.f.x2 disabled {y};} else {configure_entry .menu5.config.f.x2 normal {y};}; configure_entry .menu5.config.f.x2 normal {n l}} else {configure_entry .menu5.config.f.x2 disabled {y n l}}
	global CONFIG_I82365
	if {($CONFIG_HOTPLUG == 1) && ($CONFIG_PCMCIA != 0)} then {
	configure_entry .menu5.config.f.x3 normal {n l y}} else {configure_entry .menu5.config.f.x3 disabled {y n l}}
	global CONFIG_TCIC
	if {($CONFIG_HOTPLUG == 1) && ($CONFIG_PCMCIA != 0)} then {
	configure_entry .menu5.config.f.x4 normal {n l y}} else {configure_entry .menu5.config.f.x4 disabled {y n l}}
	global CONFIG_ARCH_CLPS711X
	global CONFIG_PCMCIA_CLPS6700
	if {($CONFIG_HOTPLUG == 1) && ($CONFIG_ARCH_CLPS711X == 1 || $CONFIG_ARCH_CLPS711X == 2 || $CONFIG_ARCH_CLPS711X == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCH_CLPS711X $CONFIG_PCMCIA]];set CONFIG_PCMCIA_CLPS6700 [sync_tristate $CONFIG_PCMCIA_CLPS6700 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu5.config.f.x5 disabled {y}} else {configure_entry .menu5.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu5.config.f.x5 disabled {m}} else {configure_entry .menu5.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu5.config.f.x5 normal {m}} else {configure_entry .menu5.config.f.x5 disabled {m}}; configure_entry .menu5.config.f.x5 normal {n l}} else {configure_entry .menu5.config.f.x5 disabled {y n m l}}
	global CONFIG_ARCH_SA1100
	global CONFIG_PCMCIA_SA1100
	if {($CONFIG_HOTPLUG == 1) && ($CONFIG_ARCH_SA1100 == 1 || $CONFIG_ARCH_SA1100 == 2 || $CONFIG_ARCH_SA1100 == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCH_SA1100 $CONFIG_PCMCIA]];set CONFIG_PCMCIA_SA1100 [sync_tristate $CONFIG_PCMCIA_SA1100 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu5.config.f.x6 disabled {y}} else {configure_entry .menu5.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu5.config.f.x6 disabled {m}} else {configure_entry .menu5.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu5.config.f.x6 normal {m}} else {configure_entry .menu5.config.f.x6 disabled {m}}; configure_entry .menu5.config.f.x6 normal {n l}} else {configure_entry .menu5.config.f.x6 disabled {y n m l}}
}


proc update_define_menu5 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_PCMCIA
set CONFIG_PCMCIA [expr $CONFIG_PCMCIA|16]
	global CONFIG_CARDBUS
set CONFIG_CARDBUS [expr $CONFIG_CARDBUS|16]
	global CONFIG_I82365
set CONFIG_I82365 [expr $CONFIG_I82365|16]
	global CONFIG_TCIC
set CONFIG_TCIC [expr $CONFIG_TCIC|16]
	global CONFIG_HOTPLUG
	if {($CONFIG_HOTPLUG == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_PCMCIA == 2)} then {set CONFIG_PCMCIA 1}; set CONFIG_PCMCIA [expr $CONFIG_PCMCIA&15]}
	global CONFIG_PCI
	if {($CONFIG_HOTPLUG == 1) && ($CONFIG_PCMCIA != 0) && ($CONFIG_PCI != 0)} then {
	set CONFIG_CARDBUS [expr $CONFIG_CARDBUS&15]}
	global CONFIG_I82092
	if {($CONFIG_HOTPLUG == 1) && ($CONFIG_PCMCIA != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_I82092 [sync_bool $CONFIG_I82092 $tmpvar_dep 0];set CONFIG_I82092 [expr $CONFIG_I82092&15]}
	if {($CONFIG_HOTPLUG == 1) && ($CONFIG_PCMCIA != 0)} then {
	set CONFIG_I82365 [expr $CONFIG_I82365&15]}
	if {($CONFIG_HOTPLUG == 1) && ($CONFIG_PCMCIA != 0)} then {
	set CONFIG_TCIC [expr $CONFIG_TCIC&15]}
	global CONFIG_ARCH_CLPS711X
	global CONFIG_PCMCIA_CLPS6700
	if {($CONFIG_HOTPLUG == 1) && ($CONFIG_ARCH_CLPS711X == 1 || $CONFIG_ARCH_CLPS711X == 2 || $CONFIG_ARCH_CLPS711X == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCH_CLPS711X $CONFIG_PCMCIA]]; set CONFIG_PCMCIA_CLPS6700 [sync_tristate $CONFIG_PCMCIA_CLPS6700 $tmpvar_dep]; set CONFIG_PCMCIA_CLPS6700 [expr $CONFIG_PCMCIA_CLPS6700&15]}
	global CONFIG_ARCH_SA1100
	global CONFIG_PCMCIA_SA1100
	if {($CONFIG_HOTPLUG == 1) && ($CONFIG_ARCH_SA1100 == 1 || $CONFIG_ARCH_SA1100 == 2 || $CONFIG_ARCH_SA1100 == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCH_SA1100 $CONFIG_PCMCIA]]; set CONFIG_PCMCIA_SA1100 [sync_tristate $CONFIG_PCMCIA_SA1100 $tmpvar_dep]; set CONFIG_PCMCIA_SA1100 [expr $CONFIG_PCMCIA_SA1100&15]}
}


menu_option menu6 6 "Memory Technology Devices (MTD)"
proc menu6 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 6}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 6]]
	message $w.m -width 400 -aspect 300 -text \
		"Memory Technology Devices (MTD)"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Memory Technology Devices (MTD)" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 6; break"
	set nextscript "catch {focus $oldFocus}; menu7 .menu7 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 6"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 6; menu5 .menu5 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 6; menu5 .menu5 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 6 0 "Memory Technology Device (MTD) support" CONFIG_MTD
	bool $w.config.f 6 1 "Debugging" CONFIG_MTD_DEBUG
	int $w.config.f 6 2 "  Debugging verbosity (0 = quiet, 3 = noisy)" CONFIG_MTD_DEBUG_VERBOSE
	dep_tristate $w.config.f 6 3 "  MTD partitioning support" CONFIG_MTD_PARTITIONS
	dep_tristate $w.config.f 6 4 "  RedBoot partition table parsing" CONFIG_MTD_REDBOOT_PARTS
	comment $w.config.f 6 5 "User Modules And Translation Layers"
	dep_tristate $w.config.f 6 6 "  Direct char device access to MTD devices" CONFIG_MTD_CHAR
	dep_tristate $w.config.f 6 7 "  Caching block device access to MTD devices" CONFIG_MTD_BLOCK
	dep_tristate $w.config.f 6 8 "  Readonly block device access to MTD devices" CONFIG_MTD_BLOCK_RO
	dep_tristate $w.config.f 6 9 "  FTL (Flash Translation Layer) support" CONFIG_FTL
	dep_tristate $w.config.f 6 10 "  NFTL (NAND Flash Translation Layer) support" CONFIG_NFTL
	bool $w.config.f 6 11 "    Write support for NFTL (BETA)" CONFIG_NFTL_RW
	submenu $w.config.f 6 12 "RAM/ROM/Flash chip drivers" 7
	submenu $w.config.f 6 13 "Mapping drivers for chip access" 8
	submenu $w.config.f 6 14 "Self-contained MTD device drivers" 9
	submenu $w.config.f 6 15 "NAND Flash Device Drivers" 10



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu6 {} {
	global CONFIG_MTD
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu6.config.f.x0 normal {m}} else {configure_entry .menu6.config.f.x0 disabled {m}}
	global CONFIG_MTD_DEBUG
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2)} then {
	configure_entry .menu6.config.f.x1 normal {n l y}} else {configure_entry .menu6.config.f.x1 disabled {y n l}}
	global CONFIG_MTD_DEBUG_VERBOSE
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DEBUG == 1)} then {.menu6.config.f.x2.x configure -state normal -foreground [ cget .ref -foreground ]; .menu6.config.f.x2.l configure -state normal; } else {.menu6.config.f.x2.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu6.config.f.x2.l configure -state disabled}
	global CONFIG_MTD_PARTITIONS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_MTD_PARTITIONS [sync_tristate $CONFIG_MTD_PARTITIONS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu6.config.f.x3 disabled {y}} else {configure_entry .menu6.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu6.config.f.x3 disabled {m}} else {configure_entry .menu6.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu6.config.f.x3 normal {m}} else {configure_entry .menu6.config.f.x3 disabled {m}}; configure_entry .menu6.config.f.x3 normal {n l}} else {configure_entry .menu6.config.f.x3 disabled {y n m l}}
	global CONFIG_MTD_REDBOOT_PARTS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_PARTITIONS == 1 || $CONFIG_MTD_PARTITIONS == 2 || $CONFIG_MTD_PARTITIONS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD_PARTITIONS]];set CONFIG_MTD_REDBOOT_PARTS [sync_tristate $CONFIG_MTD_REDBOOT_PARTS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu6.config.f.x4 disabled {y}} else {configure_entry .menu6.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu6.config.f.x4 disabled {m}} else {configure_entry .menu6.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu6.config.f.x4 normal {m}} else {configure_entry .menu6.config.f.x4 disabled {m}}; configure_entry .menu6.config.f.x4 normal {n l}} else {configure_entry .menu6.config.f.x4 disabled {y n m l}}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2)} then {configure_entry .menu6.config.f.x5 normal {m}} else {configure_entry .menu6.config.f.x5 disabled {m}}
	global CONFIG_MTD_CHAR
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_MTD_CHAR [sync_tristate $CONFIG_MTD_CHAR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu6.config.f.x6 disabled {y}} else {configure_entry .menu6.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu6.config.f.x6 disabled {m}} else {configure_entry .menu6.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu6.config.f.x6 normal {m}} else {configure_entry .menu6.config.f.x6 disabled {m}}; configure_entry .menu6.config.f.x6 normal {n l}} else {configure_entry .menu6.config.f.x6 disabled {y n m l}}
	global CONFIG_MTD_BLOCK
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_MTD_BLOCK [sync_tristate $CONFIG_MTD_BLOCK $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu6.config.f.x7 disabled {y}} else {configure_entry .menu6.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu6.config.f.x7 disabled {m}} else {configure_entry .menu6.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu6.config.f.x7 normal {m}} else {configure_entry .menu6.config.f.x7 disabled {m}}; configure_entry .menu6.config.f.x7 normal {n l}} else {configure_entry .menu6.config.f.x7 disabled {y n m l}}
	global CONFIG_MTD_BLOCK_RO
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_BLOCK == 0 || $CONFIG_MTD_BLOCK == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_MTD_BLOCK_RO [sync_tristate $CONFIG_MTD_BLOCK_RO $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu6.config.f.x8 disabled {y}} else {configure_entry .menu6.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu6.config.f.x8 disabled {m}} else {configure_entry .menu6.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu6.config.f.x8 normal {m}} else {configure_entry .menu6.config.f.x8 disabled {m}}; configure_entry .menu6.config.f.x8 normal {n l}} else {configure_entry .menu6.config.f.x8 disabled {y n m l}}
	global CONFIG_FTL
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_FTL [sync_tristate $CONFIG_FTL $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu6.config.f.x9 disabled {y}} else {configure_entry .menu6.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu6.config.f.x9 disabled {m}} else {configure_entry .menu6.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu6.config.f.x9 normal {m}} else {configure_entry .menu6.config.f.x9 disabled {m}}; configure_entry .menu6.config.f.x9 normal {n l}} else {configure_entry .menu6.config.f.x9 disabled {y n m l}}
	global CONFIG_NFTL
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_NFTL [sync_tristate $CONFIG_NFTL $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu6.config.f.x10 disabled {y}} else {configure_entry .menu6.config.f.x10 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu6.config.f.x10 disabled {m}} else {configure_entry .menu6.config.f.x10 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu6.config.f.x10 normal {m}} else {configure_entry .menu6.config.f.x10 disabled {m}}; configure_entry .menu6.config.f.x10 normal {n l}} else {configure_entry .menu6.config.f.x10 disabled {y n m l}}
	global CONFIG_NFTL_RW
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_NFTL == 1 || $CONFIG_NFTL == 2)} then {
	configure_entry .menu6.config.f.x11 normal {n l y}} else {configure_entry .menu6.config.f.x11 disabled {y n l}}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2)} then {configure_entry .menu6.config.f.x12 normal {m}} else {configure_entry .menu6.config.f.x12 disabled {m}}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2)} then {configure_entry .menu6.config.f.x13 normal {m}} else {configure_entry .menu6.config.f.x13 disabled {m}}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2)} then {configure_entry .menu6.config.f.x14 normal {m}} else {configure_entry .menu6.config.f.x14 disabled {m}}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2)} then {configure_entry .menu6.config.f.x15 normal {m}} else {configure_entry .menu6.config.f.x15 disabled {m}}
}


proc update_define_menu6 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_MTD
	global CONFIG_MTD_DEBUG
set CONFIG_MTD_DEBUG [expr $CONFIG_MTD_DEBUG|16]
	global CONFIG_NFTL_RW
set CONFIG_NFTL_RW [expr $CONFIG_NFTL_RW|16]

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_MTD == 2)} then {set CONFIG_MTD 1}}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2)} then {
	set CONFIG_MTD_DEBUG [expr $CONFIG_MTD_DEBUG&15]}
	global CONFIG_MTD_DEBUG_VERBOSE
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DEBUG == 1)} then {validate_int CONFIG_MTD_DEBUG_VERBOSE "$CONFIG_MTD_DEBUG_VERBOSE" 0}
	global CONFIG_MTD_PARTITIONS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_MTD_PARTITIONS [sync_tristate $CONFIG_MTD_PARTITIONS $tmpvar_dep]; set CONFIG_MTD_PARTITIONS [expr $CONFIG_MTD_PARTITIONS&15]}
	global CONFIG_MTD_REDBOOT_PARTS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_PARTITIONS == 1 || $CONFIG_MTD_PARTITIONS == 2 || $CONFIG_MTD_PARTITIONS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD_PARTITIONS]]; set CONFIG_MTD_REDBOOT_PARTS [sync_tristate $CONFIG_MTD_REDBOOT_PARTS $tmpvar_dep]; set CONFIG_MTD_REDBOOT_PARTS [expr $CONFIG_MTD_REDBOOT_PARTS&15]}
	global CONFIG_MTD_CHAR
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_MTD_CHAR [sync_tristate $CONFIG_MTD_CHAR $tmpvar_dep]; set CONFIG_MTD_CHAR [expr $CONFIG_MTD_CHAR&15]}
	global CONFIG_MTD_BLOCK
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_MTD_BLOCK [sync_tristate $CONFIG_MTD_BLOCK $tmpvar_dep]; set CONFIG_MTD_BLOCK [expr $CONFIG_MTD_BLOCK&15]}
	global CONFIG_MTD_BLOCK_RO
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_BLOCK == 0 || $CONFIG_MTD_BLOCK == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_MTD_BLOCK_RO [sync_tristate $CONFIG_MTD_BLOCK_RO $tmpvar_dep]; set CONFIG_MTD_BLOCK_RO [expr $CONFIG_MTD_BLOCK_RO&15]}
	global CONFIG_FTL
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_FTL [sync_tristate $CONFIG_FTL $tmpvar_dep]; set CONFIG_FTL [expr $CONFIG_FTL&15]}
	global CONFIG_NFTL
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_NFTL [sync_tristate $CONFIG_NFTL $tmpvar_dep]; set CONFIG_NFTL [expr $CONFIG_NFTL&15]}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_NFTL == 1 || $CONFIG_NFTL == 2)} then {
	set CONFIG_NFTL_RW [expr $CONFIG_NFTL_RW&15]}
}


proc menu7 {w title} {
	set oldFocus [focus]
	catch {focus .menu6}
	catch {destroy $w; unregister_active 7}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 7]]
	message $w.m -width 400 -aspect 300 -text \
		"RAM/ROM/Flash chip drivers"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "RAM/ROM/Flash chip drivers" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 7; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 7; menu8 .menu8 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 7"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 7; menu6 .menu6 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 7; menu6 .menu6 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 7 0 "  Detect flash chips by Common Flash Interface (CFI) probe" CONFIG_MTD_CFI
	dep_tristate $w.config.f 7 1 "  Detect non-CFI AMD/JEDEC-compatible flash chips" CONFIG_MTD_JEDECPROBE
	bool $w.config.f 7 2 "  Flash chip driver advanced configuration options" CONFIG_MTD_CFI_ADV_OPTIONS
	global tmpvar_10
	minimenu $w.config.f 7 3 "Flash cmd/query data swapping" tmpvar_10 CONFIG_MTD_CFI_NOSWAP
	menu $w.config.f.x3.x.menu -tearoffcommand "menutitle \"Flash cmd/query data swapping\""
	$w.config.f.x3.x.menu add radiobutton -label "NO" -variable tmpvar_10 -value "NO" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "BIG_ENDIAN_BYTE" -variable tmpvar_10 -value "BIG_ENDIAN_BYTE" -command "update_active"
	$w.config.f.x3.x.menu add radiobutton -label "LITTLE_ENDIAN_BYTE" -variable tmpvar_10 -value "LITTLE_ENDIAN_BYTE" -command "update_active"
	menusplit $w $w.config.f.x3.x.menu 3
	bool $w.config.f 7 4 "  Specific CFI Flash geometry selection" CONFIG_MTD_CFI_GEOMETRY
	bool $w.config.f 7 5 "    Support  8-bit buswidth" CONFIG_MTD_CFI_B1
	bool $w.config.f 7 6 "    Support 16-bit buswidth" CONFIG_MTD_CFI_B2
	bool $w.config.f 7 7 "    Support 32-bit buswidth" CONFIG_MTD_CFI_B4
	bool $w.config.f 7 8 "    Support 1-chip flash interleave" CONFIG_MTD_CFI_I1
	bool $w.config.f 7 9 "    Support 2-chip flash interleave" CONFIG_MTD_CFI_I2
	bool $w.config.f 7 10 "    Support 4-chip flash interleave" CONFIG_MTD_CFI_I4
	dep_tristate $w.config.f 7 11 "  Support for Intel/Sharp flash chips" CONFIG_MTD_CFI_INTELEXT
	dep_tristate $w.config.f 7 12 "  Support for AMD/Fujitsu flash chips" CONFIG_MTD_CFI_AMDSTD
	dep_tristate $w.config.f 7 13 "  Support for RAM chips in bus mapping" CONFIG_MTD_RAM
	dep_tristate $w.config.f 7 14 "  Support for ROM chips in bus mapping" CONFIG_MTD_ROM
	dep_tristate $w.config.f 7 15 "  Support for absent chips in bus mapping" CONFIG_MTD_ABSENT
	bool $w.config.f 7 16 "  Older (theoretically obsoleted now) drivers for non-CFI chips" CONFIG_MTD_OBSOLETE_CHIPS
	dep_tristate $w.config.f 7 17 "  AMD compatible flash chip support (non-CFI)" CONFIG_MTD_AMDSTD
	dep_tristate $w.config.f 7 18 "  pre-CFI Sharp chip support" CONFIG_MTD_SHARP
	dep_tristate $w.config.f 7 19 "  JEDEC device support" CONFIG_MTD_JEDEC



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu6] == 0} then {menu6 .menu6 "Memory Technology Devices (MTD)"}
	set winx [expr [winfo x .menu6]+30]; set winy [expr [winfo y .menu6]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu7 {} {
	global CONFIG_MODULES
	global CONFIG_MTD
	global CONFIG_MTD_CFI
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_MTD_CFI [sync_tristate $CONFIG_MTD_CFI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu7.config.f.x0 disabled {y}} else {configure_entry .menu7.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu7.config.f.x0 disabled {m}} else {configure_entry .menu7.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu7.config.f.x0 normal {m}} else {configure_entry .menu7.config.f.x0 disabled {m}}; configure_entry .menu7.config.f.x0 normal {n l}} else {configure_entry .menu7.config.f.x0 disabled {y n m l}}
	global CONFIG_MTD_JEDECPROBE
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_MTD_JEDECPROBE [sync_tristate $CONFIG_MTD_JEDECPROBE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu7.config.f.x1 disabled {y}} else {configure_entry .menu7.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu7.config.f.x1 disabled {m}} else {configure_entry .menu7.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu7.config.f.x1 normal {m}} else {configure_entry .menu7.config.f.x1 disabled {m}}; configure_entry .menu7.config.f.x1 normal {n l}} else {configure_entry .menu7.config.f.x1 disabled {y n m l}}
	global CONFIG_MTD_GEN_PROBE
	global CONFIG_MTD_CFI_ADV_OPTIONS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2)} then {
	configure_entry .menu7.config.f.x2 normal {n l y}} else {configure_entry .menu7.config.f.x2 disabled {y n l}}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1)} then {configure_entry .menu7.config.f.x3 normal {x l}} else {configure_entry .menu7.config.f.x3 disabled {x l}}
	global CONFIG_MTD_CFI_GEOMETRY
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1)} then {
	configure_entry .menu7.config.f.x4 normal {n l y}} else {configure_entry .menu7.config.f.x4 disabled {y n l}}
	global CONFIG_MTD_CFI_B1
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1)} then {
	configure_entry .menu7.config.f.x5 normal {n l y}} else {configure_entry .menu7.config.f.x5 disabled {y n l}}
	global CONFIG_MTD_CFI_B2
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1)} then {
	configure_entry .menu7.config.f.x6 normal {n l y}} else {configure_entry .menu7.config.f.x6 disabled {y n l}}
	global CONFIG_MTD_CFI_B4
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1)} then {
	configure_entry .menu7.config.f.x7 normal {n l y}} else {configure_entry .menu7.config.f.x7 disabled {y n l}}
	global CONFIG_MTD_CFI_I1
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1) && ($CONFIG_MTD_CFI_B1 != 1)} then {
	configure_entry .menu7.config.f.x8 normal {n l y}} else {configure_entry .menu7.config.f.x8 disabled {y n l}}
	global CONFIG_MTD_CFI_I2
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1)} then {
	configure_entry .menu7.config.f.x9 normal {n l y}} else {configure_entry .menu7.config.f.x9 disabled {y n l}}
	global CONFIG_MTD_CFI_I4
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1)} then {
	configure_entry .menu7.config.f.x10 normal {n l y}} else {configure_entry .menu7.config.f.x10 disabled {y n l}}
	global CONFIG_MTD_CFI_INTELEXT
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2 || $CONFIG_MTD_GEN_PROBE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD_GEN_PROBE]];set CONFIG_MTD_CFI_INTELEXT [sync_tristate $CONFIG_MTD_CFI_INTELEXT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu7.config.f.x11 disabled {y}} else {configure_entry .menu7.config.f.x11 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu7.config.f.x11 disabled {m}} else {configure_entry .menu7.config.f.x11 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu7.config.f.x11 normal {m}} else {configure_entry .menu7.config.f.x11 disabled {m}}; configure_entry .menu7.config.f.x11 normal {n l}} else {configure_entry .menu7.config.f.x11 disabled {y n m l}}
	global CONFIG_MTD_CFI_AMDSTD
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2 || $CONFIG_MTD_GEN_PROBE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD_GEN_PROBE]];set CONFIG_MTD_CFI_AMDSTD [sync_tristate $CONFIG_MTD_CFI_AMDSTD $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu7.config.f.x12 disabled {y}} else {configure_entry .menu7.config.f.x12 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu7.config.f.x12 disabled {m}} else {configure_entry .menu7.config.f.x12 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu7.config.f.x12 normal {m}} else {configure_entry .menu7.config.f.x12 disabled {m}}; configure_entry .menu7.config.f.x12 normal {n l}} else {configure_entry .menu7.config.f.x12 disabled {y n m l}}
	global CONFIG_MTD_RAM
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_MTD_RAM [sync_tristate $CONFIG_MTD_RAM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu7.config.f.x13 disabled {y}} else {configure_entry .menu7.config.f.x13 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu7.config.f.x13 disabled {m}} else {configure_entry .menu7.config.f.x13 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu7.config.f.x13 normal {m}} else {configure_entry .menu7.config.f.x13 disabled {m}}; configure_entry .menu7.config.f.x13 normal {n l}} else {configure_entry .menu7.config.f.x13 disabled {y n m l}}
	global CONFIG_MTD_ROM
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_MTD_ROM [sync_tristate $CONFIG_MTD_ROM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu7.config.f.x14 disabled {y}} else {configure_entry .menu7.config.f.x14 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu7.config.f.x14 disabled {m}} else {configure_entry .menu7.config.f.x14 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu7.config.f.x14 normal {m}} else {configure_entry .menu7.config.f.x14 disabled {m}}; configure_entry .menu7.config.f.x14 normal {n l}} else {configure_entry .menu7.config.f.x14 disabled {y n m l}}
	global CONFIG_MTD_ABSENT
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_MTD_ABSENT [sync_tristate $CONFIG_MTD_ABSENT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu7.config.f.x15 disabled {y}} else {configure_entry .menu7.config.f.x15 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu7.config.f.x15 disabled {m}} else {configure_entry .menu7.config.f.x15 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu7.config.f.x15 normal {m}} else {configure_entry .menu7.config.f.x15 disabled {m}}; configure_entry .menu7.config.f.x15 normal {n l}} else {configure_entry .menu7.config.f.x15 disabled {y n m l}}
	global CONFIG_MTD_OBSOLETE_CHIPS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2)} then {
	configure_entry .menu7.config.f.x16 normal {n l y}} else {configure_entry .menu7.config.f.x16 disabled {y n l}}
	global CONFIG_MTD_AMDSTD
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4) && ($CONFIG_MTD_OBSOLETE_CHIPS == 1 || $CONFIG_MTD_OBSOLETE_CHIPS == 2 || $CONFIG_MTD_OBSOLETE_CHIPS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD $CONFIG_MTD_OBSOLETE_CHIPS]];set CONFIG_MTD_AMDSTD [sync_tristate $CONFIG_MTD_AMDSTD $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu7.config.f.x17 disabled {y}} else {configure_entry .menu7.config.f.x17 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu7.config.f.x17 disabled {m}} else {configure_entry .menu7.config.f.x17 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu7.config.f.x17 normal {m}} else {configure_entry .menu7.config.f.x17 disabled {m}}; configure_entry .menu7.config.f.x17 normal {n l}} else {configure_entry .menu7.config.f.x17 disabled {y n m l}}
	global CONFIG_MTD_SHARP
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4) && ($CONFIG_MTD_OBSOLETE_CHIPS == 1 || $CONFIG_MTD_OBSOLETE_CHIPS == 2 || $CONFIG_MTD_OBSOLETE_CHIPS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD $CONFIG_MTD_OBSOLETE_CHIPS]];set CONFIG_MTD_SHARP [sync_tristate $CONFIG_MTD_SHARP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu7.config.f.x18 disabled {y}} else {configure_entry .menu7.config.f.x18 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu7.config.f.x18 disabled {m}} else {configure_entry .menu7.config.f.x18 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu7.config.f.x18 normal {m}} else {configure_entry .menu7.config.f.x18 disabled {m}}; configure_entry .menu7.config.f.x18 normal {n l}} else {configure_entry .menu7.config.f.x18 disabled {y n m l}}
	global CONFIG_MTD_JEDEC
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4) && ($CONFIG_MTD_OBSOLETE_CHIPS == 1 || $CONFIG_MTD_OBSOLETE_CHIPS == 2 || $CONFIG_MTD_OBSOLETE_CHIPS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD $CONFIG_MTD_OBSOLETE_CHIPS]];set CONFIG_MTD_JEDEC [sync_tristate $CONFIG_MTD_JEDEC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu7.config.f.x19 disabled {y}} else {configure_entry .menu7.config.f.x19 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu7.config.f.x19 disabled {m}} else {configure_entry .menu7.config.f.x19 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu7.config.f.x19 normal {m}} else {configure_entry .menu7.config.f.x19 disabled {m}}; configure_entry .menu7.config.f.x19 normal {n l}} else {configure_entry .menu7.config.f.x19 disabled {y n m l}}
}


proc update_define_menu7 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_MTD_GEN_PROBE
	global CONFIG_MTD_CFI_I1
	global CONFIG_MTD_CFI_ADV_OPTIONS
set CONFIG_MTD_CFI_ADV_OPTIONS [expr $CONFIG_MTD_CFI_ADV_OPTIONS|16]
	global CONFIG_MTD_CFI_GEOMETRY
set CONFIG_MTD_CFI_GEOMETRY [expr $CONFIG_MTD_CFI_GEOMETRY|16]
	global CONFIG_MTD_CFI_B1
set CONFIG_MTD_CFI_B1 [expr $CONFIG_MTD_CFI_B1|16]
	global CONFIG_MTD_CFI_B2
set CONFIG_MTD_CFI_B2 [expr $CONFIG_MTD_CFI_B2|16]
	global CONFIG_MTD_CFI_B4
set CONFIG_MTD_CFI_B4 [expr $CONFIG_MTD_CFI_B4|16]
set CONFIG_MTD_CFI_I1 [expr $CONFIG_MTD_CFI_I1|16]
	global CONFIG_MTD_CFI_I2
set CONFIG_MTD_CFI_I2 [expr $CONFIG_MTD_CFI_I2|16]
	global CONFIG_MTD_CFI_I4
set CONFIG_MTD_CFI_I4 [expr $CONFIG_MTD_CFI_I4|16]
	global CONFIG_MTD_OBSOLETE_CHIPS
set CONFIG_MTD_OBSOLETE_CHIPS [expr $CONFIG_MTD_OBSOLETE_CHIPS|16]
	global CONFIG_MTD
	global CONFIG_MTD_CFI
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_MTD_CFI [sync_tristate $CONFIG_MTD_CFI $tmpvar_dep]; set CONFIG_MTD_CFI [expr $CONFIG_MTD_CFI&15]}
	global CONFIG_MTD_JEDECPROBE
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_MTD_JEDECPROBE [sync_tristate $CONFIG_MTD_JEDECPROBE $tmpvar_dep]; set CONFIG_MTD_JEDECPROBE [expr $CONFIG_MTD_JEDECPROBE&15]}
	global CONFIG_MTD_INTELPROBE
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_CFI == 1 || $CONFIG_MTD_INTELPROBE == 1 || $CONFIG_MTD_JEDECPROBE == 1)} then {	global CONSTANT_Y
set CONFIG_MTD_GEN_PROBE $CONSTANT_Y }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_CFI != 1 && $CONFIG_MTD_INTELPROBE != 1 && $CONFIG_MTD_JEDECPROBE != 1) && ($CONFIG_MTD_CFI == 2 || $CONFIG_MTD_INTELPROBE == 2 || $CONFIG_MTD_JEDECPROBE == 2)} then {	global CONSTANT_M
set CONFIG_MTD_GEN_PROBE $CONSTANT_M }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_CFI != 1 && $CONFIG_MTD_INTELPROBE != 1 && $CONFIG_MTD_JEDECPROBE != 1) && ($CONFIG_MTD_CFI != 2 && $CONFIG_MTD_INTELPROBE != 2 && $CONFIG_MTD_JEDECPROBE != 2)} then {	global CONSTANT_N
set CONFIG_MTD_GEN_PROBE $CONSTANT_N }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2)} then {
	set CONFIG_MTD_CFI_ADV_OPTIONS [expr $CONFIG_MTD_CFI_ADV_OPTIONS&15]}
	global tmpvar_10
	global CONFIG_MTD_CFI_NOSWAP
	if {$tmpvar_10 == "NO"} then {set CONFIG_MTD_CFI_NOSWAP 1} else {set CONFIG_MTD_CFI_NOSWAP 0}
	global CONFIG_MTD_CFI_BE_BYTE_SWAP
	if {$tmpvar_10 == "BIG_ENDIAN_BYTE"} then {set CONFIG_MTD_CFI_BE_BYTE_SWAP 1} else {set CONFIG_MTD_CFI_BE_BYTE_SWAP 0}
	global CONFIG_MTD_CFI_LE_BYTE_SWAP
	if {$tmpvar_10 == "LITTLE_ENDIAN_BYTE"} then {set CONFIG_MTD_CFI_LE_BYTE_SWAP 1} else {set CONFIG_MTD_CFI_LE_BYTE_SWAP 0}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1)} then {
	set CONFIG_MTD_CFI_GEOMETRY [expr $CONFIG_MTD_CFI_GEOMETRY&15]}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1)} then {
	set CONFIG_MTD_CFI_B1 [expr $CONFIG_MTD_CFI_B1&15]}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1)} then {
	set CONFIG_MTD_CFI_B2 [expr $CONFIG_MTD_CFI_B2&15]}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1)} then {
	set CONFIG_MTD_CFI_B4 [expr $CONFIG_MTD_CFI_B4&15]}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1) && ($CONFIG_MTD_CFI_B1 == 1)} then {	global CONSTANT_Y
set CONFIG_MTD_CFI_I1 $CONSTANT_Y }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1) && ($CONFIG_MTD_CFI_B1 != 1)} then {
	set CONFIG_MTD_CFI_I1 [expr $CONFIG_MTD_CFI_I1&15]}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1)} then {
	set CONFIG_MTD_CFI_I2 [expr $CONFIG_MTD_CFI_I2&15]}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1)} then {
	set CONFIG_MTD_CFI_I4 [expr $CONFIG_MTD_CFI_I4&15]}
	global CONFIG_MTD_CFI_INTELEXT
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2 || $CONFIG_MTD_GEN_PROBE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD_GEN_PROBE]]; set CONFIG_MTD_CFI_INTELEXT [sync_tristate $CONFIG_MTD_CFI_INTELEXT $tmpvar_dep]; set CONFIG_MTD_CFI_INTELEXT [expr $CONFIG_MTD_CFI_INTELEXT&15]}
	global CONFIG_MTD_CFI_AMDSTD
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2 || $CONFIG_MTD_GEN_PROBE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD_GEN_PROBE]]; set CONFIG_MTD_CFI_AMDSTD [sync_tristate $CONFIG_MTD_CFI_AMDSTD $tmpvar_dep]; set CONFIG_MTD_CFI_AMDSTD [expr $CONFIG_MTD_CFI_AMDSTD&15]}
	global CONFIG_MTD_RAM
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_MTD_RAM [sync_tristate $CONFIG_MTD_RAM $tmpvar_dep]; set CONFIG_MTD_RAM [expr $CONFIG_MTD_RAM&15]}
	global CONFIG_MTD_ROM
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_MTD_ROM [sync_tristate $CONFIG_MTD_ROM $tmpvar_dep]; set CONFIG_MTD_ROM [expr $CONFIG_MTD_ROM&15]}
	global CONFIG_MTD_ABSENT
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_MTD_ABSENT [sync_tristate $CONFIG_MTD_ABSENT $tmpvar_dep]; set CONFIG_MTD_ABSENT [expr $CONFIG_MTD_ABSENT&15]}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2)} then {
	set CONFIG_MTD_OBSOLETE_CHIPS [expr $CONFIG_MTD_OBSOLETE_CHIPS&15]}
	global CONFIG_MTD_AMDSTD
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4) && ($CONFIG_MTD_OBSOLETE_CHIPS == 1 || $CONFIG_MTD_OBSOLETE_CHIPS == 2 || $CONFIG_MTD_OBSOLETE_CHIPS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD $CONFIG_MTD_OBSOLETE_CHIPS]]; set CONFIG_MTD_AMDSTD [sync_tristate $CONFIG_MTD_AMDSTD $tmpvar_dep]; set CONFIG_MTD_AMDSTD [expr $CONFIG_MTD_AMDSTD&15]}
	global CONFIG_MTD_SHARP
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4) && ($CONFIG_MTD_OBSOLETE_CHIPS == 1 || $CONFIG_MTD_OBSOLETE_CHIPS == 2 || $CONFIG_MTD_OBSOLETE_CHIPS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD $CONFIG_MTD_OBSOLETE_CHIPS]]; set CONFIG_MTD_SHARP [sync_tristate $CONFIG_MTD_SHARP $tmpvar_dep]; set CONFIG_MTD_SHARP [expr $CONFIG_MTD_SHARP&15]}
	global CONFIG_MTD_JEDEC
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4) && ($CONFIG_MTD_OBSOLETE_CHIPS == 1 || $CONFIG_MTD_OBSOLETE_CHIPS == 2 || $CONFIG_MTD_OBSOLETE_CHIPS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD $CONFIG_MTD_OBSOLETE_CHIPS]]; set CONFIG_MTD_JEDEC [sync_tristate $CONFIG_MTD_JEDEC $tmpvar_dep]; set CONFIG_MTD_JEDEC [expr $CONFIG_MTD_JEDEC&15]}
}


proc menu8 {w title} {
	set oldFocus [focus]
	catch {focus .menu6}
	catch {destroy $w; unregister_active 8}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 8]]
	message $w.m -width 400 -aspect 300 -text \
		"Mapping drivers for chip access"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Mapping drivers for chip access" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 8; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 8; menu9 .menu9 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 8"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 8; menu7 .menu7 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 8; menu7 .menu7 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 8 0 "  CFI Flash device in physical memory map" CONFIG_MTD_PHYSMAP
	hex $w.config.f 8 1 "    Physical start address of flash mapping" CONFIG_MTD_PHYSMAP_START
	hex $w.config.f 8 2 "    Physical length of flash mapping" CONFIG_MTD_PHYSMAP_LEN
	int $w.config.f 8 3 "    Bus width in octets" CONFIG_MTD_PHYSMAP_BUSWIDTH
	dep_tristate $w.config.f 8 4 "  CFI Flash device mapped on Lineo SecureEdge" CONFIG_MTD_NETtel
	dep_tristate $w.config.f 8 5 "  CFI Flash device mapped on Lineo SecureEdge (uClinux)" CONFIG_MTD_NETteluC
	dep_tristate $w.config.f 8 6 "  CFI Flash device mapped on Key Technology devices" CONFIG_MTD_KeyTechnology
	dep_tristate $w.config.f 8 7 "  Hitachi SH KeyWest Intel flash device" CONFIG_MTD_KEYWEST



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu6] == 0} then {menu6 .menu6 "Memory Technology Devices (MTD)"}
	set winx [expr [winfo x .menu6]+30]; set winy [expr [winfo y .menu6]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu8 {} {
	global CONFIG_MODULES
	global CONFIG_MTD
	global CONFIG_MTD_CFI
	global CONFIG_MTD_PHYSMAP
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_CFI == 1 || $CONFIG_MTD_CFI == 2 || $CONFIG_MTD_CFI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD_CFI]];set CONFIG_MTD_PHYSMAP [sync_tristate $CONFIG_MTD_PHYSMAP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu8.config.f.x0 disabled {y}} else {configure_entry .menu8.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu8.config.f.x0 disabled {m}} else {configure_entry .menu8.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x0 normal {m}} else {configure_entry .menu8.config.f.x0 disabled {m}}; configure_entry .menu8.config.f.x0 normal {n l}} else {configure_entry .menu8.config.f.x0 disabled {y n m l}}
	global CONFIG_MTD_PHYSMAP_START
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_PHYSMAP == 1 || $CONFIG_MTD_PHYSMAP == 2)} then {.menu8.config.f.x1.x configure -state normal -foreground [ cget .ref -foreground ]; .menu8.config.f.x1.l configure -state normal; } else {.menu8.config.f.x1.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu8.config.f.x1.l configure -state disabled}
	global CONFIG_MTD_PHYSMAP_LEN
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_PHYSMAP == 1 || $CONFIG_MTD_PHYSMAP == 2)} then {.menu8.config.f.x2.x configure -state normal -foreground [ cget .ref -foreground ]; .menu8.config.f.x2.l configure -state normal; } else {.menu8.config.f.x2.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu8.config.f.x2.l configure -state disabled}
	global CONFIG_MTD_PHYSMAP_BUSWIDTH
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_PHYSMAP == 1 || $CONFIG_MTD_PHYSMAP == 2)} then {.menu8.config.f.x3.x configure -state normal -foreground [ cget .ref -foreground ]; .menu8.config.f.x3.l configure -state normal; } else {.menu8.config.f.x3.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu8.config.f.x3.l configure -state disabled}
	global CONFIG_MTD_CFI_INTELEXT
	global CONFIG_MTD_CFI_AMDSTD
	global CONFIG_MTD_PARTITIONS
	global CONFIG_MTD_NETtel
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_CFI_INTELEXT == 1 || $CONFIG_MTD_CFI_INTELEXT == 2 || $CONFIG_MTD_CFI_INTELEXT == 4) && ($CONFIG_MTD_CFI_AMDSTD == 1 || $CONFIG_MTD_CFI_AMDSTD == 2 || $CONFIG_MTD_CFI_AMDSTD == 4) && ($CONFIG_MTD_PARTITIONS == 1 || $CONFIG_MTD_PARTITIONS == 2 || $CONFIG_MTD_PARTITIONS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD_CFI_INTELEXT $CONFIG_MTD_CFI_AMDSTD $CONFIG_MTD_PARTITIONS]];set CONFIG_MTD_NETtel [sync_tristate $CONFIG_MTD_NETtel $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu8.config.f.x4 disabled {y}} else {configure_entry .menu8.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu8.config.f.x4 disabled {m}} else {configure_entry .menu8.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x4 normal {m}} else {configure_entry .menu8.config.f.x4 disabled {m}}; configure_entry .menu8.config.f.x4 normal {n l}} else {configure_entry .menu8.config.f.x4 disabled {y n m l}}
	global CONFIG_UCLINUX
	global CONFIG_MTD_NETteluC
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_UCLINUX == 1 || $CONFIG_UCLINUX == 2 || $CONFIG_UCLINUX == 4) && ($CONFIG_MTD_PARTITIONS == 1 || $CONFIG_MTD_PARTITIONS == 2 || $CONFIG_MTD_PARTITIONS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_UCLINUX $CONFIG_MTD_PARTITIONS]];set CONFIG_MTD_NETteluC [sync_tristate $CONFIG_MTD_NETteluC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu8.config.f.x5 disabled {y}} else {configure_entry .menu8.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu8.config.f.x5 disabled {m}} else {configure_entry .menu8.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x5 normal {m}} else {configure_entry .menu8.config.f.x5 disabled {m}}; configure_entry .menu8.config.f.x5 normal {n l}} else {configure_entry .menu8.config.f.x5 disabled {y n m l}}
	global CONFIG_MTD_KeyTechnology
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_UCLINUX == 1 || $CONFIG_UCLINUX == 2 || $CONFIG_UCLINUX == 4) && ($CONFIG_MTD_PARTITIONS == 1 || $CONFIG_MTD_PARTITIONS == 2 || $CONFIG_MTD_PARTITIONS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_UCLINUX $CONFIG_MTD_PARTITIONS]];set CONFIG_MTD_KeyTechnology [sync_tristate $CONFIG_MTD_KeyTechnology $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu8.config.f.x6 disabled {y}} else {configure_entry .menu8.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu8.config.f.x6 disabled {m}} else {configure_entry .menu8.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x6 normal {m}} else {configure_entry .menu8.config.f.x6 disabled {m}}; configure_entry .menu8.config.f.x6 normal {n l}} else {configure_entry .menu8.config.f.x6 disabled {y n m l}}
	global CONFIG_SH_KEYWEST
	global CONFIG_MTD_KEYWEST
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_SH_KEYWEST == 1 || $CONFIG_SH_KEYWEST == 2 || $CONFIG_SH_KEYWEST == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SH_KEYWEST]];set CONFIG_MTD_KEYWEST [sync_tristate $CONFIG_MTD_KEYWEST $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu8.config.f.x7 disabled {y}} else {configure_entry .menu8.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu8.config.f.x7 disabled {m}} else {configure_entry .menu8.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu8.config.f.x7 normal {m}} else {configure_entry .menu8.config.f.x7 disabled {m}}; configure_entry .menu8.config.f.x7 normal {n l}} else {configure_entry .menu8.config.f.x7 disabled {y n m l}}
}


proc update_define_menu8 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_MTD
	global CONFIG_MTD_CFI
	global CONFIG_MTD_PHYSMAP
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_CFI == 1 || $CONFIG_MTD_CFI == 2 || $CONFIG_MTD_CFI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD_CFI]]; set CONFIG_MTD_PHYSMAP [sync_tristate $CONFIG_MTD_PHYSMAP $tmpvar_dep]; set CONFIG_MTD_PHYSMAP [expr $CONFIG_MTD_PHYSMAP&15]}
	global CONFIG_MTD_PHYSMAP_START
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_PHYSMAP == 1 || $CONFIG_MTD_PHYSMAP == 2)} then {validate_hex CONFIG_MTD_PHYSMAP_START "$CONFIG_MTD_PHYSMAP_START" 0x8000000}
	global CONFIG_MTD_PHYSMAP_LEN
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_PHYSMAP == 1 || $CONFIG_MTD_PHYSMAP == 2)} then {validate_hex CONFIG_MTD_PHYSMAP_LEN "$CONFIG_MTD_PHYSMAP_LEN" 0x4000000}
	global CONFIG_MTD_PHYSMAP_BUSWIDTH
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_PHYSMAP == 1 || $CONFIG_MTD_PHYSMAP == 2)} then {validate_int CONFIG_MTD_PHYSMAP_BUSWIDTH "$CONFIG_MTD_PHYSMAP_BUSWIDTH" 2}
	global CONFIG_MTD_CFI_INTELEXT
	global CONFIG_MTD_CFI_AMDSTD
	global CONFIG_MTD_PARTITIONS
	global CONFIG_MTD_NETtel
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_CFI_INTELEXT == 1 || $CONFIG_MTD_CFI_INTELEXT == 2 || $CONFIG_MTD_CFI_INTELEXT == 4) && ($CONFIG_MTD_CFI_AMDSTD == 1 || $CONFIG_MTD_CFI_AMDSTD == 2 || $CONFIG_MTD_CFI_AMDSTD == 4) && ($CONFIG_MTD_PARTITIONS == 1 || $CONFIG_MTD_PARTITIONS == 2 || $CONFIG_MTD_PARTITIONS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD_CFI_INTELEXT $CONFIG_MTD_CFI_AMDSTD $CONFIG_MTD_PARTITIONS]]; set CONFIG_MTD_NETtel [sync_tristate $CONFIG_MTD_NETtel $tmpvar_dep]; set CONFIG_MTD_NETtel [expr $CONFIG_MTD_NETtel&15]}
	global CONFIG_UCLINUX
	global CONFIG_MTD_NETteluC
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_UCLINUX == 1 || $CONFIG_UCLINUX == 2 || $CONFIG_UCLINUX == 4) && ($CONFIG_MTD_PARTITIONS == 1 || $CONFIG_MTD_PARTITIONS == 2 || $CONFIG_MTD_PARTITIONS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_UCLINUX $CONFIG_MTD_PARTITIONS]]; set CONFIG_MTD_NETteluC [sync_tristate $CONFIG_MTD_NETteluC $tmpvar_dep]; set CONFIG_MTD_NETteluC [expr $CONFIG_MTD_NETteluC&15]}
	global CONFIG_MTD_KeyTechnology
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_UCLINUX == 1 || $CONFIG_UCLINUX == 2 || $CONFIG_UCLINUX == 4) && ($CONFIG_MTD_PARTITIONS == 1 || $CONFIG_MTD_PARTITIONS == 2 || $CONFIG_MTD_PARTITIONS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_UCLINUX $CONFIG_MTD_PARTITIONS]]; set CONFIG_MTD_KeyTechnology [sync_tristate $CONFIG_MTD_KeyTechnology $tmpvar_dep]; set CONFIG_MTD_KeyTechnology [expr $CONFIG_MTD_KeyTechnology&15]}
	global CONFIG_SH_KEYWEST
	global CONFIG_MTD_KEYWEST
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_SH_KEYWEST == 1 || $CONFIG_SH_KEYWEST == 2 || $CONFIG_SH_KEYWEST == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SH_KEYWEST]]; set CONFIG_MTD_KEYWEST [sync_tristate $CONFIG_MTD_KEYWEST $tmpvar_dep]; set CONFIG_MTD_KEYWEST [expr $CONFIG_MTD_KEYWEST&15]}
}


proc menu9 {w title} {
	set oldFocus [focus]
	catch {focus .menu6}
	catch {destroy $w; unregister_active 9}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 9]]
	message $w.m -width 400 -aspect 300 -text \
		"Self-contained MTD device drivers"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Self-contained MTD device drivers" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 9; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 9; menu10 .menu10 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 9"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 9; menu8 .menu8 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 9; menu8 .menu8 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 9 0 "  Ramix PMC551 PCI Mezzanine RAM card support" CONFIG_MTD_PMC551
	bool $w.config.f 9 1 "    PMC551 256M DRAM Bugfix" CONFIG_MTD_PMC551_BUGFIX
	bool $w.config.f 9 2 "    PMC551 Debugging" CONFIG_MTD_PMC551_DEBUG
	dep_tristate $w.config.f 9 3 "  Uncached system RAM" CONFIG_MTD_SLRAM
	dep_tristate $w.config.f 9 4 "  Test driver using RAM" CONFIG_MTD_MTDRAM
	int $w.config.f 9 5 "MTDRAM device size in KiB" CONFIG_MTDRAM_TOTAL_SIZE
	int $w.config.f 9 6 "MTDRAM erase block size in KiB" CONFIG_MTDRAM_ERASE_SIZE
	hex $w.config.f 9 7 "SRAM Hexadecimal Absolute position or 0" CONFIG_MTDRAM_ABS_POS
	dep_tristate $w.config.f 9 8 "  MTD emulation using block device" CONFIG_MTD_BLKMTD
	comment $w.config.f 9 9 "Disk-On-Chip Device Drivers"
	dep_tristate $w.config.f 9 10 "  M-Systems Disk-On-Chip 1000" CONFIG_MTD_DOC1000
	dep_tristate $w.config.f 9 11 "  M-Systems Disk-On-Chip 2000 and Millennium" CONFIG_MTD_DOC2000
	dep_tristate $w.config.f 9 12 "  M-Systems Disk-On-Chip Millennium-only alternative driver (see help)" CONFIG_MTD_DOC2001
	bool $w.config.f 9 13 "    Advanced detection options for DiskOnChip" CONFIG_MTD_DOCPROBE_ADVANCED
	hex $w.config.f 9 14 "    Physical address of DiskOnChip" CONFIG_MTD_DOCPROBE_ADDRESS
	bool $w.config.f 9 15 "    Probe high addresses" CONFIG_MTD_DOCPROBE_HIGH
	bool $w.config.f 9 16 "    Probe for 0x55 0xAA BIOS Extension Signature" CONFIG_MTD_DOCPROBE_55AA



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu6] == 0} then {menu6 .menu6 "Memory Technology Devices (MTD)"}
	set winx [expr [winfo x .menu6]+30]; set winy [expr [winfo y .menu6]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu9 {} {
	global CONFIG_MODULES
	global CONFIG_MTD
	global CONFIG_PCI
	global CONFIG_MTD_PMC551
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD $CONFIG_PCI]];set CONFIG_MTD_PMC551 [sync_tristate $CONFIG_MTD_PMC551 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x0 disabled {y}} else {configure_entry .menu9.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x0 disabled {m}} else {configure_entry .menu9.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x0 normal {m}} else {configure_entry .menu9.config.f.x0 disabled {m}}; configure_entry .menu9.config.f.x0 normal {n l}} else {configure_entry .menu9.config.f.x0 disabled {y n m l}}
	global CONFIG_MTD_PMC551_BUGFIX
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_PMC551 == 1 || $CONFIG_MTD_PMC551 == 2)} then {
	configure_entry .menu9.config.f.x1 normal {n l y}} else {configure_entry .menu9.config.f.x1 disabled {y n l}}
	global CONFIG_MTD_PMC551_DEBUG
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_PMC551 == 1 || $CONFIG_MTD_PMC551 == 2)} then {
	configure_entry .menu9.config.f.x2 normal {n l y}} else {configure_entry .menu9.config.f.x2 disabled {y n l}}
	global CONFIG_MTD_SLRAM
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_MTD_SLRAM [sync_tristate $CONFIG_MTD_SLRAM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x3 disabled {y}} else {configure_entry .menu9.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x3 disabled {m}} else {configure_entry .menu9.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x3 normal {m}} else {configure_entry .menu9.config.f.x3 disabled {m}}; configure_entry .menu9.config.f.x3 normal {n l}} else {configure_entry .menu9.config.f.x3 disabled {y n m l}}
	global CONFIG_MTD_MTDRAM
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_MTD_MTDRAM [sync_tristate $CONFIG_MTD_MTDRAM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x4 disabled {y}} else {configure_entry .menu9.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x4 disabled {m}} else {configure_entry .menu9.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x4 normal {m}} else {configure_entry .menu9.config.f.x4 disabled {m}}; configure_entry .menu9.config.f.x4 normal {n l}} else {configure_entry .menu9.config.f.x4 disabled {y n m l}}
	global CONFIG_MTDRAM_TOTAL_SIZE
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_MTDRAM == 1 || $CONFIG_MTD_MTDRAM == 2)} then {.menu9.config.f.x5.x configure -state normal -foreground [ cget .ref -foreground ]; .menu9.config.f.x5.l configure -state normal; } else {.menu9.config.f.x5.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu9.config.f.x5.l configure -state disabled}
	global CONFIG_MTDRAM_ERASE_SIZE
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_MTDRAM == 1 || $CONFIG_MTD_MTDRAM == 2)} then {.menu9.config.f.x6.x configure -state normal -foreground [ cget .ref -foreground ]; .menu9.config.f.x6.l configure -state normal; } else {.menu9.config.f.x6.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu9.config.f.x6.l configure -state disabled}
	global CONFIG_MTDRAM_ABS_POS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_MTDRAM == 1 || $CONFIG_MTD_MTDRAM == 2) && ($CONFIG_MTD_MTDRAM == 1)} then {.menu9.config.f.x7.x configure -state normal -foreground [ cget .ref -foreground ]; .menu9.config.f.x7.l configure -state normal; } else {.menu9.config.f.x7.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu9.config.f.x7.l configure -state disabled}
	global CONFIG_MTD_BLKMTD
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_MTD_BLKMTD [sync_tristate $CONFIG_MTD_BLKMTD $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x8 disabled {y}} else {configure_entry .menu9.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x8 disabled {m}} else {configure_entry .menu9.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x8 normal {m}} else {configure_entry .menu9.config.f.x8 disabled {m}}; configure_entry .menu9.config.f.x8 normal {n l}} else {configure_entry .menu9.config.f.x8 disabled {y n m l}}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2)} then {configure_entry .menu9.config.f.x9 normal {m}} else {configure_entry .menu9.config.f.x9 disabled {m}}
	global CONFIG_MTD_DOC1000
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_MTD_DOC1000 [sync_tristate $CONFIG_MTD_DOC1000 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x10 disabled {y}} else {configure_entry .menu9.config.f.x10 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x10 disabled {m}} else {configure_entry .menu9.config.f.x10 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x10 normal {m}} else {configure_entry .menu9.config.f.x10 disabled {m}}; configure_entry .menu9.config.f.x10 normal {n l}} else {configure_entry .menu9.config.f.x10 disabled {y n m l}}
	global CONFIG_MTD_DOC2000
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_MTD_DOC2000 [sync_tristate $CONFIG_MTD_DOC2000 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x11 disabled {y}} else {configure_entry .menu9.config.f.x11 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x11 disabled {m}} else {configure_entry .menu9.config.f.x11 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x11 normal {m}} else {configure_entry .menu9.config.f.x11 disabled {m}}; configure_entry .menu9.config.f.x11 normal {n l}} else {configure_entry .menu9.config.f.x11 disabled {y n m l}}
	global CONFIG_MTD_DOC2001
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_MTD_DOC2001 [sync_tristate $CONFIG_MTD_DOC2001 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu9.config.f.x12 disabled {y}} else {configure_entry .menu9.config.f.x12 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu9.config.f.x12 disabled {m}} else {configure_entry .menu9.config.f.x12 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu9.config.f.x12 normal {m}} else {configure_entry .menu9.config.f.x12 disabled {m}}; configure_entry .menu9.config.f.x12 normal {n l}} else {configure_entry .menu9.config.f.x12 disabled {y n m l}}
	global CONFIG_MTD_DOCPROBE
	global CONFIG_MTD_DOCPROBE_ADVANCED
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOCPROBE == 1 || $CONFIG_MTD_DOCPROBE == 2)} then {
	configure_entry .menu9.config.f.x13 normal {n l y}} else {configure_entry .menu9.config.f.x13 disabled {y n l}}
	global CONFIG_MTD_DOCPROBE_ADDRESS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOCPROBE == 1 || $CONFIG_MTD_DOCPROBE == 2) && ($CONFIG_MTD_DOCPROBE_ADVANCED != 0)} then {.menu9.config.f.x14.x configure -state normal -foreground [ cget .ref -foreground ]; .menu9.config.f.x14.l configure -state normal; } else {.menu9.config.f.x14.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu9.config.f.x14.l configure -state disabled}
	global CONFIG_MTD_DOCPROBE_HIGH
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOCPROBE == 1 || $CONFIG_MTD_DOCPROBE == 2) && ($CONFIG_MTD_DOCPROBE_ADVANCED != 0)} then {
	configure_entry .menu9.config.f.x15 normal {n l y}} else {configure_entry .menu9.config.f.x15 disabled {y n l}}
	global CONFIG_MTD_DOCPROBE_55AA
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOCPROBE == 1 || $CONFIG_MTD_DOCPROBE == 2) && ($CONFIG_MTD_DOCPROBE_ADVANCED != 0)} then {
	configure_entry .menu9.config.f.x16 normal {n l y}} else {configure_entry .menu9.config.f.x16 disabled {y n l}}
}


proc update_define_menu9 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_MTD_DOCPROBE
	global CONFIG_MTD_DOCPROBE_ADDRESS
	global CONFIG_MTD_DOCPROBE_HIGH
	global CONFIG_MTD_DOCPROBE_55AA
	global CONFIG_MTD_PMC551_BUGFIX
set CONFIG_MTD_PMC551_BUGFIX [expr $CONFIG_MTD_PMC551_BUGFIX|16]
	global CONFIG_MTD_PMC551_DEBUG
set CONFIG_MTD_PMC551_DEBUG [expr $CONFIG_MTD_PMC551_DEBUG|16]
	global CONFIG_MTD_DOCPROBE_ADVANCED
set CONFIG_MTD_DOCPROBE_ADVANCED [expr $CONFIG_MTD_DOCPROBE_ADVANCED|16]
set CONFIG_MTD_DOCPROBE_HIGH [expr $CONFIG_MTD_DOCPROBE_HIGH|16]
set CONFIG_MTD_DOCPROBE_55AA [expr $CONFIG_MTD_DOCPROBE_55AA|16]
	global CONFIG_MTD
	global CONFIG_PCI
	global CONFIG_MTD_PMC551
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD $CONFIG_PCI]]; set CONFIG_MTD_PMC551 [sync_tristate $CONFIG_MTD_PMC551 $tmpvar_dep]; set CONFIG_MTD_PMC551 [expr $CONFIG_MTD_PMC551&15]}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_PMC551 == 1 || $CONFIG_MTD_PMC551 == 2)} then {
	set CONFIG_MTD_PMC551_BUGFIX [expr $CONFIG_MTD_PMC551_BUGFIX&15]}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_PMC551 == 1 || $CONFIG_MTD_PMC551 == 2)} then {
	set CONFIG_MTD_PMC551_DEBUG [expr $CONFIG_MTD_PMC551_DEBUG&15]}
	global CONFIG_MTD_SLRAM
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_MTD_SLRAM [sync_tristate $CONFIG_MTD_SLRAM $tmpvar_dep]; set CONFIG_MTD_SLRAM [expr $CONFIG_MTD_SLRAM&15]}
	global CONFIG_MTD_MTDRAM
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_MTD_MTDRAM [sync_tristate $CONFIG_MTD_MTDRAM $tmpvar_dep]; set CONFIG_MTD_MTDRAM [expr $CONFIG_MTD_MTDRAM&15]}
	global CONFIG_MTDRAM_TOTAL_SIZE
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_MTDRAM == 1 || $CONFIG_MTD_MTDRAM == 2)} then {validate_int CONFIG_MTDRAM_TOTAL_SIZE "$CONFIG_MTDRAM_TOTAL_SIZE" 4096}
	global CONFIG_MTDRAM_ERASE_SIZE
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_MTDRAM == 1 || $CONFIG_MTD_MTDRAM == 2)} then {validate_int CONFIG_MTDRAM_ERASE_SIZE "$CONFIG_MTDRAM_ERASE_SIZE" 128}
	global CONFIG_MTDRAM_ABS_POS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_MTDRAM == 1 || $CONFIG_MTD_MTDRAM == 2) && ($CONFIG_MTD_MTDRAM == 1)} then {validate_hex CONFIG_MTDRAM_ABS_POS "$CONFIG_MTDRAM_ABS_POS" 0}
	global CONFIG_MTD_BLKMTD
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_MTD_BLKMTD [sync_tristate $CONFIG_MTD_BLKMTD $tmpvar_dep]; set CONFIG_MTD_BLKMTD [expr $CONFIG_MTD_BLKMTD&15]}
	global CONFIG_MTD_DOC1000
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_MTD_DOC1000 [sync_tristate $CONFIG_MTD_DOC1000 $tmpvar_dep]; set CONFIG_MTD_DOC1000 [expr $CONFIG_MTD_DOC1000&15]}
	global CONFIG_MTD_DOC2000
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_MTD_DOC2000 [sync_tristate $CONFIG_MTD_DOC2000 $tmpvar_dep]; set CONFIG_MTD_DOC2000 [expr $CONFIG_MTD_DOC2000&15]}
	global CONFIG_MTD_DOC2001
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_MTD_DOC2001 [sync_tristate $CONFIG_MTD_DOC2001 $tmpvar_dep]; set CONFIG_MTD_DOC2001 [expr $CONFIG_MTD_DOC2001&15]}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOC2001 == 1 || $CONFIG_MTD_DOC2000 == 1)} then {	global CONSTANT_Y
set CONFIG_MTD_DOCPROBE $CONSTANT_Y }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOC2001 != 1 && $CONFIG_MTD_DOC2000 != 1) && ($CONFIG_MTD_DOC2001 == 2 || $CONFIG_MTD_DOC2000 == 2)} then {	global CONSTANT_M
set CONFIG_MTD_DOCPROBE $CONSTANT_M }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOC2001 != 1 && $CONFIG_MTD_DOC2000 != 1) && ($CONFIG_MTD_DOC2001 != 2 && $CONFIG_MTD_DOC2000 != 2)} then {	global CONSTANT_N
set CONFIG_MTD_DOCPROBE $CONSTANT_N }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOCPROBE == 1 || $CONFIG_MTD_DOCPROBE == 2)} then {
	set CONFIG_MTD_DOCPROBE_ADVANCED [expr $CONFIG_MTD_DOCPROBE_ADVANCED&15]}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOCPROBE == 1 || $CONFIG_MTD_DOCPROBE == 2) && ($CONFIG_MTD_DOCPROBE_ADVANCED == 0)} then {set CONFIG_MTD_DOCPROBE_ADDRESS 0 }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOCPROBE == 1 || $CONFIG_MTD_DOCPROBE == 2) && ($CONFIG_MTD_DOCPROBE_ADVANCED == 0)} then {	global CONSTANT_N
set CONFIG_MTD_DOCPROBE_HIGH $CONSTANT_N }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOCPROBE == 1 || $CONFIG_MTD_DOCPROBE == 2) && ($CONFIG_MTD_DOCPROBE_ADVANCED == 0)} then {	global CONSTANT_N
set CONFIG_MTD_DOCPROBE_55AA $CONSTANT_N }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOCPROBE == 1 || $CONFIG_MTD_DOCPROBE == 2) && ($CONFIG_MTD_DOCPROBE_ADVANCED != 0)} then {validate_hex CONFIG_MTD_DOCPROBE_ADDRESS "$CONFIG_MTD_DOCPROBE_ADDRESS" 0x0000}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOCPROBE == 1 || $CONFIG_MTD_DOCPROBE == 2) && ($CONFIG_MTD_DOCPROBE_ADVANCED != 0)} then {
	set CONFIG_MTD_DOCPROBE_HIGH [expr $CONFIG_MTD_DOCPROBE_HIGH&15]}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOCPROBE == 1 || $CONFIG_MTD_DOCPROBE == 2) && ($CONFIG_MTD_DOCPROBE_ADVANCED != 0)} then {
	set CONFIG_MTD_DOCPROBE_55AA [expr $CONFIG_MTD_DOCPROBE_55AA&15]}
}


proc menu10 {w title} {
	set oldFocus [focus]
	catch {focus .menu6}
	catch {destroy $w; unregister_active 10}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 10]]
	message $w.m -width 400 -aspect 300 -text \
		"NAND Flash Device Drivers"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "NAND Flash Device Drivers" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 10; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 10; catch {destroy .menu6}; unregister_active 6; menu11 .menu11 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 10"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 10; menu9 .menu9 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 10; menu9 .menu9 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 10 0 "  NAND Device Support" CONFIG_MTD_NAND
	bool $w.config.f 10 1 "    Enable ECC correction algorithm" CONFIG_MTD_NAND_ECC
	bool $w.config.f 10 2 "    Verify NAND page writes" CONFIG_MTD_NAND_VERIFY_WRITE



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu6] == 0} then {menu6 .menu6 "Memory Technology Devices (MTD)"}
	set winx [expr [winfo x .menu6]+30]; set winy [expr [winfo y .menu6]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu10 {} {
	global CONFIG_MODULES
	global CONFIG_MTD
	global CONFIG_MTD_NAND
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_MTD_NAND [sync_tristate $CONFIG_MTD_NAND $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu10.config.f.x0 disabled {y}} else {configure_entry .menu10.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu10.config.f.x0 disabled {m}} else {configure_entry .menu10.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu10.config.f.x0 normal {m}} else {configure_entry .menu10.config.f.x0 disabled {m}}; configure_entry .menu10.config.f.x0 normal {n l}} else {configure_entry .menu10.config.f.x0 disabled {y n m l}}
	global CONFIG_MTD_NAND_ECC
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_NAND == 1 || $CONFIG_MTD_NAND == 2)} then {
	configure_entry .menu10.config.f.x1 normal {n l y}} else {configure_entry .menu10.config.f.x1 disabled {y n l}}
	global CONFIG_MTD_NAND_VERIFY_WRITE
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_NAND == 1 || $CONFIG_MTD_NAND == 2)} then {
	configure_entry .menu10.config.f.x2 normal {n l y}} else {configure_entry .menu10.config.f.x2 disabled {y n l}}
}


proc update_define_menu10 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_MTD_NAND_ECC
set CONFIG_MTD_NAND_ECC [expr $CONFIG_MTD_NAND_ECC|16]
	global CONFIG_MTD_NAND_VERIFY_WRITE
set CONFIG_MTD_NAND_VERIFY_WRITE [expr $CONFIG_MTD_NAND_VERIFY_WRITE|16]
	global CONFIG_MTD
	global CONFIG_MTD_NAND
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_MTD_NAND [sync_tristate $CONFIG_MTD_NAND $tmpvar_dep]; set CONFIG_MTD_NAND [expr $CONFIG_MTD_NAND&15]}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_NAND == 1 || $CONFIG_MTD_NAND == 2)} then {
	set CONFIG_MTD_NAND_ECC [expr $CONFIG_MTD_NAND_ECC&15]}
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_NAND == 1 || $CONFIG_MTD_NAND == 2)} then {
	set CONFIG_MTD_NAND_VERIFY_WRITE [expr $CONFIG_MTD_NAND_VERIFY_WRITE&15]}
}


menu_option menu11 11 "Parallel port support"
proc menu11 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 11}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 11]]
	message $w.m -width 400 -aspect 300 -text \
		"Parallel port support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Parallel port support" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 11; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 11; menu12 .menu12 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 11"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 11; menu10 .menu10 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 11; menu10 .menu10 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 11 0 "Parallel port support" CONFIG_PARPORT
	dep_tristate $w.config.f 11 1 "  PC-style hardware" CONFIG_PARPORT_PC
	dep_tristate $w.config.f 11 2 "    Multi-IO cards (parallel and serial)" CONFIG_PARPORT_SERIAL
	bool $w.config.f 11 3 "    Use FIFO/DMA if available (EXPERIMENTAL)" CONFIG_PARPORT_PC_FIFO
	bool $w.config.f 11 4 "    SuperIO chipset support (EXPERIMENTAL)" CONFIG_PARPORT_PC_SUPERIO
	dep_tristate $w.config.f 11 5 "    Support for PCMCIA management for PC-style ports" CONFIG_PARPORT_PC_PCMCIA
	dep_tristate $w.config.f 11 6 "    Support for PCMCIA management for PC-style ports" CONFIG_PARPORT_PC_PCMCIA
	bool $w.config.f 11 7 "  Support foreign hardware" CONFIG_PARPORT_OTHER
	bool $w.config.f 11 8 "  IEEE 1284 transfer modes" CONFIG_PARPORT_1284
	bool $w.config.f 11 9 "  HD64465 hardware" CONFIG_PARPORT_HD64465



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu11 {} {
	global CONFIG_PARPORT
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu11.config.f.x0 normal {m}} else {configure_entry .menu11.config.f.x0 disabled {m}}
	global CONFIG_PARPORT_PC
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT]];set CONFIG_PARPORT_PC [sync_tristate $CONFIG_PARPORT_PC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu11.config.f.x1 disabled {y}} else {configure_entry .menu11.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu11.config.f.x1 disabled {m}} else {configure_entry .menu11.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu11.config.f.x1 normal {m}} else {configure_entry .menu11.config.f.x1 disabled {m}}; configure_entry .menu11.config.f.x1 normal {n l}} else {configure_entry .menu11.config.f.x1 disabled {y n m l}}
	global CONFIG_SERIAL
	global CONFIG_PARPORT_PC_CML1
	global CONFIG_PARPORT_SERIAL
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0 && $CONFIG_SERIAL != 0) && ($CONFIG_PARPORT_PC_CML1 == 1 || $CONFIG_PARPORT_PC_CML1 == 2 || $CONFIG_PARPORT_PC_CML1 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT_PC_CML1]];set CONFIG_PARPORT_SERIAL [sync_tristate $CONFIG_PARPORT_SERIAL $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu11.config.f.x2 disabled {y}} else {configure_entry .menu11.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu11.config.f.x2 disabled {m}} else {configure_entry .menu11.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu11.config.f.x2 normal {m}} else {configure_entry .menu11.config.f.x2 disabled {m}}; configure_entry .menu11.config.f.x2 normal {n l}} else {configure_entry .menu11.config.f.x2 disabled {y n m l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_PARPORT_PC_FIFO
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu11.config.f.x3 normal {n l y}} else {configure_entry .menu11.config.f.x3 disabled {y n l}}
	global CONFIG_PARPORT_PC_SUPERIO
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu11.config.f.x4 normal {n l y}} else {configure_entry .menu11.config.f.x4 disabled {y n l}}
	global CONFIG_HOTPLUG
	global CONFIG_PCMCIA
	global CONFIG_PARPORT_PC_PCMCIA
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_PARPORT_PC == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]];set CONFIG_PARPORT_PC_PCMCIA [sync_tristate $CONFIG_PARPORT_PC_PCMCIA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu11.config.f.x5 disabled {y}} else {configure_entry .menu11.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu11.config.f.x5 disabled {m}} else {configure_entry .menu11.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu11.config.f.x5 normal {m}} else {configure_entry .menu11.config.f.x5 disabled {m}}; configure_entry .menu11.config.f.x5 normal {n l}} else {configure_entry .menu11.config.f.x5 disabled {y n m l}}
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_PARPORT_PC != 1) && ($CONFIG_PARPORT_PC == 1 || $CONFIG_PARPORT_PC == 2 || $CONFIG_PARPORT_PC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT_PC]];set CONFIG_PARPORT_PC_PCMCIA [sync_tristate $CONFIG_PARPORT_PC_PCMCIA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu11.config.f.x6 disabled {y}} else {configure_entry .menu11.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu11.config.f.x6 disabled {m}} else {configure_entry .menu11.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu11.config.f.x6 normal {m}} else {configure_entry .menu11.config.f.x6 disabled {m}}; configure_entry .menu11.config.f.x6 normal {n l}} else {configure_entry .menu11.config.f.x6 disabled {y n m l}}
	global CONFIG_PARPORT_OTHER
	if {($CONFIG_PARPORT != 0)} then {
	configure_entry .menu11.config.f.x7 normal {n l y}} else {configure_entry .menu11.config.f.x7 disabled {y n l}}
	global CONFIG_PARPORT_1284
	if {($CONFIG_PARPORT != 0)} then {
	configure_entry .menu11.config.f.x8 normal {n l y}} else {configure_entry .menu11.config.f.x8 disabled {y n l}}
	global CONFIG_SH_HD64465
	global CONFIG_PARPORT_HD64465
	if {($CONFIG_PARPORT != 0) && ($CONFIG_SH_HD64465 != 0)} then {
	configure_entry .menu11.config.f.x9 normal {n l y}} else {configure_entry .menu11.config.f.x9 disabled {y n l}}
}


proc update_define_menu11 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_PARPORT
	global CONFIG_PARPORT_PC_CML1
	global CONFIG_PARPORT_AMIGA
	global CONFIG_PARPORT_MFC3
	global CONFIG_PARPORT_ATARI
	global CONFIG_PARPORT_GSC
	global CONFIG_PARPORT_SUNBPP
	global CONFIG_PARPORT_PC_FIFO
set CONFIG_PARPORT_PC_FIFO [expr $CONFIG_PARPORT_PC_FIFO|16]
	global CONFIG_PARPORT_PC_SUPERIO
set CONFIG_PARPORT_PC_SUPERIO [expr $CONFIG_PARPORT_PC_SUPERIO|16]
	global CONFIG_PARPORT_OTHER
set CONFIG_PARPORT_OTHER [expr $CONFIG_PARPORT_OTHER|16]
	global CONFIG_PARPORT_1284
set CONFIG_PARPORT_1284 [expr $CONFIG_PARPORT_1284|16]
	global CONFIG_PARPORT_HD64465
set CONFIG_PARPORT_HD64465 [expr $CONFIG_PARPORT_HD64465|16]

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_PARPORT == 2)} then {set CONFIG_PARPORT 1}}
	global CONFIG_PARPORT_PC
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT]]; set CONFIG_PARPORT_PC [sync_tristate $CONFIG_PARPORT_PC $tmpvar_dep]; set CONFIG_PARPORT_PC [expr $CONFIG_PARPORT_PC&15]}
	global CONFIG_SERIAL
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0 && $CONFIG_SERIAL != 0) && ($CONFIG_SERIAL == 2)} then {	global CONSTANT_M
set CONFIG_PARPORT_PC_CML1 $CONSTANT_M }
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0 && $CONFIG_SERIAL != 0) && ($CONFIG_SERIAL != 2)} then {set CONFIG_PARPORT_PC_CML1 $CONFIG_PARPORT_PC }
	global CONFIG_PARPORT_SERIAL
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0 && $CONFIG_SERIAL != 0) && ($CONFIG_PARPORT_PC_CML1 == 1 || $CONFIG_PARPORT_PC_CML1 == 2 || $CONFIG_PARPORT_PC_CML1 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT_PC_CML1]]; set CONFIG_PARPORT_SERIAL [sync_tristate $CONFIG_PARPORT_SERIAL $tmpvar_dep]; set CONFIG_PARPORT_SERIAL [expr $CONFIG_PARPORT_SERIAL&15]}
	global CONFIG_EXPERIMENTAL
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_PARPORT_PC_FIFO [expr $CONFIG_PARPORT_PC_FIFO&15]}
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_PARPORT_PC_SUPERIO [expr $CONFIG_PARPORT_PC_SUPERIO&15]}
	global CONFIG_HOTPLUG
	global CONFIG_PCMCIA
	global CONFIG_PARPORT_PC_PCMCIA
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_PARPORT_PC == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]]; set CONFIG_PARPORT_PC_PCMCIA [sync_tristate $CONFIG_PARPORT_PC_PCMCIA $tmpvar_dep]; set CONFIG_PARPORT_PC_PCMCIA [expr $CONFIG_PARPORT_PC_PCMCIA&15]}
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_PARPORT_PC != 1) && ($CONFIG_PARPORT_PC == 1 || $CONFIG_PARPORT_PC == 2 || $CONFIG_PARPORT_PC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT_PC]]; set CONFIG_PARPORT_PC_PCMCIA [sync_tristate $CONFIG_PARPORT_PC_PCMCIA $tmpvar_dep]; set CONFIG_PARPORT_PC_PCMCIA [expr $CONFIG_PARPORT_PC_PCMCIA&15]}
	if {($CONFIG_PARPORT != 0)} then {	global CONSTANT_N
set CONFIG_PARPORT_AMIGA $CONSTANT_N }
	if {($CONFIG_PARPORT != 0)} then {	global CONSTANT_N
set CONFIG_PARPORT_MFC3 $CONSTANT_N }
	if {($CONFIG_PARPORT != 0)} then {	global CONSTANT_N
set CONFIG_PARPORT_ATARI $CONSTANT_N }
	if {($CONFIG_PARPORT != 0)} then {	global CONSTANT_N
set CONFIG_PARPORT_GSC $CONSTANT_N }
	if {($CONFIG_PARPORT != 0)} then {	global CONSTANT_N
set CONFIG_PARPORT_SUNBPP $CONSTANT_N }
	if {($CONFIG_PARPORT != 0)} then {
	set CONFIG_PARPORT_OTHER [expr $CONFIG_PARPORT_OTHER&15]}
	if {($CONFIG_PARPORT != 0)} then {
	set CONFIG_PARPORT_1284 [expr $CONFIG_PARPORT_1284&15]}
	global CONFIG_SH_HD64465
	if {($CONFIG_PARPORT != 0) && ($CONFIG_SH_HD64465 != 0)} then {
	set CONFIG_PARPORT_HD64465 [expr $CONFIG_PARPORT_HD64465&15]}
}


menu_option menu12 12 "Plug and Play configuration"
proc menu12 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 12}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 12]]
	message $w.m -width 400 -aspect 300 -text \
		"Plug and Play configuration"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Plug and Play configuration" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 12; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 12; menu13 .menu13 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 12"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 12; menu11 .menu11 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 12; menu11 .menu11 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 12 0 "Plug and Play support" CONFIG_PNP
	dep_tristate $w.config.f 12 1 "  ISA Plug and Play support" CONFIG_ISAPNP



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu12 {} {
	global CONFIG_PNP
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu12.config.f.x0 normal {m}} else {configure_entry .menu12.config.f.x0 disabled {m}}
	global CONFIG_ISAPNP
	if {($CONFIG_PNP == 1 || $CONFIG_PNP == 2 || $CONFIG_PNP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PNP]];set CONFIG_ISAPNP [sync_tristate $CONFIG_ISAPNP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu12.config.f.x1 disabled {y}} else {configure_entry .menu12.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu12.config.f.x1 disabled {m}} else {configure_entry .menu12.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu12.config.f.x1 normal {m}} else {configure_entry .menu12.config.f.x1 disabled {m}}; configure_entry .menu12.config.f.x1 normal {n l}} else {configure_entry .menu12.config.f.x1 disabled {y n m l}}
}


proc update_define_menu12 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_PNP

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_PNP == 2)} then {set CONFIG_PNP 1}}
	global CONFIG_ISAPNP
	if {($CONFIG_PNP == 1 || $CONFIG_PNP == 2 || $CONFIG_PNP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PNP]]; set CONFIG_ISAPNP [sync_tristate $CONFIG_ISAPNP $tmpvar_dep]; set CONFIG_ISAPNP [expr $CONFIG_ISAPNP&15]}
}


menu_option menu13 13 "Block devices"
proc menu13 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 13}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 13]]
	message $w.m -width 400 -aspect 300 -text \
		"Block devices"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Block devices" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 13; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 13; menu14 .menu14 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 13"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 13; menu12 .menu12 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 13; menu12 .menu12 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 13 0 "Normal PC floppy disk support" CONFIG_BLK_DEV_FD
	tristate $w.config.f 13 1 "PS/2 ESDI hard disk support" CONFIG_BLK_DEV_PS2
	dep_tristate $w.config.f 13 2 "XT hard disk support" CONFIG_BLK_DEV_XD
	dep_tristate $w.config.f 13 3 "Parallel port IDE device support" CONFIG_PARIDE
	comment $w.config.f 13 4 "Parallel IDE high-level drivers"
	dep_tristate $w.config.f 13 5 "  Parallel port IDE disks" CONFIG_PARIDE_PD
	dep_tristate $w.config.f 13 6 "  Parallel port ATAPI CD-ROMs" CONFIG_PARIDE_PCD
	dep_tristate $w.config.f 13 7 "  Parallel port ATAPI disks" CONFIG_PARIDE_PF
	dep_tristate $w.config.f 13 8 "  Parallel port ATAPI tapes" CONFIG_PARIDE_PT
	dep_tristate $w.config.f 13 9 "  Parallel port generic ATAPI devices" CONFIG_PARIDE_PG
	comment $w.config.f 13 10 "Parallel IDE protocol modules"
	dep_tristate $w.config.f 13 11 "    ATEN EH-100 protocol" CONFIG_PARIDE_ATEN
	dep_tristate $w.config.f 13 12 "    MicroSolutions backpack (Series 5) protocol" CONFIG_PARIDE_BPCK
	dep_tristate $w.config.f 13 13 "    MicroSolutions backpack (Series 6) protocol" CONFIG_PARIDE_BPCK6
	dep_tristate $w.config.f 13 14 "    DataStor Commuter protocol" CONFIG_PARIDE_COMM
	dep_tristate $w.config.f 13 15 "    DataStor EP-2000 protocol" CONFIG_PARIDE_DSTR
	dep_tristate $w.config.f 13 16 "    FIT TD-2000 protocol" CONFIG_PARIDE_FIT2
	dep_tristate $w.config.f 13 17 "    FIT TD-3000 protocol" CONFIG_PARIDE_FIT3
	dep_tristate $w.config.f 13 18 "    Shuttle EPAT/EPEZ protocol" CONFIG_PARIDE_EPAT
	bool $w.config.f 13 19 "     Support c7/c8 chips (EXPERIMENTAL)" CONFIG_PARIDE_EPATC8
	dep_tristate $w.config.f 13 20 "    Shuttle EPIA protocol" CONFIG_PARIDE_EPIA
	dep_tristate $w.config.f 13 21 "    Freecom IQ ASIC-2 protocol" CONFIG_PARIDE_FRIQ
	dep_tristate $w.config.f 13 22 "    FreeCom power protocol" CONFIG_PARIDE_FRPW
	dep_tristate $w.config.f 13 23 "    KingByte KBIC-951A/971A protocols" CONFIG_PARIDE_KBIC
	dep_tristate $w.config.f 13 24 "    KT PHd protocol" CONFIG_PARIDE_KTTI
	dep_tristate $w.config.f 13 25 "    OnSpec 90c20 protocol" CONFIG_PARIDE_ON20
	dep_tristate $w.config.f 13 26 "    OnSpec 90c26 protocol" CONFIG_PARIDE_ON26
	dep_tristate $w.config.f 13 27 "Compaq SMART2 support" CONFIG_BLK_CPQ_DA
	dep_tristate $w.config.f 13 28 "Compaq Smart Array 5xxx support" CONFIG_BLK_CPQ_CISS_DA
	dep_tristate $w.config.f 13 29 "Mylex DAC960/DAC1100 PCI RAID Controller support" CONFIG_BLK_DEV_DAC960
	tristate $w.config.f 13 30 "Loopback device support" CONFIG_BLK_DEV_LOOP
	dep_tristate $w.config.f 13 31 "Network block device support" CONFIG_BLK_DEV_NBD
	tristate $w.config.f 13 32 "RAM disk support" CONFIG_BLK_DEV_RAM
	int $w.config.f 13 33 "  Default RAM disk size" CONFIG_BLK_DEV_RAM_SIZE
	dep_bool $w.config.f 13 34 "  Initial RAM disk (initrd) support" CONFIG_BLK_DEV_INITRD
	tristate $w.config.f 13 35 "ROM disk memory block device (blkmem)" CONFIG_BLK_DEV_BLKMEM



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu13 {} {
	global CONFIG_BLK_DEV_FD
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x0 normal {m}} else {configure_entry .menu13.config.f.x0 disabled {m}}
	global CONFIG_MCA
	global CONFIG_BLK_DEV_PS2
	if {($CONFIG_MCA == 1)} then {
	configure_entry .menu13.config.f.x1 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x1 normal {m}} else {configure_entry .menu13.config.f.x1 disabled {m}}; configure_entry .menu13.config.f.x1 normal {n l}} else {configure_entry .menu13.config.f.x1 disabled {y n m l}}
	global CONFIG_ISA
	global CONFIG_BLK_DEV_XD
	if {($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]];set CONFIG_BLK_DEV_XD [sync_tristate $CONFIG_BLK_DEV_XD $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x2 disabled {y}} else {configure_entry .menu13.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x2 disabled {m}} else {configure_entry .menu13.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x2 normal {m}} else {configure_entry .menu13.config.f.x2 disabled {m}}; configure_entry .menu13.config.f.x2 normal {n l}} else {configure_entry .menu13.config.f.x2 disabled {y n m l}}
	global CONFIG_PARPORT
	global CONFIG_PARIDE
	if {($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT]];set CONFIG_PARIDE [sync_tristate $CONFIG_PARIDE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x3 disabled {y}} else {configure_entry .menu13.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x3 disabled {m}} else {configure_entry .menu13.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x3 normal {m}} else {configure_entry .menu13.config.f.x3 disabled {m}}; configure_entry .menu13.config.f.x3 normal {n l}} else {configure_entry .menu13.config.f.x3 disabled {y n m l}}
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2)} then {configure_entry .menu13.config.f.x4 normal {m}} else {configure_entry .menu13.config.f.x4 disabled {m}}
	global CONFIG_PARIDE_PD
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_PD [sync_tristate $CONFIG_PARIDE_PD $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x5 disabled {y}} else {configure_entry .menu13.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x5 disabled {m}} else {configure_entry .menu13.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x5 normal {m}} else {configure_entry .menu13.config.f.x5 disabled {m}}; configure_entry .menu13.config.f.x5 normal {n l}} else {configure_entry .menu13.config.f.x5 disabled {y n m l}}
	global CONFIG_PARIDE_PCD
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_PCD [sync_tristate $CONFIG_PARIDE_PCD $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x6 disabled {y}} else {configure_entry .menu13.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x6 disabled {m}} else {configure_entry .menu13.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x6 normal {m}} else {configure_entry .menu13.config.f.x6 disabled {m}}; configure_entry .menu13.config.f.x6 normal {n l}} else {configure_entry .menu13.config.f.x6 disabled {y n m l}}
	global CONFIG_PARIDE_PF
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_PF [sync_tristate $CONFIG_PARIDE_PF $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x7 disabled {y}} else {configure_entry .menu13.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x7 disabled {m}} else {configure_entry .menu13.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x7 normal {m}} else {configure_entry .menu13.config.f.x7 disabled {m}}; configure_entry .menu13.config.f.x7 normal {n l}} else {configure_entry .menu13.config.f.x7 disabled {y n m l}}
	global CONFIG_PARIDE_PT
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_PT [sync_tristate $CONFIG_PARIDE_PT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x8 disabled {y}} else {configure_entry .menu13.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x8 disabled {m}} else {configure_entry .menu13.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x8 normal {m}} else {configure_entry .menu13.config.f.x8 disabled {m}}; configure_entry .menu13.config.f.x8 normal {n l}} else {configure_entry .menu13.config.f.x8 disabled {y n m l}}
	global CONFIG_PARIDE_PG
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_PG [sync_tristate $CONFIG_PARIDE_PG $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x9 disabled {y}} else {configure_entry .menu13.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x9 disabled {m}} else {configure_entry .menu13.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x9 normal {m}} else {configure_entry .menu13.config.f.x9 disabled {m}}; configure_entry .menu13.config.f.x9 normal {n l}} else {configure_entry .menu13.config.f.x9 disabled {y n m l}}
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2)} then {configure_entry .menu13.config.f.x10 normal {m}} else {configure_entry .menu13.config.f.x10 disabled {m}}
	global CONFIG_PARIDE_ATEN
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_ATEN [sync_tristate $CONFIG_PARIDE_ATEN $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x11 disabled {y}} else {configure_entry .menu13.config.f.x11 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x11 disabled {m}} else {configure_entry .menu13.config.f.x11 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x11 normal {m}} else {configure_entry .menu13.config.f.x11 disabled {m}}; configure_entry .menu13.config.f.x11 normal {n l}} else {configure_entry .menu13.config.f.x11 disabled {y n m l}}
	global CONFIG_PARIDE_BPCK
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_BPCK [sync_tristate $CONFIG_PARIDE_BPCK $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x12 disabled {y}} else {configure_entry .menu13.config.f.x12 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x12 disabled {m}} else {configure_entry .menu13.config.f.x12 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x12 normal {m}} else {configure_entry .menu13.config.f.x12 disabled {m}}; configure_entry .menu13.config.f.x12 normal {n l}} else {configure_entry .menu13.config.f.x12 disabled {y n m l}}
	global CONFIG_PARIDE_BPCK6
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_BPCK6 [sync_tristate $CONFIG_PARIDE_BPCK6 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x13 disabled {y}} else {configure_entry .menu13.config.f.x13 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x13 disabled {m}} else {configure_entry .menu13.config.f.x13 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x13 normal {m}} else {configure_entry .menu13.config.f.x13 disabled {m}}; configure_entry .menu13.config.f.x13 normal {n l}} else {configure_entry .menu13.config.f.x13 disabled {y n m l}}
	global CONFIG_PARIDE_COMM
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_COMM [sync_tristate $CONFIG_PARIDE_COMM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x14 disabled {y}} else {configure_entry .menu13.config.f.x14 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x14 disabled {m}} else {configure_entry .menu13.config.f.x14 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x14 normal {m}} else {configure_entry .menu13.config.f.x14 disabled {m}}; configure_entry .menu13.config.f.x14 normal {n l}} else {configure_entry .menu13.config.f.x14 disabled {y n m l}}
	global CONFIG_PARIDE_DSTR
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_DSTR [sync_tristate $CONFIG_PARIDE_DSTR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x15 disabled {y}} else {configure_entry .menu13.config.f.x15 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x15 disabled {m}} else {configure_entry .menu13.config.f.x15 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x15 normal {m}} else {configure_entry .menu13.config.f.x15 disabled {m}}; configure_entry .menu13.config.f.x15 normal {n l}} else {configure_entry .menu13.config.f.x15 disabled {y n m l}}
	global CONFIG_PARIDE_FIT2
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_FIT2 [sync_tristate $CONFIG_PARIDE_FIT2 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x16 disabled {y}} else {configure_entry .menu13.config.f.x16 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x16 disabled {m}} else {configure_entry .menu13.config.f.x16 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x16 normal {m}} else {configure_entry .menu13.config.f.x16 disabled {m}}; configure_entry .menu13.config.f.x16 normal {n l}} else {configure_entry .menu13.config.f.x16 disabled {y n m l}}
	global CONFIG_PARIDE_FIT3
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_FIT3 [sync_tristate $CONFIG_PARIDE_FIT3 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x17 disabled {y}} else {configure_entry .menu13.config.f.x17 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x17 disabled {m}} else {configure_entry .menu13.config.f.x17 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x17 normal {m}} else {configure_entry .menu13.config.f.x17 disabled {m}}; configure_entry .menu13.config.f.x17 normal {n l}} else {configure_entry .menu13.config.f.x17 disabled {y n m l}}
	global CONFIG_PARIDE_EPAT
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_EPAT [sync_tristate $CONFIG_PARIDE_EPAT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x18 disabled {y}} else {configure_entry .menu13.config.f.x18 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x18 disabled {m}} else {configure_entry .menu13.config.f.x18 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x18 normal {m}} else {configure_entry .menu13.config.f.x18 disabled {m}}; configure_entry .menu13.config.f.x18 normal {n l}} else {configure_entry .menu13.config.f.x18 disabled {y n m l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_PARIDE_EPATC8
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE_EPAT != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu13.config.f.x19 normal {n l y}} else {configure_entry .menu13.config.f.x19 disabled {y n l}}
	global CONFIG_PARIDE_EPIA
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_EPIA [sync_tristate $CONFIG_PARIDE_EPIA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x20 disabled {y}} else {configure_entry .menu13.config.f.x20 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x20 disabled {m}} else {configure_entry .menu13.config.f.x20 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x20 normal {m}} else {configure_entry .menu13.config.f.x20 disabled {m}}; configure_entry .menu13.config.f.x20 normal {n l}} else {configure_entry .menu13.config.f.x20 disabled {y n m l}}
	global CONFIG_PARIDE_FRIQ
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_FRIQ [sync_tristate $CONFIG_PARIDE_FRIQ $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x21 disabled {y}} else {configure_entry .menu13.config.f.x21 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x21 disabled {m}} else {configure_entry .menu13.config.f.x21 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x21 normal {m}} else {configure_entry .menu13.config.f.x21 disabled {m}}; configure_entry .menu13.config.f.x21 normal {n l}} else {configure_entry .menu13.config.f.x21 disabled {y n m l}}
	global CONFIG_PARIDE_FRPW
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_FRPW [sync_tristate $CONFIG_PARIDE_FRPW $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x22 disabled {y}} else {configure_entry .menu13.config.f.x22 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x22 disabled {m}} else {configure_entry .menu13.config.f.x22 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x22 normal {m}} else {configure_entry .menu13.config.f.x22 disabled {m}}; configure_entry .menu13.config.f.x22 normal {n l}} else {configure_entry .menu13.config.f.x22 disabled {y n m l}}
	global CONFIG_PARIDE_KBIC
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_KBIC [sync_tristate $CONFIG_PARIDE_KBIC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x23 disabled {y}} else {configure_entry .menu13.config.f.x23 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x23 disabled {m}} else {configure_entry .menu13.config.f.x23 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x23 normal {m}} else {configure_entry .menu13.config.f.x23 disabled {m}}; configure_entry .menu13.config.f.x23 normal {n l}} else {configure_entry .menu13.config.f.x23 disabled {y n m l}}
	global CONFIG_PARIDE_KTTI
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_KTTI [sync_tristate $CONFIG_PARIDE_KTTI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x24 disabled {y}} else {configure_entry .menu13.config.f.x24 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x24 disabled {m}} else {configure_entry .menu13.config.f.x24 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x24 normal {m}} else {configure_entry .menu13.config.f.x24 disabled {m}}; configure_entry .menu13.config.f.x24 normal {n l}} else {configure_entry .menu13.config.f.x24 disabled {y n m l}}
	global CONFIG_PARIDE_ON20
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_ON20 [sync_tristate $CONFIG_PARIDE_ON20 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x25 disabled {y}} else {configure_entry .menu13.config.f.x25 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x25 disabled {m}} else {configure_entry .menu13.config.f.x25 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x25 normal {m}} else {configure_entry .menu13.config.f.x25 disabled {m}}; configure_entry .menu13.config.f.x25 normal {n l}} else {configure_entry .menu13.config.f.x25 disabled {y n m l}}
	global CONFIG_PARIDE_ON26
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]];set CONFIG_PARIDE_ON26 [sync_tristate $CONFIG_PARIDE_ON26 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x26 disabled {y}} else {configure_entry .menu13.config.f.x26 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x26 disabled {m}} else {configure_entry .menu13.config.f.x26 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x26 normal {m}} else {configure_entry .menu13.config.f.x26 disabled {m}}; configure_entry .menu13.config.f.x26 normal {n l}} else {configure_entry .menu13.config.f.x26 disabled {y n m l}}
	global CONFIG_PCI
	global CONFIG_BLK_CPQ_DA
	if {($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_BLK_CPQ_DA [sync_tristate $CONFIG_BLK_CPQ_DA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x27 disabled {y}} else {configure_entry .menu13.config.f.x27 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x27 disabled {m}} else {configure_entry .menu13.config.f.x27 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x27 normal {m}} else {configure_entry .menu13.config.f.x27 disabled {m}}; configure_entry .menu13.config.f.x27 normal {n l}} else {configure_entry .menu13.config.f.x27 disabled {y n m l}}
	global CONFIG_BLK_CPQ_CISS_DA
	if {($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_BLK_CPQ_CISS_DA [sync_tristate $CONFIG_BLK_CPQ_CISS_DA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x28 disabled {y}} else {configure_entry .menu13.config.f.x28 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x28 disabled {m}} else {configure_entry .menu13.config.f.x28 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x28 normal {m}} else {configure_entry .menu13.config.f.x28 disabled {m}}; configure_entry .menu13.config.f.x28 normal {n l}} else {configure_entry .menu13.config.f.x28 disabled {y n m l}}
	global CONFIG_BLK_DEV_DAC960
	if {($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_BLK_DEV_DAC960 [sync_tristate $CONFIG_BLK_DEV_DAC960 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x29 disabled {y}} else {configure_entry .menu13.config.f.x29 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x29 disabled {m}} else {configure_entry .menu13.config.f.x29 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x29 normal {m}} else {configure_entry .menu13.config.f.x29 disabled {m}}; configure_entry .menu13.config.f.x29 normal {n l}} else {configure_entry .menu13.config.f.x29 disabled {y n m l}}
	global CONFIG_BLK_DEV_LOOP

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x30 normal {m}} else {configure_entry .menu13.config.f.x30 disabled {m}}
	global CONFIG_NET
	global CONFIG_BLK_DEV_NBD
	if {($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NET]];set CONFIG_BLK_DEV_NBD [sync_tristate $CONFIG_BLK_DEV_NBD $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x31 disabled {y}} else {configure_entry .menu13.config.f.x31 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu13.config.f.x31 disabled {m}} else {configure_entry .menu13.config.f.x31 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x31 normal {m}} else {configure_entry .menu13.config.f.x31 disabled {m}}; configure_entry .menu13.config.f.x31 normal {n l}} else {configure_entry .menu13.config.f.x31 disabled {y n m l}}
	global CONFIG_BLK_DEV_RAM

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x32 normal {m}} else {configure_entry .menu13.config.f.x32 disabled {m}}
	global CONFIG_BLK_DEV_RAM_SIZE
	if {($CONFIG_BLK_DEV_RAM == 1 || $CONFIG_BLK_DEV_RAM == 2)} then {.menu13.config.f.x33.x configure -state normal -foreground [ cget .ref -foreground ]; .menu13.config.f.x33.l configure -state normal; } else {.menu13.config.f.x33.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu13.config.f.x33.l configure -state disabled}
	global CONFIG_BLK_DEV_INITRD
	if {($CONFIG_BLK_DEV_RAM == 1 || $CONFIG_BLK_DEV_RAM == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_RAM]];set CONFIG_BLK_DEV_INITRD [sync_bool $CONFIG_BLK_DEV_INITRD $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu13.config.f.x34 disabled {y};} else {configure_entry .menu13.config.f.x34 normal {y};}; configure_entry .menu13.config.f.x34 normal {n l}} else {configure_entry .menu13.config.f.x34 disabled {y n l}}
	global CONFIG_BLK_DEV_BLKMEM

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu13.config.f.x35 normal {m}} else {configure_entry .menu13.config.f.x35 disabled {m}}
}


proc update_define_menu13 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_BLK_DEV_FD
	global CONFIG_BLK_DEV_PS2
	global CONFIG_PARIDE_PARPORT
	global CONFIG_BLK_DEV_LOOP
	global CONFIG_BLK_DEV_RAM
	global CONFIG_BLK_DEV_BLKMEM
set CONFIG_BLK_DEV_PS2 [expr $CONFIG_BLK_DEV_PS2|16]
	global CONFIG_PARIDE_EPATC8
set CONFIG_PARIDE_EPATC8 [expr $CONFIG_PARIDE_EPATC8|16]

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BLK_DEV_FD == 2)} then {set CONFIG_BLK_DEV_FD 1}}
	global CONFIG_MCA
	if {($CONFIG_MCA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_BLK_DEV_PS2 == 2)} then {set CONFIG_BLK_DEV_PS2 1}; set CONFIG_BLK_DEV_PS2 [expr $CONFIG_BLK_DEV_PS2&15]}
	global CONFIG_ISA
	global CONFIG_BLK_DEV_XD
	if {($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]]; set CONFIG_BLK_DEV_XD [sync_tristate $CONFIG_BLK_DEV_XD $tmpvar_dep]; set CONFIG_BLK_DEV_XD [expr $CONFIG_BLK_DEV_XD&15]}
	global CONFIG_PARPORT
	global CONFIG_PARIDE
	if {($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT]]; set CONFIG_PARIDE [sync_tristate $CONFIG_PARIDE $tmpvar_dep]; set CONFIG_PARIDE [expr $CONFIG_PARIDE&15]}
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 0)} then {	global CONSTANT_Y
set CONFIG_PARIDE_PARPORT $CONSTANT_Y }
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARPORT != 1 && $CONFIG_PARPORT != 0)} then {	global CONSTANT_M
set CONFIG_PARIDE_PARPORT $CONSTANT_M }
	global CONFIG_PARIDE_PD
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_PD [sync_tristate $CONFIG_PARIDE_PD $tmpvar_dep]; set CONFIG_PARIDE_PD [expr $CONFIG_PARIDE_PD&15]}
	global CONFIG_PARIDE_PCD
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_PCD [sync_tristate $CONFIG_PARIDE_PCD $tmpvar_dep]; set CONFIG_PARIDE_PCD [expr $CONFIG_PARIDE_PCD&15]}
	global CONFIG_PARIDE_PF
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_PF [sync_tristate $CONFIG_PARIDE_PF $tmpvar_dep]; set CONFIG_PARIDE_PF [expr $CONFIG_PARIDE_PF&15]}
	global CONFIG_PARIDE_PT
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_PT [sync_tristate $CONFIG_PARIDE_PT $tmpvar_dep]; set CONFIG_PARIDE_PT [expr $CONFIG_PARIDE_PT&15]}
	global CONFIG_PARIDE_PG
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_PG [sync_tristate $CONFIG_PARIDE_PG $tmpvar_dep]; set CONFIG_PARIDE_PG [expr $CONFIG_PARIDE_PG&15]}
	global CONFIG_PARIDE_ATEN
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_ATEN [sync_tristate $CONFIG_PARIDE_ATEN $tmpvar_dep]; set CONFIG_PARIDE_ATEN [expr $CONFIG_PARIDE_ATEN&15]}
	global CONFIG_PARIDE_BPCK
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_BPCK [sync_tristate $CONFIG_PARIDE_BPCK $tmpvar_dep]; set CONFIG_PARIDE_BPCK [expr $CONFIG_PARIDE_BPCK&15]}
	global CONFIG_PARIDE_BPCK6
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_BPCK6 [sync_tristate $CONFIG_PARIDE_BPCK6 $tmpvar_dep]; set CONFIG_PARIDE_BPCK6 [expr $CONFIG_PARIDE_BPCK6&15]}
	global CONFIG_PARIDE_COMM
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_COMM [sync_tristate $CONFIG_PARIDE_COMM $tmpvar_dep]; set CONFIG_PARIDE_COMM [expr $CONFIG_PARIDE_COMM&15]}
	global CONFIG_PARIDE_DSTR
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_DSTR [sync_tristate $CONFIG_PARIDE_DSTR $tmpvar_dep]; set CONFIG_PARIDE_DSTR [expr $CONFIG_PARIDE_DSTR&15]}
	global CONFIG_PARIDE_FIT2
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_FIT2 [sync_tristate $CONFIG_PARIDE_FIT2 $tmpvar_dep]; set CONFIG_PARIDE_FIT2 [expr $CONFIG_PARIDE_FIT2&15]}
	global CONFIG_PARIDE_FIT3
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_FIT3 [sync_tristate $CONFIG_PARIDE_FIT3 $tmpvar_dep]; set CONFIG_PARIDE_FIT3 [expr $CONFIG_PARIDE_FIT3&15]}
	global CONFIG_PARIDE_EPAT
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_EPAT [sync_tristate $CONFIG_PARIDE_EPAT $tmpvar_dep]; set CONFIG_PARIDE_EPAT [expr $CONFIG_PARIDE_EPAT&15]}
	global CONFIG_EXPERIMENTAL
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE_EPAT != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_PARIDE_EPATC8 [expr $CONFIG_PARIDE_EPATC8&15]}
	global CONFIG_PARIDE_EPIA
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_EPIA [sync_tristate $CONFIG_PARIDE_EPIA $tmpvar_dep]; set CONFIG_PARIDE_EPIA [expr $CONFIG_PARIDE_EPIA&15]}
	global CONFIG_PARIDE_FRIQ
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_FRIQ [sync_tristate $CONFIG_PARIDE_FRIQ $tmpvar_dep]; set CONFIG_PARIDE_FRIQ [expr $CONFIG_PARIDE_FRIQ&15]}
	global CONFIG_PARIDE_FRPW
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_FRPW [sync_tristate $CONFIG_PARIDE_FRPW $tmpvar_dep]; set CONFIG_PARIDE_FRPW [expr $CONFIG_PARIDE_FRPW&15]}
	global CONFIG_PARIDE_KBIC
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_KBIC [sync_tristate $CONFIG_PARIDE_KBIC $tmpvar_dep]; set CONFIG_PARIDE_KBIC [expr $CONFIG_PARIDE_KBIC&15]}
	global CONFIG_PARIDE_KTTI
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_KTTI [sync_tristate $CONFIG_PARIDE_KTTI $tmpvar_dep]; set CONFIG_PARIDE_KTTI [expr $CONFIG_PARIDE_KTTI&15]}
	global CONFIG_PARIDE_ON20
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_ON20 [sync_tristate $CONFIG_PARIDE_ON20 $tmpvar_dep]; set CONFIG_PARIDE_ON20 [expr $CONFIG_PARIDE_ON20&15]}
	global CONFIG_PARIDE_ON26
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARIDE]]; set CONFIG_PARIDE_ON26 [sync_tristate $CONFIG_PARIDE_ON26 $tmpvar_dep]; set CONFIG_PARIDE_ON26 [expr $CONFIG_PARIDE_ON26&15]}
	global CONFIG_PCI
	global CONFIG_BLK_CPQ_DA
	if {($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_BLK_CPQ_DA [sync_tristate $CONFIG_BLK_CPQ_DA $tmpvar_dep]; set CONFIG_BLK_CPQ_DA [expr $CONFIG_BLK_CPQ_DA&15]}
	global CONFIG_BLK_CPQ_CISS_DA
	if {($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_BLK_CPQ_CISS_DA [sync_tristate $CONFIG_BLK_CPQ_CISS_DA $tmpvar_dep]; set CONFIG_BLK_CPQ_CISS_DA [expr $CONFIG_BLK_CPQ_CISS_DA&15]}
	global CONFIG_BLK_DEV_DAC960
	if {($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_BLK_DEV_DAC960 [sync_tristate $CONFIG_BLK_DEV_DAC960 $tmpvar_dep]; set CONFIG_BLK_DEV_DAC960 [expr $CONFIG_BLK_DEV_DAC960&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BLK_DEV_LOOP == 2)} then {set CONFIG_BLK_DEV_LOOP 1}}
	global CONFIG_NET
	global CONFIG_BLK_DEV_NBD
	if {($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NET]]; set CONFIG_BLK_DEV_NBD [sync_tristate $CONFIG_BLK_DEV_NBD $tmpvar_dep]; set CONFIG_BLK_DEV_NBD [expr $CONFIG_BLK_DEV_NBD&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BLK_DEV_RAM == 2)} then {set CONFIG_BLK_DEV_RAM 1}}
	global CONFIG_BLK_DEV_RAM_SIZE
	if {($CONFIG_BLK_DEV_RAM == 1 || $CONFIG_BLK_DEV_RAM == 2)} then {validate_int CONFIG_BLK_DEV_RAM_SIZE "$CONFIG_BLK_DEV_RAM_SIZE" 4096}
	global CONFIG_BLK_DEV_INITRD
	if {($CONFIG_BLK_DEV_RAM == 1 || $CONFIG_BLK_DEV_RAM == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_RAM]];set CONFIG_BLK_DEV_INITRD [sync_bool $CONFIG_BLK_DEV_INITRD $tmpvar_dep 0];set CONFIG_BLK_DEV_INITRD [expr $CONFIG_BLK_DEV_INITRD&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BLK_DEV_BLKMEM == 2)} then {set CONFIG_BLK_DEV_BLKMEM 1}}
}


menu_option menu14 14 "Networking options"
proc menu14 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 14}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 14]]
	message $w.m -width 400 -aspect 300 -text \
		"Networking options"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Networking options" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 14; break"
	set nextscript "catch {focus $oldFocus}; menu15 .menu15 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 14"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 14; menu13 .menu13 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 14; menu13 .menu13 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 14 0 "Packet socket" CONFIG_PACKET
	bool $w.config.f 14 1 "  Packet socket: mmapped IO" CONFIG_PACKET_MMAP
	tristate $w.config.f 14 2 "Netlink device emulation" CONFIG_NETLINK_DEV
	bool $w.config.f 14 3 "Network packet filtering (replaces ipchains)" CONFIG_NETFILTER
	bool $w.config.f 14 4 "  Network packet filtering debugging" CONFIG_NETFILTER_DEBUG
	bool $w.config.f 14 5 "Socket Filtering" CONFIG_FILTER
	tristate $w.config.f 14 6 "Unix domain sockets" CONFIG_UNIX
	bool $w.config.f 14 7 "TCP/IP networking" CONFIG_INET
	bool $w.config.f 14 8 "  IP: multicasting" CONFIG_IP_MULTICAST
	bool $w.config.f 14 9 "  IP: advanced router" CONFIG_IP_ADVANCED_ROUTER
	bool $w.config.f 14 10 "    IP: policy routing" CONFIG_IP_MULTIPLE_TABLES
	bool $w.config.f 14 11 "      IP: use netfilter MARK value as routing key" CONFIG_IP_ROUTE_FWMARK
	bool $w.config.f 14 12 "      IP: fast network address translation" CONFIG_IP_ROUTE_NAT
	bool $w.config.f 14 13 "    IP: equal cost multipath" CONFIG_IP_ROUTE_MULTIPATH
	bool $w.config.f 14 14 "    IP: use TOS value as routing key" CONFIG_IP_ROUTE_TOS
	bool $w.config.f 14 15 "    IP: verbose route monitoring" CONFIG_IP_ROUTE_VERBOSE
	bool $w.config.f 14 16 "    IP: large routing tables" CONFIG_IP_ROUTE_LARGE_TABLES
	bool $w.config.f 14 17 "  IP: kernel level autoconfiguration" CONFIG_IP_PNP
	bool $w.config.f 14 18 "    IP: DHCP support" CONFIG_IP_PNP_DHCP
	bool $w.config.f 14 19 "    IP: BOOTP support" CONFIG_IP_PNP_BOOTP
	bool $w.config.f 14 20 "    IP: RARP support" CONFIG_IP_PNP_RARP
	tristate $w.config.f 14 21 "  IP: tunneling" CONFIG_NET_IPIP
	tristate $w.config.f 14 22 "  IP: GRE tunnels over IP" CONFIG_NET_IPGRE
	bool $w.config.f 14 23 "    IP: broadcast GRE over IP" CONFIG_NET_IPGRE_BROADCAST
	bool $w.config.f 14 24 "  IP: multicast routing" CONFIG_IP_MROUTE
	bool $w.config.f 14 25 "    IP: PIM-SM version 1 support" CONFIG_IP_PIMSM_V1
	bool $w.config.f 14 26 "    IP: PIM-SM version 2 support" CONFIG_IP_PIMSM_V2
	bool $w.config.f 14 27 "  IP: ARP daemon support (EXPERIMENTAL)" CONFIG_ARPD
	bool $w.config.f 14 28 "  IP: TCP Explicit Congestion Notification support" CONFIG_INET_ECN
	bool $w.config.f 14 29 "  IP: TCP syncookie support (disabled per default)" CONFIG_SYN_COOKIES
	submenu $w.config.f 14 30 "  IP: Netfilter Configuration" 15
	tristate $w.config.f 14 31 "  The IPv6 protocol (EXPERIMENTAL)" CONFIG_IPV6
	submenu $w.config.f 14 32 "  IPv6: Netfilter Configuration" 16
	tristate $w.config.f 14 33 "  Kernel httpd acceleration (EXPERIMENTAL)" CONFIG_KHTTPD
	bool $w.config.f 14 34 "Asynchronous Transfer Mode (ATM) (EXPERIMENTAL)" CONFIG_ATM
	bool $w.config.f 14 35 "  Classical IP over ATM" CONFIG_ATM_CLIP
	bool $w.config.f 14 36 "    Do NOT send ICMP if no neighbour" CONFIG_ATM_CLIP_NO_ICMP
	tristate $w.config.f 14 37 "  LAN Emulation (LANE) support" CONFIG_ATM_LANE
	tristate $w.config.f 14 38 "    Multi-Protocol Over ATM (MPOA) support" CONFIG_ATM_MPOA
	dep_tristate $w.config.f 14 39 "802.1Q VLAN Support (EXPERIMENTAL)" CONFIG_VLAN_8021Q
	comment $w.config.f 14 40 " "
	tristate $w.config.f 14 41 "The IPX protocol" CONFIG_IPX
	bool $w.config.f 14 42 "  IPX: Full internal IPX network" CONFIG_IPX_INTERN
	tristate $w.config.f 14 43 "Appletalk protocol support" CONFIG_ATALK
	tristate $w.config.f 14 44 "DECnet Support" CONFIG_DECNET
	bool $w.config.f 14 45 "  DECnet: SIOCGIFCONF support" CONFIG_DECNET_SIOCGIFCONF
	bool $w.config.f 14 46 "  DECnet: router support (EXPERIMENTAL)" CONFIG_DECNET_ROUTER
	bool $w.config.f 14 47 "    DECnet: use FWMARK value as routing key (EXPERIMENTAL)" CONFIG_DECNET_ROUTE_FWMARK
	tristate $w.config.f 14 48 "802.1d Ethernet Bridging" CONFIG_BRIDGE
	tristate $w.config.f 14 49 "CCITT X.25 Packet Layer (EXPERIMENTAL)" CONFIG_X25
	tristate $w.config.f 14 50 "LAPB Data Link Driver (EXPERIMENTAL)" CONFIG_LAPB
	bool $w.config.f 14 51 "802.2 LLC (EXPERIMENTAL)" CONFIG_LLC
	bool $w.config.f 14 52 "Frame Diverter (EXPERIMENTAL)" CONFIG_NET_DIVERT
	tristate $w.config.f 14 53 "Acorn Econet/AUN protocols (EXPERIMENTAL)" CONFIG_ECONET
	bool $w.config.f 14 54 "  AUN over UDP" CONFIG_ECONET_AUNUDP
	bool $w.config.f 14 55 "  Native Econet" CONFIG_ECONET_NATIVE
	tristate $w.config.f 14 56 "WAN router" CONFIG_WAN_ROUTER
	bool $w.config.f 14 57 "Fast switching (read help!)" CONFIG_NET_FASTROUTE
	bool $w.config.f 14 58 "Forwarding between high speed interfaces" CONFIG_NET_HW_FLOWCONTROL
	submenu $w.config.f 14 59 "QoS and/or fair queueing" 17
	tristate $w.config.f 14 60 "IP Security Protocol (FreeS/WAN IPSEC)" CONFIG_IPSEC
	comment $w.config.f 14 61 "IPSec options (FreeS/WAN)"
	bool $w.config.f 14 62 "   IPSEC: IP-in-IP encapsulation (tunnel mode)" CONFIG_IPSEC_IPIP
	bool $w.config.f 14 63 "   IPSEC: Authentication Header" CONFIG_IPSEC_AH
	bool $w.config.f 14 64 "      HMAC-MD5 authentication algorithm" CONFIG_IPSEC_AUTH_HMAC_MD5
	bool $w.config.f 14 65 "      HMAC-SHA1 authentication algorithm" CONFIG_IPSEC_AUTH_HMAC_SHA1
	bool $w.config.f 14 66 "   IPSEC: Encapsulating Security Payload" CONFIG_IPSEC_ESP
	bool $w.config.f 14 67 "      DES encryption algorithm" CONFIG_IPSEC_ENC_DES
	bool $w.config.f 14 68 "      3DES encryption algorithm" CONFIG_IPSEC_ENC_3DES
	bool $w.config.f 14 69 "   IPSEC: IP Compression" CONFIG_IPSEC_IPCOMP
	bool $w.config.f 14 70 "   IPSEC Debugging Option" CONFIG_IPSEC_DEBUG



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu14 {} {
	global CONFIG_MODULES
	global CONFIG_NET
	global CONFIG_PACKET
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu14.config.f.x0 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x0 normal {m}} else {configure_entry .menu14.config.f.x0 disabled {m}}; configure_entry .menu14.config.f.x0 normal {n l}} else {configure_entry .menu14.config.f.x0 disabled {y n m l}}
	global CONFIG_PACKET_MMAP
	if {($CONFIG_NET == 1) && ($CONFIG_PACKET != 0)} then {
	configure_entry .menu14.config.f.x1 normal {n l y}} else {configure_entry .menu14.config.f.x1 disabled {y n l}}
	global CONFIG_NETLINK_DEV
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu14.config.f.x2 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x2 normal {m}} else {configure_entry .menu14.config.f.x2 disabled {m}}; configure_entry .menu14.config.f.x2 normal {n l}} else {configure_entry .menu14.config.f.x2 disabled {y n m l}}
	global CONFIG_NETFILTER
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu14.config.f.x3 normal {n l y}} else {configure_entry .menu14.config.f.x3 disabled {y n l}}
	global CONFIG_NETFILTER_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_NETFILTER == 1)} then {
	configure_entry .menu14.config.f.x4 normal {n l y}} else {configure_entry .menu14.config.f.x4 disabled {y n l}}
	global CONFIG_FILTER
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu14.config.f.x5 normal {n l y}} else {configure_entry .menu14.config.f.x5 disabled {y n l}}
	global CONFIG_UNIX
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu14.config.f.x6 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x6 normal {m}} else {configure_entry .menu14.config.f.x6 disabled {m}}; configure_entry .menu14.config.f.x6 normal {n l}} else {configure_entry .menu14.config.f.x6 disabled {y n m l}}
	global CONFIG_INET
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu14.config.f.x7 normal {n l y}} else {configure_entry .menu14.config.f.x7 disabled {y n l}}
	global CONFIG_IP_MULTICAST
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu14.config.f.x8 normal {n l y}} else {configure_entry .menu14.config.f.x8 disabled {y n l}}
	global CONFIG_IP_ADVANCED_ROUTER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu14.config.f.x9 normal {n l y}} else {configure_entry .menu14.config.f.x9 disabled {y n l}}
	global CONFIG_IP_MULTIPLE_TABLES
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1)} then {
	configure_entry .menu14.config.f.x10 normal {n l y}} else {configure_entry .menu14.config.f.x10 disabled {y n l}}
	global CONFIG_IP_ROUTE_FWMARK
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1) && ($CONFIG_IP_MULTIPLE_TABLES == 1) && ($CONFIG_NETFILTER == 1)} then {
	configure_entry .menu14.config.f.x11 normal {n l y}} else {configure_entry .menu14.config.f.x11 disabled {y n l}}
	global CONFIG_IP_ROUTE_NAT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1) && ($CONFIG_IP_MULTIPLE_TABLES == 1)} then {
	configure_entry .menu14.config.f.x12 normal {n l y}} else {configure_entry .menu14.config.f.x12 disabled {y n l}}
	global CONFIG_IP_ROUTE_MULTIPATH
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1)} then {
	configure_entry .menu14.config.f.x13 normal {n l y}} else {configure_entry .menu14.config.f.x13 disabled {y n l}}
	global CONFIG_IP_ROUTE_TOS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1)} then {
	configure_entry .menu14.config.f.x14 normal {n l y}} else {configure_entry .menu14.config.f.x14 disabled {y n l}}
	global CONFIG_IP_ROUTE_VERBOSE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1)} then {
	configure_entry .menu14.config.f.x15 normal {n l y}} else {configure_entry .menu14.config.f.x15 disabled {y n l}}
	global CONFIG_IP_ROUTE_LARGE_TABLES
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1)} then {
	configure_entry .menu14.config.f.x16 normal {n l y}} else {configure_entry .menu14.config.f.x16 disabled {y n l}}
	global CONFIG_IP_PNP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu14.config.f.x17 normal {n l y}} else {configure_entry .menu14.config.f.x17 disabled {y n l}}
	global CONFIG_IP_PNP_DHCP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_PNP == 1)} then {
	configure_entry .menu14.config.f.x18 normal {n l y}} else {configure_entry .menu14.config.f.x18 disabled {y n l}}
	global CONFIG_IP_PNP_BOOTP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_PNP == 1)} then {
	configure_entry .menu14.config.f.x19 normal {n l y}} else {configure_entry .menu14.config.f.x19 disabled {y n l}}
	global CONFIG_IP_PNP_RARP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_PNP == 1)} then {
	configure_entry .menu14.config.f.x20 normal {n l y}} else {configure_entry .menu14.config.f.x20 disabled {y n l}}
	global CONFIG_NET_IPIP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu14.config.f.x21 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x21 normal {m}} else {configure_entry .menu14.config.f.x21 disabled {m}}; configure_entry .menu14.config.f.x21 normal {n l}} else {configure_entry .menu14.config.f.x21 disabled {y n m l}}
	global CONFIG_NET_IPGRE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu14.config.f.x22 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x22 normal {m}} else {configure_entry .menu14.config.f.x22 disabled {m}}; configure_entry .menu14.config.f.x22 normal {n l}} else {configure_entry .menu14.config.f.x22 disabled {y n m l}}
	global CONFIG_NET_IPGRE_BROADCAST
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_MULTICAST == 1) && ($CONFIG_NET_IPGRE != 0)} then {
	configure_entry .menu14.config.f.x23 normal {n l y}} else {configure_entry .menu14.config.f.x23 disabled {y n l}}
	global CONFIG_IP_MROUTE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_MULTICAST == 1)} then {
	configure_entry .menu14.config.f.x24 normal {n l y}} else {configure_entry .menu14.config.f.x24 disabled {y n l}}
	global CONFIG_IP_PIMSM_V1
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_MULTICAST == 1) && ($CONFIG_IP_MROUTE == 1)} then {
	configure_entry .menu14.config.f.x25 normal {n l y}} else {configure_entry .menu14.config.f.x25 disabled {y n l}}
	global CONFIG_IP_PIMSM_V2
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_MULTICAST == 1) && ($CONFIG_IP_MROUTE == 1)} then {
	configure_entry .menu14.config.f.x26 normal {n l y}} else {configure_entry .menu14.config.f.x26 disabled {y n l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_ARPD
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu14.config.f.x27 normal {n l y}} else {configure_entry .menu14.config.f.x27 disabled {y n l}}
	global CONFIG_INET_ECN
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu14.config.f.x28 normal {n l y}} else {configure_entry .menu14.config.f.x28 disabled {y n l}}
	global CONFIG_SYN_COOKIES
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu14.config.f.x29 normal {n l y}} else {configure_entry .menu14.config.f.x29 disabled {y n l}}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0)} then {configure_entry .menu14.config.f.x30 normal {m}} else {configure_entry .menu14.config.f.x30 disabled {m}}
	global CONFIG_IPV6
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu14.config.f.x31 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x31 normal {m}} else {configure_entry .menu14.config.f.x31 disabled {m}}; configure_entry .menu14.config.f.x31 normal {n l}} else {configure_entry .menu14.config.f.x31 disabled {y n m l}}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0)} then {configure_entry .menu14.config.f.x32 normal {m}} else {configure_entry .menu14.config.f.x32 disabled {m}}
	global CONFIG_KHTTPD
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu14.config.f.x33 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x33 normal {m}} else {configure_entry .menu14.config.f.x33 disabled {m}}; configure_entry .menu14.config.f.x33 normal {n l}} else {configure_entry .menu14.config.f.x33 disabled {y n m l}}
	global CONFIG_ATM
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu14.config.f.x34 normal {n l y}} else {configure_entry .menu14.config.f.x34 disabled {y n l}}
	global CONFIG_ATM_CLIP
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_ATM == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu14.config.f.x35 normal {n l y}} else {configure_entry .menu14.config.f.x35 disabled {y n l}}
	global CONFIG_ATM_CLIP_NO_ICMP
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_ATM == 1) && ($CONFIG_INET == 1) && ($CONFIG_ATM_CLIP == 1)} then {
	configure_entry .menu14.config.f.x36 normal {n l y}} else {configure_entry .menu14.config.f.x36 disabled {y n l}}
	global CONFIG_ATM_LANE
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_ATM == 1)} then {
	configure_entry .menu14.config.f.x37 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x37 normal {m}} else {configure_entry .menu14.config.f.x37 disabled {m}}; configure_entry .menu14.config.f.x37 normal {n l}} else {configure_entry .menu14.config.f.x37 disabled {y n m l}}
	global CONFIG_ATM_MPOA
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_ATM == 1) && ($CONFIG_INET == 1 && $CONFIG_ATM_LANE != 0)} then {
	configure_entry .menu14.config.f.x38 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x38 normal {m}} else {configure_entry .menu14.config.f.x38 disabled {m}}; configure_entry .menu14.config.f.x38 normal {n l}} else {configure_entry .menu14.config.f.x38 disabled {y n m l}}
	global CONFIG_VLAN_8021Q
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_VLAN_8021Q [sync_tristate $CONFIG_VLAN_8021Q $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu14.config.f.x39 disabled {y}} else {configure_entry .menu14.config.f.x39 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu14.config.f.x39 disabled {m}} else {configure_entry .menu14.config.f.x39 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x39 normal {m}} else {configure_entry .menu14.config.f.x39 disabled {m}}; configure_entry .menu14.config.f.x39 normal {n l}} else {configure_entry .menu14.config.f.x39 disabled {y n m l}}
	if {($CONFIG_NET == 1)} then {configure_entry .menu14.config.f.x40 normal {m}} else {configure_entry .menu14.config.f.x40 disabled {m}}
	global CONFIG_IPX
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu14.config.f.x41 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x41 normal {m}} else {configure_entry .menu14.config.f.x41 disabled {m}}; configure_entry .menu14.config.f.x41 normal {n l}} else {configure_entry .menu14.config.f.x41 disabled {y n m l}}
	global CONFIG_IPX_INTERN
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0)} then {
	configure_entry .menu14.config.f.x42 normal {n l y}} else {configure_entry .menu14.config.f.x42 disabled {y n l}}
	global CONFIG_ATALK
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu14.config.f.x43 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x43 normal {m}} else {configure_entry .menu14.config.f.x43 disabled {m}}; configure_entry .menu14.config.f.x43 normal {n l}} else {configure_entry .menu14.config.f.x43 disabled {y n m l}}
	global CONFIG_DECNET
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu14.config.f.x44 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x44 normal {m}} else {configure_entry .menu14.config.f.x44 disabled {m}}; configure_entry .menu14.config.f.x44 normal {n l}} else {configure_entry .menu14.config.f.x44 disabled {y n m l}}
	global CONFIG_DECNET_SIOCGIFCONF
	if {($CONFIG_NET == 1) && ($CONFIG_DECNET != 0)} then {
	configure_entry .menu14.config.f.x45 normal {n l y}} else {configure_entry .menu14.config.f.x45 disabled {y n l}}
	global CONFIG_DECNET_ROUTER
	if {($CONFIG_NET == 1) && ($CONFIG_DECNET != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu14.config.f.x46 normal {n l y}} else {configure_entry .menu14.config.f.x46 disabled {y n l}}
	global CONFIG_DECNET_ROUTE_FWMARK
	if {($CONFIG_NET == 1) && ($CONFIG_DECNET != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_DECNET_ROUTER == 1) && ($CONFIG_NETFILTER == 1)} then {
	configure_entry .menu14.config.f.x47 normal {n l y}} else {configure_entry .menu14.config.f.x47 disabled {y n l}}
	global CONFIG_BRIDGE
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu14.config.f.x48 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x48 normal {m}} else {configure_entry .menu14.config.f.x48 disabled {m}}; configure_entry .menu14.config.f.x48 normal {n l}} else {configure_entry .menu14.config.f.x48 disabled {y n m l}}
	global CONFIG_X25
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu14.config.f.x49 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x49 normal {m}} else {configure_entry .menu14.config.f.x49 disabled {m}}; configure_entry .menu14.config.f.x49 normal {n l}} else {configure_entry .menu14.config.f.x49 disabled {y n m l}}
	global CONFIG_LAPB
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu14.config.f.x50 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x50 normal {m}} else {configure_entry .menu14.config.f.x50 disabled {m}}; configure_entry .menu14.config.f.x50 normal {n l}} else {configure_entry .menu14.config.f.x50 disabled {y n m l}}
	global CONFIG_LLC
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu14.config.f.x51 normal {n l y}} else {configure_entry .menu14.config.f.x51 disabled {y n l}}
	global CONFIG_NET_DIVERT
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu14.config.f.x52 normal {n l y}} else {configure_entry .menu14.config.f.x52 disabled {y n l}}
	global CONFIG_ECONET
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu14.config.f.x53 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x53 normal {m}} else {configure_entry .menu14.config.f.x53 disabled {m}}; configure_entry .menu14.config.f.x53 normal {n l}} else {configure_entry .menu14.config.f.x53 disabled {y n m l}}
	global CONFIG_ECONET_AUNUDP
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_ECONET != 0)} then {
	configure_entry .menu14.config.f.x54 normal {n l y}} else {configure_entry .menu14.config.f.x54 disabled {y n l}}
	global CONFIG_ECONET_NATIVE
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_ECONET != 0)} then {
	configure_entry .menu14.config.f.x55 normal {n l y}} else {configure_entry .menu14.config.f.x55 disabled {y n l}}
	global CONFIG_WAN_ROUTER
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu14.config.f.x56 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x56 normal {m}} else {configure_entry .menu14.config.f.x56 disabled {m}}; configure_entry .menu14.config.f.x56 normal {n l}} else {configure_entry .menu14.config.f.x56 disabled {y n m l}}
	global CONFIG_NET_FASTROUTE
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu14.config.f.x57 normal {n l y}} else {configure_entry .menu14.config.f.x57 disabled {y n l}}
	global CONFIG_NET_HW_FLOWCONTROL
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu14.config.f.x58 normal {n l y}} else {configure_entry .menu14.config.f.x58 disabled {y n l}}
	if {($CONFIG_NET == 1)} then {configure_entry .menu14.config.f.x59 normal {m}} else {configure_entry .menu14.config.f.x59 disabled {m}}
	global CONFIG_IPSEC
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu14.config.f.x60 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu14.config.f.x60 normal {m}} else {configure_entry .menu14.config.f.x60 disabled {m}}; configure_entry .menu14.config.f.x60 normal {n l}} else {configure_entry .menu14.config.f.x60 disabled {y n m l}}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {configure_entry .menu14.config.f.x61 normal {m}} else {configure_entry .menu14.config.f.x61 disabled {m}}
	global CONFIG_IPSEC_IPIP
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	configure_entry .menu14.config.f.x62 normal {n l y}} else {configure_entry .menu14.config.f.x62 disabled {y n l}}
	global CONFIG_IPSEC_AH
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	configure_entry .menu14.config.f.x63 normal {n l y}} else {configure_entry .menu14.config.f.x63 disabled {y n l}}
	global CONFIG_IPSEC_ESP
	global CONFIG_IPSEC_AUTH_HMAC_MD5
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_AH == 1 || $CONFIG_IPSEC_ESP == 1)} then {
	configure_entry .menu14.config.f.x64 normal {n l y}} else {configure_entry .menu14.config.f.x64 disabled {y n l}}
	global CONFIG_IPSEC_AUTH_HMAC_SHA1
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_AH == 1 || $CONFIG_IPSEC_ESP == 1)} then {
	configure_entry .menu14.config.f.x65 normal {n l y}} else {configure_entry .menu14.config.f.x65 disabled {y n l}}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	configure_entry .menu14.config.f.x66 normal {n l y}} else {configure_entry .menu14.config.f.x66 disabled {y n l}}
	global CONFIG_IPSEC_ENC_DES
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_ESP == 1)} then {
	configure_entry .menu14.config.f.x67 normal {n l y}} else {configure_entry .menu14.config.f.x67 disabled {y n l}}
	global CONFIG_IPSEC_ENC_3DES
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_ESP == 1)} then {
	configure_entry .menu14.config.f.x68 normal {n l y}} else {configure_entry .menu14.config.f.x68 disabled {y n l}}
	global CONFIG_IPSEC_IPCOMP
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	configure_entry .menu14.config.f.x69 normal {n l y}} else {configure_entry .menu14.config.f.x69 disabled {y n l}}
	global CONFIG_IPSEC_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	configure_entry .menu14.config.f.x70 normal {n l y}} else {configure_entry .menu14.config.f.x70 disabled {y n l}}
}


proc update_define_menu14 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_PACKET
	global CONFIG_NETLINK_DEV
	global CONFIG_UNIX
	global CONFIG_NET_IPIP
	global CONFIG_NET_IPGRE
	global CONFIG_IPV6
	global CONFIG_KHTTPD
	global CONFIG_ATM_LANE
	global CONFIG_ATM_MPOA
	global CONFIG_IPX
	global CONFIG_ATALK
	global CONFIG_DECNET
	global CONFIG_BRIDGE
	global CONFIG_X25
	global CONFIG_LAPB
	global CONFIG_ECONET
	global CONFIG_WAN_ROUTER
	global CONFIG_IPSEC
set CONFIG_PACKET [expr $CONFIG_PACKET|16]
	global CONFIG_PACKET_MMAP
set CONFIG_PACKET_MMAP [expr $CONFIG_PACKET_MMAP|16]
set CONFIG_NETLINK_DEV [expr $CONFIG_NETLINK_DEV|16]
	global CONFIG_NETFILTER
set CONFIG_NETFILTER [expr $CONFIG_NETFILTER|16]
	global CONFIG_NETFILTER_DEBUG
set CONFIG_NETFILTER_DEBUG [expr $CONFIG_NETFILTER_DEBUG|16]
	global CONFIG_FILTER
set CONFIG_FILTER [expr $CONFIG_FILTER|16]
set CONFIG_UNIX [expr $CONFIG_UNIX|16]
	global CONFIG_INET
set CONFIG_INET [expr $CONFIG_INET|16]
	global CONFIG_IP_MULTICAST
set CONFIG_IP_MULTICAST [expr $CONFIG_IP_MULTICAST|16]
	global CONFIG_IP_ADVANCED_ROUTER
set CONFIG_IP_ADVANCED_ROUTER [expr $CONFIG_IP_ADVANCED_ROUTER|16]
	global CONFIG_IP_MULTIPLE_TABLES
set CONFIG_IP_MULTIPLE_TABLES [expr $CONFIG_IP_MULTIPLE_TABLES|16]
	global CONFIG_IP_ROUTE_FWMARK
set CONFIG_IP_ROUTE_FWMARK [expr $CONFIG_IP_ROUTE_FWMARK|16]
	global CONFIG_IP_ROUTE_NAT
set CONFIG_IP_ROUTE_NAT [expr $CONFIG_IP_ROUTE_NAT|16]
	global CONFIG_IP_ROUTE_MULTIPATH
set CONFIG_IP_ROUTE_MULTIPATH [expr $CONFIG_IP_ROUTE_MULTIPATH|16]
	global CONFIG_IP_ROUTE_TOS
set CONFIG_IP_ROUTE_TOS [expr $CONFIG_IP_ROUTE_TOS|16]
	global CONFIG_IP_ROUTE_VERBOSE
set CONFIG_IP_ROUTE_VERBOSE [expr $CONFIG_IP_ROUTE_VERBOSE|16]
	global CONFIG_IP_ROUTE_LARGE_TABLES
set CONFIG_IP_ROUTE_LARGE_TABLES [expr $CONFIG_IP_ROUTE_LARGE_TABLES|16]
	global CONFIG_IP_PNP
set CONFIG_IP_PNP [expr $CONFIG_IP_PNP|16]
	global CONFIG_IP_PNP_DHCP
set CONFIG_IP_PNP_DHCP [expr $CONFIG_IP_PNP_DHCP|16]
	global CONFIG_IP_PNP_BOOTP
set CONFIG_IP_PNP_BOOTP [expr $CONFIG_IP_PNP_BOOTP|16]
	global CONFIG_IP_PNP_RARP
set CONFIG_IP_PNP_RARP [expr $CONFIG_IP_PNP_RARP|16]
set CONFIG_NET_IPIP [expr $CONFIG_NET_IPIP|16]
set CONFIG_NET_IPGRE [expr $CONFIG_NET_IPGRE|16]
	global CONFIG_NET_IPGRE_BROADCAST
set CONFIG_NET_IPGRE_BROADCAST [expr $CONFIG_NET_IPGRE_BROADCAST|16]
	global CONFIG_IP_MROUTE
set CONFIG_IP_MROUTE [expr $CONFIG_IP_MROUTE|16]
	global CONFIG_IP_PIMSM_V1
set CONFIG_IP_PIMSM_V1 [expr $CONFIG_IP_PIMSM_V1|16]
	global CONFIG_IP_PIMSM_V2
set CONFIG_IP_PIMSM_V2 [expr $CONFIG_IP_PIMSM_V2|16]
	global CONFIG_ARPD
set CONFIG_ARPD [expr $CONFIG_ARPD|16]
	global CONFIG_INET_ECN
set CONFIG_INET_ECN [expr $CONFIG_INET_ECN|16]
	global CONFIG_SYN_COOKIES
set CONFIG_SYN_COOKIES [expr $CONFIG_SYN_COOKIES|16]
set CONFIG_IPV6 [expr $CONFIG_IPV6|16]
set CONFIG_KHTTPD [expr $CONFIG_KHTTPD|16]
	global CONFIG_ATM
set CONFIG_ATM [expr $CONFIG_ATM|16]
	global CONFIG_ATM_CLIP
set CONFIG_ATM_CLIP [expr $CONFIG_ATM_CLIP|16]
	global CONFIG_ATM_CLIP_NO_ICMP
set CONFIG_ATM_CLIP_NO_ICMP [expr $CONFIG_ATM_CLIP_NO_ICMP|16]
set CONFIG_ATM_LANE [expr $CONFIG_ATM_LANE|16]
set CONFIG_ATM_MPOA [expr $CONFIG_ATM_MPOA|16]
set CONFIG_IPX [expr $CONFIG_IPX|16]
	global CONFIG_IPX_INTERN
set CONFIG_IPX_INTERN [expr $CONFIG_IPX_INTERN|16]
set CONFIG_ATALK [expr $CONFIG_ATALK|16]
set CONFIG_DECNET [expr $CONFIG_DECNET|16]
	global CONFIG_DECNET_SIOCGIFCONF
set CONFIG_DECNET_SIOCGIFCONF [expr $CONFIG_DECNET_SIOCGIFCONF|16]
	global CONFIG_DECNET_ROUTER
set CONFIG_DECNET_ROUTER [expr $CONFIG_DECNET_ROUTER|16]
	global CONFIG_DECNET_ROUTE_FWMARK
set CONFIG_DECNET_ROUTE_FWMARK [expr $CONFIG_DECNET_ROUTE_FWMARK|16]
set CONFIG_BRIDGE [expr $CONFIG_BRIDGE|16]
set CONFIG_X25 [expr $CONFIG_X25|16]
set CONFIG_LAPB [expr $CONFIG_LAPB|16]
	global CONFIG_LLC
set CONFIG_LLC [expr $CONFIG_LLC|16]
	global CONFIG_NET_DIVERT
set CONFIG_NET_DIVERT [expr $CONFIG_NET_DIVERT|16]
set CONFIG_ECONET [expr $CONFIG_ECONET|16]
	global CONFIG_ECONET_AUNUDP
set CONFIG_ECONET_AUNUDP [expr $CONFIG_ECONET_AUNUDP|16]
	global CONFIG_ECONET_NATIVE
set CONFIG_ECONET_NATIVE [expr $CONFIG_ECONET_NATIVE|16]
set CONFIG_WAN_ROUTER [expr $CONFIG_WAN_ROUTER|16]
	global CONFIG_NET_FASTROUTE
set CONFIG_NET_FASTROUTE [expr $CONFIG_NET_FASTROUTE|16]
	global CONFIG_NET_HW_FLOWCONTROL
set CONFIG_NET_HW_FLOWCONTROL [expr $CONFIG_NET_HW_FLOWCONTROL|16]
set CONFIG_IPSEC [expr $CONFIG_IPSEC|16]
	global CONFIG_IPSEC_IPIP
set CONFIG_IPSEC_IPIP [expr $CONFIG_IPSEC_IPIP|16]
	global CONFIG_IPSEC_AH
set CONFIG_IPSEC_AH [expr $CONFIG_IPSEC_AH|16]
	global CONFIG_IPSEC_AUTH_HMAC_MD5
set CONFIG_IPSEC_AUTH_HMAC_MD5 [expr $CONFIG_IPSEC_AUTH_HMAC_MD5|16]
	global CONFIG_IPSEC_AUTH_HMAC_SHA1
set CONFIG_IPSEC_AUTH_HMAC_SHA1 [expr $CONFIG_IPSEC_AUTH_HMAC_SHA1|16]
	global CONFIG_IPSEC_ESP
set CONFIG_IPSEC_ESP [expr $CONFIG_IPSEC_ESP|16]
	global CONFIG_IPSEC_ENC_DES
set CONFIG_IPSEC_ENC_DES [expr $CONFIG_IPSEC_ENC_DES|16]
	global CONFIG_IPSEC_ENC_3DES
set CONFIG_IPSEC_ENC_3DES [expr $CONFIG_IPSEC_ENC_3DES|16]
	global CONFIG_IPSEC_IPCOMP
set CONFIG_IPSEC_IPCOMP [expr $CONFIG_IPSEC_IPCOMP|16]
	global CONFIG_IPSEC_DEBUG
set CONFIG_IPSEC_DEBUG [expr $CONFIG_IPSEC_DEBUG|16]
	global CONFIG_NET
	if {($CONFIG_NET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_PACKET == 2)} then {set CONFIG_PACKET 1}; set CONFIG_PACKET [expr $CONFIG_PACKET&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_PACKET != 0)} then {
	set CONFIG_PACKET_MMAP [expr $CONFIG_PACKET_MMAP&15]}
	if {($CONFIG_NET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NETLINK_DEV == 2)} then {set CONFIG_NETLINK_DEV 1}; set CONFIG_NETLINK_DEV [expr $CONFIG_NETLINK_DEV&15]}
	if {($CONFIG_NET == 1)} then {
	set CONFIG_NETFILTER [expr $CONFIG_NETFILTER&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETFILTER == 1)} then {
	set CONFIG_NETFILTER_DEBUG [expr $CONFIG_NETFILTER_DEBUG&15]}
	if {($CONFIG_NET == 1)} then {
	set CONFIG_FILTER [expr $CONFIG_FILTER&15]}
	if {($CONFIG_NET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_UNIX == 2)} then {set CONFIG_UNIX 1}; set CONFIG_UNIX [expr $CONFIG_UNIX&15]}
	if {($CONFIG_NET == 1)} then {
	set CONFIG_INET [expr $CONFIG_INET&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_IP_MULTICAST [expr $CONFIG_IP_MULTICAST&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_IP_ADVANCED_ROUTER [expr $CONFIG_IP_ADVANCED_ROUTER&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1)} then {
	set CONFIG_IP_MULTIPLE_TABLES [expr $CONFIG_IP_MULTIPLE_TABLES&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1) && ($CONFIG_IP_MULTIPLE_TABLES == 1) && ($CONFIG_NETFILTER == 1)} then {
	set CONFIG_IP_ROUTE_FWMARK [expr $CONFIG_IP_ROUTE_FWMARK&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1) && ($CONFIG_IP_MULTIPLE_TABLES == 1)} then {
	set CONFIG_IP_ROUTE_NAT [expr $CONFIG_IP_ROUTE_NAT&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1)} then {
	set CONFIG_IP_ROUTE_MULTIPATH [expr $CONFIG_IP_ROUTE_MULTIPATH&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1)} then {
	set CONFIG_IP_ROUTE_TOS [expr $CONFIG_IP_ROUTE_TOS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1)} then {
	set CONFIG_IP_ROUTE_VERBOSE [expr $CONFIG_IP_ROUTE_VERBOSE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1)} then {
	set CONFIG_IP_ROUTE_LARGE_TABLES [expr $CONFIG_IP_ROUTE_LARGE_TABLES&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_IP_PNP [expr $CONFIG_IP_PNP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_PNP == 1)} then {
	set CONFIG_IP_PNP_DHCP [expr $CONFIG_IP_PNP_DHCP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_PNP == 1)} then {
	set CONFIG_IP_PNP_BOOTP [expr $CONFIG_IP_PNP_BOOTP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_PNP == 1)} then {
	set CONFIG_IP_PNP_RARP [expr $CONFIG_IP_PNP_RARP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_IPIP == 2)} then {set CONFIG_NET_IPIP 1}; set CONFIG_NET_IPIP [expr $CONFIG_NET_IPIP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_IPGRE == 2)} then {set CONFIG_NET_IPGRE 1}; set CONFIG_NET_IPGRE [expr $CONFIG_NET_IPGRE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_MULTICAST == 1) && ($CONFIG_NET_IPGRE != 0)} then {
	set CONFIG_NET_IPGRE_BROADCAST [expr $CONFIG_NET_IPGRE_BROADCAST&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_MULTICAST == 1)} then {
	set CONFIG_IP_MROUTE [expr $CONFIG_IP_MROUTE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_MULTICAST == 1) && ($CONFIG_IP_MROUTE == 1)} then {
	set CONFIG_IP_PIMSM_V1 [expr $CONFIG_IP_PIMSM_V1&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_MULTICAST == 1) && ($CONFIG_IP_MROUTE == 1)} then {
	set CONFIG_IP_PIMSM_V2 [expr $CONFIG_IP_PIMSM_V2&15]}
	global CONFIG_EXPERIMENTAL
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_ARPD [expr $CONFIG_ARPD&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_INET_ECN [expr $CONFIG_INET_ECN&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_SYN_COOKIES [expr $CONFIG_SYN_COOKIES&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IPV6 == 2)} then {set CONFIG_IPV6 1}; set CONFIG_IPV6 [expr $CONFIG_IPV6&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_KHTTPD == 2)} then {set CONFIG_KHTTPD 1}; set CONFIG_KHTTPD [expr $CONFIG_KHTTPD&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_ATM [expr $CONFIG_ATM&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_ATM == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_ATM_CLIP [expr $CONFIG_ATM_CLIP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_ATM == 1) && ($CONFIG_INET == 1) && ($CONFIG_ATM_CLIP == 1)} then {
	set CONFIG_ATM_CLIP_NO_ICMP [expr $CONFIG_ATM_CLIP_NO_ICMP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_ATM == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ATM_LANE == 2)} then {set CONFIG_ATM_LANE 1}; set CONFIG_ATM_LANE [expr $CONFIG_ATM_LANE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_ATM == 1) && ($CONFIG_INET == 1 && $CONFIG_ATM_LANE != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ATM_MPOA == 2)} then {set CONFIG_ATM_MPOA 1}; set CONFIG_ATM_MPOA [expr $CONFIG_ATM_MPOA&15]}
	global CONFIG_VLAN_8021Q
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]]; set CONFIG_VLAN_8021Q [sync_tristate $CONFIG_VLAN_8021Q $tmpvar_dep]; set CONFIG_VLAN_8021Q [expr $CONFIG_VLAN_8021Q&15]}
	if {($CONFIG_NET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IPX == 2)} then {set CONFIG_IPX 1}; set CONFIG_IPX [expr $CONFIG_IPX&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0)} then {
	set CONFIG_IPX_INTERN [expr $CONFIG_IPX_INTERN&15]}
	if {($CONFIG_NET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ATALK == 2)} then {set CONFIG_ATALK 1}; set CONFIG_ATALK [expr $CONFIG_ATALK&15]}
	if {($CONFIG_NET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_DECNET == 2)} then {set CONFIG_DECNET 1}; set CONFIG_DECNET [expr $CONFIG_DECNET&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_DECNET != 0)} then {
	set CONFIG_DECNET_SIOCGIFCONF [expr $CONFIG_DECNET_SIOCGIFCONF&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_DECNET != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_DECNET_ROUTER [expr $CONFIG_DECNET_ROUTER&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_DECNET != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_DECNET_ROUTER == 1) && ($CONFIG_NETFILTER == 1)} then {
	set CONFIG_DECNET_ROUTE_FWMARK [expr $CONFIG_DECNET_ROUTE_FWMARK&15]}
	if {($CONFIG_NET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_BRIDGE == 2)} then {set CONFIG_BRIDGE 1}; set CONFIG_BRIDGE [expr $CONFIG_BRIDGE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_X25 == 2)} then {set CONFIG_X25 1}; set CONFIG_X25 [expr $CONFIG_X25&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_LAPB == 2)} then {set CONFIG_LAPB 1}; set CONFIG_LAPB [expr $CONFIG_LAPB&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_LLC [expr $CONFIG_LLC&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_NET_DIVERT [expr $CONFIG_NET_DIVERT&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_INET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ECONET == 2)} then {set CONFIG_ECONET 1}; set CONFIG_ECONET [expr $CONFIG_ECONET&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_ECONET != 0)} then {
	set CONFIG_ECONET_AUNUDP [expr $CONFIG_ECONET_AUNUDP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_ECONET != 0)} then {
	set CONFIG_ECONET_NATIVE [expr $CONFIG_ECONET_NATIVE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_WAN_ROUTER == 2)} then {set CONFIG_WAN_ROUTER 1}; set CONFIG_WAN_ROUTER [expr $CONFIG_WAN_ROUTER&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_NET_FASTROUTE [expr $CONFIG_NET_FASTROUTE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_NET_HW_FLOWCONTROL [expr $CONFIG_NET_HW_FLOWCONTROL&15]}
	if {($CONFIG_NET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IPSEC == 2)} then {set CONFIG_IPSEC 1}; set CONFIG_IPSEC [expr $CONFIG_IPSEC&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	set CONFIG_IPSEC_IPIP [expr $CONFIG_IPSEC_IPIP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	set CONFIG_IPSEC_AH [expr $CONFIG_IPSEC_AH&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_AH == 1 || $CONFIG_IPSEC_ESP == 1)} then {
	set CONFIG_IPSEC_AUTH_HMAC_MD5 [expr $CONFIG_IPSEC_AUTH_HMAC_MD5&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_AH == 1 || $CONFIG_IPSEC_ESP == 1)} then {
	set CONFIG_IPSEC_AUTH_HMAC_SHA1 [expr $CONFIG_IPSEC_AUTH_HMAC_SHA1&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	set CONFIG_IPSEC_ESP [expr $CONFIG_IPSEC_ESP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_ESP == 1)} then {
	set CONFIG_IPSEC_ENC_DES [expr $CONFIG_IPSEC_ENC_DES&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_ESP == 1)} then {
	set CONFIG_IPSEC_ENC_3DES [expr $CONFIG_IPSEC_ENC_3DES&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	set CONFIG_IPSEC_IPCOMP [expr $CONFIG_IPSEC_IPCOMP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {
	set CONFIG_IPSEC_DEBUG [expr $CONFIG_IPSEC_DEBUG&15]}
}


proc menu15 {w title} {
	set oldFocus [focus]
	catch {focus .menu14}
	catch {destroy $w; unregister_active 15}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 15]]
	message $w.m -width 400 -aspect 300 -text \
		"  IP: Netfilter Configuration"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "  IP: Netfilter Configuration" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 15; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 15; menu16 .menu16 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 15"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 15; menu14 .menu14 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 15; menu14 .menu14 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 15 0 "Connection tracking (required for masq/NAT)" CONFIG_IP_NF_CONNTRACK
	dep_tristate $w.config.f 15 1 "  FTP protocol support" CONFIG_IP_NF_FTP
	dep_tristate $w.config.f 15 2 "  PPTP protocol support" CONFIG_IP_NF_PPTP
	bool $w.config.f 15 3 "    PPTP verbose debug" CONFIG_IP_NF_PPTP_DEBUG
	dep_tristate $w.config.f 15 4 "  IRC protocol support" CONFIG_IP_NF_IRC
	tristate $w.config.f 15 5 "Userspace queueing via NETLINK (EXPERIMENTAL)" CONFIG_IP_NF_QUEUE
	tristate $w.config.f 15 6 "IP tables support (required for filtering/masq/NAT)" CONFIG_IP_NF_IPTABLES
	dep_tristate $w.config.f 15 7 "  limit match support" CONFIG_IP_NF_MATCH_LIMIT
	dep_tristate $w.config.f 15 8 "  MAC address match support" CONFIG_IP_NF_MATCH_MAC
	dep_tristate $w.config.f 15 9 "  netfilter MARK match support" CONFIG_IP_NF_MATCH_MARK
	dep_tristate $w.config.f 15 10 "  Multiple port match support" CONFIG_IP_NF_MATCH_MULTIPORT
	dep_tristate $w.config.f 15 11 "  TOS match support" CONFIG_IP_NF_MATCH_TOS
	dep_tristate $w.config.f 15 12 "  LENGTH match support" CONFIG_IP_NF_MATCH_LENGTH
	dep_tristate $w.config.f 15 13 "  TTL match support" CONFIG_IP_NF_MATCH_TTL
	dep_tristate $w.config.f 15 14 "  tcpmss match support" CONFIG_IP_NF_MATCH_TCPMSS
	dep_tristate $w.config.f 15 15 "  Connection state match support" CONFIG_IP_NF_MATCH_STATE
	dep_tristate $w.config.f 15 16 "  Unclean match support (EXPERIMENTAL)" CONFIG_IP_NF_MATCH_UNCLEAN
	dep_tristate $w.config.f 15 17 "  Owner match support (EXPERIMENTAL)" CONFIG_IP_NF_MATCH_OWNER
	dep_tristate $w.config.f 15 18 "  Packet filtering" CONFIG_IP_NF_FILTER
	dep_tristate $w.config.f 15 19 "    REJECT target support" CONFIG_IP_NF_TARGET_REJECT
	dep_tristate $w.config.f 15 20 "    MIRROR target support (EXPERIMENTAL)" CONFIG_IP_NF_TARGET_MIRROR
	dep_tristate $w.config.f 15 21 "  Full NAT" CONFIG_IP_NF_NAT
	dep_tristate $w.config.f 15 22 "    MASQUERADE target support" CONFIG_IP_NF_TARGET_MASQUERADE
	dep_tristate $w.config.f 15 23 "    REDIRECT target support" CONFIG_IP_NF_TARGET_REDIRECT
	dep_tristate $w.config.f 15 24 "    Basic SNMP-ALG support (EXPERIMENTAL)" CONFIG_IP_NF_NAT_SNMP_BASIC
	dep_tristate $w.config.f 15 25 "  Packet mangling" CONFIG_IP_NF_MANGLE
	dep_tristate $w.config.f 15 26 "    TOS target support" CONFIG_IP_NF_TARGET_TOS
	dep_tristate $w.config.f 15 27 "    MARK target support" CONFIG_IP_NF_TARGET_MARK
	dep_tristate $w.config.f 15 28 "  LOG target support" CONFIG_IP_NF_TARGET_LOG
	dep_tristate $w.config.f 15 29 "  TCPMSS target support" CONFIG_IP_NF_TARGET_TCPMSS
	tristate $w.config.f 15 30 "ipchains (2.2-style) support" CONFIG_IP_NF_COMPAT_IPCHAINS
	tristate $w.config.f 15 31 "ipfwadm (2.0-style) support" CONFIG_IP_NF_COMPAT_IPFWADM



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu14] == 0} then {menu14 .menu14 "Networking options"}
	set winx [expr [winfo x .menu14]+30]; set winy [expr [winfo y .menu14]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu15 {} {
	global CONFIG_MODULES
	global CONFIG_NET
	global CONFIG_INET
	global CONFIG_NETFILTER
	global CONFIG_IP_NF_CONNTRACK
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0)} then {
	configure_entry .menu15.config.f.x0 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x0 normal {m}} else {configure_entry .menu15.config.f.x0 disabled {m}}; configure_entry .menu15.config.f.x0 normal {n l}} else {configure_entry .menu15.config.f.x0 disabled {y n m l}}
	global CONFIG_IP_NF_FTP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_CONNTRACK == 1 || $CONFIG_IP_NF_CONNTRACK == 2 || $CONFIG_IP_NF_CONNTRACK == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_CONNTRACK]];set CONFIG_IP_NF_FTP [sync_tristate $CONFIG_IP_NF_FTP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x1 disabled {y}} else {configure_entry .menu15.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x1 disabled {m}} else {configure_entry .menu15.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x1 normal {m}} else {configure_entry .menu15.config.f.x1 disabled {m}}; configure_entry .menu15.config.f.x1 normal {n l}} else {configure_entry .menu15.config.f.x1 disabled {y n m l}}
	global CONFIG_IP_NF_PPTP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_CONNTRACK == 1 || $CONFIG_IP_NF_CONNTRACK == 2 || $CONFIG_IP_NF_CONNTRACK == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_CONNTRACK]];set CONFIG_IP_NF_PPTP [sync_tristate $CONFIG_IP_NF_PPTP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x2 disabled {y}} else {configure_entry .menu15.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x2 disabled {m}} else {configure_entry .menu15.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x2 normal {m}} else {configure_entry .menu15.config.f.x2 disabled {m}}; configure_entry .menu15.config.f.x2 normal {n l}} else {configure_entry .menu15.config.f.x2 disabled {y n m l}}
	global CONFIG_IP_NF_PPTP_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_PPTP != 0)} then {
	configure_entry .menu15.config.f.x3 normal {n l y}} else {configure_entry .menu15.config.f.x3 disabled {y n l}}
	global CONFIG_IP_NF_IRC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_CONNTRACK == 1 || $CONFIG_IP_NF_CONNTRACK == 2 || $CONFIG_IP_NF_CONNTRACK == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_CONNTRACK]];set CONFIG_IP_NF_IRC [sync_tristate $CONFIG_IP_NF_IRC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x4 disabled {y}} else {configure_entry .menu15.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x4 disabled {m}} else {configure_entry .menu15.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x4 normal {m}} else {configure_entry .menu15.config.f.x4 disabled {m}}; configure_entry .menu15.config.f.x4 normal {n l}} else {configure_entry .menu15.config.f.x4 disabled {y n m l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_IP_NF_QUEUE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu15.config.f.x5 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x5 normal {m}} else {configure_entry .menu15.config.f.x5 disabled {m}}; configure_entry .menu15.config.f.x5 normal {n l}} else {configure_entry .menu15.config.f.x5 disabled {y n m l}}
	global CONFIG_IP_NF_IPTABLES
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0)} then {
	configure_entry .menu15.config.f.x6 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x6 normal {m}} else {configure_entry .menu15.config.f.x6 disabled {m}}; configure_entry .menu15.config.f.x6 normal {n l}} else {configure_entry .menu15.config.f.x6 disabled {y n m l}}
	global CONFIG_IP_NF_MATCH_LIMIT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]];set CONFIG_IP_NF_MATCH_LIMIT [sync_tristate $CONFIG_IP_NF_MATCH_LIMIT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x7 disabled {y}} else {configure_entry .menu15.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x7 disabled {m}} else {configure_entry .menu15.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x7 normal {m}} else {configure_entry .menu15.config.f.x7 disabled {m}}; configure_entry .menu15.config.f.x7 normal {n l}} else {configure_entry .menu15.config.f.x7 disabled {y n m l}}
	global CONFIG_IP_NF_MATCH_MAC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]];set CONFIG_IP_NF_MATCH_MAC [sync_tristate $CONFIG_IP_NF_MATCH_MAC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x8 disabled {y}} else {configure_entry .menu15.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x8 disabled {m}} else {configure_entry .menu15.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x8 normal {m}} else {configure_entry .menu15.config.f.x8 disabled {m}}; configure_entry .menu15.config.f.x8 normal {n l}} else {configure_entry .menu15.config.f.x8 disabled {y n m l}}
	global CONFIG_IP_NF_MATCH_MARK
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]];set CONFIG_IP_NF_MATCH_MARK [sync_tristate $CONFIG_IP_NF_MATCH_MARK $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x9 disabled {y}} else {configure_entry .menu15.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x9 disabled {m}} else {configure_entry .menu15.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x9 normal {m}} else {configure_entry .menu15.config.f.x9 disabled {m}}; configure_entry .menu15.config.f.x9 normal {n l}} else {configure_entry .menu15.config.f.x9 disabled {y n m l}}
	global CONFIG_IP_NF_MATCH_MULTIPORT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]];set CONFIG_IP_NF_MATCH_MULTIPORT [sync_tristate $CONFIG_IP_NF_MATCH_MULTIPORT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x10 disabled {y}} else {configure_entry .menu15.config.f.x10 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x10 disabled {m}} else {configure_entry .menu15.config.f.x10 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x10 normal {m}} else {configure_entry .menu15.config.f.x10 disabled {m}}; configure_entry .menu15.config.f.x10 normal {n l}} else {configure_entry .menu15.config.f.x10 disabled {y n m l}}
	global CONFIG_IP_NF_MATCH_TOS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]];set CONFIG_IP_NF_MATCH_TOS [sync_tristate $CONFIG_IP_NF_MATCH_TOS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x11 disabled {y}} else {configure_entry .menu15.config.f.x11 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x11 disabled {m}} else {configure_entry .menu15.config.f.x11 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x11 normal {m}} else {configure_entry .menu15.config.f.x11 disabled {m}}; configure_entry .menu15.config.f.x11 normal {n l}} else {configure_entry .menu15.config.f.x11 disabled {y n m l}}
	global CONFIG_IP_NF_MATCH_LENGTH
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]];set CONFIG_IP_NF_MATCH_LENGTH [sync_tristate $CONFIG_IP_NF_MATCH_LENGTH $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x12 disabled {y}} else {configure_entry .menu15.config.f.x12 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x12 disabled {m}} else {configure_entry .menu15.config.f.x12 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x12 normal {m}} else {configure_entry .menu15.config.f.x12 disabled {m}}; configure_entry .menu15.config.f.x12 normal {n l}} else {configure_entry .menu15.config.f.x12 disabled {y n m l}}
	global CONFIG_IP_NF_MATCH_TTL
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]];set CONFIG_IP_NF_MATCH_TTL [sync_tristate $CONFIG_IP_NF_MATCH_TTL $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x13 disabled {y}} else {configure_entry .menu15.config.f.x13 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x13 disabled {m}} else {configure_entry .menu15.config.f.x13 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x13 normal {m}} else {configure_entry .menu15.config.f.x13 disabled {m}}; configure_entry .menu15.config.f.x13 normal {n l}} else {configure_entry .menu15.config.f.x13 disabled {y n m l}}
	global CONFIG_IP_NF_MATCH_TCPMSS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]];set CONFIG_IP_NF_MATCH_TCPMSS [sync_tristate $CONFIG_IP_NF_MATCH_TCPMSS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x14 disabled {y}} else {configure_entry .menu15.config.f.x14 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x14 disabled {m}} else {configure_entry .menu15.config.f.x14 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x14 normal {m}} else {configure_entry .menu15.config.f.x14 disabled {m}}; configure_entry .menu15.config.f.x14 normal {n l}} else {configure_entry .menu15.config.f.x14 disabled {y n m l}}
	global CONFIG_IP_NF_MATCH_STATE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_CONNTRACK == 1 || $CONFIG_IP_NF_CONNTRACK == 2 || $CONFIG_IP_NF_CONNTRACK == 4) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_CONNTRACK $CONFIG_IP_NF_IPTABLES]];set CONFIG_IP_NF_MATCH_STATE [sync_tristate $CONFIG_IP_NF_MATCH_STATE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x15 disabled {y}} else {configure_entry .menu15.config.f.x15 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x15 disabled {m}} else {configure_entry .menu15.config.f.x15 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x15 normal {m}} else {configure_entry .menu15.config.f.x15 disabled {m}}; configure_entry .menu15.config.f.x15 normal {n l}} else {configure_entry .menu15.config.f.x15 disabled {y n m l}}
	global CONFIG_IP_NF_MATCH_UNCLEAN
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]];set CONFIG_IP_NF_MATCH_UNCLEAN [sync_tristate $CONFIG_IP_NF_MATCH_UNCLEAN $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x16 disabled {y}} else {configure_entry .menu15.config.f.x16 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x16 disabled {m}} else {configure_entry .menu15.config.f.x16 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x16 normal {m}} else {configure_entry .menu15.config.f.x16 disabled {m}}; configure_entry .menu15.config.f.x16 normal {n l}} else {configure_entry .menu15.config.f.x16 disabled {y n m l}}
	global CONFIG_IP_NF_MATCH_OWNER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]];set CONFIG_IP_NF_MATCH_OWNER [sync_tristate $CONFIG_IP_NF_MATCH_OWNER $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x17 disabled {y}} else {configure_entry .menu15.config.f.x17 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x17 disabled {m}} else {configure_entry .menu15.config.f.x17 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x17 normal {m}} else {configure_entry .menu15.config.f.x17 disabled {m}}; configure_entry .menu15.config.f.x17 normal {n l}} else {configure_entry .menu15.config.f.x17 disabled {y n m l}}
	global CONFIG_IP_NF_FILTER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]];set CONFIG_IP_NF_FILTER [sync_tristate $CONFIG_IP_NF_FILTER $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x18 disabled {y}} else {configure_entry .menu15.config.f.x18 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x18 disabled {m}} else {configure_entry .menu15.config.f.x18 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x18 normal {m}} else {configure_entry .menu15.config.f.x18 disabled {m}}; configure_entry .menu15.config.f.x18 normal {n l}} else {configure_entry .menu15.config.f.x18 disabled {y n m l}}
	global CONFIG_IP_NF_TARGET_REJECT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_FILTER != 0) && ($CONFIG_IP_NF_FILTER == 1 || $CONFIG_IP_NF_FILTER == 2 || $CONFIG_IP_NF_FILTER == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_FILTER]];set CONFIG_IP_NF_TARGET_REJECT [sync_tristate $CONFIG_IP_NF_TARGET_REJECT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x19 disabled {y}} else {configure_entry .menu15.config.f.x19 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x19 disabled {m}} else {configure_entry .menu15.config.f.x19 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x19 normal {m}} else {configure_entry .menu15.config.f.x19 disabled {m}}; configure_entry .menu15.config.f.x19 normal {n l}} else {configure_entry .menu15.config.f.x19 disabled {y n m l}}
	global CONFIG_IP_NF_TARGET_MIRROR
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_FILTER != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_NF_FILTER == 1 || $CONFIG_IP_NF_FILTER == 2 || $CONFIG_IP_NF_FILTER == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_FILTER]];set CONFIG_IP_NF_TARGET_MIRROR [sync_tristate $CONFIG_IP_NF_TARGET_MIRROR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x20 disabled {y}} else {configure_entry .menu15.config.f.x20 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x20 disabled {m}} else {configure_entry .menu15.config.f.x20 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x20 normal {m}} else {configure_entry .menu15.config.f.x20 disabled {m}}; configure_entry .menu15.config.f.x20 normal {n l}} else {configure_entry .menu15.config.f.x20 disabled {y n m l}}
	global CONFIG_IP_NF_NAT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4) && ($CONFIG_IP_NF_CONNTRACK == 1 || $CONFIG_IP_NF_CONNTRACK == 2 || $CONFIG_IP_NF_CONNTRACK == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES $CONFIG_IP_NF_CONNTRACK]];set CONFIG_IP_NF_NAT [sync_tristate $CONFIG_IP_NF_NAT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x21 disabled {y}} else {configure_entry .menu15.config.f.x21 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x21 disabled {m}} else {configure_entry .menu15.config.f.x21 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x21 normal {m}} else {configure_entry .menu15.config.f.x21 disabled {m}}; configure_entry .menu15.config.f.x21 normal {n l}} else {configure_entry .menu15.config.f.x21 disabled {y n m l}}
	global CONFIG_IP_NF_TARGET_MASQUERADE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_IP_NF_NAT == 1 || $CONFIG_IP_NF_NAT == 2 || $CONFIG_IP_NF_NAT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_NAT]];set CONFIG_IP_NF_TARGET_MASQUERADE [sync_tristate $CONFIG_IP_NF_TARGET_MASQUERADE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x22 disabled {y}} else {configure_entry .menu15.config.f.x22 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x22 disabled {m}} else {configure_entry .menu15.config.f.x22 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x22 normal {m}} else {configure_entry .menu15.config.f.x22 disabled {m}}; configure_entry .menu15.config.f.x22 normal {n l}} else {configure_entry .menu15.config.f.x22 disabled {y n m l}}
	global CONFIG_IP_NF_TARGET_REDIRECT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_IP_NF_NAT == 1 || $CONFIG_IP_NF_NAT == 2 || $CONFIG_IP_NF_NAT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_NAT]];set CONFIG_IP_NF_TARGET_REDIRECT [sync_tristate $CONFIG_IP_NF_TARGET_REDIRECT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x23 disabled {y}} else {configure_entry .menu15.config.f.x23 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x23 disabled {m}} else {configure_entry .menu15.config.f.x23 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x23 normal {m}} else {configure_entry .menu15.config.f.x23 disabled {m}}; configure_entry .menu15.config.f.x23 normal {n l}} else {configure_entry .menu15.config.f.x23 disabled {y n m l}}
	global CONFIG_IP_NF_NAT_SNMP_BASIC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_NF_NAT == 1 || $CONFIG_IP_NF_NAT == 2 || $CONFIG_IP_NF_NAT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_NAT]];set CONFIG_IP_NF_NAT_SNMP_BASIC [sync_tristate $CONFIG_IP_NF_NAT_SNMP_BASIC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x24 disabled {y}} else {configure_entry .menu15.config.f.x24 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x24 disabled {m}} else {configure_entry .menu15.config.f.x24 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x24 normal {m}} else {configure_entry .menu15.config.f.x24 disabled {m}}; configure_entry .menu15.config.f.x24 normal {n l}} else {configure_entry .menu15.config.f.x24 disabled {y n m l}}
	global CONFIG_IP_NF_MANGLE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]];set CONFIG_IP_NF_MANGLE [sync_tristate $CONFIG_IP_NF_MANGLE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x25 disabled {y}} else {configure_entry .menu15.config.f.x25 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x25 disabled {m}} else {configure_entry .menu15.config.f.x25 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x25 normal {m}} else {configure_entry .menu15.config.f.x25 disabled {m}}; configure_entry .menu15.config.f.x25 normal {n l}} else {configure_entry .menu15.config.f.x25 disabled {y n m l}}
	global CONFIG_IP_NF_TARGET_TOS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_MANGLE != 0) && ($CONFIG_IP_NF_MANGLE == 1 || $CONFIG_IP_NF_MANGLE == 2 || $CONFIG_IP_NF_MANGLE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_MANGLE]];set CONFIG_IP_NF_TARGET_TOS [sync_tristate $CONFIG_IP_NF_TARGET_TOS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x26 disabled {y}} else {configure_entry .menu15.config.f.x26 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x26 disabled {m}} else {configure_entry .menu15.config.f.x26 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x26 normal {m}} else {configure_entry .menu15.config.f.x26 disabled {m}}; configure_entry .menu15.config.f.x26 normal {n l}} else {configure_entry .menu15.config.f.x26 disabled {y n m l}}
	global CONFIG_IP_NF_TARGET_MARK
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_MANGLE != 0) && ($CONFIG_IP_NF_MANGLE == 1 || $CONFIG_IP_NF_MANGLE == 2 || $CONFIG_IP_NF_MANGLE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_MANGLE]];set CONFIG_IP_NF_TARGET_MARK [sync_tristate $CONFIG_IP_NF_TARGET_MARK $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x27 disabled {y}} else {configure_entry .menu15.config.f.x27 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x27 disabled {m}} else {configure_entry .menu15.config.f.x27 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x27 normal {m}} else {configure_entry .menu15.config.f.x27 disabled {m}}; configure_entry .menu15.config.f.x27 normal {n l}} else {configure_entry .menu15.config.f.x27 disabled {y n m l}}
	global CONFIG_IP_NF_TARGET_LOG
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]];set CONFIG_IP_NF_TARGET_LOG [sync_tristate $CONFIG_IP_NF_TARGET_LOG $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x28 disabled {y}} else {configure_entry .menu15.config.f.x28 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x28 disabled {m}} else {configure_entry .menu15.config.f.x28 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x28 normal {m}} else {configure_entry .menu15.config.f.x28 disabled {m}}; configure_entry .menu15.config.f.x28 normal {n l}} else {configure_entry .menu15.config.f.x28 disabled {y n m l}}
	global CONFIG_IP_NF_TARGET_TCPMSS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]];set CONFIG_IP_NF_TARGET_TCPMSS [sync_tristate $CONFIG_IP_NF_TARGET_TCPMSS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu15.config.f.x29 disabled {y}} else {configure_entry .menu15.config.f.x29 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu15.config.f.x29 disabled {m}} else {configure_entry .menu15.config.f.x29 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x29 normal {m}} else {configure_entry .menu15.config.f.x29 disabled {m}}; configure_entry .menu15.config.f.x29 normal {n l}} else {configure_entry .menu15.config.f.x29 disabled {y n m l}}
	global CONFIG_IP_NF_COMPAT_IPCHAINS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 1) && ($CONFIG_IP_NF_IPTABLES != 1)} then {
	configure_entry .menu15.config.f.x30 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x30 normal {m}} else {configure_entry .menu15.config.f.x30 disabled {m}}; configure_entry .menu15.config.f.x30 normal {n l}} else {configure_entry .menu15.config.f.x30 disabled {y n m l}}
	global CONFIG_IP_NF_COMPAT_IPFWADM
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 1) && ($CONFIG_IP_NF_IPTABLES != 1) && ($CONFIG_IP_NF_COMPAT_IPCHAINS != 1)} then {
	configure_entry .menu15.config.f.x31 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu15.config.f.x31 normal {m}} else {configure_entry .menu15.config.f.x31 disabled {m}}; configure_entry .menu15.config.f.x31 normal {n l}} else {configure_entry .menu15.config.f.x31 disabled {y n m l}}
}


proc update_define_menu15 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_IP_NF_CONNTRACK
	global CONFIG_IP_NF_QUEUE
	global CONFIG_IP_NF_IPTABLES
	global CONFIG_IP_NF_NAT_NEEDED
	global CONFIG_IP_NF_NAT_IRC
	global CONFIG_IP_NF_NAT_FTP
	global CONFIG_IP_NF_NAT_PPTP
	global CONFIG_IP_NF_COMPAT_IPCHAINS
	global CONFIG_IP_NF_COMPAT_IPFWADM
set CONFIG_IP_NF_CONNTRACK [expr $CONFIG_IP_NF_CONNTRACK|16]
	global CONFIG_IP_NF_PPTP_DEBUG
set CONFIG_IP_NF_PPTP_DEBUG [expr $CONFIG_IP_NF_PPTP_DEBUG|16]
set CONFIG_IP_NF_QUEUE [expr $CONFIG_IP_NF_QUEUE|16]
set CONFIG_IP_NF_IPTABLES [expr $CONFIG_IP_NF_IPTABLES|16]
set CONFIG_IP_NF_COMPAT_IPCHAINS [expr $CONFIG_IP_NF_COMPAT_IPCHAINS|16]
set CONFIG_IP_NF_COMPAT_IPFWADM [expr $CONFIG_IP_NF_COMPAT_IPFWADM|16]
	global CONFIG_NET
	global CONFIG_INET
	global CONFIG_NETFILTER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IP_NF_CONNTRACK == 2)} then {set CONFIG_IP_NF_CONNTRACK 1}; set CONFIG_IP_NF_CONNTRACK [expr $CONFIG_IP_NF_CONNTRACK&15]}
	global CONFIG_IP_NF_FTP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_CONNTRACK == 1 || $CONFIG_IP_NF_CONNTRACK == 2 || $CONFIG_IP_NF_CONNTRACK == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_CONNTRACK]]; set CONFIG_IP_NF_FTP [sync_tristate $CONFIG_IP_NF_FTP $tmpvar_dep]; set CONFIG_IP_NF_FTP [expr $CONFIG_IP_NF_FTP&15]}
	global CONFIG_IP_NF_PPTP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_CONNTRACK == 1 || $CONFIG_IP_NF_CONNTRACK == 2 || $CONFIG_IP_NF_CONNTRACK == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_CONNTRACK]]; set CONFIG_IP_NF_PPTP [sync_tristate $CONFIG_IP_NF_PPTP $tmpvar_dep]; set CONFIG_IP_NF_PPTP [expr $CONFIG_IP_NF_PPTP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_PPTP != 0)} then {
	set CONFIG_IP_NF_PPTP_DEBUG [expr $CONFIG_IP_NF_PPTP_DEBUG&15]}
	global CONFIG_IP_NF_IRC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_CONNTRACK == 1 || $CONFIG_IP_NF_CONNTRACK == 2 || $CONFIG_IP_NF_CONNTRACK == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_CONNTRACK]]; set CONFIG_IP_NF_IRC [sync_tristate $CONFIG_IP_NF_IRC $tmpvar_dep]; set CONFIG_IP_NF_IRC [expr $CONFIG_IP_NF_IRC&15]}
	global CONFIG_EXPERIMENTAL
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IP_NF_QUEUE == 2)} then {set CONFIG_IP_NF_QUEUE 1}; set CONFIG_IP_NF_QUEUE [expr $CONFIG_IP_NF_QUEUE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IP_NF_IPTABLES == 2)} then {set CONFIG_IP_NF_IPTABLES 1}; set CONFIG_IP_NF_IPTABLES [expr $CONFIG_IP_NF_IPTABLES&15]}
	global CONFIG_IP_NF_MATCH_LIMIT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]]; set CONFIG_IP_NF_MATCH_LIMIT [sync_tristate $CONFIG_IP_NF_MATCH_LIMIT $tmpvar_dep]; set CONFIG_IP_NF_MATCH_LIMIT [expr $CONFIG_IP_NF_MATCH_LIMIT&15]}
	global CONFIG_IP_NF_MATCH_MAC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]]; set CONFIG_IP_NF_MATCH_MAC [sync_tristate $CONFIG_IP_NF_MATCH_MAC $tmpvar_dep]; set CONFIG_IP_NF_MATCH_MAC [expr $CONFIG_IP_NF_MATCH_MAC&15]}
	global CONFIG_IP_NF_MATCH_MARK
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]]; set CONFIG_IP_NF_MATCH_MARK [sync_tristate $CONFIG_IP_NF_MATCH_MARK $tmpvar_dep]; set CONFIG_IP_NF_MATCH_MARK [expr $CONFIG_IP_NF_MATCH_MARK&15]}
	global CONFIG_IP_NF_MATCH_MULTIPORT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]]; set CONFIG_IP_NF_MATCH_MULTIPORT [sync_tristate $CONFIG_IP_NF_MATCH_MULTIPORT $tmpvar_dep]; set CONFIG_IP_NF_MATCH_MULTIPORT [expr $CONFIG_IP_NF_MATCH_MULTIPORT&15]}
	global CONFIG_IP_NF_MATCH_TOS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]]; set CONFIG_IP_NF_MATCH_TOS [sync_tristate $CONFIG_IP_NF_MATCH_TOS $tmpvar_dep]; set CONFIG_IP_NF_MATCH_TOS [expr $CONFIG_IP_NF_MATCH_TOS&15]}
	global CONFIG_IP_NF_MATCH_LENGTH
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]]; set CONFIG_IP_NF_MATCH_LENGTH [sync_tristate $CONFIG_IP_NF_MATCH_LENGTH $tmpvar_dep]; set CONFIG_IP_NF_MATCH_LENGTH [expr $CONFIG_IP_NF_MATCH_LENGTH&15]}
	global CONFIG_IP_NF_MATCH_TTL
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]]; set CONFIG_IP_NF_MATCH_TTL [sync_tristate $CONFIG_IP_NF_MATCH_TTL $tmpvar_dep]; set CONFIG_IP_NF_MATCH_TTL [expr $CONFIG_IP_NF_MATCH_TTL&15]}
	global CONFIG_IP_NF_MATCH_TCPMSS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]]; set CONFIG_IP_NF_MATCH_TCPMSS [sync_tristate $CONFIG_IP_NF_MATCH_TCPMSS $tmpvar_dep]; set CONFIG_IP_NF_MATCH_TCPMSS [expr $CONFIG_IP_NF_MATCH_TCPMSS&15]}
	global CONFIG_IP_NF_MATCH_STATE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_CONNTRACK == 1 || $CONFIG_IP_NF_CONNTRACK == 2 || $CONFIG_IP_NF_CONNTRACK == 4) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_CONNTRACK $CONFIG_IP_NF_IPTABLES]]; set CONFIG_IP_NF_MATCH_STATE [sync_tristate $CONFIG_IP_NF_MATCH_STATE $tmpvar_dep]; set CONFIG_IP_NF_MATCH_STATE [expr $CONFIG_IP_NF_MATCH_STATE&15]}
	global CONFIG_IP_NF_MATCH_UNCLEAN
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]]; set CONFIG_IP_NF_MATCH_UNCLEAN [sync_tristate $CONFIG_IP_NF_MATCH_UNCLEAN $tmpvar_dep]; set CONFIG_IP_NF_MATCH_UNCLEAN [expr $CONFIG_IP_NF_MATCH_UNCLEAN&15]}
	global CONFIG_IP_NF_MATCH_OWNER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]]; set CONFIG_IP_NF_MATCH_OWNER [sync_tristate $CONFIG_IP_NF_MATCH_OWNER $tmpvar_dep]; set CONFIG_IP_NF_MATCH_OWNER [expr $CONFIG_IP_NF_MATCH_OWNER&15]}
	global CONFIG_IP_NF_FILTER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]]; set CONFIG_IP_NF_FILTER [sync_tristate $CONFIG_IP_NF_FILTER $tmpvar_dep]; set CONFIG_IP_NF_FILTER [expr $CONFIG_IP_NF_FILTER&15]}
	global CONFIG_IP_NF_TARGET_REJECT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_FILTER != 0) && ($CONFIG_IP_NF_FILTER == 1 || $CONFIG_IP_NF_FILTER == 2 || $CONFIG_IP_NF_FILTER == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_FILTER]]; set CONFIG_IP_NF_TARGET_REJECT [sync_tristate $CONFIG_IP_NF_TARGET_REJECT $tmpvar_dep]; set CONFIG_IP_NF_TARGET_REJECT [expr $CONFIG_IP_NF_TARGET_REJECT&15]}
	global CONFIG_IP_NF_TARGET_MIRROR
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_FILTER != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_NF_FILTER == 1 || $CONFIG_IP_NF_FILTER == 2 || $CONFIG_IP_NF_FILTER == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_FILTER]]; set CONFIG_IP_NF_TARGET_MIRROR [sync_tristate $CONFIG_IP_NF_TARGET_MIRROR $tmpvar_dep]; set CONFIG_IP_NF_TARGET_MIRROR [expr $CONFIG_IP_NF_TARGET_MIRROR&15]}
	global CONFIG_IP_NF_NAT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4) && ($CONFIG_IP_NF_CONNTRACK == 1 || $CONFIG_IP_NF_CONNTRACK == 2 || $CONFIG_IP_NF_CONNTRACK == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES $CONFIG_IP_NF_CONNTRACK]]; set CONFIG_IP_NF_NAT [sync_tristate $CONFIG_IP_NF_NAT $tmpvar_dep]; set CONFIG_IP_NF_NAT [expr $CONFIG_IP_NF_NAT&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0)} then {	global CONSTANT_Y
set CONFIG_IP_NF_NAT_NEEDED $CONSTANT_Y }
	global CONFIG_IP_NF_TARGET_MASQUERADE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_IP_NF_NAT == 1 || $CONFIG_IP_NF_NAT == 2 || $CONFIG_IP_NF_NAT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_NAT]]; set CONFIG_IP_NF_TARGET_MASQUERADE [sync_tristate $CONFIG_IP_NF_TARGET_MASQUERADE $tmpvar_dep]; set CONFIG_IP_NF_TARGET_MASQUERADE [expr $CONFIG_IP_NF_TARGET_MASQUERADE&15]}
	global CONFIG_IP_NF_TARGET_REDIRECT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_IP_NF_NAT == 1 || $CONFIG_IP_NF_NAT == 2 || $CONFIG_IP_NF_NAT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_NAT]]; set CONFIG_IP_NF_TARGET_REDIRECT [sync_tristate $CONFIG_IP_NF_TARGET_REDIRECT $tmpvar_dep]; set CONFIG_IP_NF_TARGET_REDIRECT [expr $CONFIG_IP_NF_TARGET_REDIRECT&15]}
	global CONFIG_IP_NF_NAT_SNMP_BASIC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_NF_NAT == 1 || $CONFIG_IP_NF_NAT == 2 || $CONFIG_IP_NF_NAT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_NAT]]; set CONFIG_IP_NF_NAT_SNMP_BASIC [sync_tristate $CONFIG_IP_NF_NAT_SNMP_BASIC $tmpvar_dep]; set CONFIG_IP_NF_NAT_SNMP_BASIC [expr $CONFIG_IP_NF_NAT_SNMP_BASIC&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_IP_NF_IRC == 2)} then {	global CONSTANT_M
set CONFIG_IP_NF_NAT_IRC $CONSTANT_M }
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_IP_NF_IRC != 2) && ($CONFIG_IP_NF_IRC == 1)} then {set CONFIG_IP_NF_NAT_IRC $CONFIG_IP_NF_NAT }
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_IP_NF_FTP == 2)} then {	global CONSTANT_M
set CONFIG_IP_NF_NAT_FTP $CONSTANT_M }
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_IP_NF_FTP != 2) && ($CONFIG_IP_NF_FTP == 1)} then {set CONFIG_IP_NF_NAT_FTP $CONFIG_IP_NF_NAT }
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_IP_NF_PPTP == 2)} then {	global CONSTANT_M
set CONFIG_IP_NF_NAT_PPTP $CONSTANT_M }
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_IP_NF_PPTP != 2) && ($CONFIG_IP_NF_PPTP == 1)} then {set CONFIG_IP_NF_NAT_PPTP $CONFIG_IP_NF_NAT }
	global CONFIG_IP_NF_MANGLE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]]; set CONFIG_IP_NF_MANGLE [sync_tristate $CONFIG_IP_NF_MANGLE $tmpvar_dep]; set CONFIG_IP_NF_MANGLE [expr $CONFIG_IP_NF_MANGLE&15]}
	global CONFIG_IP_NF_TARGET_TOS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_MANGLE != 0) && ($CONFIG_IP_NF_MANGLE == 1 || $CONFIG_IP_NF_MANGLE == 2 || $CONFIG_IP_NF_MANGLE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_MANGLE]]; set CONFIG_IP_NF_TARGET_TOS [sync_tristate $CONFIG_IP_NF_TARGET_TOS $tmpvar_dep]; set CONFIG_IP_NF_TARGET_TOS [expr $CONFIG_IP_NF_TARGET_TOS&15]}
	global CONFIG_IP_NF_TARGET_MARK
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_MANGLE != 0) && ($CONFIG_IP_NF_MANGLE == 1 || $CONFIG_IP_NF_MANGLE == 2 || $CONFIG_IP_NF_MANGLE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_MANGLE]]; set CONFIG_IP_NF_TARGET_MARK [sync_tristate $CONFIG_IP_NF_TARGET_MARK $tmpvar_dep]; set CONFIG_IP_NF_TARGET_MARK [expr $CONFIG_IP_NF_TARGET_MARK&15]}
	global CONFIG_IP_NF_TARGET_LOG
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]]; set CONFIG_IP_NF_TARGET_LOG [sync_tristate $CONFIG_IP_NF_TARGET_LOG $tmpvar_dep]; set CONFIG_IP_NF_TARGET_LOG [expr $CONFIG_IP_NF_TARGET_LOG&15]}
	global CONFIG_IP_NF_TARGET_TCPMSS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP_NF_IPTABLES]]; set CONFIG_IP_NF_TARGET_TCPMSS [sync_tristate $CONFIG_IP_NF_TARGET_TCPMSS $tmpvar_dep]; set CONFIG_IP_NF_TARGET_TCPMSS [expr $CONFIG_IP_NF_TARGET_TCPMSS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 1) && ($CONFIG_IP_NF_IPTABLES != 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IP_NF_COMPAT_IPCHAINS == 2)} then {set CONFIG_IP_NF_COMPAT_IPCHAINS 1}; set CONFIG_IP_NF_COMPAT_IPCHAINS [expr $CONFIG_IP_NF_COMPAT_IPCHAINS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 1) && ($CONFIG_IP_NF_IPTABLES != 1) && ($CONFIG_IP_NF_COMPAT_IPCHAINS != 0)} then {	global CONSTANT_Y
set CONFIG_IP_NF_NAT_NEEDED $CONSTANT_Y }
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 1) && ($CONFIG_IP_NF_IPTABLES != 1) && ($CONFIG_IP_NF_COMPAT_IPCHAINS != 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IP_NF_COMPAT_IPFWADM == 2)} then {set CONFIG_IP_NF_COMPAT_IPFWADM 1}; set CONFIG_IP_NF_COMPAT_IPFWADM [expr $CONFIG_IP_NF_COMPAT_IPFWADM&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 1) && ($CONFIG_IP_NF_IPTABLES != 1) && ($CONFIG_IP_NF_COMPAT_IPCHAINS != 1) && ($CONFIG_IP_NF_COMPAT_IPFWADM != 0)} then {	global CONSTANT_Y
set CONFIG_IP_NF_NAT_NEEDED $CONSTANT_Y }
}


proc menu16 {w title} {
	set oldFocus [focus]
	catch {focus .menu14}
	catch {destroy $w; unregister_active 16}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 16]]
	message $w.m -width 400 -aspect 300 -text \
		"  IPv6: Netfilter Configuration"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "  IPv6: Netfilter Configuration" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 16; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 16; menu17 .menu17 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 16"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 16; menu15 .menu15 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 16; menu15 .menu15 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 16 0 "IP6 tables support (required for filtering/masq/NAT)" CONFIG_IP6_NF_IPTABLES
	dep_tristate $w.config.f 16 1 "  limit match support" CONFIG_IP6_NF_MATCH_LIMIT
	dep_tristate $w.config.f 16 2 "  MAC address match support" CONFIG_IP6_NF_MATCH_MAC
	dep_tristate $w.config.f 16 3 "  Multiple port match support" CONFIG_IP6_NF_MATCH_MULTIPORT
	dep_tristate $w.config.f 16 4 "  Owner match support (EXPERIMENTAL)" CONFIG_IP6_NF_MATCH_OWNER
	dep_tristate $w.config.f 16 5 "  netfilter MARK match support" CONFIG_IP6_NF_MATCH_MARK
	dep_tristate $w.config.f 16 6 "  Packet filtering" CONFIG_IP6_NF_FILTER
	dep_tristate $w.config.f 16 7 "    LOG target support" CONFIG_IP6_NF_TARGET_LOG
	dep_tristate $w.config.f 16 8 "  Packet mangling" CONFIG_IP6_NF_MANGLE
	dep_tristate $w.config.f 16 9 "    MARK target support" CONFIG_IP6_NF_TARGET_MARK



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu14] == 0} then {menu14 .menu14 "Networking options"}
	set winx [expr [winfo x .menu14]+30]; set winy [expr [winfo y .menu14]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu16 {} {
	global CONFIG_MODULES
	global CONFIG_NET
	global CONFIG_INET
	global CONFIG_EXPERIMENTAL
	global CONFIG_IPV6
	global CONFIG_NETFILTER
	global CONFIG_IP6_NF_IPTABLES
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0)} then {
	configure_entry .menu16.config.f.x0 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu16.config.f.x0 normal {m}} else {configure_entry .menu16.config.f.x0 disabled {m}}; configure_entry .menu16.config.f.x0 normal {n l}} else {configure_entry .menu16.config.f.x0 disabled {y n m l}}
	global CONFIG_IP6_NF_MATCH_LIMIT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP6_NF_IPTABLES]];set CONFIG_IP6_NF_MATCH_LIMIT [sync_tristate $CONFIG_IP6_NF_MATCH_LIMIT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu16.config.f.x1 disabled {y}} else {configure_entry .menu16.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu16.config.f.x1 disabled {m}} else {configure_entry .menu16.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu16.config.f.x1 normal {m}} else {configure_entry .menu16.config.f.x1 disabled {m}}; configure_entry .menu16.config.f.x1 normal {n l}} else {configure_entry .menu16.config.f.x1 disabled {y n m l}}
	global CONFIG_IP6_NF_MATCH_MAC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP6_NF_IPTABLES]];set CONFIG_IP6_NF_MATCH_MAC [sync_tristate $CONFIG_IP6_NF_MATCH_MAC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu16.config.f.x2 disabled {y}} else {configure_entry .menu16.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu16.config.f.x2 disabled {m}} else {configure_entry .menu16.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu16.config.f.x2 normal {m}} else {configure_entry .menu16.config.f.x2 disabled {m}}; configure_entry .menu16.config.f.x2 normal {n l}} else {configure_entry .menu16.config.f.x2 disabled {y n m l}}
	global CONFIG_IP6_NF_MATCH_MULTIPORT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP6_NF_IPTABLES]];set CONFIG_IP6_NF_MATCH_MULTIPORT [sync_tristate $CONFIG_IP6_NF_MATCH_MULTIPORT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu16.config.f.x3 disabled {y}} else {configure_entry .menu16.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu16.config.f.x3 disabled {m}} else {configure_entry .menu16.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu16.config.f.x3 normal {m}} else {configure_entry .menu16.config.f.x3 disabled {m}}; configure_entry .menu16.config.f.x3 normal {n l}} else {configure_entry .menu16.config.f.x3 disabled {y n m l}}
	global CONFIG_IP6_NF_MATCH_OWNER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP6_NF_IPTABLES]];set CONFIG_IP6_NF_MATCH_OWNER [sync_tristate $CONFIG_IP6_NF_MATCH_OWNER $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu16.config.f.x4 disabled {y}} else {configure_entry .menu16.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu16.config.f.x4 disabled {m}} else {configure_entry .menu16.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu16.config.f.x4 normal {m}} else {configure_entry .menu16.config.f.x4 disabled {m}}; configure_entry .menu16.config.f.x4 normal {n l}} else {configure_entry .menu16.config.f.x4 disabled {y n m l}}
	global CONFIG_IP6_NF_MATCH_MARK
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP6_NF_IPTABLES]];set CONFIG_IP6_NF_MATCH_MARK [sync_tristate $CONFIG_IP6_NF_MATCH_MARK $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu16.config.f.x5 disabled {y}} else {configure_entry .menu16.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu16.config.f.x5 disabled {m}} else {configure_entry .menu16.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu16.config.f.x5 normal {m}} else {configure_entry .menu16.config.f.x5 disabled {m}}; configure_entry .menu16.config.f.x5 normal {n l}} else {configure_entry .menu16.config.f.x5 disabled {y n m l}}
	global CONFIG_IP6_NF_FILTER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP6_NF_IPTABLES]];set CONFIG_IP6_NF_FILTER [sync_tristate $CONFIG_IP6_NF_FILTER $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu16.config.f.x6 disabled {y}} else {configure_entry .menu16.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu16.config.f.x6 disabled {m}} else {configure_entry .menu16.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu16.config.f.x6 normal {m}} else {configure_entry .menu16.config.f.x6 disabled {m}}; configure_entry .menu16.config.f.x6 normal {n l}} else {configure_entry .menu16.config.f.x6 disabled {y n m l}}
	global CONFIG_IP6_NF_TARGET_LOG
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_FILTER != 0) && ($CONFIG_IP6_NF_FILTER == 1 || $CONFIG_IP6_NF_FILTER == 2 || $CONFIG_IP6_NF_FILTER == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP6_NF_FILTER]];set CONFIG_IP6_NF_TARGET_LOG [sync_tristate $CONFIG_IP6_NF_TARGET_LOG $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu16.config.f.x7 disabled {y}} else {configure_entry .menu16.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu16.config.f.x7 disabled {m}} else {configure_entry .menu16.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu16.config.f.x7 normal {m}} else {configure_entry .menu16.config.f.x7 disabled {m}}; configure_entry .menu16.config.f.x7 normal {n l}} else {configure_entry .menu16.config.f.x7 disabled {y n m l}}
	global CONFIG_IP6_NF_MANGLE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP6_NF_IPTABLES]];set CONFIG_IP6_NF_MANGLE [sync_tristate $CONFIG_IP6_NF_MANGLE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu16.config.f.x8 disabled {y}} else {configure_entry .menu16.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu16.config.f.x8 disabled {m}} else {configure_entry .menu16.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu16.config.f.x8 normal {m}} else {configure_entry .menu16.config.f.x8 disabled {m}}; configure_entry .menu16.config.f.x8 normal {n l}} else {configure_entry .menu16.config.f.x8 disabled {y n m l}}
	global CONFIG_IP6_NF_TARGET_MARK
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_MANGLE != 0) && ($CONFIG_IP6_NF_MANGLE == 1 || $CONFIG_IP6_NF_MANGLE == 2 || $CONFIG_IP6_NF_MANGLE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP6_NF_MANGLE]];set CONFIG_IP6_NF_TARGET_MARK [sync_tristate $CONFIG_IP6_NF_TARGET_MARK $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu16.config.f.x9 disabled {y}} else {configure_entry .menu16.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu16.config.f.x9 disabled {m}} else {configure_entry .menu16.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu16.config.f.x9 normal {m}} else {configure_entry .menu16.config.f.x9 disabled {m}}; configure_entry .menu16.config.f.x9 normal {n l}} else {configure_entry .menu16.config.f.x9 disabled {y n m l}}
}


proc update_define_menu16 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_IP6_NF_IPTABLES
set CONFIG_IP6_NF_IPTABLES [expr $CONFIG_IP6_NF_IPTABLES|16]
	global CONFIG_NET
	global CONFIG_INET
	global CONFIG_EXPERIMENTAL
	global CONFIG_IPV6
	global CONFIG_NETFILTER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IP6_NF_IPTABLES == 2)} then {set CONFIG_IP6_NF_IPTABLES 1}; set CONFIG_IP6_NF_IPTABLES [expr $CONFIG_IP6_NF_IPTABLES&15]}
	global CONFIG_IP6_NF_MATCH_LIMIT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP6_NF_IPTABLES]]; set CONFIG_IP6_NF_MATCH_LIMIT [sync_tristate $CONFIG_IP6_NF_MATCH_LIMIT $tmpvar_dep]; set CONFIG_IP6_NF_MATCH_LIMIT [expr $CONFIG_IP6_NF_MATCH_LIMIT&15]}
	global CONFIG_IP6_NF_MATCH_MAC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP6_NF_IPTABLES]]; set CONFIG_IP6_NF_MATCH_MAC [sync_tristate $CONFIG_IP6_NF_MATCH_MAC $tmpvar_dep]; set CONFIG_IP6_NF_MATCH_MAC [expr $CONFIG_IP6_NF_MATCH_MAC&15]}
	global CONFIG_IP6_NF_MATCH_MULTIPORT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP6_NF_IPTABLES]]; set CONFIG_IP6_NF_MATCH_MULTIPORT [sync_tristate $CONFIG_IP6_NF_MATCH_MULTIPORT $tmpvar_dep]; set CONFIG_IP6_NF_MATCH_MULTIPORT [expr $CONFIG_IP6_NF_MATCH_MULTIPORT&15]}
	global CONFIG_IP6_NF_MATCH_OWNER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP6_NF_IPTABLES]]; set CONFIG_IP6_NF_MATCH_OWNER [sync_tristate $CONFIG_IP6_NF_MATCH_OWNER $tmpvar_dep]; set CONFIG_IP6_NF_MATCH_OWNER [expr $CONFIG_IP6_NF_MATCH_OWNER&15]}
	global CONFIG_IP6_NF_MATCH_MARK
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP6_NF_IPTABLES]]; set CONFIG_IP6_NF_MATCH_MARK [sync_tristate $CONFIG_IP6_NF_MATCH_MARK $tmpvar_dep]; set CONFIG_IP6_NF_MATCH_MARK [expr $CONFIG_IP6_NF_MATCH_MARK&15]}
	global CONFIG_IP6_NF_FILTER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP6_NF_IPTABLES]]; set CONFIG_IP6_NF_FILTER [sync_tristate $CONFIG_IP6_NF_FILTER $tmpvar_dep]; set CONFIG_IP6_NF_FILTER [expr $CONFIG_IP6_NF_FILTER&15]}
	global CONFIG_IP6_NF_TARGET_LOG
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_FILTER != 0) && ($CONFIG_IP6_NF_FILTER == 1 || $CONFIG_IP6_NF_FILTER == 2 || $CONFIG_IP6_NF_FILTER == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP6_NF_FILTER]]; set CONFIG_IP6_NF_TARGET_LOG [sync_tristate $CONFIG_IP6_NF_TARGET_LOG $tmpvar_dep]; set CONFIG_IP6_NF_TARGET_LOG [expr $CONFIG_IP6_NF_TARGET_LOG&15]}
	global CONFIG_IP6_NF_MANGLE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP6_NF_IPTABLES]]; set CONFIG_IP6_NF_MANGLE [sync_tristate $CONFIG_IP6_NF_MANGLE $tmpvar_dep]; set CONFIG_IP6_NF_MANGLE [expr $CONFIG_IP6_NF_MANGLE&15]}
	global CONFIG_IP6_NF_TARGET_MARK
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_MANGLE != 0) && ($CONFIG_IP6_NF_MANGLE == 1 || $CONFIG_IP6_NF_MANGLE == 2 || $CONFIG_IP6_NF_MANGLE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IP6_NF_MANGLE]]; set CONFIG_IP6_NF_TARGET_MARK [sync_tristate $CONFIG_IP6_NF_TARGET_MARK $tmpvar_dep]; set CONFIG_IP6_NF_TARGET_MARK [expr $CONFIG_IP6_NF_TARGET_MARK&15]}
}


proc menu17 {w title} {
	set oldFocus [focus]
	catch {focus .menu14}
	catch {destroy $w; unregister_active 17}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 17]]
	message $w.m -width 400 -aspect 300 -text \
		"QoS and/or fair queueing"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "QoS and/or fair queueing" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 17; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 17; catch {destroy .menu14}; unregister_active 14; menu18 .menu18 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 17"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 17; menu16 .menu16 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 17; menu16 .menu16 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 17 0 "QoS and/or fair queueing" CONFIG_NET_SCHED
	tristate $w.config.f 17 1 "  CBQ packet scheduler" CONFIG_NET_SCH_CBQ
	tristate $w.config.f 17 2 "  CSZ packet scheduler" CONFIG_NET_SCH_CSZ
	bool $w.config.f 17 3 "  ATM pseudo-scheduler" CONFIG_NET_SCH_ATM
	tristate $w.config.f 17 4 "  The simplest PRIO pseudoscheduler" CONFIG_NET_SCH_PRIO
	tristate $w.config.f 17 5 "  RED queue" CONFIG_NET_SCH_RED
	tristate $w.config.f 17 6 "  SFQ queue" CONFIG_NET_SCH_SFQ
	tristate $w.config.f 17 7 "  TEQL queue" CONFIG_NET_SCH_TEQL
	tristate $w.config.f 17 8 "  TBF queue" CONFIG_NET_SCH_TBF
	tristate $w.config.f 17 9 "  GRED queue" CONFIG_NET_SCH_GRED
	tristate $w.config.f 17 10 "  Diffserv field marker" CONFIG_NET_SCH_DSMARK
	tristate $w.config.f 17 11 "  Ingress Qdisc" CONFIG_NET_SCH_INGRESS
	bool $w.config.f 17 12 "  QoS support" CONFIG_NET_QOS
	bool $w.config.f 17 13 "    Rate estimator" CONFIG_NET_ESTIMATOR
	bool $w.config.f 17 14 "  Packet classifier API" CONFIG_NET_CLS
	tristate $w.config.f 17 15 "    TC index classifier" CONFIG_NET_CLS_TCINDEX
	tristate $w.config.f 17 16 "    Routing table based classifier" CONFIG_NET_CLS_ROUTE4
	tristate $w.config.f 17 17 "    Firewall based classifier" CONFIG_NET_CLS_FW
	tristate $w.config.f 17 18 "    U32 classifier" CONFIG_NET_CLS_U32
	tristate $w.config.f 17 19 "    Special RSVP classifier" CONFIG_NET_CLS_RSVP
	tristate $w.config.f 17 20 "    Special RSVP classifier for IPv6" CONFIG_NET_CLS_RSVP6
	bool $w.config.f 17 21 "    Traffic policing (needed for in/egress)" CONFIG_NET_CLS_POLICE



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu14] == 0} then {menu14 .menu14 "Networking options"}
	set winx [expr [winfo x .menu14]+30]; set winy [expr [winfo y .menu14]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu17 {} {
	global CONFIG_NET
	global CONFIG_NET_SCHED
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu17.config.f.x0 normal {n l y}} else {configure_entry .menu17.config.f.x0 disabled {y n l}}
	global CONFIG_MODULES
	global CONFIG_NET_SCH_CBQ
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {
	configure_entry .menu17.config.f.x1 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu17.config.f.x1 normal {m}} else {configure_entry .menu17.config.f.x1 disabled {m}}; configure_entry .menu17.config.f.x1 normal {n l}} else {configure_entry .menu17.config.f.x1 disabled {y n m l}}
	global CONFIG_NET_SCH_CSZ
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {
	configure_entry .menu17.config.f.x2 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu17.config.f.x2 normal {m}} else {configure_entry .menu17.config.f.x2 disabled {m}}; configure_entry .menu17.config.f.x2 normal {n l}} else {configure_entry .menu17.config.f.x2 disabled {y n m l}}
	global CONFIG_ATM
	global CONFIG_NET_SCH_ATM
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_ATM == 1)} then {
	configure_entry .menu17.config.f.x3 normal {n l y}} else {configure_entry .menu17.config.f.x3 disabled {y n l}}
	global CONFIG_NET_SCH_PRIO
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {
	configure_entry .menu17.config.f.x4 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu17.config.f.x4 normal {m}} else {configure_entry .menu17.config.f.x4 disabled {m}}; configure_entry .menu17.config.f.x4 normal {n l}} else {configure_entry .menu17.config.f.x4 disabled {y n m l}}
	global CONFIG_NET_SCH_RED
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {
	configure_entry .menu17.config.f.x5 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu17.config.f.x5 normal {m}} else {configure_entry .menu17.config.f.x5 disabled {m}}; configure_entry .menu17.config.f.x5 normal {n l}} else {configure_entry .menu17.config.f.x5 disabled {y n m l}}
	global CONFIG_NET_SCH_SFQ
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {
	configure_entry .menu17.config.f.x6 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu17.config.f.x6 normal {m}} else {configure_entry .menu17.config.f.x6 disabled {m}}; configure_entry .menu17.config.f.x6 normal {n l}} else {configure_entry .menu17.config.f.x6 disabled {y n m l}}
	global CONFIG_NET_SCH_TEQL
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {
	configure_entry .menu17.config.f.x7 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu17.config.f.x7 normal {m}} else {configure_entry .menu17.config.f.x7 disabled {m}}; configure_entry .menu17.config.f.x7 normal {n l}} else {configure_entry .menu17.config.f.x7 disabled {y n m l}}
	global CONFIG_NET_SCH_TBF
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {
	configure_entry .menu17.config.f.x8 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu17.config.f.x8 normal {m}} else {configure_entry .menu17.config.f.x8 disabled {m}}; configure_entry .menu17.config.f.x8 normal {n l}} else {configure_entry .menu17.config.f.x8 disabled {y n m l}}
	global CONFIG_NET_SCH_GRED
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {
	configure_entry .menu17.config.f.x9 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu17.config.f.x9 normal {m}} else {configure_entry .menu17.config.f.x9 disabled {m}}; configure_entry .menu17.config.f.x9 normal {n l}} else {configure_entry .menu17.config.f.x9 disabled {y n m l}}
	global CONFIG_NET_SCH_DSMARK
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {
	configure_entry .menu17.config.f.x10 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu17.config.f.x10 normal {m}} else {configure_entry .menu17.config.f.x10 disabled {m}}; configure_entry .menu17.config.f.x10 normal {n l}} else {configure_entry .menu17.config.f.x10 disabled {y n m l}}
	global CONFIG_NETFILTER
	global CONFIG_NET_SCH_INGRESS
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NETFILTER == 1)} then {
	configure_entry .menu17.config.f.x11 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu17.config.f.x11 normal {m}} else {configure_entry .menu17.config.f.x11 disabled {m}}; configure_entry .menu17.config.f.x11 normal {n l}} else {configure_entry .menu17.config.f.x11 disabled {y n m l}}
	global CONFIG_NET_QOS
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {
	configure_entry .menu17.config.f.x12 normal {n l y}} else {configure_entry .menu17.config.f.x12 disabled {y n l}}
	global CONFIG_NET_ESTIMATOR
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_QOS == 1)} then {
	configure_entry .menu17.config.f.x13 normal {n l y}} else {configure_entry .menu17.config.f.x13 disabled {y n l}}
	global CONFIG_NET_CLS
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {
	configure_entry .menu17.config.f.x14 normal {n l y}} else {configure_entry .menu17.config.f.x14 disabled {y n l}}
	global CONFIG_NET_CLS_TCINDEX
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1)} then {
	configure_entry .menu17.config.f.x15 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu17.config.f.x15 normal {m}} else {configure_entry .menu17.config.f.x15 disabled {m}}; configure_entry .menu17.config.f.x15 normal {n l}} else {configure_entry .menu17.config.f.x15 disabled {y n m l}}
	global CONFIG_NET_CLS_ROUTE4
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1)} then {
	configure_entry .menu17.config.f.x16 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu17.config.f.x16 normal {m}} else {configure_entry .menu17.config.f.x16 disabled {m}}; configure_entry .menu17.config.f.x16 normal {n l}} else {configure_entry .menu17.config.f.x16 disabled {y n m l}}
	global CONFIG_NET_CLS_FW
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1)} then {
	configure_entry .menu17.config.f.x17 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu17.config.f.x17 normal {m}} else {configure_entry .menu17.config.f.x17 disabled {m}}; configure_entry .menu17.config.f.x17 normal {n l}} else {configure_entry .menu17.config.f.x17 disabled {y n m l}}
	global CONFIG_NET_CLS_U32
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1)} then {
	configure_entry .menu17.config.f.x18 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu17.config.f.x18 normal {m}} else {configure_entry .menu17.config.f.x18 disabled {m}}; configure_entry .menu17.config.f.x18 normal {n l}} else {configure_entry .menu17.config.f.x18 disabled {y n m l}}
	global CONFIG_NET_CLS_RSVP
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1) && ($CONFIG_NET_QOS == 1)} then {
	configure_entry .menu17.config.f.x19 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu17.config.f.x19 normal {m}} else {configure_entry .menu17.config.f.x19 disabled {m}}; configure_entry .menu17.config.f.x19 normal {n l}} else {configure_entry .menu17.config.f.x19 disabled {y n m l}}
	global CONFIG_NET_CLS_RSVP6
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1) && ($CONFIG_NET_QOS == 1)} then {
	configure_entry .menu17.config.f.x20 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu17.config.f.x20 normal {m}} else {configure_entry .menu17.config.f.x20 disabled {m}}; configure_entry .menu17.config.f.x20 normal {n l}} else {configure_entry .menu17.config.f.x20 disabled {y n m l}}
	global CONFIG_NET_CLS_POLICE
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1) && ($CONFIG_NET_QOS == 1)} then {
	configure_entry .menu17.config.f.x21 normal {n l y}} else {configure_entry .menu17.config.f.x21 disabled {y n l}}
}


proc update_define_menu17 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_NET_SCH_CBQ
	global CONFIG_NET_SCH_CSZ
	global CONFIG_NET_SCH_PRIO
	global CONFIG_NET_SCH_RED
	global CONFIG_NET_SCH_SFQ
	global CONFIG_NET_SCH_TEQL
	global CONFIG_NET_SCH_TBF
	global CONFIG_NET_SCH_GRED
	global CONFIG_NET_SCH_DSMARK
	global CONFIG_NET_SCH_INGRESS
	global CONFIG_NET_CLS_TCINDEX
	global CONFIG_NET_CLS_ROUTE4
	global CONFIG_NET_CLS_ROUTE
	global CONFIG_NET_CLS_FW
	global CONFIG_NET_CLS_U32
	global CONFIG_NET_CLS_RSVP
	global CONFIG_NET_CLS_RSVP6
	global CONFIG_NET_SCHED
set CONFIG_NET_SCHED [expr $CONFIG_NET_SCHED|16]
set CONFIG_NET_SCH_CBQ [expr $CONFIG_NET_SCH_CBQ|16]
set CONFIG_NET_SCH_CSZ [expr $CONFIG_NET_SCH_CSZ|16]
	global CONFIG_NET_SCH_ATM
set CONFIG_NET_SCH_ATM [expr $CONFIG_NET_SCH_ATM|16]
set CONFIG_NET_SCH_PRIO [expr $CONFIG_NET_SCH_PRIO|16]
set CONFIG_NET_SCH_RED [expr $CONFIG_NET_SCH_RED|16]
set CONFIG_NET_SCH_SFQ [expr $CONFIG_NET_SCH_SFQ|16]
set CONFIG_NET_SCH_TEQL [expr $CONFIG_NET_SCH_TEQL|16]
set CONFIG_NET_SCH_TBF [expr $CONFIG_NET_SCH_TBF|16]
set CONFIG_NET_SCH_GRED [expr $CONFIG_NET_SCH_GRED|16]
set CONFIG_NET_SCH_DSMARK [expr $CONFIG_NET_SCH_DSMARK|16]
set CONFIG_NET_SCH_INGRESS [expr $CONFIG_NET_SCH_INGRESS|16]
	global CONFIG_NET_QOS
set CONFIG_NET_QOS [expr $CONFIG_NET_QOS|16]
	global CONFIG_NET_ESTIMATOR
set CONFIG_NET_ESTIMATOR [expr $CONFIG_NET_ESTIMATOR|16]
	global CONFIG_NET_CLS
set CONFIG_NET_CLS [expr $CONFIG_NET_CLS|16]
set CONFIG_NET_CLS_TCINDEX [expr $CONFIG_NET_CLS_TCINDEX|16]
set CONFIG_NET_CLS_ROUTE4 [expr $CONFIG_NET_CLS_ROUTE4|16]
set CONFIG_NET_CLS_FW [expr $CONFIG_NET_CLS_FW|16]
set CONFIG_NET_CLS_U32 [expr $CONFIG_NET_CLS_U32|16]
set CONFIG_NET_CLS_RSVP [expr $CONFIG_NET_CLS_RSVP|16]
set CONFIG_NET_CLS_RSVP6 [expr $CONFIG_NET_CLS_RSVP6|16]
	global CONFIG_NET_CLS_POLICE
set CONFIG_NET_CLS_POLICE [expr $CONFIG_NET_CLS_POLICE|16]
	global CONFIG_NET
	if {($CONFIG_NET == 1)} then {
	set CONFIG_NET_SCHED [expr $CONFIG_NET_SCHED&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_SCH_CBQ == 2)} then {set CONFIG_NET_SCH_CBQ 1}; set CONFIG_NET_SCH_CBQ [expr $CONFIG_NET_SCH_CBQ&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_SCH_CSZ == 2)} then {set CONFIG_NET_SCH_CSZ 1}; set CONFIG_NET_SCH_CSZ [expr $CONFIG_NET_SCH_CSZ&15]}
	global CONFIG_ATM
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_ATM == 1)} then {
	set CONFIG_NET_SCH_ATM [expr $CONFIG_NET_SCH_ATM&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_SCH_PRIO == 2)} then {set CONFIG_NET_SCH_PRIO 1}; set CONFIG_NET_SCH_PRIO [expr $CONFIG_NET_SCH_PRIO&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_SCH_RED == 2)} then {set CONFIG_NET_SCH_RED 1}; set CONFIG_NET_SCH_RED [expr $CONFIG_NET_SCH_RED&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_SCH_SFQ == 2)} then {set CONFIG_NET_SCH_SFQ 1}; set CONFIG_NET_SCH_SFQ [expr $CONFIG_NET_SCH_SFQ&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_SCH_TEQL == 2)} then {set CONFIG_NET_SCH_TEQL 1}; set CONFIG_NET_SCH_TEQL [expr $CONFIG_NET_SCH_TEQL&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_SCH_TBF == 2)} then {set CONFIG_NET_SCH_TBF 1}; set CONFIG_NET_SCH_TBF [expr $CONFIG_NET_SCH_TBF&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_SCH_GRED == 2)} then {set CONFIG_NET_SCH_GRED 1}; set CONFIG_NET_SCH_GRED [expr $CONFIG_NET_SCH_GRED&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_SCH_DSMARK == 2)} then {set CONFIG_NET_SCH_DSMARK 1}; set CONFIG_NET_SCH_DSMARK [expr $CONFIG_NET_SCH_DSMARK&15]}
	global CONFIG_NETFILTER
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NETFILTER == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_SCH_INGRESS == 2)} then {set CONFIG_NET_SCH_INGRESS 1}; set CONFIG_NET_SCH_INGRESS [expr $CONFIG_NET_SCH_INGRESS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {
	set CONFIG_NET_QOS [expr $CONFIG_NET_QOS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_QOS == 1)} then {
	set CONFIG_NET_ESTIMATOR [expr $CONFIG_NET_ESTIMATOR&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {
	set CONFIG_NET_CLS [expr $CONFIG_NET_CLS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_CLS_TCINDEX == 2)} then {set CONFIG_NET_CLS_TCINDEX 1}; set CONFIG_NET_CLS_TCINDEX [expr $CONFIG_NET_CLS_TCINDEX&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_CLS_ROUTE4 == 2)} then {set CONFIG_NET_CLS_ROUTE4 1}; set CONFIG_NET_CLS_ROUTE4 [expr $CONFIG_NET_CLS_ROUTE4&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1) && ($CONFIG_NET_CLS_ROUTE4 != 0)} then {	global CONSTANT_Y
set CONFIG_NET_CLS_ROUTE $CONSTANT_Y }
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_CLS_FW == 2)} then {set CONFIG_NET_CLS_FW 1}; set CONFIG_NET_CLS_FW [expr $CONFIG_NET_CLS_FW&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_CLS_U32 == 2)} then {set CONFIG_NET_CLS_U32 1}; set CONFIG_NET_CLS_U32 [expr $CONFIG_NET_CLS_U32&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1) && ($CONFIG_NET_QOS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_CLS_RSVP == 2)} then {set CONFIG_NET_CLS_RSVP 1}; set CONFIG_NET_CLS_RSVP [expr $CONFIG_NET_CLS_RSVP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1) && ($CONFIG_NET_QOS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NET_CLS_RSVP6 == 2)} then {set CONFIG_NET_CLS_RSVP6 1}; set CONFIG_NET_CLS_RSVP6 [expr $CONFIG_NET_CLS_RSVP6&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1) && ($CONFIG_NET_QOS == 1)} then {
	set CONFIG_NET_CLS_POLICE [expr $CONFIG_NET_CLS_POLICE&15]}
}


menu_option menu18 18 "Telephony Support"
proc menu18 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 18}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 18]]
	message $w.m -width 400 -aspect 300 -text \
		"Telephony Support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Telephony Support" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 18; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 18; menu19 .menu19 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 18"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 18; menu17 .menu17 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 18; menu17 .menu17 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 18 0 "Linux telephony support" CONFIG_PHONE
	dep_tristate $w.config.f 18 1 "QuickNet Internet LineJack/PhoneJack support" CONFIG_PHONE_IXJ
	dep_tristate $w.config.f 18 2 "QuickNet Internet LineJack/PhoneJack PCMCIA support" CONFIG_PHONE_IXJ_PCMCIA



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu18 {} {
	global CONFIG_PHONE
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu18.config.f.x0 normal {m}} else {configure_entry .menu18.config.f.x0 disabled {m}}
	global CONFIG_PHONE_IXJ
	if {($CONFIG_PHONE == 1 || $CONFIG_PHONE == 2 || $CONFIG_PHONE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PHONE]];set CONFIG_PHONE_IXJ [sync_tristate $CONFIG_PHONE_IXJ $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu18.config.f.x1 disabled {y}} else {configure_entry .menu18.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu18.config.f.x1 disabled {m}} else {configure_entry .menu18.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu18.config.f.x1 normal {m}} else {configure_entry .menu18.config.f.x1 disabled {m}}; configure_entry .menu18.config.f.x1 normal {n l}} else {configure_entry .menu18.config.f.x1 disabled {y n m l}}
	global CONFIG_PHONE_IXJ_PCMCIA
	if {($CONFIG_PHONE_IXJ == 1 || $CONFIG_PHONE_IXJ == 2 || $CONFIG_PHONE_IXJ == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PHONE_IXJ]];set CONFIG_PHONE_IXJ_PCMCIA [sync_tristate $CONFIG_PHONE_IXJ_PCMCIA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu18.config.f.x2 disabled {y}} else {configure_entry .menu18.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu18.config.f.x2 disabled {m}} else {configure_entry .menu18.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu18.config.f.x2 normal {m}} else {configure_entry .menu18.config.f.x2 disabled {m}}; configure_entry .menu18.config.f.x2 normal {n l}} else {configure_entry .menu18.config.f.x2 disabled {y n m l}}
}


proc update_define_menu18 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_PHONE

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_PHONE == 2)} then {set CONFIG_PHONE 1}}
	global CONFIG_PHONE_IXJ
	if {($CONFIG_PHONE == 1 || $CONFIG_PHONE == 2 || $CONFIG_PHONE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PHONE]]; set CONFIG_PHONE_IXJ [sync_tristate $CONFIG_PHONE_IXJ $tmpvar_dep]; set CONFIG_PHONE_IXJ [expr $CONFIG_PHONE_IXJ&15]}
	global CONFIG_PHONE_IXJ_PCMCIA
	if {($CONFIG_PHONE_IXJ == 1 || $CONFIG_PHONE_IXJ == 2 || $CONFIG_PHONE_IXJ == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PHONE_IXJ]]; set CONFIG_PHONE_IXJ_PCMCIA [sync_tristate $CONFIG_PHONE_IXJ_PCMCIA $tmpvar_dep]; set CONFIG_PHONE_IXJ_PCMCIA [expr $CONFIG_PHONE_IXJ_PCMCIA&15]}
}


menu_option menu19 19 "ATA/IDE/MFM/RLL support"
proc menu19 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 19}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 19]]
	message $w.m -width 400 -aspect 300 -text \
		"ATA/IDE/MFM/RLL support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "ATA/IDE/MFM/RLL support" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 19; break"
	set nextscript "catch {focus $oldFocus}; menu20 .menu20 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 19"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 19; menu18 .menu18 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 19; menu18 .menu18 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 19 0 "ATA/IDE/MFM/RLL support" CONFIG_IDE
	submenu $w.config.f 19 1 "IDE, ATA and ATAPI Block devices" 20



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu19 {} {
	global CONFIG_IDE
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu19.config.f.x0 normal {m}} else {configure_entry .menu19.config.f.x0 disabled {m}}
	if {($CONFIG_IDE != 0)} then {configure_entry .menu19.config.f.x1 normal {m}} else {configure_entry .menu19.config.f.x1 disabled {m}}
}


proc update_define_menu19 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_IDE
	global CONFIG_BLK_DEV_IDE_MODES
	global CONFIG_BLK_DEV_HD

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_IDE == 2)} then {set CONFIG_IDE 1}}
	if {($CONFIG_IDE == 0)} then {	global CONSTANT_N
set CONFIG_BLK_DEV_IDE_MODES $CONSTANT_N }
	if {($CONFIG_IDE == 0)} then {	global CONSTANT_N
set CONFIG_BLK_DEV_HD $CONSTANT_N }
}


proc menu20 {w title} {
	set oldFocus [focus]
	catch {focus .menu19}
	catch {destroy $w; unregister_active 20}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 20]]
	message $w.m -width 400 -aspect 300 -text \
		"IDE, ATA and ATAPI Block devices"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "IDE, ATA and ATAPI Block devices" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 20; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 20; catch {destroy .menu19}; unregister_active 19; menu21 .menu21 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 20"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 20; menu19 .menu19 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 20; menu19 .menu19 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 20 0 "Enhanced IDE/MFM/RLL disk/cdrom/tape/floppy support" CONFIG_BLK_DEV_IDE
	comment $w.config.f 20 1 "Please see Documentation/ide.txt for help/info on IDE drives"
	dep_bool $w.config.f 20 2 "  Use old disk-only driver on primary interface" CONFIG_BLK_DEV_HD_IDE
	dep_tristate $w.config.f 20 3 "  Include IDE/ATA-2 DISK support" CONFIG_BLK_DEV_IDEDISK
	dep_bool $w.config.f 20 4 "    Use multi-mode by default" CONFIG_IDEDISK_MULTI_MODE
	dep_bool $w.config.f 20 5 "    Fujitsu Vendor Specific" CONFIG_BLK_DEV_IDEDISK_FUJITSU
	dep_bool $w.config.f 20 6 "    IBM Vendor Specific" CONFIG_BLK_DEV_IDEDISK_IBM
	dep_bool $w.config.f 20 7 "    Maxtor Vendor Specific" CONFIG_BLK_DEV_IDEDISK_MAXTOR
	dep_bool $w.config.f 20 8 "    Quantum Vendor Specific" CONFIG_BLK_DEV_IDEDISK_QUANTUM
	dep_bool $w.config.f 20 9 "    Seagate Vendor Specific" CONFIG_BLK_DEV_IDEDISK_SEAGATE
	dep_bool $w.config.f 20 10 "    Western Digital Vendor Specific" CONFIG_BLK_DEV_IDEDISK_WD
	dep_bool $w.config.f 20 11 "    TiVo Commerial Application Specific" CONFIG_BLK_DEV_TIVO
	dep_tristate $w.config.f 20 12 "  PCMCIA IDE support" CONFIG_BLK_DEV_IDECS
	dep_tristate $w.config.f 20 13 "  Include IDE/ATAPI CDROM support" CONFIG_BLK_DEV_IDECD
	dep_tristate $w.config.f 20 14 "  Include IDE/ATAPI TAPE support" CONFIG_BLK_DEV_IDETAPE
	dep_tristate $w.config.f 20 15 "  Include IDE/ATAPI FLOPPY support" CONFIG_BLK_DEV_IDEFLOPPY
	dep_tristate $w.config.f 20 16 "  SCSI emulation support" CONFIG_BLK_DEV_IDESCSI
	comment $w.config.f 20 17 "IDE chipset support/bugfixes"
	dep_bool $w.config.f 20 18 "  CMD640 chipset bugfix/support" CONFIG_BLK_DEV_CMD640
	dep_bool $w.config.f 20 19 "    CMD640 enhanced support" CONFIG_BLK_DEV_CMD640_ENHANCED
	dep_bool $w.config.f 20 20 "  ISA-PNP EIDE support" CONFIG_BLK_DEV_ISAPNP
	dep_bool $w.config.f 20 21 "  RZ1000 chipset bugfix/support" CONFIG_BLK_DEV_RZ1000
	bool $w.config.f 20 22 "  Generic PCI IDE chipset support" CONFIG_BLK_DEV_IDEPCI
	bool $w.config.f 20 23 "    Sharing PCI IDE interrupts support" CONFIG_IDEPCI_SHARE_IRQ
	bool $w.config.f 20 24 "    Generic PCI bus-master DMA support" CONFIG_BLK_DEV_IDEDMA_PCI
	bool $w.config.f 20 25 "    Boot off-board chipsets first support" CONFIG_BLK_DEV_OFFBOARD
	dep_bool $w.config.f 20 26 "      Use PCI DMA by default when available" CONFIG_IDEDMA_PCI_AUTO
	dep_bool $w.config.f 20 27 "      ATA Work(s) In Progress (EXPERIMENTAL)" CONFIG_IDEDMA_PCI_WIP
	dep_bool $w.config.f 20 28 "      Good-Bad DMA Model-Firmware (WIP)" CONFIG_IDEDMA_NEW_DRIVE_LISTINGS
	dep_bool $w.config.f 20 29 "    AEC62XX chipset support" CONFIG_BLK_DEV_AEC62XX
	dep_bool $w.config.f 20 30 "      AEC62XX Tuning support" CONFIG_AEC62XX_TUNING
	dep_bool $w.config.f 20 31 "    ALI M15x3 chipset support" CONFIG_BLK_DEV_ALI15X3
	dep_bool $w.config.f 20 32 "      ALI M15x3 WDC support (DANGEROUS)" CONFIG_WDC_ALI15X3
	dep_bool $w.config.f 20 33 "    AMD Viper support" CONFIG_BLK_DEV_AMD74XX
	dep_bool $w.config.f 20 34 "      AMD Viper ATA-66 Override (WIP)" CONFIG_AMD74XX_OVERRIDE
	dep_bool $w.config.f 20 35 "    CMD64X chipset support" CONFIG_BLK_DEV_CMD64X
	dep_bool $w.config.f 20 36 "    CY82C693 chipset support" CONFIG_BLK_DEV_CY82C693
	dep_bool $w.config.f 20 37 "    Cyrix CS5530 MediaGX chipset support" CONFIG_BLK_DEV_CS5530
	dep_bool $w.config.f 20 38 "    HPT34X chipset support" CONFIG_BLK_DEV_HPT34X
	dep_bool $w.config.f 20 39 "      HPT34X AUTODMA support (WIP)" CONFIG_HPT34X_AUTODMA
	dep_bool $w.config.f 20 40 "    HPT366 chipset support" CONFIG_BLK_DEV_HPT366
	dep_bool $w.config.f 20 41 "    NS87415 chipset support (EXPERIMENTAL)" CONFIG_BLK_DEV_NS87415
	dep_bool $w.config.f 20 42 "    OPTi 82C621 chipset enhanced support (EXPERIMENTAL)" CONFIG_BLK_DEV_OPTI621
	dep_bool $w.config.f 20 43 "    PROMISE PDC202{46|62|65|67|68} support" CONFIG_BLK_DEV_PDC202XX
	dep_bool $w.config.f 20 44 "      Special UDMA Feature" CONFIG_PDC202XX_BURST
	dep_bool $w.config.f 20 45 "      Special FastTrak Feature" CONFIG_PDC202XX_FORCE
	dep_bool $w.config.f 20 46 "    ServerWorks OSB4/CSB5 chipsets support" CONFIG_BLK_DEV_SVWKS
	dep_bool $w.config.f 20 47 "    SiS5513 chipset support" CONFIG_BLK_DEV_SIS5513
	dep_bool $w.config.f 20 48 "    SLC90E66 chipset support" CONFIG_BLK_DEV_SLC90E66
	dep_bool $w.config.f 20 49 "    Tekram TRM290 chipset support (EXPERIMENTAL)" CONFIG_BLK_DEV_TRM290
	dep_bool $w.config.f 20 50 "    VIA82CXXX chipset support" CONFIG_BLK_DEV_VIA82CXXX
	global tmpvar_11
	minimenu $w.config.f 20 51 "Type of MPC8xx IDE interface" tmpvar_11 CONFIG_IDE_8xx_PCCARD
	menu $w.config.f.x51.x.menu -tearoffcommand "menutitle \"Type of MPC8xx IDE interface\""
	$w.config.f.x51.x.menu add radiobutton -label "8xx_PCCARD" -variable tmpvar_11 -value "8xx_PCCARD" -command "update_active"
	$w.config.f.x51.x.menu add radiobutton -label "8xx_DIRECT" -variable tmpvar_11 -value "8xx_DIRECT" -command "update_active"
	$w.config.f.x51.x.menu add radiobutton -label "EXT_DIRECT" -variable tmpvar_11 -value "EXT_DIRECT" -command "update_active"
	menusplit $w $w.config.f.x51.x.menu 3
	bool $w.config.f 20 52 "  Other IDE chipset support" CONFIG_IDE_CHIPSETS
	comment $w.config.f 20 53 "Note: most of these also require special kernel boot parameters"
	bool $w.config.f 20 54 "    Generic 4 drives/port support" CONFIG_BLK_DEV_4DRIVES
	bool $w.config.f 20 55 "    ALI M14xx support" CONFIG_BLK_DEV_ALI14XX
	bool $w.config.f 20 56 "    DTC-2278 support" CONFIG_BLK_DEV_DTC2278
	bool $w.config.f 20 57 "    Holtek HT6560B support" CONFIG_BLK_DEV_HT6560B
	bool $w.config.f 20 58 "    PROMISE DC4030 support (EXPERIMENTAL)" CONFIG_BLK_DEV_PDC4030
	bool $w.config.f 20 59 "    QDI QD65xx support" CONFIG_BLK_DEV_QD65XX
	bool $w.config.f 20 60 "    UMC-8672 support" CONFIG_BLK_DEV_UMC8672
	bool $w.config.f 20 61 "Old hard disk (MFM/RLL/IDE) driver" CONFIG_BLK_DEV_HD_ONLY
	bool $w.config.f 20 62 "  IGNORE word93 Validation BITS" CONFIG_IDEDMA_IVB
	dep_tristate $w.config.f 20 63 "Support for IDE Raid controllers" CONFIG_BLK_DEV_ATARAID
	dep_tristate $w.config.f 20 64 "   Support Promise software RAID (Fasttrak(tm))" CONFIG_BLK_DEV_ATARAID_PDC
	dep_tristate $w.config.f 20 65 "   Highpoint 370 software RAID" CONFIG_BLK_DEV_ATARAID_HPT



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu19] == 0} then {menu19 .menu19 "ATA/IDE/MFM/RLL support"}
	set winx [expr [winfo x .menu19]+30]; set winy [expr [winfo y .menu19]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu20 {} {
	global CONFIG_MODULES
	global CONFIG_IDE
	global CONFIG_BLK_DEV_IDE
	if {($CONFIG_IDE != 0) && ($CONFIG_IDE == 1 || $CONFIG_IDE == 2 || $CONFIG_IDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IDE]];set CONFIG_BLK_DEV_IDE [sync_tristate $CONFIG_BLK_DEV_IDE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x0 disabled {y}} else {configure_entry .menu20.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu20.config.f.x0 disabled {m}} else {configure_entry .menu20.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu20.config.f.x0 normal {m}} else {configure_entry .menu20.config.f.x0 disabled {m}}; configure_entry .menu20.config.f.x0 normal {n l}} else {configure_entry .menu20.config.f.x0 disabled {y n m l}}
	if {($CONFIG_IDE != 0)} then {configure_entry .menu20.config.f.x1 normal {m}} else {configure_entry .menu20.config.f.x1 disabled {m}}
	global CONFIG_X86
	global CONFIG_BLK_DEV_HD_IDE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_X86 == 1 || $CONFIG_X86 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_X86]];set CONFIG_BLK_DEV_HD_IDE [sync_bool $CONFIG_BLK_DEV_HD_IDE $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x2 disabled {y};} else {configure_entry .menu20.config.f.x2 normal {y};}; configure_entry .menu20.config.f.x2 normal {n l}} else {configure_entry .menu20.config.f.x2 disabled {y n l}}
	global CONFIG_BLK_DEV_IDEDISK
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDE]];set CONFIG_BLK_DEV_IDEDISK [sync_tristate $CONFIG_BLK_DEV_IDEDISK $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x3 disabled {y}} else {configure_entry .menu20.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu20.config.f.x3 disabled {m}} else {configure_entry .menu20.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu20.config.f.x3 normal {m}} else {configure_entry .menu20.config.f.x3 disabled {m}}; configure_entry .menu20.config.f.x3 normal {n l}} else {configure_entry .menu20.config.f.x3 disabled {y n m l}}
	global CONFIG_IDEDISK_MULTI_MODE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK == 1 || $CONFIG_BLK_DEV_IDEDISK == 2 || $CONFIG_BLK_DEV_IDEDISK == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDISK]];set CONFIG_IDEDISK_MULTI_MODE [sync_bool $CONFIG_IDEDISK_MULTI_MODE $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu20.config.f.x4 disabled {y};} else {configure_entry .menu20.config.f.x4 normal {y};}; configure_entry .menu20.config.f.x4 normal {n l}} else {configure_entry .menu20.config.f.x4 disabled {y n l}}
	global CONFIG_BLK_DEV_IDEDISK_VENDOR
	global CONFIG_BLK_DEV_IDEDISK_FUJITSU
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK_VENDOR == 1 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 2 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDISK_VENDOR]];set CONFIG_BLK_DEV_IDEDISK_FUJITSU [sync_bool $CONFIG_BLK_DEV_IDEDISK_FUJITSU $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu20.config.f.x5 disabled {y};} else {configure_entry .menu20.config.f.x5 normal {y};}; configure_entry .menu20.config.f.x5 normal {n l}} else {configure_entry .menu20.config.f.x5 disabled {y n l}}
	global CONFIG_BLK_DEV_IDEDISK_IBM
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK_VENDOR == 1 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 2 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDISK_VENDOR]];set CONFIG_BLK_DEV_IDEDISK_IBM [sync_bool $CONFIG_BLK_DEV_IDEDISK_IBM $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu20.config.f.x6 disabled {y};} else {configure_entry .menu20.config.f.x6 normal {y};}; configure_entry .menu20.config.f.x6 normal {n l}} else {configure_entry .menu20.config.f.x6 disabled {y n l}}
	global CONFIG_BLK_DEV_IDEDISK_MAXTOR
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK_VENDOR == 1 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 2 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDISK_VENDOR]];set CONFIG_BLK_DEV_IDEDISK_MAXTOR [sync_bool $CONFIG_BLK_DEV_IDEDISK_MAXTOR $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu20.config.f.x7 disabled {y};} else {configure_entry .menu20.config.f.x7 normal {y};}; configure_entry .menu20.config.f.x7 normal {n l}} else {configure_entry .menu20.config.f.x7 disabled {y n l}}
	global CONFIG_BLK_DEV_IDEDISK_QUANTUM
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK_VENDOR == 1 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 2 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDISK_VENDOR]];set CONFIG_BLK_DEV_IDEDISK_QUANTUM [sync_bool $CONFIG_BLK_DEV_IDEDISK_QUANTUM $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu20.config.f.x8 disabled {y};} else {configure_entry .menu20.config.f.x8 normal {y};}; configure_entry .menu20.config.f.x8 normal {n l}} else {configure_entry .menu20.config.f.x8 disabled {y n l}}
	global CONFIG_BLK_DEV_IDEDISK_SEAGATE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK_VENDOR == 1 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 2 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDISK_VENDOR]];set CONFIG_BLK_DEV_IDEDISK_SEAGATE [sync_bool $CONFIG_BLK_DEV_IDEDISK_SEAGATE $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu20.config.f.x9 disabled {y};} else {configure_entry .menu20.config.f.x9 normal {y};}; configure_entry .menu20.config.f.x9 normal {n l}} else {configure_entry .menu20.config.f.x9 disabled {y n l}}
	global CONFIG_BLK_DEV_IDEDISK_WD
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK_VENDOR == 1 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 2 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDISK_VENDOR]];set CONFIG_BLK_DEV_IDEDISK_WD [sync_bool $CONFIG_BLK_DEV_IDEDISK_WD $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu20.config.f.x10 disabled {y};} else {configure_entry .menu20.config.f.x10 normal {y};}; configure_entry .menu20.config.f.x10 normal {n l}} else {configure_entry .menu20.config.f.x10 disabled {y n l}}
	global CONFIG_BLK_DEV_COMMERIAL
	global CONFIG_BLK_DEV_TIVO
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_COMMERIAL == 1 || $CONFIG_BLK_DEV_COMMERIAL == 2 || $CONFIG_BLK_DEV_COMMERIAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_COMMERIAL]];set CONFIG_BLK_DEV_TIVO [sync_bool $CONFIG_BLK_DEV_TIVO $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu20.config.f.x11 disabled {y};} else {configure_entry .menu20.config.f.x11 normal {y};}; configure_entry .menu20.config.f.x11 normal {n l}} else {configure_entry .menu20.config.f.x11 disabled {y n l}}
	global CONFIG_PCMCIA
	global CONFIG_BLK_DEV_IDECS
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDE $CONFIG_PCMCIA]];set CONFIG_BLK_DEV_IDECS [sync_tristate $CONFIG_BLK_DEV_IDECS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x12 disabled {y}} else {configure_entry .menu20.config.f.x12 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu20.config.f.x12 disabled {m}} else {configure_entry .menu20.config.f.x12 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu20.config.f.x12 normal {m}} else {configure_entry .menu20.config.f.x12 disabled {m}}; configure_entry .menu20.config.f.x12 normal {n l}} else {configure_entry .menu20.config.f.x12 disabled {y n m l}}
	global CONFIG_BLK_DEV_IDECD
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDE]];set CONFIG_BLK_DEV_IDECD [sync_tristate $CONFIG_BLK_DEV_IDECD $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x13 disabled {y}} else {configure_entry .menu20.config.f.x13 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu20.config.f.x13 disabled {m}} else {configure_entry .menu20.config.f.x13 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu20.config.f.x13 normal {m}} else {configure_entry .menu20.config.f.x13 disabled {m}}; configure_entry .menu20.config.f.x13 normal {n l}} else {configure_entry .menu20.config.f.x13 disabled {y n m l}}
	global CONFIG_BLK_DEV_IDETAPE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDE]];set CONFIG_BLK_DEV_IDETAPE [sync_tristate $CONFIG_BLK_DEV_IDETAPE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x14 disabled {y}} else {configure_entry .menu20.config.f.x14 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu20.config.f.x14 disabled {m}} else {configure_entry .menu20.config.f.x14 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu20.config.f.x14 normal {m}} else {configure_entry .menu20.config.f.x14 disabled {m}}; configure_entry .menu20.config.f.x14 normal {n l}} else {configure_entry .menu20.config.f.x14 disabled {y n m l}}
	global CONFIG_BLK_DEV_IDEFLOPPY
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDE]];set CONFIG_BLK_DEV_IDEFLOPPY [sync_tristate $CONFIG_BLK_DEV_IDEFLOPPY $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x15 disabled {y}} else {configure_entry .menu20.config.f.x15 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu20.config.f.x15 disabled {m}} else {configure_entry .menu20.config.f.x15 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu20.config.f.x15 normal {m}} else {configure_entry .menu20.config.f.x15 disabled {m}}; configure_entry .menu20.config.f.x15 normal {n l}} else {configure_entry .menu20.config.f.x15 disabled {y n m l}}
	global CONFIG_SCSI
	global CONFIG_BLK_DEV_IDESCSI
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDE $CONFIG_SCSI]];set CONFIG_BLK_DEV_IDESCSI [sync_tristate $CONFIG_BLK_DEV_IDESCSI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x16 disabled {y}} else {configure_entry .menu20.config.f.x16 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu20.config.f.x16 disabled {m}} else {configure_entry .menu20.config.f.x16 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu20.config.f.x16 normal {m}} else {configure_entry .menu20.config.f.x16 disabled {m}}; configure_entry .menu20.config.f.x16 normal {n l}} else {configure_entry .menu20.config.f.x16 disabled {y n m l}}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0)} then {configure_entry .menu20.config.f.x17 normal {m}} else {configure_entry .menu20.config.f.x17 disabled {m}}
	global CONFIG_BLK_DEV_CMD640
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_X86 == 1 || $CONFIG_X86 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_X86]];set CONFIG_BLK_DEV_CMD640 [sync_bool $CONFIG_BLK_DEV_CMD640 $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x18 disabled {y};} else {configure_entry .menu20.config.f.x18 normal {y};}; configure_entry .menu20.config.f.x18 normal {n l}} else {configure_entry .menu20.config.f.x18 disabled {y n l}}
	global CONFIG_BLK_DEV_CMD640_ENHANCED
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_CMD640 == 1 || $CONFIG_BLK_DEV_CMD640 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_CMD640]];set CONFIG_BLK_DEV_CMD640_ENHANCED [sync_bool $CONFIG_BLK_DEV_CMD640_ENHANCED $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x19 disabled {y};} else {configure_entry .menu20.config.f.x19 normal {y};}; configure_entry .menu20.config.f.x19 normal {n l}} else {configure_entry .menu20.config.f.x19 disabled {y n l}}
	global CONFIG_ISAPNP
	global CONFIG_BLK_DEV_ISAPNP
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_ISAPNP == 1 || $CONFIG_ISAPNP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISAPNP]];set CONFIG_BLK_DEV_ISAPNP [sync_bool $CONFIG_BLK_DEV_ISAPNP $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x20 disabled {y};} else {configure_entry .menu20.config.f.x20 normal {y};}; configure_entry .menu20.config.f.x20 normal {n l}} else {configure_entry .menu20.config.f.x20 disabled {y n l}}
	global CONFIG_PCI
	global CONFIG_BLK_DEV_RZ1000
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_X86 == 1 || $CONFIG_X86 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_X86]];set CONFIG_BLK_DEV_RZ1000 [sync_bool $CONFIG_BLK_DEV_RZ1000 $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x21 disabled {y};} else {configure_entry .menu20.config.f.x21 normal {y};}; configure_entry .menu20.config.f.x21 normal {n l}} else {configure_entry .menu20.config.f.x21 disabled {y n l}}
	global CONFIG_BLK_DEV_IDEPCI
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu20.config.f.x22 normal {n l y}} else {configure_entry .menu20.config.f.x22 disabled {y n l}}
	global CONFIG_IDEPCI_SHARE_IRQ
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1)} then {
	configure_entry .menu20.config.f.x23 normal {n l y}} else {configure_entry .menu20.config.f.x23 disabled {y n l}}
	global CONFIG_BLK_DEV_IDEDMA_PCI
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1)} then {
	configure_entry .menu20.config.f.x24 normal {n l y}} else {configure_entry .menu20.config.f.x24 disabled {y n l}}
	global CONFIG_BLK_DEV_OFFBOARD
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1)} then {
	configure_entry .menu20.config.f.x25 normal {n l y}} else {configure_entry .menu20.config.f.x25 disabled {y n l}}
	global CONFIG_IDEDMA_PCI_AUTO
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_IDEDMA_PCI_AUTO [sync_bool $CONFIG_IDEDMA_PCI_AUTO $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x26 disabled {y};} else {configure_entry .menu20.config.f.x26 normal {y};}; configure_entry .menu20.config.f.x26 normal {n l}} else {configure_entry .menu20.config.f.x26 disabled {y n l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_IDEDMA_PCI_WIP
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI $CONFIG_EXPERIMENTAL]];set CONFIG_IDEDMA_PCI_WIP [sync_bool $CONFIG_IDEDMA_PCI_WIP $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x27 disabled {y};} else {configure_entry .menu20.config.f.x27 normal {y};}; configure_entry .menu20.config.f.x27 normal {n l}} else {configure_entry .menu20.config.f.x27 disabled {y n l}}
	global CONFIG_IDEDMA_NEW_DRIVE_LISTINGS
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_IDEDMA_PCI_WIP == 1 || $CONFIG_IDEDMA_PCI_WIP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IDEDMA_PCI_WIP]];set CONFIG_IDEDMA_NEW_DRIVE_LISTINGS [sync_bool $CONFIG_IDEDMA_NEW_DRIVE_LISTINGS $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x28 disabled {y};} else {configure_entry .menu20.config.f.x28 normal {y};}; configure_entry .menu20.config.f.x28 normal {n l}} else {configure_entry .menu20.config.f.x28 disabled {y n l}}
	global CONFIG_BLK_DEV_AEC62XX
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_AEC62XX [sync_bool $CONFIG_BLK_DEV_AEC62XX $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x29 disabled {y};} else {configure_entry .menu20.config.f.x29 normal {y};}; configure_entry .menu20.config.f.x29 normal {n l}} else {configure_entry .menu20.config.f.x29 disabled {y n l}}
	global CONFIG_AEC62XX_TUNING
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_AEC62XX == 1 || $CONFIG_BLK_DEV_AEC62XX == 2 || $CONFIG_BLK_DEV_AEC62XX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_AEC62XX]];set CONFIG_AEC62XX_TUNING [sync_bool $CONFIG_AEC62XX_TUNING $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu20.config.f.x30 disabled {y};} else {configure_entry .menu20.config.f.x30 normal {y};}; configure_entry .menu20.config.f.x30 normal {n l}} else {configure_entry .menu20.config.f.x30 disabled {y n l}}
	global CONFIG_BLK_DEV_ALI15X3
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_ALI15X3 [sync_bool $CONFIG_BLK_DEV_ALI15X3 $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x31 disabled {y};} else {configure_entry .menu20.config.f.x31 normal {y};}; configure_entry .menu20.config.f.x31 normal {n l}} else {configure_entry .menu20.config.f.x31 disabled {y n l}}
	global CONFIG_WDC_ALI15X3
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_ALI15X3 == 1 || $CONFIG_BLK_DEV_ALI15X3 == 2 || $CONFIG_BLK_DEV_ALI15X3 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_ALI15X3]];set CONFIG_WDC_ALI15X3 [sync_bool $CONFIG_WDC_ALI15X3 $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu20.config.f.x32 disabled {y};} else {configure_entry .menu20.config.f.x32 normal {y};}; configure_entry .menu20.config.f.x32 normal {n l}} else {configure_entry .menu20.config.f.x32 disabled {y n l}}
	global CONFIG_BLK_DEV_AMD74XX
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_AMD74XX [sync_bool $CONFIG_BLK_DEV_AMD74XX $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x33 disabled {y};} else {configure_entry .menu20.config.f.x33 normal {y};}; configure_entry .menu20.config.f.x33 normal {n l}} else {configure_entry .menu20.config.f.x33 disabled {y n l}}
	global CONFIG_AMD74XX_OVERRIDE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_AMD74XX == 1 || $CONFIG_BLK_DEV_AMD74XX == 2 || $CONFIG_BLK_DEV_AMD74XX == 4) && ($CONFIG_IDEDMA_PCI_WIP == 1 || $CONFIG_IDEDMA_PCI_WIP == 2 || $CONFIG_IDEDMA_PCI_WIP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_AMD74XX $CONFIG_IDEDMA_PCI_WIP]];set CONFIG_AMD74XX_OVERRIDE [sync_bool $CONFIG_AMD74XX_OVERRIDE $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu20.config.f.x34 disabled {y};} else {configure_entry .menu20.config.f.x34 normal {y};}; configure_entry .menu20.config.f.x34 normal {n l}} else {configure_entry .menu20.config.f.x34 disabled {y n l}}
	global CONFIG_BLK_DEV_CMD64X
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_CMD64X [sync_bool $CONFIG_BLK_DEV_CMD64X $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x35 disabled {y};} else {configure_entry .menu20.config.f.x35 normal {y};}; configure_entry .menu20.config.f.x35 normal {n l}} else {configure_entry .menu20.config.f.x35 disabled {y n l}}
	global CONFIG_BLK_DEV_CY82C693
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_CY82C693 [sync_bool $CONFIG_BLK_DEV_CY82C693 $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x36 disabled {y};} else {configure_entry .menu20.config.f.x36 normal {y};}; configure_entry .menu20.config.f.x36 normal {n l}} else {configure_entry .menu20.config.f.x36 disabled {y n l}}
	global CONFIG_BLK_DEV_CS5530
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_CS5530 [sync_bool $CONFIG_BLK_DEV_CS5530 $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x37 disabled {y};} else {configure_entry .menu20.config.f.x37 normal {y};}; configure_entry .menu20.config.f.x37 normal {n l}} else {configure_entry .menu20.config.f.x37 disabled {y n l}}
	global CONFIG_BLK_DEV_HPT34X
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_HPT34X [sync_bool $CONFIG_BLK_DEV_HPT34X $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x38 disabled {y};} else {configure_entry .menu20.config.f.x38 normal {y};}; configure_entry .menu20.config.f.x38 normal {n l}} else {configure_entry .menu20.config.f.x38 disabled {y n l}}
	global CONFIG_HPT34X_AUTODMA
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_HPT34X == 1 || $CONFIG_BLK_DEV_HPT34X == 2 || $CONFIG_BLK_DEV_HPT34X == 4) && ($CONFIG_IDEDMA_PCI_WIP == 1 || $CONFIG_IDEDMA_PCI_WIP == 2 || $CONFIG_IDEDMA_PCI_WIP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_HPT34X $CONFIG_IDEDMA_PCI_WIP]];set CONFIG_HPT34X_AUTODMA [sync_bool $CONFIG_HPT34X_AUTODMA $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu20.config.f.x39 disabled {y};} else {configure_entry .menu20.config.f.x39 normal {y};}; configure_entry .menu20.config.f.x39 normal {n l}} else {configure_entry .menu20.config.f.x39 disabled {y n l}}
	global CONFIG_BLK_DEV_HPT366
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_HPT366 [sync_bool $CONFIG_BLK_DEV_HPT366 $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x40 disabled {y};} else {configure_entry .menu20.config.f.x40 normal {y};}; configure_entry .menu20.config.f.x40 normal {n l}} else {configure_entry .menu20.config.f.x40 disabled {y n l}}
	global CONFIG_BLK_DEV_NS87415
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_NS87415 [sync_bool $CONFIG_BLK_DEV_NS87415 $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x41 disabled {y};} else {configure_entry .menu20.config.f.x41 normal {y};}; configure_entry .menu20.config.f.x41 normal {n l}} else {configure_entry .menu20.config.f.x41 disabled {y n l}}
	global CONFIG_BLK_DEV_OPTI621
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_BLK_DEV_OPTI621 [sync_bool $CONFIG_BLK_DEV_OPTI621 $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x42 disabled {y};} else {configure_entry .menu20.config.f.x42 normal {y};}; configure_entry .menu20.config.f.x42 normal {n l}} else {configure_entry .menu20.config.f.x42 disabled {y n l}}
	global CONFIG_BLK_DEV_PDC202XX
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_PDC202XX [sync_bool $CONFIG_BLK_DEV_PDC202XX $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x43 disabled {y};} else {configure_entry .menu20.config.f.x43 normal {y};}; configure_entry .menu20.config.f.x43 normal {n l}} else {configure_entry .menu20.config.f.x43 disabled {y n l}}
	global CONFIG_PDC202XX_BURST
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_PDC202XX == 1 || $CONFIG_BLK_DEV_PDC202XX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_PDC202XX]];set CONFIG_PDC202XX_BURST [sync_bool $CONFIG_PDC202XX_BURST $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x44 disabled {y};} else {configure_entry .menu20.config.f.x44 normal {y};}; configure_entry .menu20.config.f.x44 normal {n l}} else {configure_entry .menu20.config.f.x44 disabled {y n l}}
	global CONFIG_PDC202XX_FORCE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_PDC202XX == 1 || $CONFIG_BLK_DEV_PDC202XX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_PDC202XX]];set CONFIG_PDC202XX_FORCE [sync_bool $CONFIG_PDC202XX_FORCE $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x45 disabled {y};} else {configure_entry .menu20.config.f.x45 normal {y};}; configure_entry .menu20.config.f.x45 normal {n l}} else {configure_entry .menu20.config.f.x45 disabled {y n l}}
	global CONFIG_BLK_DEV_SVWKS
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4) && ($CONFIG_X86 == 1 || $CONFIG_X86 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI $CONFIG_X86]];set CONFIG_BLK_DEV_SVWKS [sync_bool $CONFIG_BLK_DEV_SVWKS $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x46 disabled {y};} else {configure_entry .menu20.config.f.x46 normal {y};}; configure_entry .menu20.config.f.x46 normal {n l}} else {configure_entry .menu20.config.f.x46 disabled {y n l}}
	global CONFIG_BLK_DEV_SIS5513
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4) && ($CONFIG_X86 == 1 || $CONFIG_X86 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI $CONFIG_X86]];set CONFIG_BLK_DEV_SIS5513 [sync_bool $CONFIG_BLK_DEV_SIS5513 $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x47 disabled {y};} else {configure_entry .menu20.config.f.x47 normal {y};}; configure_entry .menu20.config.f.x47 normal {n l}} else {configure_entry .menu20.config.f.x47 disabled {y n l}}
	global CONFIG_BLK_DEV_SLC90E66
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4) && ($CONFIG_X86 == 1 || $CONFIG_X86 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI $CONFIG_X86]];set CONFIG_BLK_DEV_SLC90E66 [sync_bool $CONFIG_BLK_DEV_SLC90E66 $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x48 disabled {y};} else {configure_entry .menu20.config.f.x48 normal {y};}; configure_entry .menu20.config.f.x48 normal {n l}} else {configure_entry .menu20.config.f.x48 disabled {y n l}}
	global CONFIG_BLK_DEV_TRM290
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_TRM290 [sync_bool $CONFIG_BLK_DEV_TRM290 $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x49 disabled {y};} else {configure_entry .menu20.config.f.x49 normal {y};}; configure_entry .menu20.config.f.x49 normal {n l}} else {configure_entry .menu20.config.f.x49 disabled {y n l}}
	global CONFIG_BLK_DEV_VIA82CXXX
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_VIA82CXXX [sync_bool $CONFIG_BLK_DEV_VIA82CXXX $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x50 disabled {y};} else {configure_entry .menu20.config.f.x50 normal {y};}; configure_entry .menu20.config.f.x50 normal {n l}} else {configure_entry .menu20.config.f.x50 disabled {y n l}}
	global CONFIG_BLK_DEV_MPC8xx_IDE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_MPC8xx_IDE == 1)} then {configure_entry .menu20.config.f.x51 normal {x l}} else {configure_entry .menu20.config.f.x51 disabled {x l}}
	global CONFIG_IDE_CHIPSETS
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0)} then {
	configure_entry .menu20.config.f.x52 normal {n l y}} else {configure_entry .menu20.config.f.x52 disabled {y n l}}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {configure_entry .menu20.config.f.x53 normal {m}} else {configure_entry .menu20.config.f.x53 disabled {m}}
	global CONFIG_BLK_DEV_4DRIVES
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {
	configure_entry .menu20.config.f.x54 normal {n l y}} else {configure_entry .menu20.config.f.x54 disabled {y n l}}
	global CONFIG_BLK_DEV_ALI14XX
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {
	configure_entry .menu20.config.f.x55 normal {n l y}} else {configure_entry .menu20.config.f.x55 disabled {y n l}}
	global CONFIG_BLK_DEV_DTC2278
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {
	configure_entry .menu20.config.f.x56 normal {n l y}} else {configure_entry .menu20.config.f.x56 disabled {y n l}}
	global CONFIG_BLK_DEV_HT6560B
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {
	configure_entry .menu20.config.f.x57 normal {n l y}} else {configure_entry .menu20.config.f.x57 disabled {y n l}}
	global CONFIG_BLK_DEV_PDC4030
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1) && ($CONFIG_BLK_DEV_IDEDISK == 1 && $CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu20.config.f.x58 normal {n l y}} else {configure_entry .menu20.config.f.x58 disabled {y n l}}
	global CONFIG_BLK_DEV_QD65XX
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {
	configure_entry .menu20.config.f.x59 normal {n l y}} else {configure_entry .menu20.config.f.x59 disabled {y n l}}
	global CONFIG_BLK_DEV_UMC8672
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {
	configure_entry .menu20.config.f.x60 normal {n l y}} else {configure_entry .menu20.config.f.x60 disabled {y n l}}
	global CONFIG_BLK_DEV_HD_ONLY
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 0)} then {
	configure_entry .menu20.config.f.x61 normal {n l y}} else {configure_entry .menu20.config.f.x61 disabled {y n l}}
	global CONFIG_BLK_DEV_IDEDMA_PMAC
	global CONFIG_BLK_DEV_IDEDMA_ICS
	global CONFIG_IDEDMA_IVB
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PMAC == 1 || $CONFIG_BLK_DEV_IDEDMA_ICS == 1)} then {
	configure_entry .menu20.config.f.x62 normal {n l y}} else {configure_entry .menu20.config.f.x62 disabled {y n l}}
	global CONFIG_BLK_DEV_ATARAID
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDE $CONFIG_EXPERIMENTAL]];set CONFIG_BLK_DEV_ATARAID [sync_tristate $CONFIG_BLK_DEV_ATARAID $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x63 disabled {y}} else {configure_entry .menu20.config.f.x63 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu20.config.f.x63 disabled {m}} else {configure_entry .menu20.config.f.x63 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu20.config.f.x63 normal {m}} else {configure_entry .menu20.config.f.x63 disabled {m}}; configure_entry .menu20.config.f.x63 normal {n l}} else {configure_entry .menu20.config.f.x63 disabled {y n m l}}
	global CONFIG_BLK_DEV_ATARAID_PDC
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4) && ($CONFIG_BLK_DEV_ATARAID == 1 || $CONFIG_BLK_DEV_ATARAID == 2 || $CONFIG_BLK_DEV_ATARAID == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDE $CONFIG_EXPERIMENTAL $CONFIG_BLK_DEV_ATARAID]];set CONFIG_BLK_DEV_ATARAID_PDC [sync_tristate $CONFIG_BLK_DEV_ATARAID_PDC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x64 disabled {y}} else {configure_entry .menu20.config.f.x64 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu20.config.f.x64 disabled {m}} else {configure_entry .menu20.config.f.x64 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu20.config.f.x64 normal {m}} else {configure_entry .menu20.config.f.x64 disabled {m}}; configure_entry .menu20.config.f.x64 normal {n l}} else {configure_entry .menu20.config.f.x64 disabled {y n m l}}
	global CONFIG_BLK_DEV_ATARAID_HPT
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4) && ($CONFIG_BLK_DEV_ATARAID == 1 || $CONFIG_BLK_DEV_ATARAID == 2 || $CONFIG_BLK_DEV_ATARAID == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDE $CONFIG_EXPERIMENTAL $CONFIG_BLK_DEV_ATARAID]];set CONFIG_BLK_DEV_ATARAID_HPT [sync_tristate $CONFIG_BLK_DEV_ATARAID_HPT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu20.config.f.x65 disabled {y}} else {configure_entry .menu20.config.f.x65 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu20.config.f.x65 disabled {m}} else {configure_entry .menu20.config.f.x65 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu20.config.f.x65 normal {m}} else {configure_entry .menu20.config.f.x65 disabled {m}}; configure_entry .menu20.config.f.x65 normal {n l}} else {configure_entry .menu20.config.f.x65 disabled {y n m l}}
}


proc update_define_menu20 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_BLK_DEV_HD
	global CONFIG_BLK_DEV_IDEDISK_VENDOR
	global CONFIG_BLK_DEV_COMMERIAL
	global CONFIG_BLK_DEV_ADMA
	global CONFIG_BLK_DEV_IDEDMA
	global CONFIG_IDEDMA_AUTO
	global CONFIG_DMA_NONPCI
	global CONFIG_BLK_DEV_IDE_MODES
	global CONFIG_BLK_DEV_IDEPCI
set CONFIG_BLK_DEV_IDEPCI [expr $CONFIG_BLK_DEV_IDEPCI|16]
	global CONFIG_IDEPCI_SHARE_IRQ
set CONFIG_IDEPCI_SHARE_IRQ [expr $CONFIG_IDEPCI_SHARE_IRQ|16]
	global CONFIG_BLK_DEV_IDEDMA_PCI
set CONFIG_BLK_DEV_IDEDMA_PCI [expr $CONFIG_BLK_DEV_IDEDMA_PCI|16]
	global CONFIG_BLK_DEV_OFFBOARD
set CONFIG_BLK_DEV_OFFBOARD [expr $CONFIG_BLK_DEV_OFFBOARD|16]
	global CONFIG_IDE_CHIPSETS
set CONFIG_IDE_CHIPSETS [expr $CONFIG_IDE_CHIPSETS|16]
	global CONFIG_BLK_DEV_4DRIVES
set CONFIG_BLK_DEV_4DRIVES [expr $CONFIG_BLK_DEV_4DRIVES|16]
	global CONFIG_BLK_DEV_ALI14XX
set CONFIG_BLK_DEV_ALI14XX [expr $CONFIG_BLK_DEV_ALI14XX|16]
	global CONFIG_BLK_DEV_DTC2278
set CONFIG_BLK_DEV_DTC2278 [expr $CONFIG_BLK_DEV_DTC2278|16]
	global CONFIG_BLK_DEV_HT6560B
set CONFIG_BLK_DEV_HT6560B [expr $CONFIG_BLK_DEV_HT6560B|16]
	global CONFIG_BLK_DEV_PDC4030
set CONFIG_BLK_DEV_PDC4030 [expr $CONFIG_BLK_DEV_PDC4030|16]
	global CONFIG_BLK_DEV_QD65XX
set CONFIG_BLK_DEV_QD65XX [expr $CONFIG_BLK_DEV_QD65XX|16]
	global CONFIG_BLK_DEV_UMC8672
set CONFIG_BLK_DEV_UMC8672 [expr $CONFIG_BLK_DEV_UMC8672|16]
	global CONFIG_BLK_DEV_HD_ONLY
set CONFIG_BLK_DEV_HD_ONLY [expr $CONFIG_BLK_DEV_HD_ONLY|16]
	global CONFIG_IDEDMA_IVB
set CONFIG_IDEDMA_IVB [expr $CONFIG_IDEDMA_IVB|16]
	global CONFIG_IDE
	global CONFIG_BLK_DEV_IDE
	if {($CONFIG_IDE != 0) && ($CONFIG_IDE == 1 || $CONFIG_IDE == 2 || $CONFIG_IDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IDE]]; set CONFIG_BLK_DEV_IDE [sync_tristate $CONFIG_BLK_DEV_IDE $tmpvar_dep]; set CONFIG_BLK_DEV_IDE [expr $CONFIG_BLK_DEV_IDE&15]}
	global CONFIG_X86
	global CONFIG_BLK_DEV_HD_IDE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_X86 == 1 || $CONFIG_X86 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_X86]];set CONFIG_BLK_DEV_HD_IDE [sync_bool $CONFIG_BLK_DEV_HD_IDE $tmpvar_dep 0];set CONFIG_BLK_DEV_HD_IDE [expr $CONFIG_BLK_DEV_HD_IDE&15]}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0)} then {set CONFIG_BLK_DEV_HD $CONFIG_BLK_DEV_HD_IDE }
	global CONFIG_BLK_DEV_IDEDISK
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDE]]; set CONFIG_BLK_DEV_IDEDISK [sync_tristate $CONFIG_BLK_DEV_IDEDISK $tmpvar_dep]; set CONFIG_BLK_DEV_IDEDISK [expr $CONFIG_BLK_DEV_IDEDISK&15]}
	global CONFIG_IDEDISK_MULTI_MODE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK == 1 || $CONFIG_BLK_DEV_IDEDISK == 2 || $CONFIG_BLK_DEV_IDEDISK == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDISK]];set CONFIG_IDEDISK_MULTI_MODE [sync_bool $CONFIG_IDEDISK_MULTI_MODE $tmpvar_dep 1];set CONFIG_IDEDISK_MULTI_MODE [expr $CONFIG_IDEDISK_MULTI_MODE&15]}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0)} then {	global CONSTANT_N
set CONFIG_BLK_DEV_IDEDISK_VENDOR $CONSTANT_N }
	global CONFIG_BLK_DEV_IDEDISK_FUJITSU
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK_VENDOR == 1 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 2 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDISK_VENDOR]];set CONFIG_BLK_DEV_IDEDISK_FUJITSU [sync_bool $CONFIG_BLK_DEV_IDEDISK_FUJITSU $tmpvar_dep 1];set CONFIG_BLK_DEV_IDEDISK_FUJITSU [expr $CONFIG_BLK_DEV_IDEDISK_FUJITSU&15]}
	global CONFIG_BLK_DEV_IDEDISK_IBM
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK_VENDOR == 1 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 2 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDISK_VENDOR]];set CONFIG_BLK_DEV_IDEDISK_IBM [sync_bool $CONFIG_BLK_DEV_IDEDISK_IBM $tmpvar_dep 1];set CONFIG_BLK_DEV_IDEDISK_IBM [expr $CONFIG_BLK_DEV_IDEDISK_IBM&15]}
	global CONFIG_BLK_DEV_IDEDISK_MAXTOR
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK_VENDOR == 1 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 2 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDISK_VENDOR]];set CONFIG_BLK_DEV_IDEDISK_MAXTOR [sync_bool $CONFIG_BLK_DEV_IDEDISK_MAXTOR $tmpvar_dep 1];set CONFIG_BLK_DEV_IDEDISK_MAXTOR [expr $CONFIG_BLK_DEV_IDEDISK_MAXTOR&15]}
	global CONFIG_BLK_DEV_IDEDISK_QUANTUM
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK_VENDOR == 1 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 2 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDISK_VENDOR]];set CONFIG_BLK_DEV_IDEDISK_QUANTUM [sync_bool $CONFIG_BLK_DEV_IDEDISK_QUANTUM $tmpvar_dep 1];set CONFIG_BLK_DEV_IDEDISK_QUANTUM [expr $CONFIG_BLK_DEV_IDEDISK_QUANTUM&15]}
	global CONFIG_BLK_DEV_IDEDISK_SEAGATE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK_VENDOR == 1 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 2 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDISK_VENDOR]];set CONFIG_BLK_DEV_IDEDISK_SEAGATE [sync_bool $CONFIG_BLK_DEV_IDEDISK_SEAGATE $tmpvar_dep 1];set CONFIG_BLK_DEV_IDEDISK_SEAGATE [expr $CONFIG_BLK_DEV_IDEDISK_SEAGATE&15]}
	global CONFIG_BLK_DEV_IDEDISK_WD
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK_VENDOR == 1 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 2 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDISK_VENDOR]];set CONFIG_BLK_DEV_IDEDISK_WD [sync_bool $CONFIG_BLK_DEV_IDEDISK_WD $tmpvar_dep 1];set CONFIG_BLK_DEV_IDEDISK_WD [expr $CONFIG_BLK_DEV_IDEDISK_WD&15]}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0)} then {	global CONSTANT_N
set CONFIG_BLK_DEV_COMMERIAL $CONSTANT_N }
	global CONFIG_BLK_DEV_TIVO
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_COMMERIAL == 1 || $CONFIG_BLK_DEV_COMMERIAL == 2 || $CONFIG_BLK_DEV_COMMERIAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_COMMERIAL]];set CONFIG_BLK_DEV_TIVO [sync_bool $CONFIG_BLK_DEV_TIVO $tmpvar_dep 1];set CONFIG_BLK_DEV_TIVO [expr $CONFIG_BLK_DEV_TIVO&15]}
	global CONFIG_PCMCIA
	global CONFIG_BLK_DEV_IDECS
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDE $CONFIG_PCMCIA]]; set CONFIG_BLK_DEV_IDECS [sync_tristate $CONFIG_BLK_DEV_IDECS $tmpvar_dep]; set CONFIG_BLK_DEV_IDECS [expr $CONFIG_BLK_DEV_IDECS&15]}
	global CONFIG_BLK_DEV_IDECD
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDE]]; set CONFIG_BLK_DEV_IDECD [sync_tristate $CONFIG_BLK_DEV_IDECD $tmpvar_dep]; set CONFIG_BLK_DEV_IDECD [expr $CONFIG_BLK_DEV_IDECD&15]}
	global CONFIG_BLK_DEV_IDETAPE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDE]]; set CONFIG_BLK_DEV_IDETAPE [sync_tristate $CONFIG_BLK_DEV_IDETAPE $tmpvar_dep]; set CONFIG_BLK_DEV_IDETAPE [expr $CONFIG_BLK_DEV_IDETAPE&15]}
	global CONFIG_BLK_DEV_IDEFLOPPY
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDE]]; set CONFIG_BLK_DEV_IDEFLOPPY [sync_tristate $CONFIG_BLK_DEV_IDEFLOPPY $tmpvar_dep]; set CONFIG_BLK_DEV_IDEFLOPPY [expr $CONFIG_BLK_DEV_IDEFLOPPY&15]}
	global CONFIG_SCSI
	global CONFIG_BLK_DEV_IDESCSI
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDE $CONFIG_SCSI]]; set CONFIG_BLK_DEV_IDESCSI [sync_tristate $CONFIG_BLK_DEV_IDESCSI $tmpvar_dep]; set CONFIG_BLK_DEV_IDESCSI [expr $CONFIG_BLK_DEV_IDESCSI&15]}
	global CONFIG_BLK_DEV_CMD640
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_X86 == 1 || $CONFIG_X86 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_X86]];set CONFIG_BLK_DEV_CMD640 [sync_bool $CONFIG_BLK_DEV_CMD640 $tmpvar_dep 0];set CONFIG_BLK_DEV_CMD640 [expr $CONFIG_BLK_DEV_CMD640&15]}
	global CONFIG_BLK_DEV_CMD640_ENHANCED
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_CMD640 == 1 || $CONFIG_BLK_DEV_CMD640 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_CMD640]];set CONFIG_BLK_DEV_CMD640_ENHANCED [sync_bool $CONFIG_BLK_DEV_CMD640_ENHANCED $tmpvar_dep 0];set CONFIG_BLK_DEV_CMD640_ENHANCED [expr $CONFIG_BLK_DEV_CMD640_ENHANCED&15]}
	global CONFIG_ISAPNP
	global CONFIG_BLK_DEV_ISAPNP
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_ISAPNP == 1 || $CONFIG_ISAPNP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISAPNP]];set CONFIG_BLK_DEV_ISAPNP [sync_bool $CONFIG_BLK_DEV_ISAPNP $tmpvar_dep 0];set CONFIG_BLK_DEV_ISAPNP [expr $CONFIG_BLK_DEV_ISAPNP&15]}
	global CONFIG_PCI
	global CONFIG_BLK_DEV_RZ1000
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_X86 == 1 || $CONFIG_X86 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_X86]];set CONFIG_BLK_DEV_RZ1000 [sync_bool $CONFIG_BLK_DEV_RZ1000 $tmpvar_dep 0];set CONFIG_BLK_DEV_RZ1000 [expr $CONFIG_BLK_DEV_RZ1000&15]}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1)} then {
	set CONFIG_BLK_DEV_IDEPCI [expr $CONFIG_BLK_DEV_IDEPCI&15]}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1)} then {
	set CONFIG_IDEPCI_SHARE_IRQ [expr $CONFIG_IDEPCI_SHARE_IRQ&15]}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1)} then {
	set CONFIG_BLK_DEV_IDEDMA_PCI [expr $CONFIG_BLK_DEV_IDEDMA_PCI&15]}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1)} then {set CONFIG_BLK_DEV_ADMA $CONFIG_BLK_DEV_IDEDMA_PCI }
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1)} then {
	set CONFIG_BLK_DEV_OFFBOARD [expr $CONFIG_BLK_DEV_OFFBOARD&15]}
	global CONFIG_IDEDMA_PCI_AUTO
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_IDEDMA_PCI_AUTO [sync_bool $CONFIG_IDEDMA_PCI_AUTO $tmpvar_dep 0];set CONFIG_IDEDMA_PCI_AUTO [expr $CONFIG_IDEDMA_PCI_AUTO&15]}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1)} then {set CONFIG_BLK_DEV_IDEDMA $CONFIG_BLK_DEV_IDEDMA_PCI }
	global CONFIG_EXPERIMENTAL
	global CONFIG_IDEDMA_PCI_WIP
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI $CONFIG_EXPERIMENTAL]];set CONFIG_IDEDMA_PCI_WIP [sync_bool $CONFIG_IDEDMA_PCI_WIP $tmpvar_dep 0];set CONFIG_IDEDMA_PCI_WIP [expr $CONFIG_IDEDMA_PCI_WIP&15]}
	global CONFIG_IDEDMA_NEW_DRIVE_LISTINGS
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_IDEDMA_PCI_WIP == 1 || $CONFIG_IDEDMA_PCI_WIP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IDEDMA_PCI_WIP]];set CONFIG_IDEDMA_NEW_DRIVE_LISTINGS [sync_bool $CONFIG_IDEDMA_NEW_DRIVE_LISTINGS $tmpvar_dep 0];set CONFIG_IDEDMA_NEW_DRIVE_LISTINGS [expr $CONFIG_IDEDMA_NEW_DRIVE_LISTINGS&15]}
	global CONFIG_BLK_DEV_AEC62XX
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_AEC62XX [sync_bool $CONFIG_BLK_DEV_AEC62XX $tmpvar_dep 0];set CONFIG_BLK_DEV_AEC62XX [expr $CONFIG_BLK_DEV_AEC62XX&15]}
	global CONFIG_AEC62XX_TUNING
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_AEC62XX == 1 || $CONFIG_BLK_DEV_AEC62XX == 2 || $CONFIG_BLK_DEV_AEC62XX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_AEC62XX]];set CONFIG_AEC62XX_TUNING [sync_bool $CONFIG_AEC62XX_TUNING $tmpvar_dep 1];set CONFIG_AEC62XX_TUNING [expr $CONFIG_AEC62XX_TUNING&15]}
	global CONFIG_BLK_DEV_ALI15X3
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_ALI15X3 [sync_bool $CONFIG_BLK_DEV_ALI15X3 $tmpvar_dep 0];set CONFIG_BLK_DEV_ALI15X3 [expr $CONFIG_BLK_DEV_ALI15X3&15]}
	global CONFIG_WDC_ALI15X3
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_ALI15X3 == 1 || $CONFIG_BLK_DEV_ALI15X3 == 2 || $CONFIG_BLK_DEV_ALI15X3 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_ALI15X3]];set CONFIG_WDC_ALI15X3 [sync_bool $CONFIG_WDC_ALI15X3 $tmpvar_dep 1];set CONFIG_WDC_ALI15X3 [expr $CONFIG_WDC_ALI15X3&15]}
	global CONFIG_BLK_DEV_AMD74XX
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_AMD74XX [sync_bool $CONFIG_BLK_DEV_AMD74XX $tmpvar_dep 0];set CONFIG_BLK_DEV_AMD74XX [expr $CONFIG_BLK_DEV_AMD74XX&15]}
	global CONFIG_AMD74XX_OVERRIDE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_AMD74XX == 1 || $CONFIG_BLK_DEV_AMD74XX == 2 || $CONFIG_BLK_DEV_AMD74XX == 4) && ($CONFIG_IDEDMA_PCI_WIP == 1 || $CONFIG_IDEDMA_PCI_WIP == 2 || $CONFIG_IDEDMA_PCI_WIP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_AMD74XX $CONFIG_IDEDMA_PCI_WIP]];set CONFIG_AMD74XX_OVERRIDE [sync_bool $CONFIG_AMD74XX_OVERRIDE $tmpvar_dep 1];set CONFIG_AMD74XX_OVERRIDE [expr $CONFIG_AMD74XX_OVERRIDE&15]}
	global CONFIG_BLK_DEV_CMD64X
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_CMD64X [sync_bool $CONFIG_BLK_DEV_CMD64X $tmpvar_dep 0];set CONFIG_BLK_DEV_CMD64X [expr $CONFIG_BLK_DEV_CMD64X&15]}
	global CONFIG_BLK_DEV_CY82C693
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_CY82C693 [sync_bool $CONFIG_BLK_DEV_CY82C693 $tmpvar_dep 0];set CONFIG_BLK_DEV_CY82C693 [expr $CONFIG_BLK_DEV_CY82C693&15]}
	global CONFIG_BLK_DEV_CS5530
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_CS5530 [sync_bool $CONFIG_BLK_DEV_CS5530 $tmpvar_dep 0];set CONFIG_BLK_DEV_CS5530 [expr $CONFIG_BLK_DEV_CS5530&15]}
	global CONFIG_BLK_DEV_HPT34X
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_HPT34X [sync_bool $CONFIG_BLK_DEV_HPT34X $tmpvar_dep 0];set CONFIG_BLK_DEV_HPT34X [expr $CONFIG_BLK_DEV_HPT34X&15]}
	global CONFIG_HPT34X_AUTODMA
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_HPT34X == 1 || $CONFIG_BLK_DEV_HPT34X == 2 || $CONFIG_BLK_DEV_HPT34X == 4) && ($CONFIG_IDEDMA_PCI_WIP == 1 || $CONFIG_IDEDMA_PCI_WIP == 2 || $CONFIG_IDEDMA_PCI_WIP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_HPT34X $CONFIG_IDEDMA_PCI_WIP]];set CONFIG_HPT34X_AUTODMA [sync_bool $CONFIG_HPT34X_AUTODMA $tmpvar_dep 1];set CONFIG_HPT34X_AUTODMA [expr $CONFIG_HPT34X_AUTODMA&15]}
	global CONFIG_BLK_DEV_HPT366
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_HPT366 [sync_bool $CONFIG_BLK_DEV_HPT366 $tmpvar_dep 0];set CONFIG_BLK_DEV_HPT366 [expr $CONFIG_BLK_DEV_HPT366&15]}
	global CONFIG_BLK_DEV_NS87415
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_NS87415 [sync_bool $CONFIG_BLK_DEV_NS87415 $tmpvar_dep 0];set CONFIG_BLK_DEV_NS87415 [expr $CONFIG_BLK_DEV_NS87415&15]}
	global CONFIG_BLK_DEV_OPTI621
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_BLK_DEV_OPTI621 [sync_bool $CONFIG_BLK_DEV_OPTI621 $tmpvar_dep 0];set CONFIG_BLK_DEV_OPTI621 [expr $CONFIG_BLK_DEV_OPTI621&15]}
	global CONFIG_BLK_DEV_PDC202XX
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_PDC202XX [sync_bool $CONFIG_BLK_DEV_PDC202XX $tmpvar_dep 0];set CONFIG_BLK_DEV_PDC202XX [expr $CONFIG_BLK_DEV_PDC202XX&15]}
	global CONFIG_PDC202XX_BURST
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_PDC202XX == 1 || $CONFIG_BLK_DEV_PDC202XX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_PDC202XX]];set CONFIG_PDC202XX_BURST [sync_bool $CONFIG_PDC202XX_BURST $tmpvar_dep 0];set CONFIG_PDC202XX_BURST [expr $CONFIG_PDC202XX_BURST&15]}
	global CONFIG_PDC202XX_FORCE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_PDC202XX == 1 || $CONFIG_BLK_DEV_PDC202XX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_PDC202XX]];set CONFIG_PDC202XX_FORCE [sync_bool $CONFIG_PDC202XX_FORCE $tmpvar_dep 0];set CONFIG_PDC202XX_FORCE [expr $CONFIG_PDC202XX_FORCE&15]}
	global CONFIG_BLK_DEV_SVWKS
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4) && ($CONFIG_X86 == 1 || $CONFIG_X86 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI $CONFIG_X86]];set CONFIG_BLK_DEV_SVWKS [sync_bool $CONFIG_BLK_DEV_SVWKS $tmpvar_dep 0];set CONFIG_BLK_DEV_SVWKS [expr $CONFIG_BLK_DEV_SVWKS&15]}
	global CONFIG_BLK_DEV_SIS5513
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4) && ($CONFIG_X86 == 1 || $CONFIG_X86 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI $CONFIG_X86]];set CONFIG_BLK_DEV_SIS5513 [sync_bool $CONFIG_BLK_DEV_SIS5513 $tmpvar_dep 0];set CONFIG_BLK_DEV_SIS5513 [expr $CONFIG_BLK_DEV_SIS5513&15]}
	global CONFIG_BLK_DEV_SLC90E66
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4) && ($CONFIG_X86 == 1 || $CONFIG_X86 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI $CONFIG_X86]];set CONFIG_BLK_DEV_SLC90E66 [sync_bool $CONFIG_BLK_DEV_SLC90E66 $tmpvar_dep 0];set CONFIG_BLK_DEV_SLC90E66 [expr $CONFIG_BLK_DEV_SLC90E66&15]}
	global CONFIG_BLK_DEV_TRM290
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_TRM290 [sync_bool $CONFIG_BLK_DEV_TRM290 $tmpvar_dep 0];set CONFIG_BLK_DEV_TRM290 [expr $CONFIG_BLK_DEV_TRM290&15]}
	global CONFIG_BLK_DEV_VIA82CXXX
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDEDMA_PCI]];set CONFIG_BLK_DEV_VIA82CXXX [sync_bool $CONFIG_BLK_DEV_VIA82CXXX $tmpvar_dep 0];set CONFIG_BLK_DEV_VIA82CXXX [expr $CONFIG_BLK_DEV_VIA82CXXX&15]}
	global tmpvar_11
	global CONFIG_IDE_8xx_PCCARD
	if {$tmpvar_11 == "8xx_PCCARD"} then {set CONFIG_IDE_8xx_PCCARD 1} else {set CONFIG_IDE_8xx_PCCARD 0}
	global CONFIG_IDE_8xx_DIRECT
	if {$tmpvar_11 == "8xx_DIRECT"} then {set CONFIG_IDE_8xx_DIRECT 1} else {set CONFIG_IDE_8xx_DIRECT 0}
	global CONFIG_IDE_EXT_DIRECT
	if {$tmpvar_11 == "EXT_DIRECT"} then {set CONFIG_IDE_EXT_DIRECT 1} else {set CONFIG_IDE_EXT_DIRECT 0}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0)} then {
	set CONFIG_IDE_CHIPSETS [expr $CONFIG_IDE_CHIPSETS&15]}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {
	set CONFIG_BLK_DEV_4DRIVES [expr $CONFIG_BLK_DEV_4DRIVES&15]}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {
	set CONFIG_BLK_DEV_ALI14XX [expr $CONFIG_BLK_DEV_ALI14XX&15]}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {
	set CONFIG_BLK_DEV_DTC2278 [expr $CONFIG_BLK_DEV_DTC2278&15]}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {
	set CONFIG_BLK_DEV_HT6560B [expr $CONFIG_BLK_DEV_HT6560B&15]}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1) && ($CONFIG_BLK_DEV_IDEDISK == 1 && $CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_BLK_DEV_PDC4030 [expr $CONFIG_BLK_DEV_PDC4030&15]}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {
	set CONFIG_BLK_DEV_QD65XX [expr $CONFIG_BLK_DEV_QD65XX&15]}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {
	set CONFIG_BLK_DEV_UMC8672 [expr $CONFIG_BLK_DEV_UMC8672&15]}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 0)} then {
	set CONFIG_BLK_DEV_HD_ONLY [expr $CONFIG_BLK_DEV_HD_ONLY&15]}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 0)} then {set CONFIG_BLK_DEV_HD $CONFIG_BLK_DEV_HD_ONLY }
	global CONFIG_BLK_DEV_IDEDMA_PMAC_AUTO
	global CONFIG_IDEDMA_ICS_AUTO
	if {($CONFIG_IDE != 0) && ($CONFIG_IDEDMA_PCI_AUTO == 1 || $CONFIG_BLK_DEV_IDEDMA_PMAC_AUTO == 1 || $CONFIG_IDEDMA_ICS_AUTO == 1)} then {	global CONSTANT_Y
set CONFIG_IDEDMA_AUTO $CONSTANT_Y }
	if {($CONFIG_IDE != 0) && ($CONFIG_IDEDMA_PCI_AUTO != 1 && $CONFIG_BLK_DEV_IDEDMA_PMAC_AUTO != 1 && $CONFIG_IDEDMA_ICS_AUTO != 1)} then {	global CONSTANT_N
set CONFIG_IDEDMA_AUTO $CONSTANT_N }
	global CONFIG_BLK_DEV_IDEDMA_PMAC
	global CONFIG_BLK_DEV_IDEDMA_ICS
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PMAC == 1 || $CONFIG_BLK_DEV_IDEDMA_ICS == 1)} then {
	set CONFIG_IDEDMA_IVB [expr $CONFIG_IDEDMA_IVB&15]}
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_TIVO == 1)} then {	global CONSTANT_Y
set CONFIG_DMA_NONPCI $CONSTANT_Y }
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_TIVO != 1)} then {	global CONSTANT_N
set CONFIG_DMA_NONPCI $CONSTANT_N }
	global CONFIG_BLK_DEV_IDE_PMAC
	global CONFIG_BLK_DEV_PIIX
	global CONFIG_BLK_DEV_IT8172
	global CONFIG_BLK_DEV_SL82C105
	global CONFIG_BLK_DEV_MPC8xx_IDE
	if {($CONFIG_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1 || $CONFIG_BLK_DEV_AEC62XX == 1 || $CONFIG_BLK_DEV_ALI15X3 == 1 || $CONFIG_BLK_DEV_AMD74XX == 1 || $CONFIG_BLK_DEV_CMD640 == 1 || $CONFIG_BLK_DEV_CMD64X == 1 || $CONFIG_BLK_DEV_CS5530 == 1 || $CONFIG_BLK_DEV_CY82C693 == 1 || $CONFIG_BLK_DEV_HPT34X == 1 || $CONFIG_BLK_DEV_HPT366 == 1 || $CONFIG_BLK_DEV_IDE_PMAC == 1 || $CONFIG_BLK_DEV_OPTI621 == 1 || $CONFIG_BLK_DEV_SVWKS == 1 || $CONFIG_BLK_DEV_PDC202XX == 1 || $CONFIG_BLK_DEV_PIIX == 1 || $CONFIG_BLK_DEV_IT8172 == 1 || $CONFIG_BLK_DEV_SIS5513 == 1 || $CONFIG_BLK_DEV_SLC90E66 == 1 || $CONFIG_BLK_DEV_SL82C105 == 1 || $CONFIG_BLK_DEV_VIA82CXXX == 1 || $CONFIG_BLK_DEV_MPC8xx_IDE == 1)} then {	global CONSTANT_Y
set CONFIG_BLK_DEV_IDE_MODES $CONSTANT_Y }
	if {($CONFIG_IDE != 0) && ($CONFIG_IDE_CHIPSETS != 1 && $CONFIG_BLK_DEV_AEC62XX != 1 && $CONFIG_BLK_DEV_ALI15X3 != 1 && $CONFIG_BLK_DEV_AMD74XX != 1 && $CONFIG_BLK_DEV_CMD640 != 1 && $CONFIG_BLK_DEV_CMD64X != 1 && $CONFIG_BLK_DEV_CS5530 != 1 && $CONFIG_BLK_DEV_CY82C693 != 1 && $CONFIG_BLK_DEV_HPT34X != 1 && $CONFIG_BLK_DEV_HPT366 != 1 && $CONFIG_BLK_DEV_IDE_PMAC != 1 && $CONFIG_BLK_DEV_OPTI621 != 1 && $CONFIG_BLK_DEV_SVWKS != 1 && $CONFIG_BLK_DEV_PDC202XX != 1 && $CONFIG_BLK_DEV_PIIX != 1 && $CONFIG_BLK_DEV_IT8172 != 1 && $CONFIG_BLK_DEV_SIS5513 != 1 && $CONFIG_BLK_DEV_SLC90E66 != 1 && $CONFIG_BLK_DEV_SL82C105 != 1 && $CONFIG_BLK_DEV_VIA82CXXX != 1 && $CONFIG_BLK_DEV_MPC8xx_IDE != 1)} then {	global CONSTANT_N
set CONFIG_BLK_DEV_IDE_MODES $CONSTANT_N }
	global CONFIG_BLK_DEV_ATARAID
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDE $CONFIG_EXPERIMENTAL]]; set CONFIG_BLK_DEV_ATARAID [sync_tristate $CONFIG_BLK_DEV_ATARAID $tmpvar_dep]; set CONFIG_BLK_DEV_ATARAID [expr $CONFIG_BLK_DEV_ATARAID&15]}
	global CONFIG_BLK_DEV_ATARAID_PDC
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4) && ($CONFIG_BLK_DEV_ATARAID == 1 || $CONFIG_BLK_DEV_ATARAID == 2 || $CONFIG_BLK_DEV_ATARAID == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDE $CONFIG_EXPERIMENTAL $CONFIG_BLK_DEV_ATARAID]]; set CONFIG_BLK_DEV_ATARAID_PDC [sync_tristate $CONFIG_BLK_DEV_ATARAID_PDC $tmpvar_dep]; set CONFIG_BLK_DEV_ATARAID_PDC [expr $CONFIG_BLK_DEV_ATARAID_PDC&15]}
	global CONFIG_BLK_DEV_ATARAID_HPT
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4) && ($CONFIG_BLK_DEV_ATARAID == 1 || $CONFIG_BLK_DEV_ATARAID == 2 || $CONFIG_BLK_DEV_ATARAID == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BLK_DEV_IDE $CONFIG_EXPERIMENTAL $CONFIG_BLK_DEV_ATARAID]]; set CONFIG_BLK_DEV_ATARAID_HPT [sync_tristate $CONFIG_BLK_DEV_ATARAID_HPT $tmpvar_dep]; set CONFIG_BLK_DEV_ATARAID_HPT [expr $CONFIG_BLK_DEV_ATARAID_HPT&15]}
}


menu_option menu21 21 "SCSI support"
proc menu21 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 21}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 21]]
	message $w.m -width 400 -aspect 300 -text \
		"SCSI support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "SCSI support" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 21; break"
	set nextscript "catch {focus $oldFocus}; menu22 .menu22 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 21"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 21; menu20 .menu20 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 21; menu20 .menu20 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 21 0 "SCSI support" CONFIG_SCSI
	comment $w.config.f 21 1 "SCSI support type (disk, tape, CD-ROM)"
	dep_tristate $w.config.f 21 2 "  SCSI disk support" CONFIG_BLK_DEV_SD
	int $w.config.f 21 3 "Maximum number of SCSI disks that can be loaded as modules" CONFIG_SD_EXTRA_DEVS
	dep_tristate $w.config.f 21 4 "  SCSI tape support" CONFIG_CHR_DEV_ST
	dep_tristate $w.config.f 21 5 "  SCSI OnStream SC-x0 tape support" CONFIG_CHR_DEV_OSST
	dep_tristate $w.config.f 21 6 "  SCSI CD-ROM support" CONFIG_BLK_DEV_SR
	bool $w.config.f 21 7 "    Enable vendor-specific extensions (for SCSI CDROM)" CONFIG_BLK_DEV_SR_VENDOR
	int $w.config.f 21 8 "Maximum number of CDROM devices that can be loaded as modules" CONFIG_SR_EXTRA_DEVS
	dep_tristate $w.config.f 21 9 "  SCSI generic support" CONFIG_CHR_DEV_SG
	comment $w.config.f 21 10 "Some SCSI devices (e.g. CD jukebox) support multiple LUNs"
	bool $w.config.f 21 11 "  Enable extra checks in new queueing code" CONFIG_SCSI_DEBUG_QUEUES
	bool $w.config.f 21 12 "  Probe all LUNs on each SCSI device" CONFIG_SCSI_MULTI_LUN
	bool $w.config.f 21 13 "  Verbose SCSI error reporting (kernel size +=12K)" CONFIG_SCSI_CONSTANTS
	bool $w.config.f 21 14 "  SCSI logging facility" CONFIG_SCSI_LOGGING
	submenu $w.config.f 21 15 "SCSI low-level drivers" 22
	submenu $w.config.f 21 16 "PCMCIA SCSI adapter support" 23



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu21 {} {
	global CONFIG_SCSI
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu21.config.f.x0 normal {m}} else {configure_entry .menu21.config.f.x0 disabled {m}}
	if {($CONFIG_SCSI != 0)} then {configure_entry .menu21.config.f.x1 normal {m}} else {configure_entry .menu21.config.f.x1 disabled {m}}
	global CONFIG_BLK_DEV_SD
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_BLK_DEV_SD [sync_tristate $CONFIG_BLK_DEV_SD $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu21.config.f.x2 disabled {y}} else {configure_entry .menu21.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu21.config.f.x2 disabled {m}} else {configure_entry .menu21.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu21.config.f.x2 normal {m}} else {configure_entry .menu21.config.f.x2 disabled {m}}; configure_entry .menu21.config.f.x2 normal {n l}} else {configure_entry .menu21.config.f.x2 disabled {y n m l}}
	global CONFIG_SD_EXTRA_DEVS
	if {($CONFIG_SCSI != 0) && ($CONFIG_BLK_DEV_SD != 0)} then {.menu21.config.f.x3.x configure -state normal -foreground [ cget .ref -foreground ]; .menu21.config.f.x3.l configure -state normal; } else {.menu21.config.f.x3.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu21.config.f.x3.l configure -state disabled}
	global CONFIG_CHR_DEV_ST
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_CHR_DEV_ST [sync_tristate $CONFIG_CHR_DEV_ST $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu21.config.f.x4 disabled {y}} else {configure_entry .menu21.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu21.config.f.x4 disabled {m}} else {configure_entry .menu21.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu21.config.f.x4 normal {m}} else {configure_entry .menu21.config.f.x4 disabled {m}}; configure_entry .menu21.config.f.x4 normal {n l}} else {configure_entry .menu21.config.f.x4 disabled {y n m l}}
	global CONFIG_CHR_DEV_OSST
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_CHR_DEV_OSST [sync_tristate $CONFIG_CHR_DEV_OSST $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu21.config.f.x5 disabled {y}} else {configure_entry .menu21.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu21.config.f.x5 disabled {m}} else {configure_entry .menu21.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu21.config.f.x5 normal {m}} else {configure_entry .menu21.config.f.x5 disabled {m}}; configure_entry .menu21.config.f.x5 normal {n l}} else {configure_entry .menu21.config.f.x5 disabled {y n m l}}
	global CONFIG_BLK_DEV_SR
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_BLK_DEV_SR [sync_tristate $CONFIG_BLK_DEV_SR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu21.config.f.x6 disabled {y}} else {configure_entry .menu21.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu21.config.f.x6 disabled {m}} else {configure_entry .menu21.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu21.config.f.x6 normal {m}} else {configure_entry .menu21.config.f.x6 disabled {m}}; configure_entry .menu21.config.f.x6 normal {n l}} else {configure_entry .menu21.config.f.x6 disabled {y n m l}}
	global CONFIG_BLK_DEV_SR_VENDOR
	if {($CONFIG_SCSI != 0) && ($CONFIG_BLK_DEV_SR != 0)} then {
	configure_entry .menu21.config.f.x7 normal {n l y}} else {configure_entry .menu21.config.f.x7 disabled {y n l}}
	global CONFIG_SR_EXTRA_DEVS
	if {($CONFIG_SCSI != 0) && ($CONFIG_BLK_DEV_SR != 0)} then {.menu21.config.f.x8.x configure -state normal -foreground [ cget .ref -foreground ]; .menu21.config.f.x8.l configure -state normal; } else {.menu21.config.f.x8.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu21.config.f.x8.l configure -state disabled}
	global CONFIG_CHR_DEV_SG
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_CHR_DEV_SG [sync_tristate $CONFIG_CHR_DEV_SG $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu21.config.f.x9 disabled {y}} else {configure_entry .menu21.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu21.config.f.x9 disabled {m}} else {configure_entry .menu21.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu21.config.f.x9 normal {m}} else {configure_entry .menu21.config.f.x9 disabled {m}}; configure_entry .menu21.config.f.x9 normal {n l}} else {configure_entry .menu21.config.f.x9 disabled {y n m l}}
	if {($CONFIG_SCSI != 0)} then {configure_entry .menu21.config.f.x10 normal {m}} else {configure_entry .menu21.config.f.x10 disabled {m}}
	global CONFIG_SCSI_DEBUG_QUEUES
	if {($CONFIG_SCSI != 0)} then {
	configure_entry .menu21.config.f.x11 normal {n l y}} else {configure_entry .menu21.config.f.x11 disabled {y n l}}
	global CONFIG_SCSI_MULTI_LUN
	if {($CONFIG_SCSI != 0)} then {
	configure_entry .menu21.config.f.x12 normal {n l y}} else {configure_entry .menu21.config.f.x12 disabled {y n l}}
	global CONFIG_SCSI_CONSTANTS
	if {($CONFIG_SCSI != 0)} then {
	configure_entry .menu21.config.f.x13 normal {n l y}} else {configure_entry .menu21.config.f.x13 disabled {y n l}}
	global CONFIG_SCSI_LOGGING
	if {($CONFIG_SCSI != 0)} then {
	configure_entry .menu21.config.f.x14 normal {n l y}} else {configure_entry .menu21.config.f.x14 disabled {y n l}}
	if {($CONFIG_SCSI != 0)} then {configure_entry .menu21.config.f.x15 normal {m}} else {configure_entry .menu21.config.f.x15 disabled {m}}
	global CONFIG_HOTPLUG
	global CONFIG_PCMCIA
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0)} then {configure_entry .menu21.config.f.x16 normal {m}} else {configure_entry .menu21.config.f.x16 disabled {m}}
}


proc update_define_menu21 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_SCSI
	global CONFIG_BLK_DEV_SR_VENDOR
set CONFIG_BLK_DEV_SR_VENDOR [expr $CONFIG_BLK_DEV_SR_VENDOR|16]
	global CONFIG_SCSI_DEBUG_QUEUES
set CONFIG_SCSI_DEBUG_QUEUES [expr $CONFIG_SCSI_DEBUG_QUEUES|16]
	global CONFIG_SCSI_MULTI_LUN
set CONFIG_SCSI_MULTI_LUN [expr $CONFIG_SCSI_MULTI_LUN|16]
	global CONFIG_SCSI_CONSTANTS
set CONFIG_SCSI_CONSTANTS [expr $CONFIG_SCSI_CONSTANTS|16]
	global CONFIG_SCSI_LOGGING
set CONFIG_SCSI_LOGGING [expr $CONFIG_SCSI_LOGGING|16]

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_SCSI == 2)} then {set CONFIG_SCSI 1}}
	global CONFIG_BLK_DEV_SD
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_BLK_DEV_SD [sync_tristate $CONFIG_BLK_DEV_SD $tmpvar_dep]; set CONFIG_BLK_DEV_SD [expr $CONFIG_BLK_DEV_SD&15]}
	global CONFIG_SD_EXTRA_DEVS
	if {($CONFIG_SCSI != 0) && ($CONFIG_BLK_DEV_SD != 0)} then {validate_int CONFIG_SD_EXTRA_DEVS "$CONFIG_SD_EXTRA_DEVS" 40}
	global CONFIG_CHR_DEV_ST
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_CHR_DEV_ST [sync_tristate $CONFIG_CHR_DEV_ST $tmpvar_dep]; set CONFIG_CHR_DEV_ST [expr $CONFIG_CHR_DEV_ST&15]}
	global CONFIG_CHR_DEV_OSST
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_CHR_DEV_OSST [sync_tristate $CONFIG_CHR_DEV_OSST $tmpvar_dep]; set CONFIG_CHR_DEV_OSST [expr $CONFIG_CHR_DEV_OSST&15]}
	global CONFIG_BLK_DEV_SR
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_BLK_DEV_SR [sync_tristate $CONFIG_BLK_DEV_SR $tmpvar_dep]; set CONFIG_BLK_DEV_SR [expr $CONFIG_BLK_DEV_SR&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_BLK_DEV_SR != 0)} then {
	set CONFIG_BLK_DEV_SR_VENDOR [expr $CONFIG_BLK_DEV_SR_VENDOR&15]}
	global CONFIG_SR_EXTRA_DEVS
	if {($CONFIG_SCSI != 0) && ($CONFIG_BLK_DEV_SR != 0)} then {validate_int CONFIG_SR_EXTRA_DEVS "$CONFIG_SR_EXTRA_DEVS" 2}
	global CONFIG_CHR_DEV_SG
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_CHR_DEV_SG [sync_tristate $CONFIG_CHR_DEV_SG $tmpvar_dep]; set CONFIG_CHR_DEV_SG [expr $CONFIG_CHR_DEV_SG&15]}
	if {($CONFIG_SCSI != 0)} then {
	set CONFIG_SCSI_DEBUG_QUEUES [expr $CONFIG_SCSI_DEBUG_QUEUES&15]}
	if {($CONFIG_SCSI != 0)} then {
	set CONFIG_SCSI_MULTI_LUN [expr $CONFIG_SCSI_MULTI_LUN&15]}
	if {($CONFIG_SCSI != 0)} then {
	set CONFIG_SCSI_CONSTANTS [expr $CONFIG_SCSI_CONSTANTS&15]}
	if {($CONFIG_SCSI != 0)} then {
	set CONFIG_SCSI_LOGGING [expr $CONFIG_SCSI_LOGGING&15]}
}


proc menu22 {w title} {
	set oldFocus [focus]
	catch {focus .menu21}
	catch {destroy $w; unregister_active 22}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 22]]
	message $w.m -width 400 -aspect 300 -text \
		"SCSI low-level drivers"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "SCSI low-level drivers" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 22; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 22; menu23 .menu23 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 22"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 22; menu21 .menu21 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 22; menu21 .menu21 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 22 0 "3ware Hardware ATA-RAID support" CONFIG_BLK_DEV_3W_XXXX_RAID
	dep_tristate $w.config.f 22 1 "7000FASST SCSI support" CONFIG_SCSI_7000FASST
	dep_tristate $w.config.f 22 2 "ACARD SCSI support" CONFIG_SCSI_ACARD
	dep_tristate $w.config.f 22 3 "Adaptec AHA152X/2825 support" CONFIG_SCSI_AHA152X
	dep_tristate $w.config.f 22 4 "Adaptec AHA1542 support" CONFIG_SCSI_AHA1542
	dep_tristate $w.config.f 22 5 "Adaptec AHA1740 support" CONFIG_SCSI_AHA1740
	dep_tristate $w.config.f 22 6 "Adaptec AACRAID support (EXPERIMENTAL)" CONFIG_SCSI_AACRAID
	dep_tristate $w.config.f 22 7 "Adaptec AIC7xxx support" CONFIG_SCSI_AIC7XXX
	int $w.config.f 22 8 "  Maximum number of TCQ commands per device" CONFIG_AIC7XXX_CMDS_PER_DEVICE
	int $w.config.f 22 9 "  Initial bus reset delay in milli-seconds" CONFIG_AIC7XXX_RESET_DELAY_MS
	bool $w.config.f 22 10 "  Build Adapter Firmware with Kernel Build" CONFIG_AIC7XXX_BUILD_FIRMWARE
	dep_tristate $w.config.f 22 11 "Old Adaptec AIC7xxx support" CONFIG_SCSI_AIC7XXX_OLD
	bool $w.config.f 22 12 "  Enable Tagged Command Queueing (TCQ) by default" CONFIG_AIC7XXX_OLD_TCQ_ON_BY_DEFAULT
	int $w.config.f 22 13 "  Maximum number of TCQ commands per device" CONFIG_AIC7XXX_OLD_CMDS_PER_DEVICE
	bool $w.config.f 22 14 "  Collect statistics to report in /proc" CONFIG_AIC7XXX_OLD_PROC_STATS
	dep_tristate $w.config.f 22 15 "Adaptec I2O RAID support " CONFIG_SCSI_DPT_I2O
	dep_tristate $w.config.f 22 16 "AdvanSys SCSI support" CONFIG_SCSI_ADVANSYS
	dep_tristate $w.config.f 22 17 "Always IN2000 SCSI support" CONFIG_SCSI_IN2000
	dep_tristate $w.config.f 22 18 "AM53/79C974 PCI SCSI support" CONFIG_SCSI_AM53C974
	dep_tristate $w.config.f 22 19 "AMI MegaRAID support" CONFIG_SCSI_MEGARAID
	dep_tristate $w.config.f 22 20 "BusLogic SCSI support" CONFIG_SCSI_BUSLOGIC
	bool $w.config.f 22 21 "  Omit FlashPoint support" CONFIG_SCSI_OMIT_FLASHPOINT
	dep_tristate $w.config.f 22 22 "Compaq Fibre Channel 64-bit/66Mhz HBA support" CONFIG_SCSI_CPQFCTS
	dep_tristate $w.config.f 22 23 "DMX3191D SCSI support" CONFIG_SCSI_DMX3191D
	dep_tristate $w.config.f 22 24 "DTC3180/3280 SCSI support" CONFIG_SCSI_DTC3280
	dep_tristate $w.config.f 22 25 "EATA ISA/EISA/PCI (DPT and generic EATA/DMA-compliant boards) support" CONFIG_SCSI_EATA
	bool $w.config.f 22 26 "  enable tagged command queueing" CONFIG_SCSI_EATA_TAGGED_QUEUE
	bool $w.config.f 22 27 "  enable elevator sorting" CONFIG_SCSI_EATA_LINKED_COMMANDS
	int $w.config.f 22 28 "  maximum number of queued commands" CONFIG_SCSI_EATA_MAX_TAGS
	dep_tristate $w.config.f 22 29 "EATA-DMA \[Obsolete\] (DPT, NEC, AT&T, SNI, AST, Olivetti, Alphatronix) support" CONFIG_SCSI_EATA_DMA
	dep_tristate $w.config.f 22 30 "EATA-PIO (old DPT PM2001, PM2012A) support" CONFIG_SCSI_EATA_PIO
	dep_tristate $w.config.f 22 31 "Future Domain 16xx SCSI/AHA-2920A support" CONFIG_SCSI_FUTURE_DOMAIN
	dep_tristate $w.config.f 22 32 "Future Domain MCS-600/700 SCSI support" CONFIG_SCSI_FD_MCS
	dep_tristate $w.config.f 22 33 "Intel/ICP (former GDT SCSI Disk Array) RAID Controller support" CONFIG_SCSI_GDTH
	dep_tristate $w.config.f 22 34 "Generic NCR5380/53c400 SCSI support" CONFIG_SCSI_GENERIC_NCR5380
	bool $w.config.f 22 35 "  Enable NCR53c400 extensions" CONFIG_SCSI_GENERIC_NCR53C400
	global tmpvar_12
	minimenu $w.config.f 22 36 "NCR5380/53c400 mapping method (use Port for T130B)" tmpvar_12 CONFIG_SCSI_G_NCR5380_PORT
	menu $w.config.f.x36.x.menu -tearoffcommand "menutitle \"NCR5380/53c400 mapping method (use Port for T130B)\""
	$w.config.f.x36.x.menu add radiobutton -label "Port" -variable tmpvar_12 -value "Port" -command "update_active"
	$w.config.f.x36.x.menu add radiobutton -label "Memory" -variable tmpvar_12 -value "Memory" -command "update_active"
	menusplit $w $w.config.f.x36.x.menu 2
	dep_tristate $w.config.f 22 37 "IBMMCA SCSI support" CONFIG_SCSI_IBMMCA
	bool $w.config.f 22 38 "  Standard SCSI-order" CONFIG_IBMMCA_SCSI_ORDER_STANDARD
	bool $w.config.f 22 39 "  Reset SCSI-devices at boottime" CONFIG_IBMMCA_SCSI_DEV_RESET
	dep_tristate $w.config.f 22 40 "Initio 9100U(W) support" CONFIG_SCSI_INITIO
	dep_tristate $w.config.f 22 41 "Initio INI-A100U2W support" CONFIG_SCSI_INIA100
	dep_tristate $w.config.f 22 42 "IOMEGA parallel port (ppa - older drives)" CONFIG_SCSI_PPA
	dep_tristate $w.config.f 22 43 "IOMEGA parallel port (imm - newer drives)" CONFIG_SCSI_IMM
	bool $w.config.f 22 44 "  ppa/imm option - Use slow (but safe) EPP-16" CONFIG_SCSI_IZIP_EPP16
	bool $w.config.f 22 45 "  ppa/imm option - Assume slow parport control register" CONFIG_SCSI_IZIP_SLOW_CTR
	dep_tristate $w.config.f 22 46 "NCR53c406a SCSI support" CONFIG_SCSI_NCR53C406A
	dep_tristate $w.config.f 22 47 "NCR Dual 700 MCA SCSI support" CONFIG_SCSI_NCR_D700
	dep_tristate $w.config.f 22 48 "NCR53c7,8xx SCSI support" CONFIG_SCSI_NCR53C7xx
	bool $w.config.f 22 49 "  always negotiate synchronous transfers" CONFIG_SCSI_NCR53C7xx_sync
	bool $w.config.f 22 50 "  allow FAST-SCSI \[10MHz\]" CONFIG_SCSI_NCR53C7xx_FAST
	bool $w.config.f 22 51 "  allow DISCONNECT" CONFIG_SCSI_NCR53C7xx_DISCONNECT
	dep_tristate $w.config.f 22 52 "SYM53C8XX Version 2 SCSI support" CONFIG_SCSI_SYM53C8XX_2
	int $w.config.f 22 53 "  DMA addressing mode" CONFIG_SCSI_SYM53C8XX_DMA_ADDRESSING_MODE
	int $w.config.f 22 54 "  default tagged command queue depth" CONFIG_SCSI_SYM53C8XX_DEFAULT_TAGS
	int $w.config.f 22 55 "  maximum number of queued commands" CONFIG_SCSI_SYM53C8XX_MAX_TAGS
	bool $w.config.f 22 56 "  use normal IO" CONFIG_SCSI_SYM53C8XX_IOMAPPED
	dep_tristate $w.config.f 22 57 "NCR53C8XX SCSI support" CONFIG_SCSI_NCR53C8XX
	dep_tristate $w.config.f 22 58 "SYM53C8XX SCSI support" CONFIG_SCSI_SYM53C8XX
	int $w.config.f 22 59 "  default tagged command queue depth" CONFIG_SCSI_NCR53C8XX_DEFAULT_TAGS
	int $w.config.f 22 60 "  maximum number of queued commands" CONFIG_SCSI_NCR53C8XX_MAX_TAGS
	int $w.config.f 22 61 "  synchronous transfers frequency in MHz" CONFIG_SCSI_NCR53C8XX_SYNC
	bool $w.config.f 22 62 "  enable profiling" CONFIG_SCSI_NCR53C8XX_PROFILE
	bool $w.config.f 22 63 "  use normal IO" CONFIG_SCSI_NCR53C8XX_IOMAPPED
	bool $w.config.f 22 64 "  include support for the NCR PQS/PDS SCSI card" CONFIG_SCSI_NCR53C8XX_PQS_PDS
	bool $w.config.f 22 65 "  not allow targets to disconnect" CONFIG_SCSI_NCR53C8XX_NO_DISCONNECT
	bool $w.config.f 22 66 "  assume boards are SYMBIOS compatible (EXPERIMENTAL)" CONFIG_SCSI_NCR53C8XX_SYMBIOS_COMPAT
	dep_tristate $w.config.f 22 67 "NCR MCA 53C9x SCSI support" CONFIG_SCSI_MCA_53C9X
	dep_tristate $w.config.f 22 68 "PAS16 SCSI support" CONFIG_SCSI_PAS16
	dep_tristate $w.config.f 22 69 "PCI2000 support" CONFIG_SCSI_PCI2000
	dep_tristate $w.config.f 22 70 "PCI2220i support" CONFIG_SCSI_PCI2220I
	dep_tristate $w.config.f 22 71 "PSI240i support" CONFIG_SCSI_PSI240I
	dep_tristate $w.config.f 22 72 "Qlogic FAS SCSI support" CONFIG_SCSI_QLOGIC_FAS
	dep_tristate $w.config.f 22 73 "Qlogic ISP SCSI support" CONFIG_SCSI_QLOGIC_ISP
	dep_tristate $w.config.f 22 74 "Qlogic ISP FC SCSI support" CONFIG_SCSI_QLOGIC_FC
	bool $w.config.f 22 75 "   Include loadable firmware in driver" CONFIG_SCSI_QLOGIC_FC_FIRMWARE
	dep_tristate $w.config.f 22 76 "Qlogic QLA 1280 SCSI support" CONFIG_SCSI_QLOGIC_1280
	dep_tristate $w.config.f 22 77 "Simple 53c710 SCSI support (Compaq, NCR machines)" CONFIG_SCSI_SIM710
	dep_tristate $w.config.f 22 78 "Symbios 53c416 SCSI support" CONFIG_SCSI_SYM53C416
	dep_tristate $w.config.f 22 79 "Tekram DC390(T) and Am53/79C974 SCSI support" CONFIG_SCSI_DC390T
	bool $w.config.f 22 80 "  _omit_ support for non-DC390 adapters" CONFIG_SCSI_DC390T_NOGENSUPP
	dep_tristate $w.config.f 22 81 "Trantor T128/T128F/T228 SCSI support" CONFIG_SCSI_T128
	dep_tristate $w.config.f 22 82 "UltraStor 14F/34F support" CONFIG_SCSI_U14_34F
	bool $w.config.f 22 83 "  enable elevator sorting" CONFIG_SCSI_U14_34F_LINKED_COMMANDS
	int $w.config.f 22 84 "  maximum number of queued commands" CONFIG_SCSI_U14_34F_MAX_TAGS
	dep_tristate $w.config.f 22 85 "SCSI debugging host simulator (EXPERIMENTAL)" CONFIG_SCSI_DEBUG



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu21] == 0} then {menu21 .menu21 "SCSI support"}
	set winx [expr [winfo x .menu21]+30]; set winy [expr [winfo y .menu21]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu22 {} {
	global CONFIG_MODULES
	global CONFIG_SCSI
	global CONFIG_PCI
	global CONFIG_BLK_DEV_3W_XXXX_RAID
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_BLK_DEV_3W_XXXX_RAID [sync_tristate $CONFIG_BLK_DEV_3W_XXXX_RAID $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x0 disabled {y}} else {configure_entry .menu22.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x0 disabled {m}} else {configure_entry .menu22.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x0 normal {m}} else {configure_entry .menu22.config.f.x0 disabled {m}}; configure_entry .menu22.config.f.x0 normal {n l}} else {configure_entry .menu22.config.f.x0 disabled {y n m l}}
	global CONFIG_SCSI_7000FASST
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_7000FASST [sync_tristate $CONFIG_SCSI_7000FASST $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x1 disabled {y}} else {configure_entry .menu22.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x1 disabled {m}} else {configure_entry .menu22.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x1 normal {m}} else {configure_entry .menu22.config.f.x1 disabled {m}}; configure_entry .menu22.config.f.x1 normal {n l}} else {configure_entry .menu22.config.f.x1 disabled {y n m l}}
	global CONFIG_SCSI_ACARD
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_ACARD [sync_tristate $CONFIG_SCSI_ACARD $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x2 disabled {y}} else {configure_entry .menu22.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x2 disabled {m}} else {configure_entry .menu22.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x2 normal {m}} else {configure_entry .menu22.config.f.x2 disabled {m}}; configure_entry .menu22.config.f.x2 normal {n l}} else {configure_entry .menu22.config.f.x2 disabled {y n m l}}
	global CONFIG_SCSI_AHA152X
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_AHA152X [sync_tristate $CONFIG_SCSI_AHA152X $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x3 disabled {y}} else {configure_entry .menu22.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x3 disabled {m}} else {configure_entry .menu22.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x3 normal {m}} else {configure_entry .menu22.config.f.x3 disabled {m}}; configure_entry .menu22.config.f.x3 normal {n l}} else {configure_entry .menu22.config.f.x3 disabled {y n m l}}
	global CONFIG_SCSI_AHA1542
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_AHA1542 [sync_tristate $CONFIG_SCSI_AHA1542 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x4 disabled {y}} else {configure_entry .menu22.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x4 disabled {m}} else {configure_entry .menu22.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x4 normal {m}} else {configure_entry .menu22.config.f.x4 disabled {m}}; configure_entry .menu22.config.f.x4 normal {n l}} else {configure_entry .menu22.config.f.x4 disabled {y n m l}}
	global CONFIG_SCSI_AHA1740
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_AHA1740 [sync_tristate $CONFIG_SCSI_AHA1740 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x5 disabled {y}} else {configure_entry .menu22.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x5 disabled {m}} else {configure_entry .menu22.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x5 normal {m}} else {configure_entry .menu22.config.f.x5 disabled {m}}; configure_entry .menu22.config.f.x5 normal {n l}} else {configure_entry .menu22.config.f.x5 disabled {y n m l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_SCSI_AACRAID
	if {($CONFIG_SCSI != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_PCI]];set CONFIG_SCSI_AACRAID [sync_tristate $CONFIG_SCSI_AACRAID $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x6 disabled {y}} else {configure_entry .menu22.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x6 disabled {m}} else {configure_entry .menu22.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x6 normal {m}} else {configure_entry .menu22.config.f.x6 disabled {m}}; configure_entry .menu22.config.f.x6 normal {n l}} else {configure_entry .menu22.config.f.x6 disabled {y n m l}}
	global CONFIG_SCSI_AIC7XXX_OLD
	global CONFIG_SCSI_AIC7XXX
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX_OLD != 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_AIC7XXX [sync_tristate $CONFIG_SCSI_AIC7XXX $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x7 disabled {y}} else {configure_entry .menu22.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x7 disabled {m}} else {configure_entry .menu22.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x7 normal {m}} else {configure_entry .menu22.config.f.x7 disabled {m}}; configure_entry .menu22.config.f.x7 normal {n l}} else {configure_entry .menu22.config.f.x7 disabled {y n m l}}
	global CONFIG_AIC7XXX_CMDS_PER_DEVICE
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX_OLD != 1) && ($CONFIG_SCSI_AIC7XXX != 0)} then {.menu22.config.f.x8.x configure -state normal -foreground [ cget .ref -foreground ]; .menu22.config.f.x8.l configure -state normal; } else {.menu22.config.f.x8.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu22.config.f.x8.l configure -state disabled}
	global CONFIG_AIC7XXX_RESET_DELAY_MS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX_OLD != 1) && ($CONFIG_SCSI_AIC7XXX != 0)} then {.menu22.config.f.x9.x configure -state normal -foreground [ cget .ref -foreground ]; .menu22.config.f.x9.l configure -state normal; } else {.menu22.config.f.x9.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu22.config.f.x9.l configure -state disabled}
	global CONFIG_AIC7XXX_BUILD_FIRMWARE
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX_OLD != 1) && ($CONFIG_SCSI_AIC7XXX != 0)} then {
	configure_entry .menu22.config.f.x10 normal {n l y}} else {configure_entry .menu22.config.f.x10 disabled {y n l}}
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX != 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_AIC7XXX_OLD [sync_tristate $CONFIG_SCSI_AIC7XXX_OLD $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x11 disabled {y}} else {configure_entry .menu22.config.f.x11 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x11 disabled {m}} else {configure_entry .menu22.config.f.x11 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x11 normal {m}} else {configure_entry .menu22.config.f.x11 disabled {m}}; configure_entry .menu22.config.f.x11 normal {n l}} else {configure_entry .menu22.config.f.x11 disabled {y n m l}}
	global CONFIG_AIC7XXX_OLD_TCQ_ON_BY_DEFAULT
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX != 1) && ($CONFIG_SCSI_AIC7XXX_OLD != 0)} then {
	configure_entry .menu22.config.f.x12 normal {n l y}} else {configure_entry .menu22.config.f.x12 disabled {y n l}}
	global CONFIG_AIC7XXX_OLD_CMDS_PER_DEVICE
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX != 1) && ($CONFIG_SCSI_AIC7XXX_OLD != 0)} then {.menu22.config.f.x13.x configure -state normal -foreground [ cget .ref -foreground ]; .menu22.config.f.x13.l configure -state normal; } else {.menu22.config.f.x13.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu22.config.f.x13.l configure -state disabled}
	global CONFIG_AIC7XXX_OLD_PROC_STATS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX != 1) && ($CONFIG_SCSI_AIC7XXX_OLD != 0)} then {
	configure_entry .menu22.config.f.x14 normal {n l y}} else {configure_entry .menu22.config.f.x14 disabled {y n l}}
	global CONFIG_SCSI_DPT_I2O
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_DPT_I2O [sync_tristate $CONFIG_SCSI_DPT_I2O $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x15 disabled {y}} else {configure_entry .menu22.config.f.x15 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x15 disabled {m}} else {configure_entry .menu22.config.f.x15 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x15 normal {m}} else {configure_entry .menu22.config.f.x15 disabled {m}}; configure_entry .menu22.config.f.x15 normal {n l}} else {configure_entry .menu22.config.f.x15 disabled {y n m l}}
	global CONFIG_SCSI_ADVANSYS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_ADVANSYS [sync_tristate $CONFIG_SCSI_ADVANSYS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x16 disabled {y}} else {configure_entry .menu22.config.f.x16 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x16 disabled {m}} else {configure_entry .menu22.config.f.x16 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x16 normal {m}} else {configure_entry .menu22.config.f.x16 disabled {m}}; configure_entry .menu22.config.f.x16 normal {n l}} else {configure_entry .menu22.config.f.x16 disabled {y n m l}}
	global CONFIG_SCSI_IN2000
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_IN2000 [sync_tristate $CONFIG_SCSI_IN2000 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x17 disabled {y}} else {configure_entry .menu22.config.f.x17 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x17 disabled {m}} else {configure_entry .menu22.config.f.x17 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x17 normal {m}} else {configure_entry .menu22.config.f.x17 disabled {m}}; configure_entry .menu22.config.f.x17 normal {n l}} else {configure_entry .menu22.config.f.x17 disabled {y n m l}}
	global CONFIG_SCSI_AM53C974
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_PCI]];set CONFIG_SCSI_AM53C974 [sync_tristate $CONFIG_SCSI_AM53C974 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x18 disabled {y}} else {configure_entry .menu22.config.f.x18 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x18 disabled {m}} else {configure_entry .menu22.config.f.x18 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x18 normal {m}} else {configure_entry .menu22.config.f.x18 disabled {m}}; configure_entry .menu22.config.f.x18 normal {n l}} else {configure_entry .menu22.config.f.x18 disabled {y n m l}}
	global CONFIG_SCSI_MEGARAID
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_MEGARAID [sync_tristate $CONFIG_SCSI_MEGARAID $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x19 disabled {y}} else {configure_entry .menu22.config.f.x19 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x19 disabled {m}} else {configure_entry .menu22.config.f.x19 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x19 normal {m}} else {configure_entry .menu22.config.f.x19 disabled {m}}; configure_entry .menu22.config.f.x19 normal {n l}} else {configure_entry .menu22.config.f.x19 disabled {y n m l}}
	global CONFIG_SCSI_BUSLOGIC
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_BUSLOGIC [sync_tristate $CONFIG_SCSI_BUSLOGIC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x20 disabled {y}} else {configure_entry .menu22.config.f.x20 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x20 disabled {m}} else {configure_entry .menu22.config.f.x20 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x20 normal {m}} else {configure_entry .menu22.config.f.x20 disabled {m}}; configure_entry .menu22.config.f.x20 normal {n l}} else {configure_entry .menu22.config.f.x20 disabled {y n m l}}
	global CONFIG_SCSI_OMIT_FLASHPOINT
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_BUSLOGIC != 0)} then {
	configure_entry .menu22.config.f.x21 normal {n l y}} else {configure_entry .menu22.config.f.x21 disabled {y n l}}
	global CONFIG_SCSI_CPQFCTS
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_CPQFCTS [sync_tristate $CONFIG_SCSI_CPQFCTS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x22 disabled {y}} else {configure_entry .menu22.config.f.x22 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x22 disabled {m}} else {configure_entry .menu22.config.f.x22 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x22 normal {m}} else {configure_entry .menu22.config.f.x22 disabled {m}}; configure_entry .menu22.config.f.x22 normal {n l}} else {configure_entry .menu22.config.f.x22 disabled {y n m l}}
	global CONFIG_SCSI_DMX3191D
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_PCI]];set CONFIG_SCSI_DMX3191D [sync_tristate $CONFIG_SCSI_DMX3191D $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x23 disabled {y}} else {configure_entry .menu22.config.f.x23 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x23 disabled {m}} else {configure_entry .menu22.config.f.x23 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x23 normal {m}} else {configure_entry .menu22.config.f.x23 disabled {m}}; configure_entry .menu22.config.f.x23 normal {n l}} else {configure_entry .menu22.config.f.x23 disabled {y n m l}}
	global CONFIG_SCSI_DTC3280
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_DTC3280 [sync_tristate $CONFIG_SCSI_DTC3280 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x24 disabled {y}} else {configure_entry .menu22.config.f.x24 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x24 disabled {m}} else {configure_entry .menu22.config.f.x24 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x24 normal {m}} else {configure_entry .menu22.config.f.x24 disabled {m}}; configure_entry .menu22.config.f.x24 normal {n l}} else {configure_entry .menu22.config.f.x24 disabled {y n m l}}
	global CONFIG_SCSI_EATA
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_EATA [sync_tristate $CONFIG_SCSI_EATA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x25 disabled {y}} else {configure_entry .menu22.config.f.x25 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x25 disabled {m}} else {configure_entry .menu22.config.f.x25 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x25 normal {m}} else {configure_entry .menu22.config.f.x25 disabled {m}}; configure_entry .menu22.config.f.x25 normal {n l}} else {configure_entry .menu22.config.f.x25 disabled {y n m l}}
	global CONFIG_SCSI_EATA_TAGGED_QUEUE
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_EATA != 0)} then {
	configure_entry .menu22.config.f.x26 normal {n l y}} else {configure_entry .menu22.config.f.x26 disabled {y n l}}
	global CONFIG_SCSI_EATA_LINKED_COMMANDS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_EATA != 0)} then {
	configure_entry .menu22.config.f.x27 normal {n l y}} else {configure_entry .menu22.config.f.x27 disabled {y n l}}
	global CONFIG_SCSI_EATA_MAX_TAGS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_EATA != 0)} then {.menu22.config.f.x28.x configure -state normal -foreground [ cget .ref -foreground ]; .menu22.config.f.x28.l configure -state normal; } else {.menu22.config.f.x28.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu22.config.f.x28.l configure -state disabled}
	global CONFIG_SCSI_EATA_DMA
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_EATA_DMA [sync_tristate $CONFIG_SCSI_EATA_DMA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x29 disabled {y}} else {configure_entry .menu22.config.f.x29 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x29 disabled {m}} else {configure_entry .menu22.config.f.x29 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x29 normal {m}} else {configure_entry .menu22.config.f.x29 disabled {m}}; configure_entry .menu22.config.f.x29 normal {n l}} else {configure_entry .menu22.config.f.x29 disabled {y n m l}}
	global CONFIG_SCSI_EATA_PIO
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_EATA_PIO [sync_tristate $CONFIG_SCSI_EATA_PIO $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x30 disabled {y}} else {configure_entry .menu22.config.f.x30 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x30 disabled {m}} else {configure_entry .menu22.config.f.x30 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x30 normal {m}} else {configure_entry .menu22.config.f.x30 disabled {m}}; configure_entry .menu22.config.f.x30 normal {n l}} else {configure_entry .menu22.config.f.x30 disabled {y n m l}}
	global CONFIG_SCSI_FUTURE_DOMAIN
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_FUTURE_DOMAIN [sync_tristate $CONFIG_SCSI_FUTURE_DOMAIN $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x31 disabled {y}} else {configure_entry .menu22.config.f.x31 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x31 disabled {m}} else {configure_entry .menu22.config.f.x31 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x31 normal {m}} else {configure_entry .menu22.config.f.x31 disabled {m}}; configure_entry .menu22.config.f.x31 normal {n l}} else {configure_entry .menu22.config.f.x31 disabled {y n m l}}
	global CONFIG_MCA
	global CONFIG_SCSI_FD_MCS
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_FD_MCS [sync_tristate $CONFIG_SCSI_FD_MCS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x32 disabled {y}} else {configure_entry .menu22.config.f.x32 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x32 disabled {m}} else {configure_entry .menu22.config.f.x32 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x32 normal {m}} else {configure_entry .menu22.config.f.x32 disabled {m}}; configure_entry .menu22.config.f.x32 normal {n l}} else {configure_entry .menu22.config.f.x32 disabled {y n m l}}
	global CONFIG_SCSI_GDTH
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_GDTH [sync_tristate $CONFIG_SCSI_GDTH $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x33 disabled {y}} else {configure_entry .menu22.config.f.x33 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x33 disabled {m}} else {configure_entry .menu22.config.f.x33 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x33 normal {m}} else {configure_entry .menu22.config.f.x33 disabled {m}}; configure_entry .menu22.config.f.x33 normal {n l}} else {configure_entry .menu22.config.f.x33 disabled {y n m l}}
	global CONFIG_SCSI_GENERIC_NCR5380
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_GENERIC_NCR5380 [sync_tristate $CONFIG_SCSI_GENERIC_NCR5380 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x34 disabled {y}} else {configure_entry .menu22.config.f.x34 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x34 disabled {m}} else {configure_entry .menu22.config.f.x34 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x34 normal {m}} else {configure_entry .menu22.config.f.x34 disabled {m}}; configure_entry .menu22.config.f.x34 normal {n l}} else {configure_entry .menu22.config.f.x34 disabled {y n m l}}
	global CONFIG_SCSI_GENERIC_NCR53C400
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_GENERIC_NCR5380 != 0)} then {
	configure_entry .menu22.config.f.x35 normal {n l y}} else {configure_entry .menu22.config.f.x35 disabled {y n l}}
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_GENERIC_NCR5380 != 0)} then {configure_entry .menu22.config.f.x36 normal {x l}} else {configure_entry .menu22.config.f.x36 disabled {x l}}
	global CONFIG_SCSI_IBMMCA
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_IBMMCA [sync_tristate $CONFIG_SCSI_IBMMCA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x37 disabled {y}} else {configure_entry .menu22.config.f.x37 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x37 disabled {m}} else {configure_entry .menu22.config.f.x37 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x37 normal {m}} else {configure_entry .menu22.config.f.x37 disabled {m}}; configure_entry .menu22.config.f.x37 normal {n l}} else {configure_entry .menu22.config.f.x37 disabled {y n m l}}
	global CONFIG_IBMMCA_SCSI_ORDER_STANDARD
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI_IBMMCA != 0)} then {
	configure_entry .menu22.config.f.x38 normal {n l y}} else {configure_entry .menu22.config.f.x38 disabled {y n l}}
	global CONFIG_IBMMCA_SCSI_DEV_RESET
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI_IBMMCA != 0)} then {
	configure_entry .menu22.config.f.x39 normal {n l y}} else {configure_entry .menu22.config.f.x39 disabled {y n l}}
	global CONFIG_SCSI_INITIO
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_PCI]];set CONFIG_SCSI_INITIO [sync_tristate $CONFIG_SCSI_INITIO $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x40 disabled {y}} else {configure_entry .menu22.config.f.x40 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x40 disabled {m}} else {configure_entry .menu22.config.f.x40 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x40 normal {m}} else {configure_entry .menu22.config.f.x40 disabled {m}}; configure_entry .menu22.config.f.x40 normal {n l}} else {configure_entry .menu22.config.f.x40 disabled {y n m l}}
	global CONFIG_SCSI_INIA100
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_PCI]];set CONFIG_SCSI_INIA100 [sync_tristate $CONFIG_SCSI_INIA100 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x41 disabled {y}} else {configure_entry .menu22.config.f.x41 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x41 disabled {m}} else {configure_entry .menu22.config.f.x41 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x41 normal {m}} else {configure_entry .menu22.config.f.x41 disabled {m}}; configure_entry .menu22.config.f.x41 normal {n l}} else {configure_entry .menu22.config.f.x41 disabled {y n m l}}
	global CONFIG_PARPORT
	global CONFIG_SCSI_PPA
	if {($CONFIG_SCSI != 0) && ($CONFIG_PARPORT != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_PARPORT]];set CONFIG_SCSI_PPA [sync_tristate $CONFIG_SCSI_PPA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x42 disabled {y}} else {configure_entry .menu22.config.f.x42 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x42 disabled {m}} else {configure_entry .menu22.config.f.x42 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x42 normal {m}} else {configure_entry .menu22.config.f.x42 disabled {m}}; configure_entry .menu22.config.f.x42 normal {n l}} else {configure_entry .menu22.config.f.x42 disabled {y n m l}}
	global CONFIG_SCSI_IMM
	if {($CONFIG_SCSI != 0) && ($CONFIG_PARPORT != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_PARPORT]];set CONFIG_SCSI_IMM [sync_tristate $CONFIG_SCSI_IMM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x43 disabled {y}} else {configure_entry .menu22.config.f.x43 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x43 disabled {m}} else {configure_entry .menu22.config.f.x43 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x43 normal {m}} else {configure_entry .menu22.config.f.x43 disabled {m}}; configure_entry .menu22.config.f.x43 normal {n l}} else {configure_entry .menu22.config.f.x43 disabled {y n m l}}
	global CONFIG_SCSI_IZIP_EPP16
	if {($CONFIG_SCSI != 0) && ($CONFIG_PARPORT != 0) && ($CONFIG_SCSI_PPA != 0 || $CONFIG_SCSI_IMM != 0)} then {
	configure_entry .menu22.config.f.x44 normal {n l y}} else {configure_entry .menu22.config.f.x44 disabled {y n l}}
	global CONFIG_SCSI_IZIP_SLOW_CTR
	if {($CONFIG_SCSI != 0) && ($CONFIG_PARPORT != 0) && ($CONFIG_SCSI_PPA != 0 || $CONFIG_SCSI_IMM != 0)} then {
	configure_entry .menu22.config.f.x45 normal {n l y}} else {configure_entry .menu22.config.f.x45 disabled {y n l}}
	global CONFIG_SCSI_NCR53C406A
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_NCR53C406A [sync_tristate $CONFIG_SCSI_NCR53C406A $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x46 disabled {y}} else {configure_entry .menu22.config.f.x46 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x46 disabled {m}} else {configure_entry .menu22.config.f.x46 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x46 normal {m}} else {configure_entry .menu22.config.f.x46 disabled {m}}; configure_entry .menu22.config.f.x46 normal {n l}} else {configure_entry .menu22.config.f.x46 disabled {y n m l}}
	global CONFIG_SCSI_NCR_D700
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_NCR_D700 [sync_tristate $CONFIG_SCSI_NCR_D700 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x47 disabled {y}} else {configure_entry .menu22.config.f.x47 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x47 disabled {m}} else {configure_entry .menu22.config.f.x47 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x47 normal {m}} else {configure_entry .menu22.config.f.x47 disabled {m}}; configure_entry .menu22.config.f.x47 normal {n l}} else {configure_entry .menu22.config.f.x47 disabled {y n m l}}
	global CONFIG_SCSI_NCR53C7xx
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_PCI]];set CONFIG_SCSI_NCR53C7xx [sync_tristate $CONFIG_SCSI_NCR53C7xx $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x48 disabled {y}} else {configure_entry .menu22.config.f.x48 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x48 disabled {m}} else {configure_entry .menu22.config.f.x48 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x48 normal {m}} else {configure_entry .menu22.config.f.x48 disabled {m}}; configure_entry .menu22.config.f.x48 normal {n l}} else {configure_entry .menu22.config.f.x48 disabled {y n m l}}
	global CONFIG_SCSI_NCR53C7xx_sync
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_NCR53C7xx != 0)} then {
	configure_entry .menu22.config.f.x49 normal {n l y}} else {configure_entry .menu22.config.f.x49 disabled {y n l}}
	global CONFIG_SCSI_NCR53C7xx_FAST
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_NCR53C7xx != 0)} then {
	configure_entry .menu22.config.f.x50 normal {n l y}} else {configure_entry .menu22.config.f.x50 disabled {y n l}}
	global CONFIG_SCSI_NCR53C7xx_DISCONNECT
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_NCR53C7xx != 0)} then {
	configure_entry .menu22.config.f.x51 normal {n l y}} else {configure_entry .menu22.config.f.x51 disabled {y n l}}
	global CONFIG_SCSI_SYM53C8XX_2
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_SYM53C8XX_2 [sync_tristate $CONFIG_SCSI_SYM53C8XX_2 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x52 disabled {y}} else {configure_entry .menu22.config.f.x52 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x52 disabled {m}} else {configure_entry .menu22.config.f.x52 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x52 normal {m}} else {configure_entry .menu22.config.f.x52 disabled {m}}; configure_entry .menu22.config.f.x52 normal {n l}} else {configure_entry .menu22.config.f.x52 disabled {y n m l}}
	global CONFIG_SCSI_SYM53C8XX_DMA_ADDRESSING_MODE
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI_SYM53C8XX_2 != 0)} then {.menu22.config.f.x53.x configure -state normal -foreground [ cget .ref -foreground ]; .menu22.config.f.x53.l configure -state normal; } else {.menu22.config.f.x53.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu22.config.f.x53.l configure -state disabled}
	global CONFIG_SCSI_SYM53C8XX_DEFAULT_TAGS
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI_SYM53C8XX_2 != 0)} then {.menu22.config.f.x54.x configure -state normal -foreground [ cget .ref -foreground ]; .menu22.config.f.x54.l configure -state normal; } else {.menu22.config.f.x54.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu22.config.f.x54.l configure -state disabled}
	global CONFIG_SCSI_SYM53C8XX_MAX_TAGS
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI_SYM53C8XX_2 != 0)} then {.menu22.config.f.x55.x configure -state normal -foreground [ cget .ref -foreground ]; .menu22.config.f.x55.l configure -state normal; } else {.menu22.config.f.x55.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu22.config.f.x55.l configure -state disabled}
	global CONFIG_SCSI_SYM53C8XX_IOMAPPED
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI_SYM53C8XX_2 != 0)} then {
	configure_entry .menu22.config.f.x56 normal {n l y}} else {configure_entry .menu22.config.f.x56 disabled {y n l}}
	global CONFIG_SCSI_NCR53C8XX
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_NCR53C8XX [sync_tristate $CONFIG_SCSI_NCR53C8XX $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x57 disabled {y}} else {configure_entry .menu22.config.f.x57 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x57 disabled {m}} else {configure_entry .menu22.config.f.x57 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x57 normal {m}} else {configure_entry .menu22.config.f.x57 disabled {m}}; configure_entry .menu22.config.f.x57 normal {n l}} else {configure_entry .menu22.config.f.x57 disabled {y n m l}}
	global CONFIG_SCSI_SYM53C8XX
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_SYM53C8XX [sync_tristate $CONFIG_SCSI_SYM53C8XX $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x58 disabled {y}} else {configure_entry .menu22.config.f.x58 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x58 disabled {m}} else {configure_entry .menu22.config.f.x58 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x58 normal {m}} else {configure_entry .menu22.config.f.x58 disabled {m}}; configure_entry .menu22.config.f.x58 normal {n l}} else {configure_entry .menu22.config.f.x58 disabled {y n m l}}
	global CONFIG_SCSI_NCR53C8XX_DEFAULT_TAGS
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0)} then {.menu22.config.f.x59.x configure -state normal -foreground [ cget .ref -foreground ]; .menu22.config.f.x59.l configure -state normal; } else {.menu22.config.f.x59.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu22.config.f.x59.l configure -state disabled}
	global CONFIG_SCSI_NCR53C8XX_MAX_TAGS
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0)} then {.menu22.config.f.x60.x configure -state normal -foreground [ cget .ref -foreground ]; .menu22.config.f.x60.l configure -state normal; } else {.menu22.config.f.x60.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu22.config.f.x60.l configure -state disabled}
	global CONFIG_SCSI_NCR53C8XX_SYNC
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0)} then {.menu22.config.f.x61.x configure -state normal -foreground [ cget .ref -foreground ]; .menu22.config.f.x61.l configure -state normal; } else {.menu22.config.f.x61.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu22.config.f.x61.l configure -state disabled}
	global CONFIG_SCSI_NCR53C8XX_PROFILE
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0)} then {
	configure_entry .menu22.config.f.x62 normal {n l y}} else {configure_entry .menu22.config.f.x62 disabled {y n l}}
	global CONFIG_SCSI_NCR53C8XX_IOMAPPED
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0)} then {
	configure_entry .menu22.config.f.x63 normal {n l y}} else {configure_entry .menu22.config.f.x63 disabled {y n l}}
	global CONFIG_SCSI_NCR53C8XX_PQS_PDS
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0) && ($CONFIG_SCSI_SYM53C8XX != 0)} then {
	configure_entry .menu22.config.f.x64 normal {n l y}} else {configure_entry .menu22.config.f.x64 disabled {y n l}}
	global CONFIG_SCSI_NCR53C8XX_NO_DISCONNECT
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0) && ($CONFIG_SCSI_NCR53C8XX_DEFAULT_TAGS == "0")} then {
	configure_entry .menu22.config.f.x65 normal {n l y}} else {configure_entry .menu22.config.f.x65 disabled {y n l}}
	global CONFIG_SCSI_NCR53C8XX_SYMBIOS_COMPAT
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu22.config.f.x66 normal {n l y}} else {configure_entry .menu22.config.f.x66 disabled {y n l}}
	global CONFIG_SCSI_MCA_53C9X
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_MCA_53C9X [sync_tristate $CONFIG_SCSI_MCA_53C9X $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x67 disabled {y}} else {configure_entry .menu22.config.f.x67 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x67 disabled {m}} else {configure_entry .menu22.config.f.x67 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x67 normal {m}} else {configure_entry .menu22.config.f.x67 disabled {m}}; configure_entry .menu22.config.f.x67 normal {n l}} else {configure_entry .menu22.config.f.x67 disabled {y n m l}}
	global CONFIG_SCSI_PAS16
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_PAS16 [sync_tristate $CONFIG_SCSI_PAS16 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x68 disabled {y}} else {configure_entry .menu22.config.f.x68 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x68 disabled {m}} else {configure_entry .menu22.config.f.x68 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x68 normal {m}} else {configure_entry .menu22.config.f.x68 disabled {m}}; configure_entry .menu22.config.f.x68 normal {n l}} else {configure_entry .menu22.config.f.x68 disabled {y n m l}}
	global CONFIG_SCSI_PCI2000
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_PCI2000 [sync_tristate $CONFIG_SCSI_PCI2000 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x69 disabled {y}} else {configure_entry .menu22.config.f.x69 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x69 disabled {m}} else {configure_entry .menu22.config.f.x69 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x69 normal {m}} else {configure_entry .menu22.config.f.x69 disabled {m}}; configure_entry .menu22.config.f.x69 normal {n l}} else {configure_entry .menu22.config.f.x69 disabled {y n m l}}
	global CONFIG_SCSI_PCI2220I
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_PCI2220I [sync_tristate $CONFIG_SCSI_PCI2220I $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x70 disabled {y}} else {configure_entry .menu22.config.f.x70 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x70 disabled {m}} else {configure_entry .menu22.config.f.x70 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x70 normal {m}} else {configure_entry .menu22.config.f.x70 disabled {m}}; configure_entry .menu22.config.f.x70 normal {n l}} else {configure_entry .menu22.config.f.x70 disabled {y n m l}}
	global CONFIG_SCSI_PSI240I
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_PSI240I [sync_tristate $CONFIG_SCSI_PSI240I $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x71 disabled {y}} else {configure_entry .menu22.config.f.x71 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x71 disabled {m}} else {configure_entry .menu22.config.f.x71 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x71 normal {m}} else {configure_entry .menu22.config.f.x71 disabled {m}}; configure_entry .menu22.config.f.x71 normal {n l}} else {configure_entry .menu22.config.f.x71 disabled {y n m l}}
	global CONFIG_SCSI_QLOGIC_FAS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_QLOGIC_FAS [sync_tristate $CONFIG_SCSI_QLOGIC_FAS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x72 disabled {y}} else {configure_entry .menu22.config.f.x72 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x72 disabled {m}} else {configure_entry .menu22.config.f.x72 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x72 normal {m}} else {configure_entry .menu22.config.f.x72 disabled {m}}; configure_entry .menu22.config.f.x72 normal {n l}} else {configure_entry .menu22.config.f.x72 disabled {y n m l}}
	global CONFIG_SCSI_QLOGIC_ISP
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_QLOGIC_ISP [sync_tristate $CONFIG_SCSI_QLOGIC_ISP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x73 disabled {y}} else {configure_entry .menu22.config.f.x73 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x73 disabled {m}} else {configure_entry .menu22.config.f.x73 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x73 normal {m}} else {configure_entry .menu22.config.f.x73 disabled {m}}; configure_entry .menu22.config.f.x73 normal {n l}} else {configure_entry .menu22.config.f.x73 disabled {y n m l}}
	global CONFIG_SCSI_QLOGIC_FC
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_QLOGIC_FC [sync_tristate $CONFIG_SCSI_QLOGIC_FC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x74 disabled {y}} else {configure_entry .menu22.config.f.x74 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x74 disabled {m}} else {configure_entry .menu22.config.f.x74 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x74 normal {m}} else {configure_entry .menu22.config.f.x74 disabled {m}}; configure_entry .menu22.config.f.x74 normal {n l}} else {configure_entry .menu22.config.f.x74 disabled {y n m l}}
	global CONFIG_SCSI_QLOGIC_FC_FIRMWARE
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI_QLOGIC_FC != 0)} then {
	configure_entry .menu22.config.f.x75 normal {n l y}} else {configure_entry .menu22.config.f.x75 disabled {y n l}}
	global CONFIG_SCSI_QLOGIC_1280
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_QLOGIC_1280 [sync_tristate $CONFIG_SCSI_QLOGIC_1280 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x76 disabled {y}} else {configure_entry .menu22.config.f.x76 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x76 disabled {m}} else {configure_entry .menu22.config.f.x76 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x76 normal {m}} else {configure_entry .menu22.config.f.x76 disabled {m}}; configure_entry .menu22.config.f.x76 normal {n l}} else {configure_entry .menu22.config.f.x76 disabled {y n m l}}
	global CONFIG_SCSI_SIM710
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_SIM710 [sync_tristate $CONFIG_SCSI_SIM710 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x77 disabled {y}} else {configure_entry .menu22.config.f.x77 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x77 disabled {m}} else {configure_entry .menu22.config.f.x77 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x77 normal {m}} else {configure_entry .menu22.config.f.x77 disabled {m}}; configure_entry .menu22.config.f.x77 normal {n l}} else {configure_entry .menu22.config.f.x77 disabled {y n m l}}
	global CONFIG_SCSI_SYM53C416
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_SYM53C416 [sync_tristate $CONFIG_SCSI_SYM53C416 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x78 disabled {y}} else {configure_entry .menu22.config.f.x78 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x78 disabled {m}} else {configure_entry .menu22.config.f.x78 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x78 normal {m}} else {configure_entry .menu22.config.f.x78 disabled {m}}; configure_entry .menu22.config.f.x78 normal {n l}} else {configure_entry .menu22.config.f.x78 disabled {y n m l}}
	global CONFIG_SCSI_DC390T
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_DC390T [sync_tristate $CONFIG_SCSI_DC390T $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x79 disabled {y}} else {configure_entry .menu22.config.f.x79 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x79 disabled {m}} else {configure_entry .menu22.config.f.x79 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x79 normal {m}} else {configure_entry .menu22.config.f.x79 disabled {m}}; configure_entry .menu22.config.f.x79 normal {n l}} else {configure_entry .menu22.config.f.x79 disabled {y n m l}}
	global CONFIG_SCSI_DC390T_NOGENSUPP
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI_DC390T != 0)} then {
	configure_entry .menu22.config.f.x80 normal {n l y}} else {configure_entry .menu22.config.f.x80 disabled {y n l}}
	global CONFIG_SCSI_T128
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_T128 [sync_tristate $CONFIG_SCSI_T128 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x81 disabled {y}} else {configure_entry .menu22.config.f.x81 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x81 disabled {m}} else {configure_entry .menu22.config.f.x81 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x81 normal {m}} else {configure_entry .menu22.config.f.x81 disabled {m}}; configure_entry .menu22.config.f.x81 normal {n l}} else {configure_entry .menu22.config.f.x81 disabled {y n m l}}
	global CONFIG_SCSI_U14_34F
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_U14_34F [sync_tristate $CONFIG_SCSI_U14_34F $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x82 disabled {y}} else {configure_entry .menu22.config.f.x82 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x82 disabled {m}} else {configure_entry .menu22.config.f.x82 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x82 normal {m}} else {configure_entry .menu22.config.f.x82 disabled {m}}; configure_entry .menu22.config.f.x82 normal {n l}} else {configure_entry .menu22.config.f.x82 disabled {y n m l}}
	global CONFIG_SCSI_U14_34F_LINKED_COMMANDS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_U14_34F != 0)} then {
	configure_entry .menu22.config.f.x83 normal {n l y}} else {configure_entry .menu22.config.f.x83 disabled {y n l}}
	global CONFIG_SCSI_U14_34F_MAX_TAGS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_U14_34F != 0)} then {.menu22.config.f.x84.x configure -state normal -foreground [ cget .ref -foreground ]; .menu22.config.f.x84.l configure -state normal; } else {.menu22.config.f.x84.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu22.config.f.x84.l configure -state disabled}
	global CONFIG_SCSI_DEBUG
	if {($CONFIG_SCSI != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]];set CONFIG_SCSI_DEBUG [sync_tristate $CONFIG_SCSI_DEBUG $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu22.config.f.x85 disabled {y}} else {configure_entry .menu22.config.f.x85 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu22.config.f.x85 disabled {m}} else {configure_entry .menu22.config.f.x85 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu22.config.f.x85 normal {m}} else {configure_entry .menu22.config.f.x85 disabled {m}}; configure_entry .menu22.config.f.x85 normal {n l}} else {configure_entry .menu22.config.f.x85 disabled {y n m l}}
}


proc update_define_menu22 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_53C700_IO_MAPPED
	global CONFIG_AIC7XXX_BUILD_FIRMWARE
set CONFIG_AIC7XXX_BUILD_FIRMWARE [expr $CONFIG_AIC7XXX_BUILD_FIRMWARE|16]
	global CONFIG_AIC7XXX_OLD_TCQ_ON_BY_DEFAULT
set CONFIG_AIC7XXX_OLD_TCQ_ON_BY_DEFAULT [expr $CONFIG_AIC7XXX_OLD_TCQ_ON_BY_DEFAULT|16]
	global CONFIG_AIC7XXX_OLD_PROC_STATS
set CONFIG_AIC7XXX_OLD_PROC_STATS [expr $CONFIG_AIC7XXX_OLD_PROC_STATS|16]
	global CONFIG_SCSI_OMIT_FLASHPOINT
set CONFIG_SCSI_OMIT_FLASHPOINT [expr $CONFIG_SCSI_OMIT_FLASHPOINT|16]
	global CONFIG_SCSI_EATA_TAGGED_QUEUE
set CONFIG_SCSI_EATA_TAGGED_QUEUE [expr $CONFIG_SCSI_EATA_TAGGED_QUEUE|16]
	global CONFIG_SCSI_EATA_LINKED_COMMANDS
set CONFIG_SCSI_EATA_LINKED_COMMANDS [expr $CONFIG_SCSI_EATA_LINKED_COMMANDS|16]
	global CONFIG_SCSI_GENERIC_NCR53C400
set CONFIG_SCSI_GENERIC_NCR53C400 [expr $CONFIG_SCSI_GENERIC_NCR53C400|16]
	global CONFIG_IBMMCA_SCSI_ORDER_STANDARD
set CONFIG_IBMMCA_SCSI_ORDER_STANDARD [expr $CONFIG_IBMMCA_SCSI_ORDER_STANDARD|16]
	global CONFIG_IBMMCA_SCSI_DEV_RESET
set CONFIG_IBMMCA_SCSI_DEV_RESET [expr $CONFIG_IBMMCA_SCSI_DEV_RESET|16]
	global CONFIG_SCSI_IZIP_EPP16
set CONFIG_SCSI_IZIP_EPP16 [expr $CONFIG_SCSI_IZIP_EPP16|16]
	global CONFIG_SCSI_IZIP_SLOW_CTR
set CONFIG_SCSI_IZIP_SLOW_CTR [expr $CONFIG_SCSI_IZIP_SLOW_CTR|16]
	global CONFIG_SCSI_NCR53C7xx_sync
set CONFIG_SCSI_NCR53C7xx_sync [expr $CONFIG_SCSI_NCR53C7xx_sync|16]
	global CONFIG_SCSI_NCR53C7xx_FAST
set CONFIG_SCSI_NCR53C7xx_FAST [expr $CONFIG_SCSI_NCR53C7xx_FAST|16]
	global CONFIG_SCSI_NCR53C7xx_DISCONNECT
set CONFIG_SCSI_NCR53C7xx_DISCONNECT [expr $CONFIG_SCSI_NCR53C7xx_DISCONNECT|16]
	global CONFIG_SCSI_SYM53C8XX_IOMAPPED
set CONFIG_SCSI_SYM53C8XX_IOMAPPED [expr $CONFIG_SCSI_SYM53C8XX_IOMAPPED|16]
	global CONFIG_SCSI_NCR53C8XX_PROFILE
set CONFIG_SCSI_NCR53C8XX_PROFILE [expr $CONFIG_SCSI_NCR53C8XX_PROFILE|16]
	global CONFIG_SCSI_NCR53C8XX_IOMAPPED
set CONFIG_SCSI_NCR53C8XX_IOMAPPED [expr $CONFIG_SCSI_NCR53C8XX_IOMAPPED|16]
	global CONFIG_SCSI_NCR53C8XX_PQS_PDS
set CONFIG_SCSI_NCR53C8XX_PQS_PDS [expr $CONFIG_SCSI_NCR53C8XX_PQS_PDS|16]
	global CONFIG_SCSI_NCR53C8XX_NO_DISCONNECT
set CONFIG_SCSI_NCR53C8XX_NO_DISCONNECT [expr $CONFIG_SCSI_NCR53C8XX_NO_DISCONNECT|16]
	global CONFIG_SCSI_NCR53C8XX_SYMBIOS_COMPAT
set CONFIG_SCSI_NCR53C8XX_SYMBIOS_COMPAT [expr $CONFIG_SCSI_NCR53C8XX_SYMBIOS_COMPAT|16]
	global CONFIG_SCSI_QLOGIC_FC_FIRMWARE
set CONFIG_SCSI_QLOGIC_FC_FIRMWARE [expr $CONFIG_SCSI_QLOGIC_FC_FIRMWARE|16]
	global CONFIG_SCSI_DC390T_NOGENSUPP
set CONFIG_SCSI_DC390T_NOGENSUPP [expr $CONFIG_SCSI_DC390T_NOGENSUPP|16]
	global CONFIG_SCSI_U14_34F_LINKED_COMMANDS
set CONFIG_SCSI_U14_34F_LINKED_COMMANDS [expr $CONFIG_SCSI_U14_34F_LINKED_COMMANDS|16]
	global CONFIG_SCSI
	global CONFIG_PCI
	global CONFIG_BLK_DEV_3W_XXXX_RAID
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_BLK_DEV_3W_XXXX_RAID [sync_tristate $CONFIG_BLK_DEV_3W_XXXX_RAID $tmpvar_dep]; set CONFIG_BLK_DEV_3W_XXXX_RAID [expr $CONFIG_BLK_DEV_3W_XXXX_RAID&15]}
	global CONFIG_SCSI_7000FASST
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_7000FASST [sync_tristate $CONFIG_SCSI_7000FASST $tmpvar_dep]; set CONFIG_SCSI_7000FASST [expr $CONFIG_SCSI_7000FASST&15]}
	global CONFIG_SCSI_ACARD
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_ACARD [sync_tristate $CONFIG_SCSI_ACARD $tmpvar_dep]; set CONFIG_SCSI_ACARD [expr $CONFIG_SCSI_ACARD&15]}
	global CONFIG_SCSI_AHA152X
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_AHA152X [sync_tristate $CONFIG_SCSI_AHA152X $tmpvar_dep]; set CONFIG_SCSI_AHA152X [expr $CONFIG_SCSI_AHA152X&15]}
	global CONFIG_SCSI_AHA1542
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_AHA1542 [sync_tristate $CONFIG_SCSI_AHA1542 $tmpvar_dep]; set CONFIG_SCSI_AHA1542 [expr $CONFIG_SCSI_AHA1542&15]}
	global CONFIG_SCSI_AHA1740
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_AHA1740 [sync_tristate $CONFIG_SCSI_AHA1740 $tmpvar_dep]; set CONFIG_SCSI_AHA1740 [expr $CONFIG_SCSI_AHA1740&15]}
	global CONFIG_EXPERIMENTAL
	global CONFIG_SCSI_AACRAID
	if {($CONFIG_SCSI != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_PCI]]; set CONFIG_SCSI_AACRAID [sync_tristate $CONFIG_SCSI_AACRAID $tmpvar_dep]; set CONFIG_SCSI_AACRAID [expr $CONFIG_SCSI_AACRAID&15]}
	global CONFIG_SCSI_AIC7XXX_OLD
	global CONFIG_SCSI_AIC7XXX
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX_OLD != 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_AIC7XXX [sync_tristate $CONFIG_SCSI_AIC7XXX $tmpvar_dep]; set CONFIG_SCSI_AIC7XXX [expr $CONFIG_SCSI_AIC7XXX&15]}
	global CONFIG_AIC7XXX_CMDS_PER_DEVICE
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX_OLD != 1) && ($CONFIG_SCSI_AIC7XXX != 0)} then {validate_int CONFIG_AIC7XXX_CMDS_PER_DEVICE "$CONFIG_AIC7XXX_CMDS_PER_DEVICE" 253}
	global CONFIG_AIC7XXX_RESET_DELAY_MS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX_OLD != 1) && ($CONFIG_SCSI_AIC7XXX != 0)} then {validate_int CONFIG_AIC7XXX_RESET_DELAY_MS "$CONFIG_AIC7XXX_RESET_DELAY_MS" 15000}
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX_OLD != 1) && ($CONFIG_SCSI_AIC7XXX != 0)} then {
	set CONFIG_AIC7XXX_BUILD_FIRMWARE [expr $CONFIG_AIC7XXX_BUILD_FIRMWARE&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX != 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_AIC7XXX_OLD [sync_tristate $CONFIG_SCSI_AIC7XXX_OLD $tmpvar_dep]; set CONFIG_SCSI_AIC7XXX_OLD [expr $CONFIG_SCSI_AIC7XXX_OLD&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX != 1) && ($CONFIG_SCSI_AIC7XXX_OLD != 0)} then {
	set CONFIG_AIC7XXX_OLD_TCQ_ON_BY_DEFAULT [expr $CONFIG_AIC7XXX_OLD_TCQ_ON_BY_DEFAULT&15]}
	global CONFIG_AIC7XXX_OLD_CMDS_PER_DEVICE
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX != 1) && ($CONFIG_SCSI_AIC7XXX_OLD != 0)} then {validate_int CONFIG_AIC7XXX_OLD_CMDS_PER_DEVICE "$CONFIG_AIC7XXX_OLD_CMDS_PER_DEVICE" 8}
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX != 1) && ($CONFIG_SCSI_AIC7XXX_OLD != 0)} then {
	set CONFIG_AIC7XXX_OLD_PROC_STATS [expr $CONFIG_AIC7XXX_OLD_PROC_STATS&15]}
	global CONFIG_SCSI_DPT_I2O
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_DPT_I2O [sync_tristate $CONFIG_SCSI_DPT_I2O $tmpvar_dep]; set CONFIG_SCSI_DPT_I2O [expr $CONFIG_SCSI_DPT_I2O&15]}
	global CONFIG_SCSI_ADVANSYS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_ADVANSYS [sync_tristate $CONFIG_SCSI_ADVANSYS $tmpvar_dep]; set CONFIG_SCSI_ADVANSYS [expr $CONFIG_SCSI_ADVANSYS&15]}
	global CONFIG_SCSI_IN2000
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_IN2000 [sync_tristate $CONFIG_SCSI_IN2000 $tmpvar_dep]; set CONFIG_SCSI_IN2000 [expr $CONFIG_SCSI_IN2000&15]}
	global CONFIG_SCSI_AM53C974
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_PCI]]; set CONFIG_SCSI_AM53C974 [sync_tristate $CONFIG_SCSI_AM53C974 $tmpvar_dep]; set CONFIG_SCSI_AM53C974 [expr $CONFIG_SCSI_AM53C974&15]}
	global CONFIG_SCSI_MEGARAID
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_MEGARAID [sync_tristate $CONFIG_SCSI_MEGARAID $tmpvar_dep]; set CONFIG_SCSI_MEGARAID [expr $CONFIG_SCSI_MEGARAID&15]}
	global CONFIG_SCSI_BUSLOGIC
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_BUSLOGIC [sync_tristate $CONFIG_SCSI_BUSLOGIC $tmpvar_dep]; set CONFIG_SCSI_BUSLOGIC [expr $CONFIG_SCSI_BUSLOGIC&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_BUSLOGIC != 0)} then {
	set CONFIG_SCSI_OMIT_FLASHPOINT [expr $CONFIG_SCSI_OMIT_FLASHPOINT&15]}
	global CONFIG_SCSI_CPQFCTS
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_CPQFCTS [sync_tristate $CONFIG_SCSI_CPQFCTS $tmpvar_dep]; set CONFIG_SCSI_CPQFCTS [expr $CONFIG_SCSI_CPQFCTS&15]}
	global CONFIG_SCSI_DMX3191D
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_PCI]]; set CONFIG_SCSI_DMX3191D [sync_tristate $CONFIG_SCSI_DMX3191D $tmpvar_dep]; set CONFIG_SCSI_DMX3191D [expr $CONFIG_SCSI_DMX3191D&15]}
	global CONFIG_SCSI_DTC3280
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_DTC3280 [sync_tristate $CONFIG_SCSI_DTC3280 $tmpvar_dep]; set CONFIG_SCSI_DTC3280 [expr $CONFIG_SCSI_DTC3280&15]}
	global CONFIG_SCSI_EATA
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_EATA [sync_tristate $CONFIG_SCSI_EATA $tmpvar_dep]; set CONFIG_SCSI_EATA [expr $CONFIG_SCSI_EATA&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_EATA != 0)} then {
	set CONFIG_SCSI_EATA_TAGGED_QUEUE [expr $CONFIG_SCSI_EATA_TAGGED_QUEUE&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_EATA != 0)} then {
	set CONFIG_SCSI_EATA_LINKED_COMMANDS [expr $CONFIG_SCSI_EATA_LINKED_COMMANDS&15]}
	global CONFIG_SCSI_EATA_MAX_TAGS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_EATA != 0)} then {validate_int CONFIG_SCSI_EATA_MAX_TAGS "$CONFIG_SCSI_EATA_MAX_TAGS" 16}
	global CONFIG_SCSI_EATA_DMA
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_EATA_DMA [sync_tristate $CONFIG_SCSI_EATA_DMA $tmpvar_dep]; set CONFIG_SCSI_EATA_DMA [expr $CONFIG_SCSI_EATA_DMA&15]}
	global CONFIG_SCSI_EATA_PIO
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_EATA_PIO [sync_tristate $CONFIG_SCSI_EATA_PIO $tmpvar_dep]; set CONFIG_SCSI_EATA_PIO [expr $CONFIG_SCSI_EATA_PIO&15]}
	global CONFIG_SCSI_FUTURE_DOMAIN
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_FUTURE_DOMAIN [sync_tristate $CONFIG_SCSI_FUTURE_DOMAIN $tmpvar_dep]; set CONFIG_SCSI_FUTURE_DOMAIN [expr $CONFIG_SCSI_FUTURE_DOMAIN&15]}
	global CONFIG_MCA
	global CONFIG_SCSI_FD_MCS
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_FD_MCS [sync_tristate $CONFIG_SCSI_FD_MCS $tmpvar_dep]; set CONFIG_SCSI_FD_MCS [expr $CONFIG_SCSI_FD_MCS&15]}
	global CONFIG_SCSI_GDTH
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_GDTH [sync_tristate $CONFIG_SCSI_GDTH $tmpvar_dep]; set CONFIG_SCSI_GDTH [expr $CONFIG_SCSI_GDTH&15]}
	global CONFIG_SCSI_GENERIC_NCR5380
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_GENERIC_NCR5380 [sync_tristate $CONFIG_SCSI_GENERIC_NCR5380 $tmpvar_dep]; set CONFIG_SCSI_GENERIC_NCR5380 [expr $CONFIG_SCSI_GENERIC_NCR5380&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_GENERIC_NCR5380 != 0)} then {
	set CONFIG_SCSI_GENERIC_NCR53C400 [expr $CONFIG_SCSI_GENERIC_NCR53C400&15]}
	global tmpvar_12
	global CONFIG_SCSI_G_NCR5380_PORT
	if {$tmpvar_12 == "Port"} then {set CONFIG_SCSI_G_NCR5380_PORT 1} else {set CONFIG_SCSI_G_NCR5380_PORT 0}
	global CONFIG_SCSI_G_NCR5380_MEM
	if {$tmpvar_12 == "Memory"} then {set CONFIG_SCSI_G_NCR5380_MEM 1} else {set CONFIG_SCSI_G_NCR5380_MEM 0}
	global CONFIG_SCSI_IBMMCA
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_IBMMCA [sync_tristate $CONFIG_SCSI_IBMMCA $tmpvar_dep]; set CONFIG_SCSI_IBMMCA [expr $CONFIG_SCSI_IBMMCA&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI_IBMMCA != 0)} then {
	set CONFIG_IBMMCA_SCSI_ORDER_STANDARD [expr $CONFIG_IBMMCA_SCSI_ORDER_STANDARD&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI_IBMMCA != 0)} then {
	set CONFIG_IBMMCA_SCSI_DEV_RESET [expr $CONFIG_IBMMCA_SCSI_DEV_RESET&15]}
	global CONFIG_SCSI_INITIO
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_PCI]]; set CONFIG_SCSI_INITIO [sync_tristate $CONFIG_SCSI_INITIO $tmpvar_dep]; set CONFIG_SCSI_INITIO [expr $CONFIG_SCSI_INITIO&15]}
	global CONFIG_SCSI_INIA100
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_PCI]]; set CONFIG_SCSI_INIA100 [sync_tristate $CONFIG_SCSI_INIA100 $tmpvar_dep]; set CONFIG_SCSI_INIA100 [expr $CONFIG_SCSI_INIA100&15]}
	global CONFIG_PARPORT
	global CONFIG_SCSI_PPA
	if {($CONFIG_SCSI != 0) && ($CONFIG_PARPORT != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_PARPORT]]; set CONFIG_SCSI_PPA [sync_tristate $CONFIG_SCSI_PPA $tmpvar_dep]; set CONFIG_SCSI_PPA [expr $CONFIG_SCSI_PPA&15]}
	global CONFIG_SCSI_IMM
	if {($CONFIG_SCSI != 0) && ($CONFIG_PARPORT != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_PARPORT]]; set CONFIG_SCSI_IMM [sync_tristate $CONFIG_SCSI_IMM $tmpvar_dep]; set CONFIG_SCSI_IMM [expr $CONFIG_SCSI_IMM&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_PARPORT != 0) && ($CONFIG_SCSI_PPA != 0 || $CONFIG_SCSI_IMM != 0)} then {
	set CONFIG_SCSI_IZIP_EPP16 [expr $CONFIG_SCSI_IZIP_EPP16&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_PARPORT != 0) && ($CONFIG_SCSI_PPA != 0 || $CONFIG_SCSI_IMM != 0)} then {
	set CONFIG_SCSI_IZIP_SLOW_CTR [expr $CONFIG_SCSI_IZIP_SLOW_CTR&15]}
	global CONFIG_SCSI_NCR53C406A
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_NCR53C406A [sync_tristate $CONFIG_SCSI_NCR53C406A $tmpvar_dep]; set CONFIG_SCSI_NCR53C406A [expr $CONFIG_SCSI_NCR53C406A&15]}
	global CONFIG_SCSI_NCR_D700
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_NCR_D700 [sync_tristate $CONFIG_SCSI_NCR_D700 $tmpvar_dep]; set CONFIG_SCSI_NCR_D700 [expr $CONFIG_SCSI_NCR_D700&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI_NCR_D700 != 0)} then {	global CONSTANT_Y
set CONFIG_53C700_IO_MAPPED $CONSTANT_Y }
	global CONFIG_SCSI_NCR53C7xx
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_PCI]]; set CONFIG_SCSI_NCR53C7xx [sync_tristate $CONFIG_SCSI_NCR53C7xx $tmpvar_dep]; set CONFIG_SCSI_NCR53C7xx [expr $CONFIG_SCSI_NCR53C7xx&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_NCR53C7xx != 0)} then {
	set CONFIG_SCSI_NCR53C7xx_sync [expr $CONFIG_SCSI_NCR53C7xx_sync&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_NCR53C7xx != 0)} then {
	set CONFIG_SCSI_NCR53C7xx_FAST [expr $CONFIG_SCSI_NCR53C7xx_FAST&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_NCR53C7xx != 0)} then {
	set CONFIG_SCSI_NCR53C7xx_DISCONNECT [expr $CONFIG_SCSI_NCR53C7xx_DISCONNECT&15]}
	global CONFIG_SCSI_SYM53C8XX_2
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_SYM53C8XX_2 [sync_tristate $CONFIG_SCSI_SYM53C8XX_2 $tmpvar_dep]; set CONFIG_SCSI_SYM53C8XX_2 [expr $CONFIG_SCSI_SYM53C8XX_2&15]}
	global CONFIG_SCSI_SYM53C8XX_DMA_ADDRESSING_MODE
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI_SYM53C8XX_2 != 0)} then {validate_int CONFIG_SCSI_SYM53C8XX_DMA_ADDRESSING_MODE "$CONFIG_SCSI_SYM53C8XX_DMA_ADDRESSING_MODE" 1}
	global CONFIG_SCSI_SYM53C8XX_DEFAULT_TAGS
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI_SYM53C8XX_2 != 0)} then {validate_int CONFIG_SCSI_SYM53C8XX_DEFAULT_TAGS "$CONFIG_SCSI_SYM53C8XX_DEFAULT_TAGS" 16}
	global CONFIG_SCSI_SYM53C8XX_MAX_TAGS
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI_SYM53C8XX_2 != 0)} then {validate_int CONFIG_SCSI_SYM53C8XX_MAX_TAGS "$CONFIG_SCSI_SYM53C8XX_MAX_TAGS" 64}
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI_SYM53C8XX_2 != 0)} then {
	set CONFIG_SCSI_SYM53C8XX_IOMAPPED [expr $CONFIG_SCSI_SYM53C8XX_IOMAPPED&15]}
	global CONFIG_SCSI_NCR53C8XX
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_NCR53C8XX [sync_tristate $CONFIG_SCSI_NCR53C8XX $tmpvar_dep]; set CONFIG_SCSI_NCR53C8XX [expr $CONFIG_SCSI_NCR53C8XX&15]}
	global CONFIG_SCSI_SYM53C8XX
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_SYM53C8XX [sync_tristate $CONFIG_SCSI_SYM53C8XX $tmpvar_dep]; set CONFIG_SCSI_SYM53C8XX [expr $CONFIG_SCSI_SYM53C8XX&15]}
	global CONFIG_SCSI_NCR53C8XX_DEFAULT_TAGS
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0)} then {validate_int CONFIG_SCSI_NCR53C8XX_DEFAULT_TAGS "$CONFIG_SCSI_NCR53C8XX_DEFAULT_TAGS" 8}
	global CONFIG_SCSI_NCR53C8XX_MAX_TAGS
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0)} then {validate_int CONFIG_SCSI_NCR53C8XX_MAX_TAGS "$CONFIG_SCSI_NCR53C8XX_MAX_TAGS" 32}
	global CONFIG_SCSI_NCR53C8XX_SYNC
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0)} then {validate_int CONFIG_SCSI_NCR53C8XX_SYNC "$CONFIG_SCSI_NCR53C8XX_SYNC" 20}
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0)} then {
	set CONFIG_SCSI_NCR53C8XX_PROFILE [expr $CONFIG_SCSI_NCR53C8XX_PROFILE&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0)} then {
	set CONFIG_SCSI_NCR53C8XX_IOMAPPED [expr $CONFIG_SCSI_NCR53C8XX_IOMAPPED&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0) && ($CONFIG_SCSI_SYM53C8XX != 0)} then {
	set CONFIG_SCSI_NCR53C8XX_PQS_PDS [expr $CONFIG_SCSI_NCR53C8XX_PQS_PDS&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0) && ($CONFIG_SCSI_NCR53C8XX_DEFAULT_TAGS == "0")} then {
	set CONFIG_SCSI_NCR53C8XX_NO_DISCONNECT [expr $CONFIG_SCSI_NCR53C8XX_NO_DISCONNECT&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_SCSI_NCR53C8XX_SYMBIOS_COMPAT [expr $CONFIG_SCSI_NCR53C8XX_SYMBIOS_COMPAT&15]}
	global CONFIG_SCSI_MCA_53C9X
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_MCA_53C9X [sync_tristate $CONFIG_SCSI_MCA_53C9X $tmpvar_dep]; set CONFIG_SCSI_MCA_53C9X [expr $CONFIG_SCSI_MCA_53C9X&15]}
	global CONFIG_SCSI_PAS16
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_PAS16 [sync_tristate $CONFIG_SCSI_PAS16 $tmpvar_dep]; set CONFIG_SCSI_PAS16 [expr $CONFIG_SCSI_PAS16&15]}
	global CONFIG_SCSI_PCI2000
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_PCI2000 [sync_tristate $CONFIG_SCSI_PCI2000 $tmpvar_dep]; set CONFIG_SCSI_PCI2000 [expr $CONFIG_SCSI_PCI2000&15]}
	global CONFIG_SCSI_PCI2220I
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_PCI2220I [sync_tristate $CONFIG_SCSI_PCI2220I $tmpvar_dep]; set CONFIG_SCSI_PCI2220I [expr $CONFIG_SCSI_PCI2220I&15]}
	global CONFIG_SCSI_PSI240I
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_PSI240I [sync_tristate $CONFIG_SCSI_PSI240I $tmpvar_dep]; set CONFIG_SCSI_PSI240I [expr $CONFIG_SCSI_PSI240I&15]}
	global CONFIG_SCSI_QLOGIC_FAS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_QLOGIC_FAS [sync_tristate $CONFIG_SCSI_QLOGIC_FAS $tmpvar_dep]; set CONFIG_SCSI_QLOGIC_FAS [expr $CONFIG_SCSI_QLOGIC_FAS&15]}
	global CONFIG_SCSI_QLOGIC_ISP
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_QLOGIC_ISP [sync_tristate $CONFIG_SCSI_QLOGIC_ISP $tmpvar_dep]; set CONFIG_SCSI_QLOGIC_ISP [expr $CONFIG_SCSI_QLOGIC_ISP&15]}
	global CONFIG_SCSI_QLOGIC_FC
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_QLOGIC_FC [sync_tristate $CONFIG_SCSI_QLOGIC_FC $tmpvar_dep]; set CONFIG_SCSI_QLOGIC_FC [expr $CONFIG_SCSI_QLOGIC_FC&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI_QLOGIC_FC != 0)} then {
	set CONFIG_SCSI_QLOGIC_FC_FIRMWARE [expr $CONFIG_SCSI_QLOGIC_FC_FIRMWARE&15]}
	global CONFIG_SCSI_QLOGIC_1280
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_QLOGIC_1280 [sync_tristate $CONFIG_SCSI_QLOGIC_1280 $tmpvar_dep]; set CONFIG_SCSI_QLOGIC_1280 [expr $CONFIG_SCSI_QLOGIC_1280&15]}
	global CONFIG_SCSI_SIM710
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_SIM710 [sync_tristate $CONFIG_SCSI_SIM710 $tmpvar_dep]; set CONFIG_SCSI_SIM710 [expr $CONFIG_SCSI_SIM710&15]}
	global CONFIG_SCSI_SYM53C416
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_SYM53C416 [sync_tristate $CONFIG_SCSI_SYM53C416 $tmpvar_dep]; set CONFIG_SCSI_SYM53C416 [expr $CONFIG_SCSI_SYM53C416&15]}
	global CONFIG_SCSI_DC390T
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_DC390T [sync_tristate $CONFIG_SCSI_DC390T $tmpvar_dep]; set CONFIG_SCSI_DC390T [expr $CONFIG_SCSI_DC390T&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI_DC390T != 0)} then {
	set CONFIG_SCSI_DC390T_NOGENSUPP [expr $CONFIG_SCSI_DC390T_NOGENSUPP&15]}
	global CONFIG_SCSI_T128
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_T128 [sync_tristate $CONFIG_SCSI_T128 $tmpvar_dep]; set CONFIG_SCSI_T128 [expr $CONFIG_SCSI_T128&15]}
	global CONFIG_SCSI_U14_34F
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_U14_34F [sync_tristate $CONFIG_SCSI_U14_34F $tmpvar_dep]; set CONFIG_SCSI_U14_34F [expr $CONFIG_SCSI_U14_34F&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_U14_34F != 0)} then {
	set CONFIG_SCSI_U14_34F_LINKED_COMMANDS [expr $CONFIG_SCSI_U14_34F_LINKED_COMMANDS&15]}
	global CONFIG_SCSI_U14_34F_MAX_TAGS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_U14_34F != 0)} then {validate_int CONFIG_SCSI_U14_34F_MAX_TAGS "$CONFIG_SCSI_U14_34F_MAX_TAGS" 8}
	global CONFIG_SCSI_DEBUG
	if {($CONFIG_SCSI != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI]]; set CONFIG_SCSI_DEBUG [sync_tristate $CONFIG_SCSI_DEBUG $tmpvar_dep]; set CONFIG_SCSI_DEBUG [expr $CONFIG_SCSI_DEBUG&15]}
}


proc menu23 {w title} {
	set oldFocus [focus]
	catch {focus .menu21}
	catch {destroy $w; unregister_active 23}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 23]]
	message $w.m -width 400 -aspect 300 -text \
		"PCMCIA SCSI adapter support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "PCMCIA SCSI adapter support" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 23; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 23; catch {destroy .menu21}; unregister_active 21; menu24 .menu24 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 23"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 23; menu22 .menu22 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 23; menu22 .menu22 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 23 0 "PCMCIA SCSI adapter support" CONFIG_SCSI_PCMCIA
	dep_tristate $w.config.f 23 1 "  Adaptec AHA152X PCMCIA support" CONFIG_PCMCIA_AHA152X
	dep_tristate $w.config.f 23 2 "  Future Domain PCMCIA support" CONFIG_PCMCIA_FDOMAIN
	dep_tristate $w.config.f 23 3 "  NinjaSCSI-3 / NinjaSCSI-32Bi (16bit) PCMCIA support" CONFIG_PCMCIA_NINJA_SCSI
	dep_tristate $w.config.f 23 4 "  Qlogic PCMCIA support" CONFIG_PCMCIA_QLOGIC



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu21] == 0} then {menu21 .menu21 "SCSI support"}
	set winx [expr [winfo x .menu21]+30]; set winy [expr [winfo y .menu21]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu23 {} {
	global CONFIG_SCSI
	global CONFIG_HOTPLUG
	global CONFIG_PCMCIA
	global CONFIG_SCSI_PCMCIA
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0)} then {
	configure_entry .menu23.config.f.x0 normal {n l y}} else {configure_entry .menu23.config.f.x0 disabled {y n l}}
	global CONFIG_MODULES
	global CONFIG_PCMCIA_AHA152X
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_SCSI_PCMCIA == 1)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M]];set CONFIG_PCMCIA_AHA152X [sync_tristate $CONFIG_PCMCIA_AHA152X $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu23.config.f.x1 disabled {y}} else {configure_entry .menu23.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu23.config.f.x1 disabled {m}} else {configure_entry .menu23.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu23.config.f.x1 normal {m}} else {configure_entry .menu23.config.f.x1 disabled {m}}; configure_entry .menu23.config.f.x1 normal {n l}} else {configure_entry .menu23.config.f.x1 disabled {y n m l}}
	global CONFIG_PCMCIA_FDOMAIN
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_SCSI_PCMCIA == 1)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M]];set CONFIG_PCMCIA_FDOMAIN [sync_tristate $CONFIG_PCMCIA_FDOMAIN $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu23.config.f.x2 disabled {y}} else {configure_entry .menu23.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu23.config.f.x2 disabled {m}} else {configure_entry .menu23.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu23.config.f.x2 normal {m}} else {configure_entry .menu23.config.f.x2 disabled {m}}; configure_entry .menu23.config.f.x2 normal {n l}} else {configure_entry .menu23.config.f.x2 disabled {y n m l}}
	global CONFIG_PCMCIA_NINJA_SCSI
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_SCSI_PCMCIA == 1)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M]];set CONFIG_PCMCIA_NINJA_SCSI [sync_tristate $CONFIG_PCMCIA_NINJA_SCSI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu23.config.f.x3 disabled {y}} else {configure_entry .menu23.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu23.config.f.x3 disabled {m}} else {configure_entry .menu23.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu23.config.f.x3 normal {m}} else {configure_entry .menu23.config.f.x3 disabled {m}}; configure_entry .menu23.config.f.x3 normal {n l}} else {configure_entry .menu23.config.f.x3 disabled {y n m l}}
	global CONFIG_PCMCIA_QLOGIC
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_SCSI_PCMCIA == 1)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M]];set CONFIG_PCMCIA_QLOGIC [sync_tristate $CONFIG_PCMCIA_QLOGIC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu23.config.f.x4 disabled {y}} else {configure_entry .menu23.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu23.config.f.x4 disabled {m}} else {configure_entry .menu23.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu23.config.f.x4 normal {m}} else {configure_entry .menu23.config.f.x4 disabled {m}}; configure_entry .menu23.config.f.x4 normal {n l}} else {configure_entry .menu23.config.f.x4 disabled {y n m l}}
}


proc update_define_menu23 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_PCMCIA_SCSICARD
	global CONFIG_SCSI_PCMCIA
set CONFIG_SCSI_PCMCIA [expr $CONFIG_SCSI_PCMCIA|16]
	global CONFIG_SCSI
	global CONFIG_HOTPLUG
	global CONFIG_PCMCIA
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0)} then {
	set CONFIG_SCSI_PCMCIA [expr $CONFIG_SCSI_PCMCIA&15]}
	global CONFIG_PCMCIA_AHA152X
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_SCSI_PCMCIA == 1)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M]]; set CONFIG_PCMCIA_AHA152X [sync_tristate $CONFIG_PCMCIA_AHA152X $tmpvar_dep]; set CONFIG_PCMCIA_AHA152X [expr $CONFIG_PCMCIA_AHA152X&15]}
	global CONFIG_PCMCIA_FDOMAIN
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_SCSI_PCMCIA == 1)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M]]; set CONFIG_PCMCIA_FDOMAIN [sync_tristate $CONFIG_PCMCIA_FDOMAIN $tmpvar_dep]; set CONFIG_PCMCIA_FDOMAIN [expr $CONFIG_PCMCIA_FDOMAIN&15]}
	global CONFIG_PCMCIA_NINJA_SCSI
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_SCSI_PCMCIA == 1)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M]]; set CONFIG_PCMCIA_NINJA_SCSI [sync_tristate $CONFIG_PCMCIA_NINJA_SCSI $tmpvar_dep]; set CONFIG_PCMCIA_NINJA_SCSI [expr $CONFIG_PCMCIA_NINJA_SCSI&15]}
	global CONFIG_PCMCIA_QLOGIC
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_SCSI_PCMCIA == 1)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M]]; set CONFIG_PCMCIA_QLOGIC [sync_tristate $CONFIG_PCMCIA_QLOGIC $tmpvar_dep]; set CONFIG_PCMCIA_QLOGIC [expr $CONFIG_PCMCIA_QLOGIC&15]}
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_PCMCIA_QLOGIC == 1 || $CONFIG_PCMCIA_AHA152X == 1 || $CONFIG_PCMCIA_FDOMAIN == 1 || $CONFIG_PCMCIA_NINJA_SCSI == 1)} then {	global CONSTANT_Y
set CONFIG_PCMCIA_SCSICARD $CONSTANT_Y }
}


menu_option menu24 24 "IEEE 1394 (FireWire) support (EXPERIMENTAL)"
proc menu24 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 24}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 24]]
	message $w.m -width 400 -aspect 300 -text \
		"IEEE 1394 (FireWire) support (EXPERIMENTAL)"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "IEEE 1394 (FireWire) support (EXPERIMENTAL)" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 24; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 24; menu25 .menu25 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 24"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 24; menu23 .menu23 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 24; menu23 .menu23 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 24 0 "IEEE 1394 (FireWire) support (EXPERIMENTAL)" CONFIG_IEEE1394
	comment $w.config.f 24 1 "Device Drivers"
	dep_tristate $w.config.f 24 2 "  Texas Instruments PCILynx support" CONFIG_IEEE1394_PCILYNX
	bool $w.config.f 24 3 "    Use PCILynx local RAM" CONFIG_IEEE1394_PCILYNX_LOCALRAM
	bool $w.config.f 24 4 "    Support for non-IEEE1394 local ports" CONFIG_IEEE1394_PCILYNX_PORTS
	dep_tristate $w.config.f 24 5 "  OHCI-1394 support" CONFIG_IEEE1394_OHCI1394
	comment $w.config.f 24 6 "Protocol Drivers"
	dep_tristate $w.config.f 24 7 "  OHCI-1394 Video support" CONFIG_IEEE1394_VIDEO1394
	dep_tristate $w.config.f 24 8 "  SBP-2 support (Harddisks etc.)" CONFIG_IEEE1394_SBP2
	dep_tristate $w.config.f 24 9 "  Raw IEEE1394 I/O support" CONFIG_IEEE1394_RAWIO
	bool $w.config.f 24 10 "Excessive debugging output" CONFIG_IEEE1394_VERBOSEDEBUG



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu24 {} {
	global CONFIG_MODULES
	global CONFIG_PCI
	global CONFIG_EXPERIMENTAL
	global CONFIG_IEEE1394
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_IEEE1394 [sync_tristate $CONFIG_IEEE1394 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu24.config.f.x0 disabled {y}} else {configure_entry .menu24.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu24.config.f.x0 disabled {m}} else {configure_entry .menu24.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu24.config.f.x0 normal {m}} else {configure_entry .menu24.config.f.x0 disabled {m}}; configure_entry .menu24.config.f.x0 normal {n l}} else {configure_entry .menu24.config.f.x0 disabled {y n m l}}
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0)} then {configure_entry .menu24.config.f.x1 normal {m}} else {configure_entry .menu24.config.f.x1 disabled {m}}
	global CONFIG_IEEE1394_PCILYNX
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_IEEE1394 == 1 || $CONFIG_IEEE1394 == 2 || $CONFIG_IEEE1394 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IEEE1394]];set CONFIG_IEEE1394_PCILYNX [sync_tristate $CONFIG_IEEE1394_PCILYNX $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu24.config.f.x2 disabled {y}} else {configure_entry .menu24.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu24.config.f.x2 disabled {m}} else {configure_entry .menu24.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu24.config.f.x2 normal {m}} else {configure_entry .menu24.config.f.x2 disabled {m}}; configure_entry .menu24.config.f.x2 normal {n l}} else {configure_entry .menu24.config.f.x2 disabled {y n m l}}
	global CONFIG_IEEE1394_PCILYNX_LOCALRAM
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_IEEE1394_PCILYNX != 0)} then {
	configure_entry .menu24.config.f.x3 normal {n l y}} else {configure_entry .menu24.config.f.x3 disabled {y n l}}
	global CONFIG_IEEE1394_PCILYNX_PORTS
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_IEEE1394_PCILYNX != 0)} then {
	configure_entry .menu24.config.f.x4 normal {n l y}} else {configure_entry .menu24.config.f.x4 disabled {y n l}}
	global CONFIG_IEEE1394_OHCI1394
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_IEEE1394 == 1 || $CONFIG_IEEE1394 == 2 || $CONFIG_IEEE1394 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IEEE1394]];set CONFIG_IEEE1394_OHCI1394 [sync_tristate $CONFIG_IEEE1394_OHCI1394 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu24.config.f.x5 disabled {y}} else {configure_entry .menu24.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu24.config.f.x5 disabled {m}} else {configure_entry .menu24.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu24.config.f.x5 normal {m}} else {configure_entry .menu24.config.f.x5 disabled {m}}; configure_entry .menu24.config.f.x5 normal {n l}} else {configure_entry .menu24.config.f.x5 disabled {y n m l}}
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0)} then {configure_entry .menu24.config.f.x6 normal {m}} else {configure_entry .menu24.config.f.x6 disabled {m}}
	global CONFIG_IEEE1394_VIDEO1394
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_IEEE1394_OHCI1394 == 1 || $CONFIG_IEEE1394_OHCI1394 == 2 || $CONFIG_IEEE1394_OHCI1394 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IEEE1394_OHCI1394]];set CONFIG_IEEE1394_VIDEO1394 [sync_tristate $CONFIG_IEEE1394_VIDEO1394 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu24.config.f.x7 disabled {y}} else {configure_entry .menu24.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu24.config.f.x7 disabled {m}} else {configure_entry .menu24.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu24.config.f.x7 normal {m}} else {configure_entry .menu24.config.f.x7 disabled {m}}; configure_entry .menu24.config.f.x7 normal {n l}} else {configure_entry .menu24.config.f.x7 disabled {y n m l}}
	global CONFIG_SCSI
	global CONFIG_IEEE1394_SBP2
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_IEEE1394 == 1 || $CONFIG_IEEE1394 == 2 || $CONFIG_IEEE1394 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_IEEE1394]];set CONFIG_IEEE1394_SBP2 [sync_tristate $CONFIG_IEEE1394_SBP2 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu24.config.f.x8 disabled {y}} else {configure_entry .menu24.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu24.config.f.x8 disabled {m}} else {configure_entry .menu24.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu24.config.f.x8 normal {m}} else {configure_entry .menu24.config.f.x8 disabled {m}}; configure_entry .menu24.config.f.x8 normal {n l}} else {configure_entry .menu24.config.f.x8 disabled {y n m l}}
	global CONFIG_IEEE1394_RAWIO
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_IEEE1394 == 1 || $CONFIG_IEEE1394 == 2 || $CONFIG_IEEE1394 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IEEE1394]];set CONFIG_IEEE1394_RAWIO [sync_tristate $CONFIG_IEEE1394_RAWIO $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu24.config.f.x9 disabled {y}} else {configure_entry .menu24.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu24.config.f.x9 disabled {m}} else {configure_entry .menu24.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu24.config.f.x9 normal {m}} else {configure_entry .menu24.config.f.x9 disabled {m}}; configure_entry .menu24.config.f.x9 normal {n l}} else {configure_entry .menu24.config.f.x9 disabled {y n m l}}
	global CONFIG_IEEE1394_VERBOSEDEBUG
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0)} then {
	configure_entry .menu24.config.f.x10 normal {n l y}} else {configure_entry .menu24.config.f.x10 disabled {y n l}}
}


proc update_define_menu24 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_IEEE1394_PCILYNX_LOCALRAM
set CONFIG_IEEE1394_PCILYNX_LOCALRAM [expr $CONFIG_IEEE1394_PCILYNX_LOCALRAM|16]
	global CONFIG_IEEE1394_PCILYNX_PORTS
set CONFIG_IEEE1394_PCILYNX_PORTS [expr $CONFIG_IEEE1394_PCILYNX_PORTS|16]
	global CONFIG_IEEE1394_VERBOSEDEBUG
set CONFIG_IEEE1394_VERBOSEDEBUG [expr $CONFIG_IEEE1394_VERBOSEDEBUG|16]
	global CONFIG_PCI
	global CONFIG_EXPERIMENTAL
	global CONFIG_IEEE1394
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_IEEE1394 [sync_tristate $CONFIG_IEEE1394 $tmpvar_dep]; set CONFIG_IEEE1394 [expr $CONFIG_IEEE1394&15]}
	global CONFIG_IEEE1394_PCILYNX
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_IEEE1394 == 1 || $CONFIG_IEEE1394 == 2 || $CONFIG_IEEE1394 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IEEE1394]]; set CONFIG_IEEE1394_PCILYNX [sync_tristate $CONFIG_IEEE1394_PCILYNX $tmpvar_dep]; set CONFIG_IEEE1394_PCILYNX [expr $CONFIG_IEEE1394_PCILYNX&15]}
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_IEEE1394_PCILYNX != 0)} then {
	set CONFIG_IEEE1394_PCILYNX_LOCALRAM [expr $CONFIG_IEEE1394_PCILYNX_LOCALRAM&15]}
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_IEEE1394_PCILYNX != 0)} then {
	set CONFIG_IEEE1394_PCILYNX_PORTS [expr $CONFIG_IEEE1394_PCILYNX_PORTS&15]}
	global CONFIG_IEEE1394_OHCI1394
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_IEEE1394 == 1 || $CONFIG_IEEE1394 == 2 || $CONFIG_IEEE1394 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IEEE1394]]; set CONFIG_IEEE1394_OHCI1394 [sync_tristate $CONFIG_IEEE1394_OHCI1394 $tmpvar_dep]; set CONFIG_IEEE1394_OHCI1394 [expr $CONFIG_IEEE1394_OHCI1394&15]}
	global CONFIG_IEEE1394_VIDEO1394
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_IEEE1394_OHCI1394 == 1 || $CONFIG_IEEE1394_OHCI1394 == 2 || $CONFIG_IEEE1394_OHCI1394 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IEEE1394_OHCI1394]]; set CONFIG_IEEE1394_VIDEO1394 [sync_tristate $CONFIG_IEEE1394_VIDEO1394 $tmpvar_dep]; set CONFIG_IEEE1394_VIDEO1394 [expr $CONFIG_IEEE1394_VIDEO1394&15]}
	global CONFIG_SCSI
	global CONFIG_IEEE1394_SBP2
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_IEEE1394 == 1 || $CONFIG_IEEE1394 == 2 || $CONFIG_IEEE1394 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_IEEE1394]]; set CONFIG_IEEE1394_SBP2 [sync_tristate $CONFIG_IEEE1394_SBP2 $tmpvar_dep]; set CONFIG_IEEE1394_SBP2 [expr $CONFIG_IEEE1394_SBP2&15]}
	global CONFIG_IEEE1394_RAWIO
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_IEEE1394 == 1 || $CONFIG_IEEE1394 == 2 || $CONFIG_IEEE1394 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IEEE1394]]; set CONFIG_IEEE1394_RAWIO [sync_tristate $CONFIG_IEEE1394_RAWIO $tmpvar_dep]; set CONFIG_IEEE1394_RAWIO [expr $CONFIG_IEEE1394_RAWIO&15]}
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0)} then {
	set CONFIG_IEEE1394_VERBOSEDEBUG [expr $CONFIG_IEEE1394_VERBOSEDEBUG&15]}
}


menu_option menu25 25 "I2O device support"
proc menu25 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 25}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 25]]
	message $w.m -width 400 -aspect 300 -text \
		"I2O device support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "I2O device support" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 25; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 25; menu26 .menu26 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 25"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 25; menu24 .menu24 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 25; menu24 .menu24 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 25 0 "I2O support" CONFIG_I2O
	dep_tristate $w.config.f 25 1 "  I2O PCI support" CONFIG_I2O_PCI
	dep_tristate $w.config.f 25 2 "  I2O Block OSM" CONFIG_I2O_BLOCK
	dep_tristate $w.config.f 25 3 "  I2O LAN OSM" CONFIG_I2O_LAN
	dep_tristate $w.config.f 25 4 "  I2O SCSI OSM" CONFIG_I2O_SCSI
	dep_tristate $w.config.f 25 5 "  I2O /proc support" CONFIG_I2O_PROC



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu25 {} {
	global CONFIG_I2O
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu25.config.f.x0 normal {m}} else {configure_entry .menu25.config.f.x0 disabled {m}}
	global CONFIG_PCI
	global CONFIG_I2O_PCI
	if {($CONFIG_PCI == 1) && ($CONFIG_I2O == 1 || $CONFIG_I2O == 2 || $CONFIG_I2O == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2O]];set CONFIG_I2O_PCI [sync_tristate $CONFIG_I2O_PCI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu25.config.f.x1 disabled {y}} else {configure_entry .menu25.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu25.config.f.x1 disabled {m}} else {configure_entry .menu25.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu25.config.f.x1 normal {m}} else {configure_entry .menu25.config.f.x1 disabled {m}}; configure_entry .menu25.config.f.x1 normal {n l}} else {configure_entry .menu25.config.f.x1 disabled {y n m l}}
	global CONFIG_I2O_BLOCK
	if {($CONFIG_I2O == 1 || $CONFIG_I2O == 2 || $CONFIG_I2O == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2O]];set CONFIG_I2O_BLOCK [sync_tristate $CONFIG_I2O_BLOCK $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu25.config.f.x2 disabled {y}} else {configure_entry .menu25.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu25.config.f.x2 disabled {m}} else {configure_entry .menu25.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu25.config.f.x2 normal {m}} else {configure_entry .menu25.config.f.x2 disabled {m}}; configure_entry .menu25.config.f.x2 normal {n l}} else {configure_entry .menu25.config.f.x2 disabled {y n m l}}
	global CONFIG_NET
	global CONFIG_I2O_LAN
	if {($CONFIG_NET == 1) && ($CONFIG_I2O == 1 || $CONFIG_I2O == 2 || $CONFIG_I2O == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2O]];set CONFIG_I2O_LAN [sync_tristate $CONFIG_I2O_LAN $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu25.config.f.x3 disabled {y}} else {configure_entry .menu25.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu25.config.f.x3 disabled {m}} else {configure_entry .menu25.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu25.config.f.x3 normal {m}} else {configure_entry .menu25.config.f.x3 disabled {m}}; configure_entry .menu25.config.f.x3 normal {n l}} else {configure_entry .menu25.config.f.x3 disabled {y n m l}}
	global CONFIG_SCSI
	global CONFIG_I2O_SCSI
	if {($CONFIG_I2O == 1 || $CONFIG_I2O == 2 || $CONFIG_I2O == 4) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2O $CONFIG_SCSI]];set CONFIG_I2O_SCSI [sync_tristate $CONFIG_I2O_SCSI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu25.config.f.x4 disabled {y}} else {configure_entry .menu25.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu25.config.f.x4 disabled {m}} else {configure_entry .menu25.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu25.config.f.x4 normal {m}} else {configure_entry .menu25.config.f.x4 disabled {m}}; configure_entry .menu25.config.f.x4 normal {n l}} else {configure_entry .menu25.config.f.x4 disabled {y n m l}}
	global CONFIG_I2O_PROC
	if {($CONFIG_I2O == 1 || $CONFIG_I2O == 2 || $CONFIG_I2O == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2O]];set CONFIG_I2O_PROC [sync_tristate $CONFIG_I2O_PROC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu25.config.f.x5 disabled {y}} else {configure_entry .menu25.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu25.config.f.x5 disabled {m}} else {configure_entry .menu25.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu25.config.f.x5 normal {m}} else {configure_entry .menu25.config.f.x5 disabled {m}}; configure_entry .menu25.config.f.x5 normal {n l}} else {configure_entry .menu25.config.f.x5 disabled {y n m l}}
}


proc update_define_menu25 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_I2O

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_I2O == 2)} then {set CONFIG_I2O 1}}
	global CONFIG_PCI
	global CONFIG_I2O_PCI
	if {($CONFIG_PCI == 1) && ($CONFIG_I2O == 1 || $CONFIG_I2O == 2 || $CONFIG_I2O == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2O]]; set CONFIG_I2O_PCI [sync_tristate $CONFIG_I2O_PCI $tmpvar_dep]; set CONFIG_I2O_PCI [expr $CONFIG_I2O_PCI&15]}
	global CONFIG_I2O_BLOCK
	if {($CONFIG_I2O == 1 || $CONFIG_I2O == 2 || $CONFIG_I2O == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2O]]; set CONFIG_I2O_BLOCK [sync_tristate $CONFIG_I2O_BLOCK $tmpvar_dep]; set CONFIG_I2O_BLOCK [expr $CONFIG_I2O_BLOCK&15]}
	global CONFIG_NET
	global CONFIG_I2O_LAN
	if {($CONFIG_NET == 1) && ($CONFIG_I2O == 1 || $CONFIG_I2O == 2 || $CONFIG_I2O == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2O]]; set CONFIG_I2O_LAN [sync_tristate $CONFIG_I2O_LAN $tmpvar_dep]; set CONFIG_I2O_LAN [expr $CONFIG_I2O_LAN&15]}
	global CONFIG_SCSI
	global CONFIG_I2O_SCSI
	if {($CONFIG_I2O == 1 || $CONFIG_I2O == 2 || $CONFIG_I2O == 4) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2O $CONFIG_SCSI]]; set CONFIG_I2O_SCSI [sync_tristate $CONFIG_I2O_SCSI $tmpvar_dep]; set CONFIG_I2O_SCSI [expr $CONFIG_I2O_SCSI&15]}
	global CONFIG_I2O_PROC
	if {($CONFIG_I2O == 1 || $CONFIG_I2O == 2 || $CONFIG_I2O == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2O]]; set CONFIG_I2O_PROC [sync_tristate $CONFIG_I2O_PROC $tmpvar_dep]; set CONFIG_I2O_PROC [expr $CONFIG_I2O_PROC&15]}
}


menu_option menu26 26 "Network device support"
proc menu26 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 26}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 26]]
	message $w.m -width 400 -aspect 300 -text \
		"Network device support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Network device support" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 26; break"
	set nextscript "catch {focus $oldFocus}; menu27 .menu27 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 26"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 26; menu25 .menu25 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 26; menu25 .menu25 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 26 0 "Network device support" CONFIG_NETDEVICES
	submenu $w.config.f 26 1 "ARCnet devices" 27
	submenu $w.config.f 26 2 "Appletalk devices" 28
	tristate $w.config.f 26 3 "Dummy net driver support" CONFIG_DUMMY
	tristate $w.config.f 26 4 "Bonding driver support" CONFIG_BONDING
	tristate $w.config.f 26 5 "EQL (serial line load balancing) support" CONFIG_EQUALIZER
	tristate $w.config.f 26 6 "Universal TUN/TAP device driver support" CONFIG_TUN
	tristate $w.config.f 26 7 "Ethertap network tap (OBSOLETE)" CONFIG_ETHERTAP
	dep_tristate $w.config.f 26 8 "General Instruments Surfboard 1000" CONFIG_NET_SB1000
	submenu $w.config.f 26 9 "Ethernet (10 or 100Mbit)" 29
	submenu $w.config.f 26 10 "Ethernet (1000 Mbit)" 30
	bool $w.config.f 26 11 "FDDI driver support" CONFIG_FDDI
	tristate $w.config.f 26 12 "  Digital DEFEA and DEFPA adapter support" CONFIG_DEFXX
	dep_tristate $w.config.f 26 13 "  SysKonnect FDDI PCI support" CONFIG_SKFP
	bool $w.config.f 26 14 "HIPPI driver support (EXPERIMENTAL)" CONFIG_HIPPI
	dep_tristate $w.config.f 26 15 "  Essential RoadRunner HIPPI PCI adapter support" CONFIG_ROADRUNNER
	bool $w.config.f 26 16 "    Use large TX/RX rings" CONFIG_ROADRUNNER_LARGE_RINGS
	dep_tristate $w.config.f 26 17 "PLIP (parallel port) support" CONFIG_PLIP
	tristate $w.config.f 26 18 "PPP (point-to-point protocol) support" CONFIG_PPP
	dep_bool $w.config.f 26 19 "  PPP multilink support (EXPERIMENTAL)" CONFIG_PPP_MULTILINK
	dep_bool $w.config.f 26 20 "  PPP filtering" CONFIG_PPP_FILTER
	dep_tristate $w.config.f 26 21 "  PPP support for async serial ports" CONFIG_PPP_ASYNC
	dep_tristate $w.config.f 26 22 "  PPP support for sync tty ports" CONFIG_PPP_SYNC_TTY
	dep_tristate $w.config.f 26 23 "  PPP Deflate compression" CONFIG_PPP_DEFLATE
	dep_tristate $w.config.f 26 24 "  PPP BSD-Compress compression" CONFIG_PPP_BSDCOMP
	dep_tristate $w.config.f 26 25 "  PPP over Ethernet (EXPERIMENTAL)" CONFIG_PPPOE
	dep_tristate $w.config.f 26 26 "  PPP over ATM (EXPERIMENTAL)" CONFIG_PPPOATM
	tristate $w.config.f 26 27 "SLIP (serial line) support" CONFIG_SLIP
	bool $w.config.f 26 28 "  CSLIP compressed headers" CONFIG_SLIP_COMPRESSED
	bool $w.config.f 26 29 "  Keepalive and linefill" CONFIG_SLIP_SMART
	bool $w.config.f 26 30 "  Six bit SLIP encapsulation" CONFIG_SLIP_MODE_SLIP6
	submenu $w.config.f 26 31 "Wireless LAN (non-hamradio)" 31
	submenu $w.config.f 26 32 "Token Ring devices" 32
	bool $w.config.f 26 33 "Fibre Channel driver support" CONFIG_NET_FC
	dep_tristate $w.config.f 26 34 "  Interphase 5526 Tachyon chipset based adapter support" CONFIG_IPHASE5526
	dep_tristate $w.config.f 26 35 "Red Creek Hardware VPN (EXPERIMENTAL)" CONFIG_RCPCI
	tristate $w.config.f 26 36 "Traffic Shaper (EXPERIMENTAL)" CONFIG_SHAPER
	submenu $w.config.f 26 37 "Wan interfaces" 33
	submenu $w.config.f 26 38 "PCMCIA network device support" 34
	submenu $w.config.f 26 39 "ATM drivers" 35



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu26 {} {
	global CONFIG_NET
	global CONFIG_NETDEVICES
	if {($CONFIG_NET == 1)} then {
	configure_entry .menu26.config.f.x0 normal {n l y}} else {configure_entry .menu26.config.f.x0 disabled {y n l}}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {configure_entry .menu26.config.f.x1 normal {m}} else {configure_entry .menu26.config.f.x1 disabled {m}}
	global CONFIG_ATALK
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0)} then {configure_entry .menu26.config.f.x2 normal {m}} else {configure_entry .menu26.config.f.x2 disabled {m}}
	global CONFIG_MODULES
	global CONFIG_DUMMY
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu26.config.f.x3 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x3 normal {m}} else {configure_entry .menu26.config.f.x3 disabled {m}}; configure_entry .menu26.config.f.x3 normal {n l}} else {configure_entry .menu26.config.f.x3 disabled {y n m l}}
	global CONFIG_BONDING
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu26.config.f.x4 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x4 normal {m}} else {configure_entry .menu26.config.f.x4 disabled {m}}; configure_entry .menu26.config.f.x4 normal {n l}} else {configure_entry .menu26.config.f.x4 disabled {y n m l}}
	global CONFIG_EQUALIZER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu26.config.f.x5 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x5 normal {m}} else {configure_entry .menu26.config.f.x5 disabled {m}}; configure_entry .menu26.config.f.x5 normal {n l}} else {configure_entry .menu26.config.f.x5 disabled {y n m l}}
	global CONFIG_TUN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu26.config.f.x6 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x6 normal {m}} else {configure_entry .menu26.config.f.x6 disabled {m}}; configure_entry .menu26.config.f.x6 normal {n l}} else {configure_entry .menu26.config.f.x6 disabled {y n m l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_ETHERTAP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu26.config.f.x7 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x7 normal {m}} else {configure_entry .menu26.config.f.x7 disabled {m}}; configure_entry .menu26.config.f.x7 normal {n l}} else {configure_entry .menu26.config.f.x7 disabled {y n m l}}
	global CONFIG_ISAPNP
	global CONFIG_NET_SB1000
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ISAPNP == 1 || $CONFIG_ISAPNP == 2) && ($CONFIG_ISAPNP == 1 || $CONFIG_ISAPNP == 2 || $CONFIG_ISAPNP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISAPNP]];set CONFIG_NET_SB1000 [sync_tristate $CONFIG_NET_SB1000 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu26.config.f.x8 disabled {y}} else {configure_entry .menu26.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu26.config.f.x8 disabled {m}} else {configure_entry .menu26.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x8 normal {m}} else {configure_entry .menu26.config.f.x8 disabled {m}}; configure_entry .menu26.config.f.x8 normal {n l}} else {configure_entry .menu26.config.f.x8 disabled {y n m l}}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {configure_entry .menu26.config.f.x9 normal {m}} else {configure_entry .menu26.config.f.x9 disabled {m}}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {configure_entry .menu26.config.f.x10 normal {m}} else {configure_entry .menu26.config.f.x10 disabled {m}}
	global CONFIG_FDDI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu26.config.f.x11 normal {n l y}} else {configure_entry .menu26.config.f.x11 disabled {y n l}}
	global CONFIG_PCI
	global CONFIG_EISA
	global CONFIG_DEFXX
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_FDDI == 1) && ($CONFIG_PCI == 1 || $CONFIG_EISA == 1)} then {
	configure_entry .menu26.config.f.x12 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x12 normal {m}} else {configure_entry .menu26.config.f.x12 disabled {m}}; configure_entry .menu26.config.f.x12 normal {n l}} else {configure_entry .menu26.config.f.x12 disabled {y n m l}}
	global CONFIG_SKFP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_FDDI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_SKFP [sync_tristate $CONFIG_SKFP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu26.config.f.x13 disabled {y}} else {configure_entry .menu26.config.f.x13 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu26.config.f.x13 disabled {m}} else {configure_entry .menu26.config.f.x13 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x13 normal {m}} else {configure_entry .menu26.config.f.x13 disabled {m}}; configure_entry .menu26.config.f.x13 normal {n l}} else {configure_entry .menu26.config.f.x13 disabled {y n m l}}
	global CONFIG_INET
	global CONFIG_HIPPI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu26.config.f.x14 normal {n l y}} else {configure_entry .menu26.config.f.x14 disabled {y n l}}
	global CONFIG_ROADRUNNER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_INET == 1) && ($CONFIG_HIPPI == 1 && $CONFIG_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_ROADRUNNER [sync_tristate $CONFIG_ROADRUNNER $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu26.config.f.x15 disabled {y}} else {configure_entry .menu26.config.f.x15 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu26.config.f.x15 disabled {m}} else {configure_entry .menu26.config.f.x15 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x15 normal {m}} else {configure_entry .menu26.config.f.x15 disabled {m}}; configure_entry .menu26.config.f.x15 normal {n l}} else {configure_entry .menu26.config.f.x15 disabled {y n m l}}
	global CONFIG_ROADRUNNER_LARGE_RINGS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_INET == 1) && ($CONFIG_HIPPI == 1 && $CONFIG_PCI == 1) && ($CONFIG_ROADRUNNER != 0)} then {
	configure_entry .menu26.config.f.x16 normal {n l y}} else {configure_entry .menu26.config.f.x16 disabled {y n l}}
	global CONFIG_PARPORT
	global CONFIG_PLIP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT]];set CONFIG_PLIP [sync_tristate $CONFIG_PLIP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu26.config.f.x17 disabled {y}} else {configure_entry .menu26.config.f.x17 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu26.config.f.x17 disabled {m}} else {configure_entry .menu26.config.f.x17 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x17 normal {m}} else {configure_entry .menu26.config.f.x17 disabled {m}}; configure_entry .menu26.config.f.x17 normal {n l}} else {configure_entry .menu26.config.f.x17 disabled {y n m l}}
	global CONFIG_PPP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu26.config.f.x18 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x18 normal {m}} else {configure_entry .menu26.config.f.x18 disabled {m}}; configure_entry .menu26.config.f.x18 normal {n l}} else {configure_entry .menu26.config.f.x18 disabled {y n m l}}
	global CONFIG_PPP_MULTILINK
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_PPP_MULTILINK [sync_bool $CONFIG_PPP_MULTILINK $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu26.config.f.x19 disabled {y};} else {configure_entry .menu26.config.f.x19 normal {y};}; configure_entry .menu26.config.f.x19 normal {n l}} else {configure_entry .menu26.config.f.x19 disabled {y n l}}
	global CONFIG_FILTER
	global CONFIG_PPP_FILTER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_FILTER == 1 || $CONFIG_FILTER == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FILTER]];set CONFIG_PPP_FILTER [sync_bool $CONFIG_PPP_FILTER $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu26.config.f.x20 disabled {y};} else {configure_entry .menu26.config.f.x20 normal {y};}; configure_entry .menu26.config.f.x20 normal {n l}} else {configure_entry .menu26.config.f.x20 disabled {y n l}}
	global CONFIG_PPP_ASYNC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PPP]];set CONFIG_PPP_ASYNC [sync_tristate $CONFIG_PPP_ASYNC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu26.config.f.x21 disabled {y}} else {configure_entry .menu26.config.f.x21 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu26.config.f.x21 disabled {m}} else {configure_entry .menu26.config.f.x21 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x21 normal {m}} else {configure_entry .menu26.config.f.x21 disabled {m}}; configure_entry .menu26.config.f.x21 normal {n l}} else {configure_entry .menu26.config.f.x21 disabled {y n m l}}
	global CONFIG_PPP_SYNC_TTY
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PPP]];set CONFIG_PPP_SYNC_TTY [sync_tristate $CONFIG_PPP_SYNC_TTY $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu26.config.f.x22 disabled {y}} else {configure_entry .menu26.config.f.x22 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu26.config.f.x22 disabled {m}} else {configure_entry .menu26.config.f.x22 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x22 normal {m}} else {configure_entry .menu26.config.f.x22 disabled {m}}; configure_entry .menu26.config.f.x22 normal {n l}} else {configure_entry .menu26.config.f.x22 disabled {y n m l}}
	global CONFIG_PPP_DEFLATE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PPP]];set CONFIG_PPP_DEFLATE [sync_tristate $CONFIG_PPP_DEFLATE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu26.config.f.x23 disabled {y}} else {configure_entry .menu26.config.f.x23 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu26.config.f.x23 disabled {m}} else {configure_entry .menu26.config.f.x23 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x23 normal {m}} else {configure_entry .menu26.config.f.x23 disabled {m}}; configure_entry .menu26.config.f.x23 normal {n l}} else {configure_entry .menu26.config.f.x23 disabled {y n m l}}
	global CONFIG_PPP_BSDCOMP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PPP]];set CONFIG_PPP_BSDCOMP [sync_tristate $CONFIG_PPP_BSDCOMP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu26.config.f.x24 disabled {y}} else {configure_entry .menu26.config.f.x24 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu26.config.f.x24 disabled {m}} else {configure_entry .menu26.config.f.x24 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x24 normal {m}} else {configure_entry .menu26.config.f.x24 disabled {m}}; configure_entry .menu26.config.f.x24 normal {n l}} else {configure_entry .menu26.config.f.x24 disabled {y n m l}}
	global CONFIG_PPPOE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PPP]];set CONFIG_PPPOE [sync_tristate $CONFIG_PPPOE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu26.config.f.x25 disabled {y}} else {configure_entry .menu26.config.f.x25 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu26.config.f.x25 disabled {m}} else {configure_entry .menu26.config.f.x25 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x25 normal {m}} else {configure_entry .menu26.config.f.x25 disabled {m}}; configure_entry .menu26.config.f.x25 normal {n l}} else {configure_entry .menu26.config.f.x25 disabled {y n m l}}
	global CONFIG_ATM
	global CONFIG_PPPOATM
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_ATM != 0) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PPP]];set CONFIG_PPPOATM [sync_tristate $CONFIG_PPPOATM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu26.config.f.x26 disabled {y}} else {configure_entry .menu26.config.f.x26 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu26.config.f.x26 disabled {m}} else {configure_entry .menu26.config.f.x26 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x26 normal {m}} else {configure_entry .menu26.config.f.x26 disabled {m}}; configure_entry .menu26.config.f.x26 normal {n l}} else {configure_entry .menu26.config.f.x26 disabled {y n m l}}
	global CONFIG_SLIP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu26.config.f.x27 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x27 normal {m}} else {configure_entry .menu26.config.f.x27 disabled {m}}; configure_entry .menu26.config.f.x27 normal {n l}} else {configure_entry .menu26.config.f.x27 disabled {y n m l}}
	global CONFIG_SLIP_COMPRESSED
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {
	configure_entry .menu26.config.f.x28 normal {n l y}} else {configure_entry .menu26.config.f.x28 disabled {y n l}}
	global CONFIG_SLIP_SMART
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {
	configure_entry .menu26.config.f.x29 normal {n l y}} else {configure_entry .menu26.config.f.x29 disabled {y n l}}
	global CONFIG_SLIP_MODE_SLIP6
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {
	configure_entry .menu26.config.f.x30 normal {n l y}} else {configure_entry .menu26.config.f.x30 disabled {y n l}}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {configure_entry .menu26.config.f.x31 normal {m}} else {configure_entry .menu26.config.f.x31 disabled {m}}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {configure_entry .menu26.config.f.x32 normal {m}} else {configure_entry .menu26.config.f.x32 disabled {m}}
	global CONFIG_NET_FC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu26.config.f.x33 normal {n l y}} else {configure_entry .menu26.config.f.x33 disabled {y n l}}
	global CONFIG_SCSI
	global CONFIG_IPHASE5526
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_FC == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_PCI]];set CONFIG_IPHASE5526 [sync_tristate $CONFIG_IPHASE5526 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu26.config.f.x34 disabled {y}} else {configure_entry .menu26.config.f.x34 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu26.config.f.x34 disabled {m}} else {configure_entry .menu26.config.f.x34 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x34 normal {m}} else {configure_entry .menu26.config.f.x34 disabled {m}}; configure_entry .menu26.config.f.x34 normal {n l}} else {configure_entry .menu26.config.f.x34 disabled {y n m l}}
	global CONFIG_RCPCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_RCPCI [sync_tristate $CONFIG_RCPCI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu26.config.f.x35 disabled {y}} else {configure_entry .menu26.config.f.x35 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu26.config.f.x35 disabled {m}} else {configure_entry .menu26.config.f.x35 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x35 normal {m}} else {configure_entry .menu26.config.f.x35 disabled {m}}; configure_entry .menu26.config.f.x35 normal {n l}} else {configure_entry .menu26.config.f.x35 disabled {y n m l}}
	global CONFIG_SHAPER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu26.config.f.x36 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu26.config.f.x36 normal {m}} else {configure_entry .menu26.config.f.x36 disabled {m}}; configure_entry .menu26.config.f.x36 normal {n l}} else {configure_entry .menu26.config.f.x36 disabled {y n m l}}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {configure_entry .menu26.config.f.x37 normal {m}} else {configure_entry .menu26.config.f.x37 disabled {m}}
	global CONFIG_HOTPLUG
	global CONFIG_PCMCIA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0)} then {configure_entry .menu26.config.f.x38 normal {m}} else {configure_entry .menu26.config.f.x38 disabled {m}}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1)} then {configure_entry .menu26.config.f.x39 normal {m}} else {configure_entry .menu26.config.f.x39 disabled {m}}
}


proc update_define_menu26 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_DUMMY
	global CONFIG_BONDING
	global CONFIG_EQUALIZER
	global CONFIG_TUN
	global CONFIG_ETHERTAP
	global CONFIG_DEFXX
	global CONFIG_PPP
	global CONFIG_SLIP
	global CONFIG_SHAPER
	global CONFIG_NETDEVICES
set CONFIG_NETDEVICES [expr $CONFIG_NETDEVICES|16]
set CONFIG_DUMMY [expr $CONFIG_DUMMY|16]
set CONFIG_BONDING [expr $CONFIG_BONDING|16]
set CONFIG_EQUALIZER [expr $CONFIG_EQUALIZER|16]
set CONFIG_TUN [expr $CONFIG_TUN|16]
set CONFIG_ETHERTAP [expr $CONFIG_ETHERTAP|16]
	global CONFIG_FDDI
set CONFIG_FDDI [expr $CONFIG_FDDI|16]
set CONFIG_DEFXX [expr $CONFIG_DEFXX|16]
	global CONFIG_HIPPI
set CONFIG_HIPPI [expr $CONFIG_HIPPI|16]
	global CONFIG_ROADRUNNER_LARGE_RINGS
set CONFIG_ROADRUNNER_LARGE_RINGS [expr $CONFIG_ROADRUNNER_LARGE_RINGS|16]
set CONFIG_PPP [expr $CONFIG_PPP|16]
set CONFIG_SLIP [expr $CONFIG_SLIP|16]
	global CONFIG_SLIP_COMPRESSED
set CONFIG_SLIP_COMPRESSED [expr $CONFIG_SLIP_COMPRESSED|16]
	global CONFIG_SLIP_SMART
set CONFIG_SLIP_SMART [expr $CONFIG_SLIP_SMART|16]
	global CONFIG_SLIP_MODE_SLIP6
set CONFIG_SLIP_MODE_SLIP6 [expr $CONFIG_SLIP_MODE_SLIP6|16]
	global CONFIG_NET_FC
set CONFIG_NET_FC [expr $CONFIG_NET_FC|16]
set CONFIG_SHAPER [expr $CONFIG_SHAPER|16]
	global CONFIG_NET
	if {($CONFIG_NET == 1)} then {
	set CONFIG_NETDEVICES [expr $CONFIG_NETDEVICES&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_DUMMY == 2)} then {set CONFIG_DUMMY 1}; set CONFIG_DUMMY [expr $CONFIG_DUMMY&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_BONDING == 2)} then {set CONFIG_BONDING 1}; set CONFIG_BONDING [expr $CONFIG_BONDING&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_EQUALIZER == 2)} then {set CONFIG_EQUALIZER 1}; set CONFIG_EQUALIZER [expr $CONFIG_EQUALIZER&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_TUN == 2)} then {set CONFIG_TUN 1}; set CONFIG_TUN [expr $CONFIG_TUN&15]}
	global CONFIG_EXPERIMENTAL
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ETHERTAP == 2)} then {set CONFIG_ETHERTAP 1}; set CONFIG_ETHERTAP [expr $CONFIG_ETHERTAP&15]}
	global CONFIG_ISAPNP
	global CONFIG_NET_SB1000
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ISAPNP == 1 || $CONFIG_ISAPNP == 2) && ($CONFIG_ISAPNP == 1 || $CONFIG_ISAPNP == 2 || $CONFIG_ISAPNP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISAPNP]]; set CONFIG_NET_SB1000 [sync_tristate $CONFIG_NET_SB1000 $tmpvar_dep]; set CONFIG_NET_SB1000 [expr $CONFIG_NET_SB1000&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	set CONFIG_FDDI [expr $CONFIG_FDDI&15]}
	global CONFIG_PCI
	global CONFIG_EISA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_FDDI == 1) && ($CONFIG_PCI == 1 || $CONFIG_EISA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_DEFXX == 2)} then {set CONFIG_DEFXX 1}; set CONFIG_DEFXX [expr $CONFIG_DEFXX&15]}
	global CONFIG_SKFP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_FDDI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_SKFP [sync_tristate $CONFIG_SKFP $tmpvar_dep]; set CONFIG_SKFP [expr $CONFIG_SKFP&15]}
	global CONFIG_INET
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_INET == 1)} then {
	set CONFIG_HIPPI [expr $CONFIG_HIPPI&15]}
	global CONFIG_ROADRUNNER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_INET == 1) && ($CONFIG_HIPPI == 1 && $CONFIG_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_ROADRUNNER [sync_tristate $CONFIG_ROADRUNNER $tmpvar_dep]; set CONFIG_ROADRUNNER [expr $CONFIG_ROADRUNNER&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_INET == 1) && ($CONFIG_HIPPI == 1 && $CONFIG_PCI == 1) && ($CONFIG_ROADRUNNER != 0)} then {
	set CONFIG_ROADRUNNER_LARGE_RINGS [expr $CONFIG_ROADRUNNER_LARGE_RINGS&15]}
	global CONFIG_PARPORT
	global CONFIG_PLIP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT]]; set CONFIG_PLIP [sync_tristate $CONFIG_PLIP $tmpvar_dep]; set CONFIG_PLIP [expr $CONFIG_PLIP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_PPP == 2)} then {set CONFIG_PPP 1}; set CONFIG_PPP [expr $CONFIG_PPP&15]}
	global CONFIG_PPP_MULTILINK
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_PPP_MULTILINK [sync_bool $CONFIG_PPP_MULTILINK $tmpvar_dep 0];set CONFIG_PPP_MULTILINK [expr $CONFIG_PPP_MULTILINK&15]}
	global CONFIG_FILTER
	global CONFIG_PPP_FILTER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_FILTER == 1 || $CONFIG_FILTER == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FILTER]];set CONFIG_PPP_FILTER [sync_bool $CONFIG_PPP_FILTER $tmpvar_dep 0];set CONFIG_PPP_FILTER [expr $CONFIG_PPP_FILTER&15]}
	global CONFIG_PPP_ASYNC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PPP]]; set CONFIG_PPP_ASYNC [sync_tristate $CONFIG_PPP_ASYNC $tmpvar_dep]; set CONFIG_PPP_ASYNC [expr $CONFIG_PPP_ASYNC&15]}
	global CONFIG_PPP_SYNC_TTY
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PPP]]; set CONFIG_PPP_SYNC_TTY [sync_tristate $CONFIG_PPP_SYNC_TTY $tmpvar_dep]; set CONFIG_PPP_SYNC_TTY [expr $CONFIG_PPP_SYNC_TTY&15]}
	global CONFIG_PPP_DEFLATE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PPP]]; set CONFIG_PPP_DEFLATE [sync_tristate $CONFIG_PPP_DEFLATE $tmpvar_dep]; set CONFIG_PPP_DEFLATE [expr $CONFIG_PPP_DEFLATE&15]}
	global CONFIG_PPP_BSDCOMP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PPP]]; set CONFIG_PPP_BSDCOMP [sync_tristate $CONFIG_PPP_BSDCOMP $tmpvar_dep]; set CONFIG_PPP_BSDCOMP [expr $CONFIG_PPP_BSDCOMP&15]}
	global CONFIG_PPPOE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PPP]]; set CONFIG_PPPOE [sync_tristate $CONFIG_PPPOE $tmpvar_dep]; set CONFIG_PPPOE [expr $CONFIG_PPPOE&15]}
	global CONFIG_ATM
	global CONFIG_PPPOATM
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_ATM != 0) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PPP]]; set CONFIG_PPPOATM [sync_tristate $CONFIG_PPPOATM $tmpvar_dep]; set CONFIG_PPPOATM [expr $CONFIG_PPPOATM&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_SLIP == 2)} then {set CONFIG_SLIP 1}; set CONFIG_SLIP [expr $CONFIG_SLIP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {
	set CONFIG_SLIP_COMPRESSED [expr $CONFIG_SLIP_COMPRESSED&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {
	set CONFIG_SLIP_SMART [expr $CONFIG_SLIP_SMART&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {
	set CONFIG_SLIP_MODE_SLIP6 [expr $CONFIG_SLIP_MODE_SLIP6&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	set CONFIG_NET_FC [expr $CONFIG_NET_FC&15]}
	global CONFIG_SCSI
	global CONFIG_IPHASE5526
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_FC == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SCSI $CONFIG_PCI]]; set CONFIG_IPHASE5526 [sync_tristate $CONFIG_IPHASE5526 $tmpvar_dep]; set CONFIG_IPHASE5526 [expr $CONFIG_IPHASE5526&15]}
	global CONFIG_RCPCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_RCPCI [sync_tristate $CONFIG_RCPCI $tmpvar_dep]; set CONFIG_RCPCI [expr $CONFIG_RCPCI&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_SHAPER == 2)} then {set CONFIG_SHAPER 1}; set CONFIG_SHAPER [expr $CONFIG_SHAPER&15]}
}


proc menu27 {w title} {
	set oldFocus [focus]
	catch {focus .menu26}
	catch {destroy $w; unregister_active 27}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 27]]
	message $w.m -width 400 -aspect 300 -text \
		"ARCnet devices"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "ARCnet devices" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 27; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 27; menu28 .menu28 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 27"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 27; menu26 .menu26 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 27; menu26 .menu26 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 27 0 "ARCnet support" CONFIG_ARCNET
	dep_tristate $w.config.f 27 1 "Enable standard ARCNet packet format (RFC 1201)" CONFIG_ARCNET_1201
	dep_tristate $w.config.f 27 2 "Enable old ARCNet packet format (RFC 1051)" CONFIG_ARCNET_1051
	dep_tristate $w.config.f 27 3 "Enable raw mode packet interface" CONFIG_ARCNET_RAW
	dep_tristate $w.config.f 27 4 "ARCnet COM90xx (normal) chipset driver" CONFIG_ARCNET_COM90xx
	dep_tristate $w.config.f 27 5 "ARCnet COM90xx (IO mapped) chipset driver" CONFIG_ARCNET_COM90xxIO
	dep_tristate $w.config.f 27 6 "ARCnet COM90xx (RIM I) chipset driver" CONFIG_ARCNET_RIM_I
	dep_tristate $w.config.f 27 7 "ARCnet COM20020 chipset driver" CONFIG_ARCNET_COM20020
	dep_tristate $w.config.f 27 8 "  Support for COM20020 on ISA" CONFIG_ARCNET_COM20020_ISA
	dep_tristate $w.config.f 27 9 "  Support for COM20020 on PCI" CONFIG_ARCNET_COM20020_PCI



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu26] == 0} then {menu26 .menu26 "Network device support"}
	set winx [expr [winfo x .menu26]+30]; set winy [expr [winfo y .menu26]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu27 {} {
	global CONFIG_MODULES
	global CONFIG_NET
	global CONFIG_NETDEVICES
	global CONFIG_ARCNET
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu27.config.f.x0 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu27.config.f.x0 normal {m}} else {configure_entry .menu27.config.f.x0 disabled {m}}; configure_entry .menu27.config.f.x0 normal {n l}} else {configure_entry .menu27.config.f.x0 disabled {y n m l}}
	global CONFIG_ARCNET_1201
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET]];set CONFIG_ARCNET_1201 [sync_tristate $CONFIG_ARCNET_1201 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu27.config.f.x1 disabled {y}} else {configure_entry .menu27.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu27.config.f.x1 disabled {m}} else {configure_entry .menu27.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu27.config.f.x1 normal {m}} else {configure_entry .menu27.config.f.x1 disabled {m}}; configure_entry .menu27.config.f.x1 normal {n l}} else {configure_entry .menu27.config.f.x1 disabled {y n m l}}
	global CONFIG_ARCNET_1051
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET]];set CONFIG_ARCNET_1051 [sync_tristate $CONFIG_ARCNET_1051 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu27.config.f.x2 disabled {y}} else {configure_entry .menu27.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu27.config.f.x2 disabled {m}} else {configure_entry .menu27.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu27.config.f.x2 normal {m}} else {configure_entry .menu27.config.f.x2 disabled {m}}; configure_entry .menu27.config.f.x2 normal {n l}} else {configure_entry .menu27.config.f.x2 disabled {y n m l}}
	global CONFIG_ARCNET_RAW
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET]];set CONFIG_ARCNET_RAW [sync_tristate $CONFIG_ARCNET_RAW $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu27.config.f.x3 disabled {y}} else {configure_entry .menu27.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu27.config.f.x3 disabled {m}} else {configure_entry .menu27.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu27.config.f.x3 normal {m}} else {configure_entry .menu27.config.f.x3 disabled {m}}; configure_entry .menu27.config.f.x3 normal {n l}} else {configure_entry .menu27.config.f.x3 disabled {y n m l}}
	global CONFIG_ARCNET_COM90xx
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET]];set CONFIG_ARCNET_COM90xx [sync_tristate $CONFIG_ARCNET_COM90xx $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu27.config.f.x4 disabled {y}} else {configure_entry .menu27.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu27.config.f.x4 disabled {m}} else {configure_entry .menu27.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu27.config.f.x4 normal {m}} else {configure_entry .menu27.config.f.x4 disabled {m}}; configure_entry .menu27.config.f.x4 normal {n l}} else {configure_entry .menu27.config.f.x4 disabled {y n m l}}
	global CONFIG_ARCNET_COM90xxIO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET]];set CONFIG_ARCNET_COM90xxIO [sync_tristate $CONFIG_ARCNET_COM90xxIO $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu27.config.f.x5 disabled {y}} else {configure_entry .menu27.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu27.config.f.x5 disabled {m}} else {configure_entry .menu27.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu27.config.f.x5 normal {m}} else {configure_entry .menu27.config.f.x5 disabled {m}}; configure_entry .menu27.config.f.x5 normal {n l}} else {configure_entry .menu27.config.f.x5 disabled {y n m l}}
	global CONFIG_ARCNET_RIM_I
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET]];set CONFIG_ARCNET_RIM_I [sync_tristate $CONFIG_ARCNET_RIM_I $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu27.config.f.x6 disabled {y}} else {configure_entry .menu27.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu27.config.f.x6 disabled {m}} else {configure_entry .menu27.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu27.config.f.x6 normal {m}} else {configure_entry .menu27.config.f.x6 disabled {m}}; configure_entry .menu27.config.f.x6 normal {n l}} else {configure_entry .menu27.config.f.x6 disabled {y n m l}}
	global CONFIG_ARCNET_COM20020
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET]];set CONFIG_ARCNET_COM20020 [sync_tristate $CONFIG_ARCNET_COM20020 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu27.config.f.x7 disabled {y}} else {configure_entry .menu27.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu27.config.f.x7 disabled {m}} else {configure_entry .menu27.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu27.config.f.x7 normal {m}} else {configure_entry .menu27.config.f.x7 disabled {m}}; configure_entry .menu27.config.f.x7 normal {n l}} else {configure_entry .menu27.config.f.x7 disabled {y n m l}}
	global CONFIG_ISA
	global CONFIG_ARCNET_COM20020_ISA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET_COM20020 == 1 || $CONFIG_ARCNET_COM20020 == 2 || $CONFIG_ARCNET_COM20020 == 4) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET_COM20020 $CONFIG_ISA]];set CONFIG_ARCNET_COM20020_ISA [sync_tristate $CONFIG_ARCNET_COM20020_ISA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu27.config.f.x8 disabled {y}} else {configure_entry .menu27.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu27.config.f.x8 disabled {m}} else {configure_entry .menu27.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu27.config.f.x8 normal {m}} else {configure_entry .menu27.config.f.x8 disabled {m}}; configure_entry .menu27.config.f.x8 normal {n l}} else {configure_entry .menu27.config.f.x8 disabled {y n m l}}
	global CONFIG_PCI
	global CONFIG_ARCNET_COM20020_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET_COM20020 == 1 || $CONFIG_ARCNET_COM20020 == 2 || $CONFIG_ARCNET_COM20020 == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET_COM20020 $CONFIG_PCI]];set CONFIG_ARCNET_COM20020_PCI [sync_tristate $CONFIG_ARCNET_COM20020_PCI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu27.config.f.x9 disabled {y}} else {configure_entry .menu27.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu27.config.f.x9 disabled {m}} else {configure_entry .menu27.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu27.config.f.x9 normal {m}} else {configure_entry .menu27.config.f.x9 disabled {m}}; configure_entry .menu27.config.f.x9 normal {n l}} else {configure_entry .menu27.config.f.x9 disabled {y n m l}}
}


proc update_define_menu27 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_ARCNET
set CONFIG_ARCNET [expr $CONFIG_ARCNET|16]
	global CONFIG_NET
	global CONFIG_NETDEVICES
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ARCNET == 2)} then {set CONFIG_ARCNET 1}; set CONFIG_ARCNET [expr $CONFIG_ARCNET&15]}
	global CONFIG_ARCNET_1201
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET]]; set CONFIG_ARCNET_1201 [sync_tristate $CONFIG_ARCNET_1201 $tmpvar_dep]; set CONFIG_ARCNET_1201 [expr $CONFIG_ARCNET_1201&15]}
	global CONFIG_ARCNET_1051
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET]]; set CONFIG_ARCNET_1051 [sync_tristate $CONFIG_ARCNET_1051 $tmpvar_dep]; set CONFIG_ARCNET_1051 [expr $CONFIG_ARCNET_1051&15]}
	global CONFIG_ARCNET_RAW
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET]]; set CONFIG_ARCNET_RAW [sync_tristate $CONFIG_ARCNET_RAW $tmpvar_dep]; set CONFIG_ARCNET_RAW [expr $CONFIG_ARCNET_RAW&15]}
	global CONFIG_ARCNET_COM90xx
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET]]; set CONFIG_ARCNET_COM90xx [sync_tristate $CONFIG_ARCNET_COM90xx $tmpvar_dep]; set CONFIG_ARCNET_COM90xx [expr $CONFIG_ARCNET_COM90xx&15]}
	global CONFIG_ARCNET_COM90xxIO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET]]; set CONFIG_ARCNET_COM90xxIO [sync_tristate $CONFIG_ARCNET_COM90xxIO $tmpvar_dep]; set CONFIG_ARCNET_COM90xxIO [expr $CONFIG_ARCNET_COM90xxIO&15]}
	global CONFIG_ARCNET_RIM_I
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET]]; set CONFIG_ARCNET_RIM_I [sync_tristate $CONFIG_ARCNET_RIM_I $tmpvar_dep]; set CONFIG_ARCNET_RIM_I [expr $CONFIG_ARCNET_RIM_I&15]}
	global CONFIG_ARCNET_COM20020
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET]]; set CONFIG_ARCNET_COM20020 [sync_tristate $CONFIG_ARCNET_COM20020 $tmpvar_dep]; set CONFIG_ARCNET_COM20020 [expr $CONFIG_ARCNET_COM20020&15]}
	global CONFIG_ISA
	global CONFIG_ARCNET_COM20020_ISA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET_COM20020 == 1 || $CONFIG_ARCNET_COM20020 == 2 || $CONFIG_ARCNET_COM20020 == 4) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET_COM20020 $CONFIG_ISA]]; set CONFIG_ARCNET_COM20020_ISA [sync_tristate $CONFIG_ARCNET_COM20020_ISA $tmpvar_dep]; set CONFIG_ARCNET_COM20020_ISA [expr $CONFIG_ARCNET_COM20020_ISA&15]}
	global CONFIG_PCI
	global CONFIG_ARCNET_COM20020_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET_COM20020 == 1 || $CONFIG_ARCNET_COM20020 == 2 || $CONFIG_ARCNET_COM20020 == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET_COM20020 $CONFIG_PCI]]; set CONFIG_ARCNET_COM20020_PCI [sync_tristate $CONFIG_ARCNET_COM20020_PCI $tmpvar_dep]; set CONFIG_ARCNET_COM20020_PCI [expr $CONFIG_ARCNET_COM20020_PCI&15]}
}


proc menu28 {w title} {
	set oldFocus [focus]
	catch {focus .menu26}
	catch {destroy $w; unregister_active 28}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 28]]
	message $w.m -width 400 -aspect 300 -text \
		"Appletalk devices"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Appletalk devices" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 28; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 28; menu29 .menu29 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 28"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 28; menu27 .menu27 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 28; menu27 .menu27 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 28 0 "Appletalk interfaces support" CONFIG_APPLETALK
	dep_tristate $w.config.f 28 1 "  Apple/Farallon LocalTalk PC support" CONFIG_LTPC
	dep_tristate $w.config.f 28 2 "  COPS LocalTalk PC support" CONFIG_COPS
	bool $w.config.f 28 3 "    Dayna firmware support" CONFIG_COPS_DAYNA
	bool $w.config.f 28 4 "    Tangent firmware support" CONFIG_COPS_TANGENT
	dep_tristate $w.config.f 28 5 "  Appletalk-IP driver support" CONFIG_IPDDP
	bool $w.config.f 28 6 "    IP to Appletalk-IP Encapsulation support" CONFIG_IPDDP_ENCAP
	bool $w.config.f 28 7 "    Appletalk-IP to IP Decapsulation support" CONFIG_IPDDP_DECAP



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu26] == 0} then {menu26 .menu26 "Network device support"}
	set winx [expr [winfo x .menu26]+30]; set winy [expr [winfo y .menu26]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu28 {} {
	global CONFIG_NET
	global CONFIG_NETDEVICES
	global CONFIG_ATALK
	global CONFIG_APPLETALK
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0)} then {
	configure_entry .menu28.config.f.x0 normal {n l y}} else {configure_entry .menu28.config.f.x0 disabled {y n l}}
	global CONFIG_MODULES
	global CONFIG_DEV_APPLETALK
	global CONFIG_LTPC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_DEV_APPLETALK == 1 || $CONFIG_DEV_APPLETALK == 2 || $CONFIG_DEV_APPLETALK == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_DEV_APPLETALK]];set CONFIG_LTPC [sync_tristate $CONFIG_LTPC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu28.config.f.x1 disabled {y}} else {configure_entry .menu28.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu28.config.f.x1 disabled {m}} else {configure_entry .menu28.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu28.config.f.x1 normal {m}} else {configure_entry .menu28.config.f.x1 disabled {m}}; configure_entry .menu28.config.f.x1 normal {n l}} else {configure_entry .menu28.config.f.x1 disabled {y n m l}}
	global CONFIG_COPS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_DEV_APPLETALK == 1 || $CONFIG_DEV_APPLETALK == 2 || $CONFIG_DEV_APPLETALK == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_DEV_APPLETALK]];set CONFIG_COPS [sync_tristate $CONFIG_COPS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu28.config.f.x2 disabled {y}} else {configure_entry .menu28.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu28.config.f.x2 disabled {m}} else {configure_entry .menu28.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu28.config.f.x2 normal {m}} else {configure_entry .menu28.config.f.x2 disabled {m}}; configure_entry .menu28.config.f.x2 normal {n l}} else {configure_entry .menu28.config.f.x2 disabled {y n m l}}
	global CONFIG_COPS_DAYNA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_COPS != 0)} then {
	configure_entry .menu28.config.f.x3 normal {n l y}} else {configure_entry .menu28.config.f.x3 disabled {y n l}}
	global CONFIG_COPS_TANGENT
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_COPS != 0)} then {
	configure_entry .menu28.config.f.x4 normal {n l y}} else {configure_entry .menu28.config.f.x4 disabled {y n l}}
	global CONFIG_IPDDP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_DEV_APPLETALK == 1 || $CONFIG_DEV_APPLETALK == 2 || $CONFIG_DEV_APPLETALK == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_DEV_APPLETALK]];set CONFIG_IPDDP [sync_tristate $CONFIG_IPDDP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu28.config.f.x5 disabled {y}} else {configure_entry .menu28.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu28.config.f.x5 disabled {m}} else {configure_entry .menu28.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu28.config.f.x5 normal {m}} else {configure_entry .menu28.config.f.x5 disabled {m}}; configure_entry .menu28.config.f.x5 normal {n l}} else {configure_entry .menu28.config.f.x5 disabled {y n m l}}
	global CONFIG_IPDDP_ENCAP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_IPDDP != 0)} then {
	configure_entry .menu28.config.f.x6 normal {n l y}} else {configure_entry .menu28.config.f.x6 disabled {y n l}}
	global CONFIG_IPDDP_DECAP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_IPDDP != 0)} then {
	configure_entry .menu28.config.f.x7 normal {n l y}} else {configure_entry .menu28.config.f.x7 disabled {y n l}}
}


proc update_define_menu28 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_APPLETALK
set CONFIG_APPLETALK [expr $CONFIG_APPLETALK|16]
	global CONFIG_COPS_DAYNA
set CONFIG_COPS_DAYNA [expr $CONFIG_COPS_DAYNA|16]
	global CONFIG_COPS_TANGENT
set CONFIG_COPS_TANGENT [expr $CONFIG_COPS_TANGENT|16]
	global CONFIG_IPDDP_ENCAP
set CONFIG_IPDDP_ENCAP [expr $CONFIG_IPDDP_ENCAP|16]
	global CONFIG_IPDDP_DECAP
set CONFIG_IPDDP_DECAP [expr $CONFIG_IPDDP_DECAP|16]
	global CONFIG_NET
	global CONFIG_NETDEVICES
	global CONFIG_ATALK
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0)} then {
	set CONFIG_APPLETALK [expr $CONFIG_APPLETALK&15]}
	global CONFIG_DEV_APPLETALK
	global CONFIG_LTPC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_DEV_APPLETALK == 1 || $CONFIG_DEV_APPLETALK == 2 || $CONFIG_DEV_APPLETALK == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_DEV_APPLETALK]]; set CONFIG_LTPC [sync_tristate $CONFIG_LTPC $tmpvar_dep]; set CONFIG_LTPC [expr $CONFIG_LTPC&15]}
	global CONFIG_COPS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_DEV_APPLETALK == 1 || $CONFIG_DEV_APPLETALK == 2 || $CONFIG_DEV_APPLETALK == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_DEV_APPLETALK]]; set CONFIG_COPS [sync_tristate $CONFIG_COPS $tmpvar_dep]; set CONFIG_COPS [expr $CONFIG_COPS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_COPS != 0)} then {
	set CONFIG_COPS_DAYNA [expr $CONFIG_COPS_DAYNA&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_COPS != 0)} then {
	set CONFIG_COPS_TANGENT [expr $CONFIG_COPS_TANGENT&15]}
	global CONFIG_IPDDP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_DEV_APPLETALK == 1 || $CONFIG_DEV_APPLETALK == 2 || $CONFIG_DEV_APPLETALK == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_DEV_APPLETALK]]; set CONFIG_IPDDP [sync_tristate $CONFIG_IPDDP $tmpvar_dep]; set CONFIG_IPDDP [expr $CONFIG_IPDDP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_IPDDP != 0)} then {
	set CONFIG_IPDDP_ENCAP [expr $CONFIG_IPDDP_ENCAP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_IPDDP != 0)} then {
	set CONFIG_IPDDP_DECAP [expr $CONFIG_IPDDP_DECAP&15]}
}


proc menu29 {w title} {
	set oldFocus [focus]
	catch {focus .menu26}
	catch {destroy $w; unregister_active 29}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 29]]
	message $w.m -width 400 -aspect 300 -text \
		"Ethernet (10 or 100Mbit)"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Ethernet (10 or 100Mbit)" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 29; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 29; menu30 .menu30 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 29"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 29; menu28 .menu28 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 29; menu28 .menu28 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 29 0 "Ethernet (10 or 100Mbit)" CONFIG_NET_ETHERNET
	dep_tristate $w.config.f 29 1 "  Sun LANCE support" CONFIG_SUNLANCE
	tristate $w.config.f 29 2 "  Sun Happy Meal 10/100baseT support" CONFIG_HAPPYMEAL
	dep_tristate $w.config.f 29 3 "  Sun BigMAC 10/100baseT support (EXPERIMENTAL)" CONFIG_SUNBMAC
	dep_tristate $w.config.f 29 4 "  Sun QuadEthernet support" CONFIG_SUNQE
	dep_tristate $w.config.f 29 5 "  Sun LANCE support" CONFIG_SUNLANCE
	dep_tristate $w.config.f 29 6 "  Sun GEM support" CONFIG_SUNGEM
	bool $w.config.f 29 7 "  3COM cards" CONFIG_NET_VENDOR_3COM
	dep_tristate $w.config.f 29 8 "    3c501 \"EtherLink\" support" CONFIG_EL1
	dep_tristate $w.config.f 29 9 "    3c503 \"EtherLink II\" support" CONFIG_EL2
	dep_tristate $w.config.f 29 10 "    3c505 \"EtherLink Plus\" support" CONFIG_ELPLUS
	dep_tristate $w.config.f 29 11 "    3c507 \"EtherLink 16\" support (EXPERIMENTAL)" CONFIG_EL16
	tristate $w.config.f 29 12 "    3c509/3c529 (MCA)/3c579 \"EtherLink III\" support" CONFIG_EL3
	dep_tristate $w.config.f 29 13 "    3c523 \"EtherLink/MC\" support" CONFIG_ELMC
	dep_tristate $w.config.f 29 14 "    3c527 \"EtherLink/MC 32\" support (EXPERIMENTAL)" CONFIG_ELMC_II
	tristate $w.config.f 29 15 "    3c590/3c900 series (592/595/597) \"Vortex/Boomerang\" support" CONFIG_VORTEX
	dep_tristate $w.config.f 29 16 "  AMD LANCE and PCnet (AT1500 and NE2100) support" CONFIG_LANCE
	bool $w.config.f 29 17 "  Western Digital/SMC cards" CONFIG_NET_VENDOR_SMC
	dep_tristate $w.config.f 29 18 "    WD80*3 support" CONFIG_WD80x3
	dep_tristate $w.config.f 29 19 "    SMC Ultra MCA support" CONFIG_ULTRAMCA
	dep_tristate $w.config.f 29 20 "    SMC Ultra support" CONFIG_ULTRA
	dep_tristate $w.config.f 29 21 "    SMC Ultra32 EISA support" CONFIG_ULTRA32
	dep_tristate $w.config.f 29 22 "    SMC 9194 support" CONFIG_SMC9194
	bool $w.config.f 29 23 "  Racal-Interlan (Micom) NI cards" CONFIG_NET_VENDOR_RACAL
	dep_tristate $w.config.f 29 24 "    NI5010 support (EXPERIMENTAL)" CONFIG_NI5010
	dep_tristate $w.config.f 29 25 "    NI5210 support" CONFIG_NI52
	dep_tristate $w.config.f 29 26 "    NI6510 support" CONFIG_NI65
	dep_tristate $w.config.f 29 27 "  AT1700/1720 support (EXPERIMENTAL)" CONFIG_AT1700
	tristate $w.config.f 29 28 "  DEPCA, DE10x, DE200, DE201, DE202, DE422 support" CONFIG_DEPCA
	tristate $w.config.f 29 29 "  HP 10/100VG PCLAN (ISA, EISA, PCI) support" CONFIG_HP100
	dep_bool $w.config.f 29 30 "  Other ISA cards" CONFIG_NET_ISA
	tristate $w.config.f 29 31 "    Cabletron E21xx support" CONFIG_E2100
	tristate $w.config.f 29 32 "    EtherWORKS 3 (DE203, DE204, DE205) support" CONFIG_EWRK3
	tristate $w.config.f 29 33 "    EtherExpress 16 support" CONFIG_EEXPRESS
	tristate $w.config.f 29 34 "    EtherExpressPro support/EtherExpress 10 (i82595) support" CONFIG_EEXPRESS_PRO
	tristate $w.config.f 29 35 "    HP PCLAN+ (27247B and 27252A) support" CONFIG_HPLAN_PLUS
	tristate $w.config.f 29 36 "    HP PCLAN (27245 and other 27xxx series) support" CONFIG_HPLAN
	tristate $w.config.f 29 37 "    LP486E on board Ethernet" CONFIG_LP486E
	tristate $w.config.f 29 38 "    ICL EtherTeam 16i/32 support" CONFIG_ETH16I
	tristate $w.config.f 29 39 "    NE2000/NE1000 support" CONFIG_NE2000
	tristate $w.config.f 29 40 "  SKnet MCA support" CONFIG_SKMC
	tristate $w.config.f 29 41 "  NE/2 (ne2000 MCA version) support" CONFIG_NE2_MCA
	tristate $w.config.f 29 42 "  IBM LAN Adapter/A support" CONFIG_IBMLANA
	bool $w.config.f 29 43 "  EISA, VLB, PCI and on board controllers" CONFIG_NET_PCI
	dep_tristate $w.config.f 29 44 "    AMD PCnet32 PCI support" CONFIG_PCNET32
	dep_tristate $w.config.f 29 45 "    Adaptec Starfire support (EXPERIMENTAL)" CONFIG_ADAPTEC_STARFIRE
	dep_tristate $w.config.f 29 46 "    Apricot Xen-II on board Ethernet" CONFIG_APRICOT
	dep_tristate $w.config.f 29 47 "    CS89x0 support" CONFIG_CS89x0
	dep_tristate $w.config.f 29 48 "    DECchip Tulip (dc21x4x) PCI support" CONFIG_TULIP
	dep_bool $w.config.f 29 49 "      New bus configuration (EXPERIMENTAL)" CONFIG_TULIP_MWI
	bool $w.config.f 29 50 "      Use PCI shared mem for NIC registers" CONFIG_TULIP_MMIO
	tristate $w.config.f 29 51 "    Generic DECchip & DIGITAL EtherWORKS PCI/EISA" CONFIG_DE4X5
	tristate $w.config.f 29 52 "    Digi Intl. RightSwitch SE-X support" CONFIG_DGRS
	dep_tristate $w.config.f 29 53 "    Davicom DM910x/DM980x support" CONFIG_DM9102
	dep_tristate $w.config.f 29 54 "    EtherExpressPro/100 support" CONFIG_EEPRO100
	dep_tristate $w.config.f 29 55 "    Mylex EISA LNE390A/B support (EXPERIMENTAL)" CONFIG_LNE390
	dep_tristate $w.config.f 29 56 "    Myson MTD-8xx PCI Ethernet support" CONFIG_FEALNX
	dep_tristate $w.config.f 29 57 "    National Semiconductor DP8381x series PCI Ethernet support" CONFIG_NATSEMI
	dep_tristate $w.config.f 29 58 "    PCI NE2000 and clones support (see help)" CONFIG_NE2K_PCI
	dep_tristate $w.config.f 29 59 "    Novell/Eagle/Microdyne NE3210 EISA support (EXPERIMENTAL)" CONFIG_NE3210
	dep_tristate $w.config.f 29 60 "    Racal-Interlan EISA ES3210 support (EXPERIMENTAL)" CONFIG_ES3210
	dep_tristate $w.config.f 29 61 "    RealTek RTL-8139 C+ PCI Fast Ethernet Adapter support (EXPERIMENTAL)" CONFIG_8139CP
	dep_tristate $w.config.f 29 62 "    RealTek RTL-8139 PCI Fast Ethernet Adapter support" CONFIG_8139TOO
	dep_bool $w.config.f 29 63 "      Use PIO instead of MMIO" CONFIG_8139TOO_PIO
	dep_bool $w.config.f 29 64 "      Support for automatic channel equalization (EXPERIMENTAL)" CONFIG_8139TOO_TUNE_TWISTER
	dep_bool $w.config.f 29 65 "      Support for older RTL-8129/8130 boards" CONFIG_8139TOO_8129
	dep_tristate $w.config.f 29 66 "    ORIGINAL RealTek RTL-8139 PCI Fast Ethernet Adapter support" CONFIG_RTL8139
	dep_tristate $w.config.f 29 67 "    SiS 900/7016 PCI Fast Ethernet Adapter support" CONFIG_SIS900
	dep_tristate $w.config.f 29 68 "    SMC EtherPower II" CONFIG_EPIC100
	dep_tristate $w.config.f 29 69 "    Sundance Alta support" CONFIG_SUNDANCE
	tristate $w.config.f 29 70 "    TI ThunderLAN support" CONFIG_TLAN
	dep_tristate $w.config.f 29 71 "    VIA Rhine support" CONFIG_VIA_RHINE
	dep_bool $w.config.f 29 72 "      Use MMIO instead of PIO (EXPERIMENTAL)" CONFIG_VIA_RHINE_MMIO
	dep_tristate $w.config.f 29 73 "    Winbond W89c840 Ethernet support" CONFIG_WINBOND_840
	bool $w.config.f 29 74 "    Philips SAA9730 Ethernet support (EXPERIMENTAL)" CONFIG_LAN_SAA9730
	bool $w.config.f 29 75 "  Pocket and portable adapters" CONFIG_NET_POCKET
	dep_tristate $w.config.f 29 76 "    D-Link DE600 pocket adapter support" CONFIG_DE600
	dep_tristate $w.config.f 29 77 "    D-Link DE620 pocket adapter support" CONFIG_DE620
	bool $w.config.f 29 78 "  FEC ethernet controller (of ColdFire 5272)" CONFIG_FEC
	tristate $w.config.f 29 79 "  CS89x0 support" CONFIG_CS89x0
	bool $w.config.f 29 80 "    Hardware byte-swapping support for CS89x0 Ethernet" CONFIG_UCCS89x0_HW_SWAP



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu26] == 0} then {menu26 .menu26 "Network device support"}
	set winx [expr [winfo x .menu26]+30]; set winy [expr [winfo y .menu26]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu29 {} {
	global CONFIG_NET
	global CONFIG_NETDEVICES
	global CONFIG_NET_ETHERNET
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu29.config.f.x0 normal {n l y}} else {configure_entry .menu29.config.f.x0 disabled {y n l}}
	global CONFIG_MODULES
	global CONFIG_SBUS
	global CONFIG_SUNLANCE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_SBUS == 1 || $CONFIG_SBUS == 2 || $CONFIG_SBUS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SBUS]];set CONFIG_SUNLANCE [sync_tristate $CONFIG_SUNLANCE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x1 disabled {y}} else {configure_entry .menu29.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x1 disabled {m}} else {configure_entry .menu29.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x1 normal {m}} else {configure_entry .menu29.config.f.x1 disabled {m}}; configure_entry .menu29.config.f.x1 normal {n l}} else {configure_entry .menu29.config.f.x1 disabled {y n m l}}
	global CONFIG_PCI
	global CONFIG_HAPPYMEAL
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu29.config.f.x2 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x2 normal {m}} else {configure_entry .menu29.config.f.x2 disabled {m}}; configure_entry .menu29.config.f.x2 normal {n l}} else {configure_entry .menu29.config.f.x2 disabled {y n m l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_SUNBMAC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_SBUS == 1 || $CONFIG_SBUS == 2 || $CONFIG_SBUS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SBUS $CONFIG_EXPERIMENTAL]];set CONFIG_SUNBMAC [sync_tristate $CONFIG_SUNBMAC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x3 disabled {y}} else {configure_entry .menu29.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x3 disabled {m}} else {configure_entry .menu29.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x3 normal {m}} else {configure_entry .menu29.config.f.x3 disabled {m}}; configure_entry .menu29.config.f.x3 normal {n l}} else {configure_entry .menu29.config.f.x3 disabled {y n m l}}
	global CONFIG_SUNQE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_SBUS == 1 || $CONFIG_SBUS == 2 || $CONFIG_SBUS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SBUS]];set CONFIG_SUNQE [sync_tristate $CONFIG_SUNQE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x4 disabled {y}} else {configure_entry .menu29.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x4 disabled {m}} else {configure_entry .menu29.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x4 normal {m}} else {configure_entry .menu29.config.f.x4 disabled {m}}; configure_entry .menu29.config.f.x4 normal {n l}} else {configure_entry .menu29.config.f.x4 disabled {y n m l}}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_SBUS == 1 || $CONFIG_SBUS == 2 || $CONFIG_SBUS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SBUS]];set CONFIG_SUNLANCE [sync_tristate $CONFIG_SUNLANCE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x5 disabled {y}} else {configure_entry .menu29.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x5 disabled {m}} else {configure_entry .menu29.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x5 normal {m}} else {configure_entry .menu29.config.f.x5 disabled {m}}; configure_entry .menu29.config.f.x5 normal {n l}} else {configure_entry .menu29.config.f.x5 disabled {y n m l}}
	global CONFIG_SUNGEM
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_SUNGEM [sync_tristate $CONFIG_SUNGEM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x6 disabled {y}} else {configure_entry .menu29.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x6 disabled {m}} else {configure_entry .menu29.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x6 normal {m}} else {configure_entry .menu29.config.f.x6 disabled {m}}; configure_entry .menu29.config.f.x6 normal {n l}} else {configure_entry .menu29.config.f.x6 disabled {y n m l}}
	global CONFIG_NET_VENDOR_3COM
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1)} then {
	configure_entry .menu29.config.f.x7 normal {n l y}} else {configure_entry .menu29.config.f.x7 disabled {y n l}}
	global CONFIG_ISA
	global CONFIG_EL1
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]];set CONFIG_EL1 [sync_tristate $CONFIG_EL1 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x8 disabled {y}} else {configure_entry .menu29.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x8 disabled {m}} else {configure_entry .menu29.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x8 normal {m}} else {configure_entry .menu29.config.f.x8 disabled {m}}; configure_entry .menu29.config.f.x8 normal {n l}} else {configure_entry .menu29.config.f.x8 disabled {y n m l}}
	global CONFIG_EL2
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]];set CONFIG_EL2 [sync_tristate $CONFIG_EL2 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x9 disabled {y}} else {configure_entry .menu29.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x9 disabled {m}} else {configure_entry .menu29.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x9 normal {m}} else {configure_entry .menu29.config.f.x9 disabled {m}}; configure_entry .menu29.config.f.x9 normal {n l}} else {configure_entry .menu29.config.f.x9 disabled {y n m l}}
	global CONFIG_ELPLUS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]];set CONFIG_ELPLUS [sync_tristate $CONFIG_ELPLUS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x10 disabled {y}} else {configure_entry .menu29.config.f.x10 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x10 disabled {m}} else {configure_entry .menu29.config.f.x10 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x10 normal {m}} else {configure_entry .menu29.config.f.x10 disabled {m}}; configure_entry .menu29.config.f.x10 normal {n l}} else {configure_entry .menu29.config.f.x10 disabled {y n m l}}
	global CONFIG_EL16
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA $CONFIG_EXPERIMENTAL]];set CONFIG_EL16 [sync_tristate $CONFIG_EL16 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x11 disabled {y}} else {configure_entry .menu29.config.f.x11 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x11 disabled {m}} else {configure_entry .menu29.config.f.x11 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x11 normal {m}} else {configure_entry .menu29.config.f.x11 disabled {m}}; configure_entry .menu29.config.f.x11 normal {n l}} else {configure_entry .menu29.config.f.x11 disabled {y n m l}}
	global CONFIG_MCA
	global CONFIG_EL3
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_MCA == 1)} then {
	configure_entry .menu29.config.f.x12 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x12 normal {m}} else {configure_entry .menu29.config.f.x12 disabled {m}}; configure_entry .menu29.config.f.x12 normal {n l}} else {configure_entry .menu29.config.f.x12 disabled {y n m l}}
	global CONFIG_ELMC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_MCA == 1 || $CONFIG_MCA == 2 || $CONFIG_MCA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MCA]];set CONFIG_ELMC [sync_tristate $CONFIG_ELMC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x13 disabled {y}} else {configure_entry .menu29.config.f.x13 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x13 disabled {m}} else {configure_entry .menu29.config.f.x13 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x13 normal {m}} else {configure_entry .menu29.config.f.x13 disabled {m}}; configure_entry .menu29.config.f.x13 normal {n l}} else {configure_entry .menu29.config.f.x13 disabled {y n m l}}
	global CONFIG_ELMC_II
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_MCA == 1 || $CONFIG_MCA == 2 || $CONFIG_MCA == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MCA $CONFIG_EXPERIMENTAL]];set CONFIG_ELMC_II [sync_tristate $CONFIG_ELMC_II $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x14 disabled {y}} else {configure_entry .menu29.config.f.x14 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x14 disabled {m}} else {configure_entry .menu29.config.f.x14 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x14 normal {m}} else {configure_entry .menu29.config.f.x14 disabled {m}}; configure_entry .menu29.config.f.x14 normal {n l}} else {configure_entry .menu29.config.f.x14 disabled {y n m l}}
	global CONFIG_EISA
	global CONFIG_VORTEX
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_PCI == 1 || $CONFIG_EISA == 1)} then {
	configure_entry .menu29.config.f.x15 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x15 normal {m}} else {configure_entry .menu29.config.f.x15 disabled {m}}; configure_entry .menu29.config.f.x15 normal {n l}} else {configure_entry .menu29.config.f.x15 disabled {y n m l}}
	global CONFIG_LANCE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]];set CONFIG_LANCE [sync_tristate $CONFIG_LANCE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x16 disabled {y}} else {configure_entry .menu29.config.f.x16 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x16 disabled {m}} else {configure_entry .menu29.config.f.x16 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x16 normal {m}} else {configure_entry .menu29.config.f.x16 disabled {m}}; configure_entry .menu29.config.f.x16 normal {n l}} else {configure_entry .menu29.config.f.x16 disabled {y n m l}}
	global CONFIG_NET_VENDOR_SMC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1)} then {
	configure_entry .menu29.config.f.x17 normal {n l y}} else {configure_entry .menu29.config.f.x17 disabled {y n l}}
	global CONFIG_WD80x3
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_SMC == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]];set CONFIG_WD80x3 [sync_tristate $CONFIG_WD80x3 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x18 disabled {y}} else {configure_entry .menu29.config.f.x18 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x18 disabled {m}} else {configure_entry .menu29.config.f.x18 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x18 normal {m}} else {configure_entry .menu29.config.f.x18 disabled {m}}; configure_entry .menu29.config.f.x18 normal {n l}} else {configure_entry .menu29.config.f.x18 disabled {y n m l}}
	global CONFIG_ULTRAMCA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_SMC == 1) && ($CONFIG_MCA == 1 || $CONFIG_MCA == 2 || $CONFIG_MCA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MCA]];set CONFIG_ULTRAMCA [sync_tristate $CONFIG_ULTRAMCA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x19 disabled {y}} else {configure_entry .menu29.config.f.x19 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x19 disabled {m}} else {configure_entry .menu29.config.f.x19 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x19 normal {m}} else {configure_entry .menu29.config.f.x19 disabled {m}}; configure_entry .menu29.config.f.x19 normal {n l}} else {configure_entry .menu29.config.f.x19 disabled {y n m l}}
	global CONFIG_ULTRA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_SMC == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]];set CONFIG_ULTRA [sync_tristate $CONFIG_ULTRA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x20 disabled {y}} else {configure_entry .menu29.config.f.x20 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x20 disabled {m}} else {configure_entry .menu29.config.f.x20 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x20 normal {m}} else {configure_entry .menu29.config.f.x20 disabled {m}}; configure_entry .menu29.config.f.x20 normal {n l}} else {configure_entry .menu29.config.f.x20 disabled {y n m l}}
	global CONFIG_ULTRA32
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_SMC == 1) && ($CONFIG_EISA == 1 || $CONFIG_EISA == 2 || $CONFIG_EISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EISA]];set CONFIG_ULTRA32 [sync_tristate $CONFIG_ULTRA32 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x21 disabled {y}} else {configure_entry .menu29.config.f.x21 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x21 disabled {m}} else {configure_entry .menu29.config.f.x21 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x21 normal {m}} else {configure_entry .menu29.config.f.x21 disabled {m}}; configure_entry .menu29.config.f.x21 normal {n l}} else {configure_entry .menu29.config.f.x21 disabled {y n m l}}
	global CONFIG_SMC9194
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_SMC == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]];set CONFIG_SMC9194 [sync_tristate $CONFIG_SMC9194 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x22 disabled {y}} else {configure_entry .menu29.config.f.x22 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x22 disabled {m}} else {configure_entry .menu29.config.f.x22 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x22 normal {m}} else {configure_entry .menu29.config.f.x22 disabled {m}}; configure_entry .menu29.config.f.x22 normal {n l}} else {configure_entry .menu29.config.f.x22 disabled {y n m l}}
	global CONFIG_NET_VENDOR_RACAL
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1)} then {
	configure_entry .menu29.config.f.x23 normal {n l y}} else {configure_entry .menu29.config.f.x23 disabled {y n l}}
	global CONFIG_NI5010
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_RACAL == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA $CONFIG_EXPERIMENTAL]];set CONFIG_NI5010 [sync_tristate $CONFIG_NI5010 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x24 disabled {y}} else {configure_entry .menu29.config.f.x24 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x24 disabled {m}} else {configure_entry .menu29.config.f.x24 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x24 normal {m}} else {configure_entry .menu29.config.f.x24 disabled {m}}; configure_entry .menu29.config.f.x24 normal {n l}} else {configure_entry .menu29.config.f.x24 disabled {y n m l}}
	global CONFIG_NI52
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_RACAL == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]];set CONFIG_NI52 [sync_tristate $CONFIG_NI52 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x25 disabled {y}} else {configure_entry .menu29.config.f.x25 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x25 disabled {m}} else {configure_entry .menu29.config.f.x25 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x25 normal {m}} else {configure_entry .menu29.config.f.x25 disabled {m}}; configure_entry .menu29.config.f.x25 normal {n l}} else {configure_entry .menu29.config.f.x25 disabled {y n m l}}
	global CONFIG_NI65
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_RACAL == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]];set CONFIG_NI65 [sync_tristate $CONFIG_NI65 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x26 disabled {y}} else {configure_entry .menu29.config.f.x26 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x26 disabled {m}} else {configure_entry .menu29.config.f.x26 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x26 normal {m}} else {configure_entry .menu29.config.f.x26 disabled {m}}; configure_entry .menu29.config.f.x26 normal {n l}} else {configure_entry .menu29.config.f.x26 disabled {y n m l}}
	global CONFIG_AT1700
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_MCA == 1) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_AT1700 [sync_tristate $CONFIG_AT1700 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x27 disabled {y}} else {configure_entry .menu29.config.f.x27 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x27 disabled {m}} else {configure_entry .menu29.config.f.x27 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x27 normal {m}} else {configure_entry .menu29.config.f.x27 disabled {m}}; configure_entry .menu29.config.f.x27 normal {n l}} else {configure_entry .menu29.config.f.x27 disabled {y n m l}}
	global CONFIG_DEPCA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_MCA == 1)} then {
	configure_entry .menu29.config.f.x28 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x28 normal {m}} else {configure_entry .menu29.config.f.x28 disabled {m}}; configure_entry .menu29.config.f.x28 normal {n l}} else {configure_entry .menu29.config.f.x28 disabled {y n m l}}
	global CONFIG_HP100
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu29.config.f.x29 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x29 normal {m}} else {configure_entry .menu29.config.f.x29 disabled {m}}; configure_entry .menu29.config.f.x29 normal {n l}} else {configure_entry .menu29.config.f.x29 disabled {y n m l}}
	global CONFIG_NET_ISA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]];set CONFIG_NET_ISA [sync_bool $CONFIG_NET_ISA $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x30 disabled {y};} else {configure_entry .menu29.config.f.x30 normal {y};}; configure_entry .menu29.config.f.x30 normal {n l}} else {configure_entry .menu29.config.f.x30 disabled {y n l}}
	global CONFIG_E2100
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {
	configure_entry .menu29.config.f.x31 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x31 normal {m}} else {configure_entry .menu29.config.f.x31 disabled {m}}; configure_entry .menu29.config.f.x31 normal {n l}} else {configure_entry .menu29.config.f.x31 disabled {y n m l}}
	global CONFIG_EWRK3
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {
	configure_entry .menu29.config.f.x32 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x32 normal {m}} else {configure_entry .menu29.config.f.x32 disabled {m}}; configure_entry .menu29.config.f.x32 normal {n l}} else {configure_entry .menu29.config.f.x32 disabled {y n m l}}
	global CONFIG_EEXPRESS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {
	configure_entry .menu29.config.f.x33 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x33 normal {m}} else {configure_entry .menu29.config.f.x33 disabled {m}}; configure_entry .menu29.config.f.x33 normal {n l}} else {configure_entry .menu29.config.f.x33 disabled {y n m l}}
	global CONFIG_EEXPRESS_PRO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {
	configure_entry .menu29.config.f.x34 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x34 normal {m}} else {configure_entry .menu29.config.f.x34 disabled {m}}; configure_entry .menu29.config.f.x34 normal {n l}} else {configure_entry .menu29.config.f.x34 disabled {y n m l}}
	global CONFIG_HPLAN_PLUS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {
	configure_entry .menu29.config.f.x35 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x35 normal {m}} else {configure_entry .menu29.config.f.x35 disabled {m}}; configure_entry .menu29.config.f.x35 normal {n l}} else {configure_entry .menu29.config.f.x35 disabled {y n m l}}
	global CONFIG_HPLAN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {
	configure_entry .menu29.config.f.x36 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x36 normal {m}} else {configure_entry .menu29.config.f.x36 disabled {m}}; configure_entry .menu29.config.f.x36 normal {n l}} else {configure_entry .menu29.config.f.x36 disabled {y n m l}}
	global CONFIG_LP486E
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {
	configure_entry .menu29.config.f.x37 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x37 normal {m}} else {configure_entry .menu29.config.f.x37 disabled {m}}; configure_entry .menu29.config.f.x37 normal {n l}} else {configure_entry .menu29.config.f.x37 disabled {y n m l}}
	global CONFIG_ETH16I
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {
	configure_entry .menu29.config.f.x38 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x38 normal {m}} else {configure_entry .menu29.config.f.x38 disabled {m}}; configure_entry .menu29.config.f.x38 normal {n l}} else {configure_entry .menu29.config.f.x38 disabled {y n m l}}
	global CONFIG_NE2000
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {
	configure_entry .menu29.config.f.x39 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x39 normal {m}} else {configure_entry .menu29.config.f.x39 disabled {m}}; configure_entry .menu29.config.f.x39 normal {n l}} else {configure_entry .menu29.config.f.x39 disabled {y n m l}}
	global CONFIG_SKMC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_MCA == 1)} then {
	configure_entry .menu29.config.f.x40 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x40 normal {m}} else {configure_entry .menu29.config.f.x40 disabled {m}}; configure_entry .menu29.config.f.x40 normal {n l}} else {configure_entry .menu29.config.f.x40 disabled {y n m l}}
	global CONFIG_NE2_MCA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_MCA == 1)} then {
	configure_entry .menu29.config.f.x41 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x41 normal {m}} else {configure_entry .menu29.config.f.x41 disabled {m}}; configure_entry .menu29.config.f.x41 normal {n l}} else {configure_entry .menu29.config.f.x41 disabled {y n m l}}
	global CONFIG_IBMLANA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_MCA == 1)} then {
	configure_entry .menu29.config.f.x42 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x42 normal {m}} else {configure_entry .menu29.config.f.x42 disabled {m}}; configure_entry .menu29.config.f.x42 normal {n l}} else {configure_entry .menu29.config.f.x42 disabled {y n m l}}
	global CONFIG_NET_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu29.config.f.x43 normal {n l y}} else {configure_entry .menu29.config.f.x43 disabled {y n l}}
	global CONFIG_PCNET32
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_PCNET32 [sync_tristate $CONFIG_PCNET32 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x44 disabled {y}} else {configure_entry .menu29.config.f.x44 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x44 disabled {m}} else {configure_entry .menu29.config.f.x44 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x44 normal {m}} else {configure_entry .menu29.config.f.x44 disabled {m}}; configure_entry .menu29.config.f.x44 normal {n l}} else {configure_entry .menu29.config.f.x44 disabled {y n m l}}
	global CONFIG_ADAPTEC_STARFIRE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI $CONFIG_EXPERIMENTAL]];set CONFIG_ADAPTEC_STARFIRE [sync_tristate $CONFIG_ADAPTEC_STARFIRE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x45 disabled {y}} else {configure_entry .menu29.config.f.x45 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x45 disabled {m}} else {configure_entry .menu29.config.f.x45 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x45 normal {m}} else {configure_entry .menu29.config.f.x45 disabled {m}}; configure_entry .menu29.config.f.x45 normal {n l}} else {configure_entry .menu29.config.f.x45 disabled {y n m l}}
	global CONFIG_APRICOT
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]];set CONFIG_APRICOT [sync_tristate $CONFIG_APRICOT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x46 disabled {y}} else {configure_entry .menu29.config.f.x46 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x46 disabled {m}} else {configure_entry .menu29.config.f.x46 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x46 normal {m}} else {configure_entry .menu29.config.f.x46 disabled {m}}; configure_entry .menu29.config.f.x46 normal {n l}} else {configure_entry .menu29.config.f.x46 disabled {y n m l}}
	global CONFIG_CS89x0
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]];set CONFIG_CS89x0 [sync_tristate $CONFIG_CS89x0 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x47 disabled {y}} else {configure_entry .menu29.config.f.x47 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x47 disabled {m}} else {configure_entry .menu29.config.f.x47 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x47 normal {m}} else {configure_entry .menu29.config.f.x47 disabled {m}}; configure_entry .menu29.config.f.x47 normal {n l}} else {configure_entry .menu29.config.f.x47 disabled {y n m l}}
	global CONFIG_TULIP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_TULIP [sync_tristate $CONFIG_TULIP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x48 disabled {y}} else {configure_entry .menu29.config.f.x48 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x48 disabled {m}} else {configure_entry .menu29.config.f.x48 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x48 normal {m}} else {configure_entry .menu29.config.f.x48 disabled {m}}; configure_entry .menu29.config.f.x48 normal {n l}} else {configure_entry .menu29.config.f.x48 disabled {y n m l}}
	global CONFIG_TULIP_MWI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_TULIP == 1 || $CONFIG_TULIP == 2) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_TULIP_MWI [sync_bool $CONFIG_TULIP_MWI $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x49 disabled {y};} else {configure_entry .menu29.config.f.x49 normal {y};}; configure_entry .menu29.config.f.x49 normal {n l}} else {configure_entry .menu29.config.f.x49 disabled {y n l}}
	global CONFIG_TULIP_MMIO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_TULIP == 1 || $CONFIG_TULIP == 2)} then {
	configure_entry .menu29.config.f.x50 normal {n l y}} else {configure_entry .menu29.config.f.x50 disabled {y n l}}
	global CONFIG_DE4X5
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_EISA == 1)} then {
	configure_entry .menu29.config.f.x51 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x51 normal {m}} else {configure_entry .menu29.config.f.x51 disabled {m}}; configure_entry .menu29.config.f.x51 normal {n l}} else {configure_entry .menu29.config.f.x51 disabled {y n m l}}
	global CONFIG_DGRS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_EISA == 1)} then {
	configure_entry .menu29.config.f.x52 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x52 normal {m}} else {configure_entry .menu29.config.f.x52 disabled {m}}; configure_entry .menu29.config.f.x52 normal {n l}} else {configure_entry .menu29.config.f.x52 disabled {y n m l}}
	global CONFIG_DM9102
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_DM9102 [sync_tristate $CONFIG_DM9102 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x53 disabled {y}} else {configure_entry .menu29.config.f.x53 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x53 disabled {m}} else {configure_entry .menu29.config.f.x53 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x53 normal {m}} else {configure_entry .menu29.config.f.x53 disabled {m}}; configure_entry .menu29.config.f.x53 normal {n l}} else {configure_entry .menu29.config.f.x53 disabled {y n m l}}
	global CONFIG_EEPRO100
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_EEPRO100 [sync_tristate $CONFIG_EEPRO100 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x54 disabled {y}} else {configure_entry .menu29.config.f.x54 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x54 disabled {m}} else {configure_entry .menu29.config.f.x54 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x54 normal {m}} else {configure_entry .menu29.config.f.x54 disabled {m}}; configure_entry .menu29.config.f.x54 normal {n l}} else {configure_entry .menu29.config.f.x54 disabled {y n m l}}
	global CONFIG_LNE390
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_EISA == 1 || $CONFIG_EISA == 2 || $CONFIG_EISA == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EISA $CONFIG_EXPERIMENTAL]];set CONFIG_LNE390 [sync_tristate $CONFIG_LNE390 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x55 disabled {y}} else {configure_entry .menu29.config.f.x55 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x55 disabled {m}} else {configure_entry .menu29.config.f.x55 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x55 normal {m}} else {configure_entry .menu29.config.f.x55 disabled {m}}; configure_entry .menu29.config.f.x55 normal {n l}} else {configure_entry .menu29.config.f.x55 disabled {y n m l}}
	global CONFIG_FEALNX
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_FEALNX [sync_tristate $CONFIG_FEALNX $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x56 disabled {y}} else {configure_entry .menu29.config.f.x56 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x56 disabled {m}} else {configure_entry .menu29.config.f.x56 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x56 normal {m}} else {configure_entry .menu29.config.f.x56 disabled {m}}; configure_entry .menu29.config.f.x56 normal {n l}} else {configure_entry .menu29.config.f.x56 disabled {y n m l}}
	global CONFIG_NATSEMI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_NATSEMI [sync_tristate $CONFIG_NATSEMI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x57 disabled {y}} else {configure_entry .menu29.config.f.x57 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x57 disabled {m}} else {configure_entry .menu29.config.f.x57 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x57 normal {m}} else {configure_entry .menu29.config.f.x57 disabled {m}}; configure_entry .menu29.config.f.x57 normal {n l}} else {configure_entry .menu29.config.f.x57 disabled {y n m l}}
	global CONFIG_NE2K_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_NE2K_PCI [sync_tristate $CONFIG_NE2K_PCI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x58 disabled {y}} else {configure_entry .menu29.config.f.x58 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x58 disabled {m}} else {configure_entry .menu29.config.f.x58 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x58 normal {m}} else {configure_entry .menu29.config.f.x58 disabled {m}}; configure_entry .menu29.config.f.x58 normal {n l}} else {configure_entry .menu29.config.f.x58 disabled {y n m l}}
	global CONFIG_NE3210
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_EISA == 1 || $CONFIG_EISA == 2 || $CONFIG_EISA == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EISA $CONFIG_EXPERIMENTAL]];set CONFIG_NE3210 [sync_tristate $CONFIG_NE3210 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x59 disabled {y}} else {configure_entry .menu29.config.f.x59 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x59 disabled {m}} else {configure_entry .menu29.config.f.x59 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x59 normal {m}} else {configure_entry .menu29.config.f.x59 disabled {m}}; configure_entry .menu29.config.f.x59 normal {n l}} else {configure_entry .menu29.config.f.x59 disabled {y n m l}}
	global CONFIG_ES3210
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_EISA == 1 || $CONFIG_EISA == 2 || $CONFIG_EISA == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EISA $CONFIG_EXPERIMENTAL]];set CONFIG_ES3210 [sync_tristate $CONFIG_ES3210 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x60 disabled {y}} else {configure_entry .menu29.config.f.x60 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x60 disabled {m}} else {configure_entry .menu29.config.f.x60 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x60 normal {m}} else {configure_entry .menu29.config.f.x60 disabled {m}}; configure_entry .menu29.config.f.x60 normal {n l}} else {configure_entry .menu29.config.f.x60 disabled {y n m l}}
	global CONFIG_8139CP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI $CONFIG_EXPERIMENTAL]];set CONFIG_8139CP [sync_tristate $CONFIG_8139CP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x61 disabled {y}} else {configure_entry .menu29.config.f.x61 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x61 disabled {m}} else {configure_entry .menu29.config.f.x61 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x61 normal {m}} else {configure_entry .menu29.config.f.x61 disabled {m}}; configure_entry .menu29.config.f.x61 normal {n l}} else {configure_entry .menu29.config.f.x61 disabled {y n m l}}
	global CONFIG_8139TOO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_8139TOO [sync_tristate $CONFIG_8139TOO $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x62 disabled {y}} else {configure_entry .menu29.config.f.x62 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x62 disabled {m}} else {configure_entry .menu29.config.f.x62 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x62 normal {m}} else {configure_entry .menu29.config.f.x62 disabled {m}}; configure_entry .menu29.config.f.x62 normal {n l}} else {configure_entry .menu29.config.f.x62 disabled {y n m l}}
	global CONFIG_8139TOO_PIO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_8139TOO == 1 || $CONFIG_8139TOO == 2 || $CONFIG_8139TOO == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_8139TOO]];set CONFIG_8139TOO_PIO [sync_bool $CONFIG_8139TOO_PIO $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu29.config.f.x63 disabled {y};} else {configure_entry .menu29.config.f.x63 normal {y};}; configure_entry .menu29.config.f.x63 normal {n l}} else {configure_entry .menu29.config.f.x63 disabled {y n l}}
	global CONFIG_8139TOO_TUNE_TWISTER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_8139TOO == 1 || $CONFIG_8139TOO == 2 || $CONFIG_8139TOO == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_8139TOO $CONFIG_EXPERIMENTAL]];set CONFIG_8139TOO_TUNE_TWISTER [sync_bool $CONFIG_8139TOO_TUNE_TWISTER $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu29.config.f.x64 disabled {y};} else {configure_entry .menu29.config.f.x64 normal {y};}; configure_entry .menu29.config.f.x64 normal {n l}} else {configure_entry .menu29.config.f.x64 disabled {y n l}}
	global CONFIG_8139TOO_8129
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_8139TOO == 1 || $CONFIG_8139TOO == 2 || $CONFIG_8139TOO == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_8139TOO]];set CONFIG_8139TOO_8129 [sync_bool $CONFIG_8139TOO_8129 $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu29.config.f.x65 disabled {y};} else {configure_entry .menu29.config.f.x65 normal {y};}; configure_entry .menu29.config.f.x65 normal {n l}} else {configure_entry .menu29.config.f.x65 disabled {y n l}}
	global CONFIG_RTL8139
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_RTL8139 [sync_tristate $CONFIG_RTL8139 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x66 disabled {y}} else {configure_entry .menu29.config.f.x66 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x66 disabled {m}} else {configure_entry .menu29.config.f.x66 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x66 normal {m}} else {configure_entry .menu29.config.f.x66 disabled {m}}; configure_entry .menu29.config.f.x66 normal {n l}} else {configure_entry .menu29.config.f.x66 disabled {y n m l}}
	global CONFIG_SIS900
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_SIS900 [sync_tristate $CONFIG_SIS900 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x67 disabled {y}} else {configure_entry .menu29.config.f.x67 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x67 disabled {m}} else {configure_entry .menu29.config.f.x67 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x67 normal {m}} else {configure_entry .menu29.config.f.x67 disabled {m}}; configure_entry .menu29.config.f.x67 normal {n l}} else {configure_entry .menu29.config.f.x67 disabled {y n m l}}
	global CONFIG_EPIC100
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_EPIC100 [sync_tristate $CONFIG_EPIC100 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x68 disabled {y}} else {configure_entry .menu29.config.f.x68 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x68 disabled {m}} else {configure_entry .menu29.config.f.x68 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x68 normal {m}} else {configure_entry .menu29.config.f.x68 disabled {m}}; configure_entry .menu29.config.f.x68 normal {n l}} else {configure_entry .menu29.config.f.x68 disabled {y n m l}}
	global CONFIG_SUNDANCE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_SUNDANCE [sync_tristate $CONFIG_SUNDANCE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x69 disabled {y}} else {configure_entry .menu29.config.f.x69 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x69 disabled {m}} else {configure_entry .menu29.config.f.x69 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x69 normal {m}} else {configure_entry .menu29.config.f.x69 disabled {m}}; configure_entry .menu29.config.f.x69 normal {n l}} else {configure_entry .menu29.config.f.x69 disabled {y n m l}}
	global CONFIG_TLAN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_EISA == 1)} then {
	configure_entry .menu29.config.f.x70 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x70 normal {m}} else {configure_entry .menu29.config.f.x70 disabled {m}}; configure_entry .menu29.config.f.x70 normal {n l}} else {configure_entry .menu29.config.f.x70 disabled {y n m l}}
	global CONFIG_VIA_RHINE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_VIA_RHINE [sync_tristate $CONFIG_VIA_RHINE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x71 disabled {y}} else {configure_entry .menu29.config.f.x71 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x71 disabled {m}} else {configure_entry .menu29.config.f.x71 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x71 normal {m}} else {configure_entry .menu29.config.f.x71 disabled {m}}; configure_entry .menu29.config.f.x71 normal {n l}} else {configure_entry .menu29.config.f.x71 disabled {y n m l}}
	global CONFIG_VIA_RHINE_MMIO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_VIA_RHINE == 1 || $CONFIG_VIA_RHINE == 2 || $CONFIG_VIA_RHINE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_VIA_RHINE $CONFIG_EXPERIMENTAL]];set CONFIG_VIA_RHINE_MMIO [sync_bool $CONFIG_VIA_RHINE_MMIO $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu29.config.f.x72 disabled {y};} else {configure_entry .menu29.config.f.x72 normal {y};}; configure_entry .menu29.config.f.x72 normal {n l}} else {configure_entry .menu29.config.f.x72 disabled {y n l}}
	global CONFIG_WINBOND_840
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_WINBOND_840 [sync_tristate $CONFIG_WINBOND_840 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x73 disabled {y}} else {configure_entry .menu29.config.f.x73 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x73 disabled {m}} else {configure_entry .menu29.config.f.x73 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x73 normal {m}} else {configure_entry .menu29.config.f.x73 disabled {m}}; configure_entry .menu29.config.f.x73 normal {n l}} else {configure_entry .menu29.config.f.x73 disabled {y n m l}}
	global CONFIG_MIPS
	global CONFIG_LAN_SAA9730
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_EXPERIMENTAL == 1 && $CONFIG_MIPS == 1)} then {
	configure_entry .menu29.config.f.x74 normal {n l y}} else {configure_entry .menu29.config.f.x74 disabled {y n l}}
	global CONFIG_NET_POCKET
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1)} then {
	configure_entry .menu29.config.f.x75 normal {n l y}} else {configure_entry .menu29.config.f.x75 disabled {y n l}}
	global CONFIG_DE600
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_POCKET == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]];set CONFIG_DE600 [sync_tristate $CONFIG_DE600 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x76 disabled {y}} else {configure_entry .menu29.config.f.x76 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x76 disabled {m}} else {configure_entry .menu29.config.f.x76 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x76 normal {m}} else {configure_entry .menu29.config.f.x76 disabled {m}}; configure_entry .menu29.config.f.x76 normal {n l}} else {configure_entry .menu29.config.f.x76 disabled {y n m l}}
	global CONFIG_DE620
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_POCKET == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]];set CONFIG_DE620 [sync_tristate $CONFIG_DE620 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu29.config.f.x77 disabled {y}} else {configure_entry .menu29.config.f.x77 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu29.config.f.x77 disabled {m}} else {configure_entry .menu29.config.f.x77 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x77 normal {m}} else {configure_entry .menu29.config.f.x77 disabled {m}}; configure_entry .menu29.config.f.x77 normal {n l}} else {configure_entry .menu29.config.f.x77 disabled {y n m l}}
	global CONFIG_FEC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1)} then {
	configure_entry .menu29.config.f.x78 normal {n l y}} else {configure_entry .menu29.config.f.x78 disabled {y n l}}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1)} then {
	configure_entry .menu29.config.f.x79 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu29.config.f.x79 normal {m}} else {configure_entry .menu29.config.f.x79 disabled {m}}; configure_entry .menu29.config.f.x79 normal {n l}} else {configure_entry .menu29.config.f.x79 disabled {y n m l}}
	global CONFIG_UCCS89x0_HW_SWAP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_CS89x0 != 0)} then {
	configure_entry .menu29.config.f.x80 normal {n l y}} else {configure_entry .menu29.config.f.x80 disabled {y n l}}
}


proc update_define_menu29 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_HAPPYMEAL
	global CONFIG_EL3
	global CONFIG_VORTEX
	global CONFIG_DEPCA
	global CONFIG_HP100
	global CONFIG_E2100
	global CONFIG_EWRK3
	global CONFIG_EEXPRESS
	global CONFIG_EEXPRESS_PRO
	global CONFIG_HPLAN_PLUS
	global CONFIG_HPLAN
	global CONFIG_LP486E
	global CONFIG_ETH16I
	global CONFIG_NE2000
	global CONFIG_SKMC
	global CONFIG_NE2_MCA
	global CONFIG_IBMLANA
	global CONFIG_NET_PCI
	global CONFIG_DE4X5
	global CONFIG_DGRS
	global CONFIG_TLAN
	global CONFIG_CS89x0
	global CONFIG_NET_ETHERNET
set CONFIG_NET_ETHERNET [expr $CONFIG_NET_ETHERNET|16]
set CONFIG_HAPPYMEAL [expr $CONFIG_HAPPYMEAL|16]
	global CONFIG_NET_VENDOR_3COM
set CONFIG_NET_VENDOR_3COM [expr $CONFIG_NET_VENDOR_3COM|16]
set CONFIG_EL3 [expr $CONFIG_EL3|16]
set CONFIG_VORTEX [expr $CONFIG_VORTEX|16]
	global CONFIG_NET_VENDOR_SMC
set CONFIG_NET_VENDOR_SMC [expr $CONFIG_NET_VENDOR_SMC|16]
	global CONFIG_NET_VENDOR_RACAL
set CONFIG_NET_VENDOR_RACAL [expr $CONFIG_NET_VENDOR_RACAL|16]
set CONFIG_DEPCA [expr $CONFIG_DEPCA|16]
set CONFIG_HP100 [expr $CONFIG_HP100|16]
set CONFIG_E2100 [expr $CONFIG_E2100|16]
set CONFIG_EWRK3 [expr $CONFIG_EWRK3|16]
set CONFIG_EEXPRESS [expr $CONFIG_EEXPRESS|16]
set CONFIG_EEXPRESS_PRO [expr $CONFIG_EEXPRESS_PRO|16]
set CONFIG_HPLAN_PLUS [expr $CONFIG_HPLAN_PLUS|16]
set CONFIG_HPLAN [expr $CONFIG_HPLAN|16]
set CONFIG_LP486E [expr $CONFIG_LP486E|16]
set CONFIG_ETH16I [expr $CONFIG_ETH16I|16]
set CONFIG_NE2000 [expr $CONFIG_NE2000|16]
set CONFIG_SKMC [expr $CONFIG_SKMC|16]
set CONFIG_NE2_MCA [expr $CONFIG_NE2_MCA|16]
set CONFIG_IBMLANA [expr $CONFIG_IBMLANA|16]
set CONFIG_NET_PCI [expr $CONFIG_NET_PCI|16]
	global CONFIG_TULIP_MMIO
set CONFIG_TULIP_MMIO [expr $CONFIG_TULIP_MMIO|16]
set CONFIG_DE4X5 [expr $CONFIG_DE4X5|16]
set CONFIG_DGRS [expr $CONFIG_DGRS|16]
set CONFIG_TLAN [expr $CONFIG_TLAN|16]
	global CONFIG_LAN_SAA9730
set CONFIG_LAN_SAA9730 [expr $CONFIG_LAN_SAA9730|16]
	global CONFIG_NET_POCKET
set CONFIG_NET_POCKET [expr $CONFIG_NET_POCKET|16]
	global CONFIG_FEC
set CONFIG_FEC [expr $CONFIG_FEC|16]
set CONFIG_CS89x0 [expr $CONFIG_CS89x0|16]
	global CONFIG_UCCS89x0_HW_SWAP
set CONFIG_UCCS89x0_HW_SWAP [expr $CONFIG_UCCS89x0_HW_SWAP|16]
	global CONFIG_NET
	global CONFIG_NETDEVICES
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	set CONFIG_NET_ETHERNET [expr $CONFIG_NET_ETHERNET&15]}
	global CONFIG_SBUS
	global CONFIG_SUNLANCE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_SBUS == 1 || $CONFIG_SBUS == 2 || $CONFIG_SBUS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SBUS]]; set CONFIG_SUNLANCE [sync_tristate $CONFIG_SUNLANCE $tmpvar_dep]; set CONFIG_SUNLANCE [expr $CONFIG_SUNLANCE&15]}
	global CONFIG_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_PCI == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_HAPPYMEAL == 2)} then {set CONFIG_HAPPYMEAL 1}; set CONFIG_HAPPYMEAL [expr $CONFIG_HAPPYMEAL&15]}
	global CONFIG_EXPERIMENTAL
	global CONFIG_SUNBMAC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_SBUS == 1 || $CONFIG_SBUS == 2 || $CONFIG_SBUS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SBUS $CONFIG_EXPERIMENTAL]]; set CONFIG_SUNBMAC [sync_tristate $CONFIG_SUNBMAC $tmpvar_dep]; set CONFIG_SUNBMAC [expr $CONFIG_SUNBMAC&15]}
	global CONFIG_SUNQE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_SBUS == 1 || $CONFIG_SBUS == 2 || $CONFIG_SBUS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SBUS]]; set CONFIG_SUNQE [sync_tristate $CONFIG_SUNQE $tmpvar_dep]; set CONFIG_SUNQE [expr $CONFIG_SUNQE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_SBUS == 1 || $CONFIG_SBUS == 2 || $CONFIG_SBUS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SBUS]]; set CONFIG_SUNLANCE [sync_tristate $CONFIG_SUNLANCE $tmpvar_dep]; set CONFIG_SUNLANCE [expr $CONFIG_SUNLANCE&15]}
	global CONFIG_SUNGEM
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_SUNGEM [sync_tristate $CONFIG_SUNGEM $tmpvar_dep]; set CONFIG_SUNGEM [expr $CONFIG_SUNGEM&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1)} then {
	set CONFIG_NET_VENDOR_3COM [expr $CONFIG_NET_VENDOR_3COM&15]}
	global CONFIG_ISA
	global CONFIG_EL1
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]]; set CONFIG_EL1 [sync_tristate $CONFIG_EL1 $tmpvar_dep]; set CONFIG_EL1 [expr $CONFIG_EL1&15]}
	global CONFIG_EL2
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]]; set CONFIG_EL2 [sync_tristate $CONFIG_EL2 $tmpvar_dep]; set CONFIG_EL2 [expr $CONFIG_EL2&15]}
	global CONFIG_ELPLUS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]]; set CONFIG_ELPLUS [sync_tristate $CONFIG_ELPLUS $tmpvar_dep]; set CONFIG_ELPLUS [expr $CONFIG_ELPLUS&15]}
	global CONFIG_EL16
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA $CONFIG_EXPERIMENTAL]]; set CONFIG_EL16 [sync_tristate $CONFIG_EL16 $tmpvar_dep]; set CONFIG_EL16 [expr $CONFIG_EL16&15]}
	global CONFIG_MCA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_MCA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_EL3 == 2)} then {set CONFIG_EL3 1}; set CONFIG_EL3 [expr $CONFIG_EL3&15]}
	global CONFIG_ELMC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_MCA == 1 || $CONFIG_MCA == 2 || $CONFIG_MCA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MCA]]; set CONFIG_ELMC [sync_tristate $CONFIG_ELMC $tmpvar_dep]; set CONFIG_ELMC [expr $CONFIG_ELMC&15]}
	global CONFIG_ELMC_II
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_MCA == 1 || $CONFIG_MCA == 2 || $CONFIG_MCA == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MCA $CONFIG_EXPERIMENTAL]]; set CONFIG_ELMC_II [sync_tristate $CONFIG_ELMC_II $tmpvar_dep]; set CONFIG_ELMC_II [expr $CONFIG_ELMC_II&15]}
	global CONFIG_EISA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_PCI == 1 || $CONFIG_EISA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_VORTEX == 2)} then {set CONFIG_VORTEX 1}; set CONFIG_VORTEX [expr $CONFIG_VORTEX&15]}
	global CONFIG_LANCE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]]; set CONFIG_LANCE [sync_tristate $CONFIG_LANCE $tmpvar_dep]; set CONFIG_LANCE [expr $CONFIG_LANCE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1)} then {
	set CONFIG_NET_VENDOR_SMC [expr $CONFIG_NET_VENDOR_SMC&15]}
	global CONFIG_WD80x3
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_SMC == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]]; set CONFIG_WD80x3 [sync_tristate $CONFIG_WD80x3 $tmpvar_dep]; set CONFIG_WD80x3 [expr $CONFIG_WD80x3&15]}
	global CONFIG_ULTRAMCA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_SMC == 1) && ($CONFIG_MCA == 1 || $CONFIG_MCA == 2 || $CONFIG_MCA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MCA]]; set CONFIG_ULTRAMCA [sync_tristate $CONFIG_ULTRAMCA $tmpvar_dep]; set CONFIG_ULTRAMCA [expr $CONFIG_ULTRAMCA&15]}
	global CONFIG_ULTRA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_SMC == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]]; set CONFIG_ULTRA [sync_tristate $CONFIG_ULTRA $tmpvar_dep]; set CONFIG_ULTRA [expr $CONFIG_ULTRA&15]}
	global CONFIG_ULTRA32
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_SMC == 1) && ($CONFIG_EISA == 1 || $CONFIG_EISA == 2 || $CONFIG_EISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EISA]]; set CONFIG_ULTRA32 [sync_tristate $CONFIG_ULTRA32 $tmpvar_dep]; set CONFIG_ULTRA32 [expr $CONFIG_ULTRA32&15]}
	global CONFIG_SMC9194
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_SMC == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]]; set CONFIG_SMC9194 [sync_tristate $CONFIG_SMC9194 $tmpvar_dep]; set CONFIG_SMC9194 [expr $CONFIG_SMC9194&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1)} then {
	set CONFIG_NET_VENDOR_RACAL [expr $CONFIG_NET_VENDOR_RACAL&15]}
	global CONFIG_NI5010
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_RACAL == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA $CONFIG_EXPERIMENTAL]]; set CONFIG_NI5010 [sync_tristate $CONFIG_NI5010 $tmpvar_dep]; set CONFIG_NI5010 [expr $CONFIG_NI5010&15]}
	global CONFIG_NI52
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_RACAL == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]]; set CONFIG_NI52 [sync_tristate $CONFIG_NI52 $tmpvar_dep]; set CONFIG_NI52 [expr $CONFIG_NI52&15]}
	global CONFIG_NI65
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_RACAL == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]]; set CONFIG_NI65 [sync_tristate $CONFIG_NI65 $tmpvar_dep]; set CONFIG_NI65 [expr $CONFIG_NI65&15]}
	global CONFIG_AT1700
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_MCA == 1) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]]; set CONFIG_AT1700 [sync_tristate $CONFIG_AT1700 $tmpvar_dep]; set CONFIG_AT1700 [expr $CONFIG_AT1700&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_MCA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_DEPCA == 2)} then {set CONFIG_DEPCA 1}; set CONFIG_DEPCA [expr $CONFIG_DEPCA&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_PCI == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_HP100 == 2)} then {set CONFIG_HP100 1}; set CONFIG_HP100 [expr $CONFIG_HP100&15]}
	global CONFIG_NET_ISA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]];set CONFIG_NET_ISA [sync_bool $CONFIG_NET_ISA $tmpvar_dep 0];set CONFIG_NET_ISA [expr $CONFIG_NET_ISA&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_E2100 == 2)} then {set CONFIG_E2100 1}; set CONFIG_E2100 [expr $CONFIG_E2100&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_EWRK3 == 2)} then {set CONFIG_EWRK3 1}; set CONFIG_EWRK3 [expr $CONFIG_EWRK3&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_EEXPRESS == 2)} then {set CONFIG_EEXPRESS 1}; set CONFIG_EEXPRESS [expr $CONFIG_EEXPRESS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_EEXPRESS_PRO == 2)} then {set CONFIG_EEXPRESS_PRO 1}; set CONFIG_EEXPRESS_PRO [expr $CONFIG_EEXPRESS_PRO&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_HPLAN_PLUS == 2)} then {set CONFIG_HPLAN_PLUS 1}; set CONFIG_HPLAN_PLUS [expr $CONFIG_HPLAN_PLUS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_HPLAN == 2)} then {set CONFIG_HPLAN 1}; set CONFIG_HPLAN [expr $CONFIG_HPLAN&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_LP486E == 2)} then {set CONFIG_LP486E 1}; set CONFIG_LP486E [expr $CONFIG_LP486E&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ETH16I == 2)} then {set CONFIG_ETH16I 1}; set CONFIG_ETH16I [expr $CONFIG_ETH16I&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NE2000 == 2)} then {set CONFIG_NE2000 1}; set CONFIG_NE2000 [expr $CONFIG_NE2000&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_MCA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_SKMC == 2)} then {set CONFIG_SKMC 1}; set CONFIG_SKMC [expr $CONFIG_SKMC&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_MCA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NE2_MCA == 2)} then {set CONFIG_NE2_MCA 1}; set CONFIG_NE2_MCA [expr $CONFIG_NE2_MCA&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_MCA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IBMLANA == 2)} then {set CONFIG_IBMLANA 1}; set CONFIG_IBMLANA [expr $CONFIG_IBMLANA&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_PCI == 1)} then {
	set CONFIG_NET_PCI [expr $CONFIG_NET_PCI&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_PCI != 1)} then {	global CONSTANT_N
set CONFIG_NET_PCI $CONSTANT_N }
	global CONFIG_PCNET32
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_PCNET32 [sync_tristate $CONFIG_PCNET32 $tmpvar_dep]; set CONFIG_PCNET32 [expr $CONFIG_PCNET32&15]}
	global CONFIG_ADAPTEC_STARFIRE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI $CONFIG_EXPERIMENTAL]]; set CONFIG_ADAPTEC_STARFIRE [sync_tristate $CONFIG_ADAPTEC_STARFIRE $tmpvar_dep]; set CONFIG_ADAPTEC_STARFIRE [expr $CONFIG_ADAPTEC_STARFIRE&15]}
	global CONFIG_APRICOT
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]]; set CONFIG_APRICOT [sync_tristate $CONFIG_APRICOT $tmpvar_dep]; set CONFIG_APRICOT [expr $CONFIG_APRICOT&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]]; set CONFIG_CS89x0 [sync_tristate $CONFIG_CS89x0 $tmpvar_dep]; set CONFIG_CS89x0 [expr $CONFIG_CS89x0&15]}
	global CONFIG_TULIP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_TULIP [sync_tristate $CONFIG_TULIP $tmpvar_dep]; set CONFIG_TULIP [expr $CONFIG_TULIP&15]}
	global CONFIG_TULIP_MWI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_TULIP == 1 || $CONFIG_TULIP == 2) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_TULIP_MWI [sync_bool $CONFIG_TULIP_MWI $tmpvar_dep 0];set CONFIG_TULIP_MWI [expr $CONFIG_TULIP_MWI&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_TULIP == 1 || $CONFIG_TULIP == 2)} then {
	set CONFIG_TULIP_MMIO [expr $CONFIG_TULIP_MMIO&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_EISA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_DE4X5 == 2)} then {set CONFIG_DE4X5 1}; set CONFIG_DE4X5 [expr $CONFIG_DE4X5&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_EISA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_DGRS == 2)} then {set CONFIG_DGRS 1}; set CONFIG_DGRS [expr $CONFIG_DGRS&15]}
	global CONFIG_DM9102
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_DM9102 [sync_tristate $CONFIG_DM9102 $tmpvar_dep]; set CONFIG_DM9102 [expr $CONFIG_DM9102&15]}
	global CONFIG_EEPRO100
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_EEPRO100 [sync_tristate $CONFIG_EEPRO100 $tmpvar_dep]; set CONFIG_EEPRO100 [expr $CONFIG_EEPRO100&15]}
	global CONFIG_LNE390
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_EISA == 1 || $CONFIG_EISA == 2 || $CONFIG_EISA == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EISA $CONFIG_EXPERIMENTAL]]; set CONFIG_LNE390 [sync_tristate $CONFIG_LNE390 $tmpvar_dep]; set CONFIG_LNE390 [expr $CONFIG_LNE390&15]}
	global CONFIG_FEALNX
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_FEALNX [sync_tristate $CONFIG_FEALNX $tmpvar_dep]; set CONFIG_FEALNX [expr $CONFIG_FEALNX&15]}
	global CONFIG_NATSEMI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_NATSEMI [sync_tristate $CONFIG_NATSEMI $tmpvar_dep]; set CONFIG_NATSEMI [expr $CONFIG_NATSEMI&15]}
	global CONFIG_NE2K_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_NE2K_PCI [sync_tristate $CONFIG_NE2K_PCI $tmpvar_dep]; set CONFIG_NE2K_PCI [expr $CONFIG_NE2K_PCI&15]}
	global CONFIG_NE3210
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_EISA == 1 || $CONFIG_EISA == 2 || $CONFIG_EISA == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EISA $CONFIG_EXPERIMENTAL]]; set CONFIG_NE3210 [sync_tristate $CONFIG_NE3210 $tmpvar_dep]; set CONFIG_NE3210 [expr $CONFIG_NE3210&15]}
	global CONFIG_ES3210
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_EISA == 1 || $CONFIG_EISA == 2 || $CONFIG_EISA == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EISA $CONFIG_EXPERIMENTAL]]; set CONFIG_ES3210 [sync_tristate $CONFIG_ES3210 $tmpvar_dep]; set CONFIG_ES3210 [expr $CONFIG_ES3210&15]}
	global CONFIG_8139CP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI $CONFIG_EXPERIMENTAL]]; set CONFIG_8139CP [sync_tristate $CONFIG_8139CP $tmpvar_dep]; set CONFIG_8139CP [expr $CONFIG_8139CP&15]}
	global CONFIG_8139TOO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_8139TOO [sync_tristate $CONFIG_8139TOO $tmpvar_dep]; set CONFIG_8139TOO [expr $CONFIG_8139TOO&15]}
	global CONFIG_8139TOO_PIO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_8139TOO == 1 || $CONFIG_8139TOO == 2 || $CONFIG_8139TOO == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_8139TOO]];set CONFIG_8139TOO_PIO [sync_bool $CONFIG_8139TOO_PIO $tmpvar_dep 1];set CONFIG_8139TOO_PIO [expr $CONFIG_8139TOO_PIO&15]}
	global CONFIG_8139TOO_TUNE_TWISTER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_8139TOO == 1 || $CONFIG_8139TOO == 2 || $CONFIG_8139TOO == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_8139TOO $CONFIG_EXPERIMENTAL]];set CONFIG_8139TOO_TUNE_TWISTER [sync_bool $CONFIG_8139TOO_TUNE_TWISTER $tmpvar_dep 1];set CONFIG_8139TOO_TUNE_TWISTER [expr $CONFIG_8139TOO_TUNE_TWISTER&15]}
	global CONFIG_8139TOO_8129
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_8139TOO == 1 || $CONFIG_8139TOO == 2 || $CONFIG_8139TOO == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_8139TOO]];set CONFIG_8139TOO_8129 [sync_bool $CONFIG_8139TOO_8129 $tmpvar_dep 1];set CONFIG_8139TOO_8129 [expr $CONFIG_8139TOO_8129&15]}
	global CONFIG_RTL8139
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_RTL8139 [sync_tristate $CONFIG_RTL8139 $tmpvar_dep]; set CONFIG_RTL8139 [expr $CONFIG_RTL8139&15]}
	global CONFIG_SIS900
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_SIS900 [sync_tristate $CONFIG_SIS900 $tmpvar_dep]; set CONFIG_SIS900 [expr $CONFIG_SIS900&15]}
	global CONFIG_EPIC100
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_EPIC100 [sync_tristate $CONFIG_EPIC100 $tmpvar_dep]; set CONFIG_EPIC100 [expr $CONFIG_EPIC100&15]}
	global CONFIG_SUNDANCE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_SUNDANCE [sync_tristate $CONFIG_SUNDANCE $tmpvar_dep]; set CONFIG_SUNDANCE [expr $CONFIG_SUNDANCE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_EISA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_TLAN == 2)} then {set CONFIG_TLAN 1}; set CONFIG_TLAN [expr $CONFIG_TLAN&15]}
	global CONFIG_VIA_RHINE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_VIA_RHINE [sync_tristate $CONFIG_VIA_RHINE $tmpvar_dep]; set CONFIG_VIA_RHINE [expr $CONFIG_VIA_RHINE&15]}
	global CONFIG_VIA_RHINE_MMIO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_VIA_RHINE == 1 || $CONFIG_VIA_RHINE == 2 || $CONFIG_VIA_RHINE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_VIA_RHINE $CONFIG_EXPERIMENTAL]];set CONFIG_VIA_RHINE_MMIO [sync_bool $CONFIG_VIA_RHINE_MMIO $tmpvar_dep 1];set CONFIG_VIA_RHINE_MMIO [expr $CONFIG_VIA_RHINE_MMIO&15]}
	global CONFIG_WINBOND_840
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_WINBOND_840 [sync_tristate $CONFIG_WINBOND_840 $tmpvar_dep]; set CONFIG_WINBOND_840 [expr $CONFIG_WINBOND_840&15]}
	global CONFIG_MIPS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_EXPERIMENTAL == 1 && $CONFIG_MIPS == 1)} then {
	set CONFIG_LAN_SAA9730 [expr $CONFIG_LAN_SAA9730&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1)} then {
	set CONFIG_NET_POCKET [expr $CONFIG_NET_POCKET&15]}
	global CONFIG_DE600
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_POCKET == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]]; set CONFIG_DE600 [sync_tristate $CONFIG_DE600 $tmpvar_dep]; set CONFIG_DE600 [expr $CONFIG_DE600&15]}
	global CONFIG_DE620
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_POCKET == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]]; set CONFIG_DE620 [sync_tristate $CONFIG_DE620 $tmpvar_dep]; set CONFIG_DE620 [expr $CONFIG_DE620&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1)} then {
	set CONFIG_FEC [expr $CONFIG_FEC&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_CS89x0 == 2)} then {set CONFIG_CS89x0 1}; set CONFIG_CS89x0 [expr $CONFIG_CS89x0&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_CS89x0 != 0)} then {
	set CONFIG_UCCS89x0_HW_SWAP [expr $CONFIG_UCCS89x0_HW_SWAP&15]}
}


proc menu30 {w title} {
	set oldFocus [focus]
	catch {focus .menu26}
	catch {destroy $w; unregister_active 30}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 30]]
	message $w.m -width 400 -aspect 300 -text \
		"Ethernet (1000 Mbit)"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Ethernet (1000 Mbit)" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 30; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 30; menu31 .menu31 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 30"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 30; menu29 .menu29 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 30; menu29 .menu29 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 30 0 "Alteon AceNIC/3Com 3C985/NetGear GA620 Gigabit support" CONFIG_ACENIC
	bool $w.config.f 30 1 "  Omit support for old Tigon I based AceNICs" CONFIG_ACENIC_OMIT_TIGON_I
	dep_tristate $w.config.f 30 2 "D-Link DL2000-based Gigabit Ethernet support" CONFIG_DL2K
	dep_tristate $w.config.f 30 3 "MyriCOM Gigabit Ethernet support" CONFIG_MYRI_SBUS
	dep_tristate $w.config.f 30 4 "National Semiconduct DP83820 support" CONFIG_NS83820
	dep_tristate $w.config.f 30 5 "Packet Engines Hamachi GNIC-II support" CONFIG_HAMACHI
	dep_tristate $w.config.f 30 6 "Packet Engines Yellowfin Gigabit-NIC support (EXPERIMENTAL)" CONFIG_YELLOWFIN
	dep_tristate $w.config.f 30 7 "SysKonnect SK-98xx support" CONFIG_SK98LIN



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu26] == 0} then {menu26 .menu26 "Network device support"}
	set winx [expr [winfo x .menu26]+30]; set winy [expr [winfo y .menu26]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu30 {} {
	global CONFIG_MODULES
	global CONFIG_NET
	global CONFIG_NETDEVICES
	global CONFIG_PCI
	global CONFIG_ACENIC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_ACENIC [sync_tristate $CONFIG_ACENIC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu30.config.f.x0 disabled {y}} else {configure_entry .menu30.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu30.config.f.x0 disabled {m}} else {configure_entry .menu30.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu30.config.f.x0 normal {m}} else {configure_entry .menu30.config.f.x0 disabled {m}}; configure_entry .menu30.config.f.x0 normal {n l}} else {configure_entry .menu30.config.f.x0 disabled {y n m l}}
	global CONFIG_ACENIC_OMIT_TIGON_I
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ACENIC != 0)} then {
	configure_entry .menu30.config.f.x1 normal {n l y}} else {configure_entry .menu30.config.f.x1 disabled {y n l}}
	global CONFIG_DL2K
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_DL2K [sync_tristate $CONFIG_DL2K $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu30.config.f.x2 disabled {y}} else {configure_entry .menu30.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu30.config.f.x2 disabled {m}} else {configure_entry .menu30.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu30.config.f.x2 normal {m}} else {configure_entry .menu30.config.f.x2 disabled {m}}; configure_entry .menu30.config.f.x2 normal {n l}} else {configure_entry .menu30.config.f.x2 disabled {y n m l}}
	global CONFIG_SBUS
	global CONFIG_MYRI_SBUS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SBUS == 1 || $CONFIG_SBUS == 2 || $CONFIG_SBUS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SBUS]];set CONFIG_MYRI_SBUS [sync_tristate $CONFIG_MYRI_SBUS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu30.config.f.x3 disabled {y}} else {configure_entry .menu30.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu30.config.f.x3 disabled {m}} else {configure_entry .menu30.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu30.config.f.x3 normal {m}} else {configure_entry .menu30.config.f.x3 disabled {m}}; configure_entry .menu30.config.f.x3 normal {n l}} else {configure_entry .menu30.config.f.x3 disabled {y n m l}}
	global CONFIG_NS83820
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_NS83820 [sync_tristate $CONFIG_NS83820 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu30.config.f.x4 disabled {y}} else {configure_entry .menu30.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu30.config.f.x4 disabled {m}} else {configure_entry .menu30.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu30.config.f.x4 normal {m}} else {configure_entry .menu30.config.f.x4 disabled {m}}; configure_entry .menu30.config.f.x4 normal {n l}} else {configure_entry .menu30.config.f.x4 disabled {y n m l}}
	global CONFIG_HAMACHI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_HAMACHI [sync_tristate $CONFIG_HAMACHI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu30.config.f.x5 disabled {y}} else {configure_entry .menu30.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu30.config.f.x5 disabled {m}} else {configure_entry .menu30.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu30.config.f.x5 normal {m}} else {configure_entry .menu30.config.f.x5 disabled {m}}; configure_entry .menu30.config.f.x5 normal {n l}} else {configure_entry .menu30.config.f.x5 disabled {y n m l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_YELLOWFIN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI $CONFIG_EXPERIMENTAL]];set CONFIG_YELLOWFIN [sync_tristate $CONFIG_YELLOWFIN $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu30.config.f.x6 disabled {y}} else {configure_entry .menu30.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu30.config.f.x6 disabled {m}} else {configure_entry .menu30.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu30.config.f.x6 normal {m}} else {configure_entry .menu30.config.f.x6 disabled {m}}; configure_entry .menu30.config.f.x6 normal {n l}} else {configure_entry .menu30.config.f.x6 disabled {y n m l}}
	global CONFIG_SK98LIN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_SK98LIN [sync_tristate $CONFIG_SK98LIN $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu30.config.f.x7 disabled {y}} else {configure_entry .menu30.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu30.config.f.x7 disabled {m}} else {configure_entry .menu30.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu30.config.f.x7 normal {m}} else {configure_entry .menu30.config.f.x7 disabled {m}}; configure_entry .menu30.config.f.x7 normal {n l}} else {configure_entry .menu30.config.f.x7 disabled {y n m l}}
}


proc update_define_menu30 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_ACENIC_OMIT_TIGON_I
set CONFIG_ACENIC_OMIT_TIGON_I [expr $CONFIG_ACENIC_OMIT_TIGON_I|16]
	global CONFIG_NET
	global CONFIG_NETDEVICES
	global CONFIG_PCI
	global CONFIG_ACENIC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_ACENIC [sync_tristate $CONFIG_ACENIC $tmpvar_dep]; set CONFIG_ACENIC [expr $CONFIG_ACENIC&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ACENIC != 0)} then {
	set CONFIG_ACENIC_OMIT_TIGON_I [expr $CONFIG_ACENIC_OMIT_TIGON_I&15]}
	global CONFIG_DL2K
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_DL2K [sync_tristate $CONFIG_DL2K $tmpvar_dep]; set CONFIG_DL2K [expr $CONFIG_DL2K&15]}
	global CONFIG_SBUS
	global CONFIG_MYRI_SBUS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SBUS == 1 || $CONFIG_SBUS == 2 || $CONFIG_SBUS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SBUS]]; set CONFIG_MYRI_SBUS [sync_tristate $CONFIG_MYRI_SBUS $tmpvar_dep]; set CONFIG_MYRI_SBUS [expr $CONFIG_MYRI_SBUS&15]}
	global CONFIG_NS83820
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_NS83820 [sync_tristate $CONFIG_NS83820 $tmpvar_dep]; set CONFIG_NS83820 [expr $CONFIG_NS83820&15]}
	global CONFIG_HAMACHI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_HAMACHI [sync_tristate $CONFIG_HAMACHI $tmpvar_dep]; set CONFIG_HAMACHI [expr $CONFIG_HAMACHI&15]}
	global CONFIG_EXPERIMENTAL
	global CONFIG_YELLOWFIN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI $CONFIG_EXPERIMENTAL]]; set CONFIG_YELLOWFIN [sync_tristate $CONFIG_YELLOWFIN $tmpvar_dep]; set CONFIG_YELLOWFIN [expr $CONFIG_YELLOWFIN&15]}
	global CONFIG_SK98LIN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_SK98LIN [sync_tristate $CONFIG_SK98LIN $tmpvar_dep]; set CONFIG_SK98LIN [expr $CONFIG_SK98LIN&15]}
}


proc menu31 {w title} {
	set oldFocus [focus]
	catch {focus .menu26}
	catch {destroy $w; unregister_active 31}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 31]]
	message $w.m -width 400 -aspect 300 -text \
		"Wireless LAN (non-hamradio)"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Wireless LAN (non-hamradio)" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 31; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 31; menu32 .menu32 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 31"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 31; menu30 .menu30 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 31; menu30 .menu30 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 31 0 "Wireless LAN (non-hamradio)" CONFIG_NET_RADIO
	dep_tristate $w.config.f 31 1 "  STRIP (Metricom starmode radio IP)" CONFIG_STRIP
	tristate $w.config.f 31 2 "  AT&T WaveLAN & DEC RoamAbout DS support" CONFIG_WAVELAN
	tristate $w.config.f 31 3 "  Aironet Arlan 655 & IC2200 DS support" CONFIG_ARLAN
	tristate $w.config.f 31 4 "  Aironet 4500/4800 series adapters" CONFIG_AIRONET4500
	dep_tristate $w.config.f 31 5 "   Aironet 4500/4800 ISA/PCI/PNP/365 support " CONFIG_AIRONET4500_NONCS
	bool $w.config.f 31 6 "     Aironet 4500/4800 PNP support " CONFIG_AIRONET4500_PNP
	dep_bool $w.config.f 31 7 "     Aironet 4500/4800 PCI support " CONFIG_AIRONET4500_PCI
	dep_bool $w.config.f 31 8 "     Aironet 4500/4800 ISA broken support (EXPERIMENTAL)" CONFIG_AIRONET4500_ISA
	dep_bool $w.config.f 31 9 "     Aironet 4500/4800 I365 broken support (EXPERIMENTAL)" CONFIG_AIRONET4500_I365
	dep_tristate $w.config.f 31 10 "   Aironet 4500/4800 PROC interface " CONFIG_AIRONET4500_PROC
	tristate $w.config.f 31 11 "  Cisco/Aironet 34X/35X/4500/4800 ISA and PCI cards" CONFIG_AIRO
	tristate $w.config.f 31 12 "  Hermes chipset 802.11b support (Orinoco/Prism2/Symbol)" CONFIG_HERMES
	dep_tristate $w.config.f 31 13 "    Hermes in PLX9052 based PCI adaptor support (Netgear MA301 etc.)" CONFIG_PLX_HERMES
	comment $w.config.f 31 14 "Wireless Pcmcia cards support"
	dep_tristate $w.config.f 31 15 "  Hermes PCMCIA card support" CONFIG_PCMCIA_HERMES
	tristate $w.config.f 31 16 "  Cisco/Aironet 34X/35X/4500/4800 PCMCIA cards" CONFIG_AIRO_CS



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu26] == 0} then {menu26 .menu26 "Network device support"}
	set winx [expr [winfo x .menu26]+30]; set winy [expr [winfo y .menu26]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu31 {} {
	global CONFIG_NET
	global CONFIG_NETDEVICES
	global CONFIG_NET_RADIO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu31.config.f.x0 normal {n l y}} else {configure_entry .menu31.config.f.x0 disabled {y n l}}
	global CONFIG_MODULES
	global CONFIG_INET
	global CONFIG_STRIP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_INET == 1 || $CONFIG_INET == 2 || $CONFIG_INET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INET]];set CONFIG_STRIP [sync_tristate $CONFIG_STRIP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu31.config.f.x1 disabled {y}} else {configure_entry .menu31.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu31.config.f.x1 disabled {m}} else {configure_entry .menu31.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu31.config.f.x1 normal {m}} else {configure_entry .menu31.config.f.x1 disabled {m}}; configure_entry .menu31.config.f.x1 normal {n l}} else {configure_entry .menu31.config.f.x1 disabled {y n m l}}
	global CONFIG_WAVELAN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1)} then {
	configure_entry .menu31.config.f.x2 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu31.config.f.x2 normal {m}} else {configure_entry .menu31.config.f.x2 disabled {m}}; configure_entry .menu31.config.f.x2 normal {n l}} else {configure_entry .menu31.config.f.x2 disabled {y n m l}}
	global CONFIG_ARLAN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1)} then {
	configure_entry .menu31.config.f.x3 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu31.config.f.x3 normal {m}} else {configure_entry .menu31.config.f.x3 disabled {m}}; configure_entry .menu31.config.f.x3 normal {n l}} else {configure_entry .menu31.config.f.x3 disabled {y n m l}}
	global CONFIG_AIRONET4500
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1)} then {
	configure_entry .menu31.config.f.x4 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu31.config.f.x4 normal {m}} else {configure_entry .menu31.config.f.x4 disabled {m}}; configure_entry .menu31.config.f.x4 normal {n l}} else {configure_entry .menu31.config.f.x4 disabled {y n m l}}
	global CONFIG_AIRONET4500_NONCS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_AIRONET4500 == 1 || $CONFIG_AIRONET4500 == 2 || $CONFIG_AIRONET4500 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AIRONET4500]];set CONFIG_AIRONET4500_NONCS [sync_tristate $CONFIG_AIRONET4500_NONCS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu31.config.f.x5 disabled {y}} else {configure_entry .menu31.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu31.config.f.x5 disabled {m}} else {configure_entry .menu31.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu31.config.f.x5 normal {m}} else {configure_entry .menu31.config.f.x5 disabled {m}}; configure_entry .menu31.config.f.x5 normal {n l}} else {configure_entry .menu31.config.f.x5 disabled {y n m l}}
	global CONFIG_AIRONET4500_PNP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_AIRONET4500 != 0 && $CONFIG_AIRONET4500_NONCS != 0)} then {
	configure_entry .menu31.config.f.x6 normal {n l y}} else {configure_entry .menu31.config.f.x6 disabled {y n l}}
	global CONFIG_PCI
	global CONFIG_AIRONET4500_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_AIRONET4500 != 0 && $CONFIG_AIRONET4500_NONCS != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_AIRONET4500_PCI [sync_bool $CONFIG_AIRONET4500_PCI $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu31.config.f.x7 disabled {y};} else {configure_entry .menu31.config.f.x7 normal {y};}; configure_entry .menu31.config.f.x7 normal {n l}} else {configure_entry .menu31.config.f.x7 disabled {y n l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_AIRONET4500_ISA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_AIRONET4500 != 0 && $CONFIG_AIRONET4500_NONCS != 0) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_AIRONET4500_ISA [sync_bool $CONFIG_AIRONET4500_ISA $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu31.config.f.x8 disabled {y};} else {configure_entry .menu31.config.f.x8 normal {y};}; configure_entry .menu31.config.f.x8 normal {n l}} else {configure_entry .menu31.config.f.x8 disabled {y n l}}
	global CONFIG_AIRONET4500_I365
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_AIRONET4500 != 0 && $CONFIG_AIRONET4500_NONCS != 0) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_AIRONET4500_I365 [sync_bool $CONFIG_AIRONET4500_I365 $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu31.config.f.x9 disabled {y};} else {configure_entry .menu31.config.f.x9 normal {y};}; configure_entry .menu31.config.f.x9 normal {n l}} else {configure_entry .menu31.config.f.x9 disabled {y n l}}
	global CONFIG_AIRONET4500_PROC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_AIRONET4500 == 1 || $CONFIG_AIRONET4500 == 2 || $CONFIG_AIRONET4500 == 4)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONFIG_AIRONET4500 $CONSTANT_M]];set CONFIG_AIRONET4500_PROC [sync_tristate $CONFIG_AIRONET4500_PROC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu31.config.f.x10 disabled {y}} else {configure_entry .menu31.config.f.x10 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu31.config.f.x10 disabled {m}} else {configure_entry .menu31.config.f.x10 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu31.config.f.x10 normal {m}} else {configure_entry .menu31.config.f.x10 disabled {m}}; configure_entry .menu31.config.f.x10 normal {n l}} else {configure_entry .menu31.config.f.x10 disabled {y n m l}}
	global CONFIG_AIRO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu31.config.f.x11 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu31.config.f.x11 normal {m}} else {configure_entry .menu31.config.f.x11 disabled {m}}; configure_entry .menu31.config.f.x11 normal {n l}} else {configure_entry .menu31.config.f.x11 disabled {y n m l}}
	global CONFIG_HERMES
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1)} then {
	configure_entry .menu31.config.f.x12 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu31.config.f.x12 normal {m}} else {configure_entry .menu31.config.f.x12 disabled {m}}; configure_entry .menu31.config.f.x12 normal {n l}} else {configure_entry .menu31.config.f.x12 disabled {y n m l}}
	global CONFIG_PLX_HERMES
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_PCI == 1) && ($CONFIG_HERMES == 1 || $CONFIG_HERMES == 2 || $CONFIG_HERMES == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_HERMES $CONFIG_EXPERIMENTAL]];set CONFIG_PLX_HERMES [sync_tristate $CONFIG_PLX_HERMES $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu31.config.f.x13 disabled {y}} else {configure_entry .menu31.config.f.x13 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu31.config.f.x13 disabled {m}} else {configure_entry .menu31.config.f.x13 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu31.config.f.x13 normal {m}} else {configure_entry .menu31.config.f.x13 disabled {m}}; configure_entry .menu31.config.f.x13 normal {n l}} else {configure_entry .menu31.config.f.x13 disabled {y n m l}}
	global CONFIG_PCMCIA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_PCMCIA != 0)} then {configure_entry .menu31.config.f.x14 normal {m}} else {configure_entry .menu31.config.f.x14 disabled {m}}
	global CONFIG_PCMCIA_HERMES
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_PCMCIA != 0) && ($CONFIG_HERMES == 1 || $CONFIG_HERMES == 2 || $CONFIG_HERMES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_HERMES]];set CONFIG_PCMCIA_HERMES [sync_tristate $CONFIG_PCMCIA_HERMES $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu31.config.f.x15 disabled {y}} else {configure_entry .menu31.config.f.x15 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu31.config.f.x15 disabled {m}} else {configure_entry .menu31.config.f.x15 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu31.config.f.x15 normal {m}} else {configure_entry .menu31.config.f.x15 disabled {m}}; configure_entry .menu31.config.f.x15 normal {n l}} else {configure_entry .menu31.config.f.x15 disabled {y n m l}}
	global CONFIG_AIRO_CS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_PCMCIA != 0)} then {
	configure_entry .menu31.config.f.x16 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu31.config.f.x16 normal {m}} else {configure_entry .menu31.config.f.x16 disabled {m}}; configure_entry .menu31.config.f.x16 normal {n l}} else {configure_entry .menu31.config.f.x16 disabled {y n m l}}
}


proc update_define_menu31 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_WAVELAN
	global CONFIG_ARLAN
	global CONFIG_AIRONET4500
	global CONFIG_AIRO
	global CONFIG_HERMES
	global CONFIG_AIRO_CS
	global CONFIG_NET_WIRELESS
	global CONFIG_NET_RADIO
set CONFIG_NET_RADIO [expr $CONFIG_NET_RADIO|16]
set CONFIG_WAVELAN [expr $CONFIG_WAVELAN|16]
set CONFIG_ARLAN [expr $CONFIG_ARLAN|16]
set CONFIG_AIRONET4500 [expr $CONFIG_AIRONET4500|16]
	global CONFIG_AIRONET4500_PNP
set CONFIG_AIRONET4500_PNP [expr $CONFIG_AIRONET4500_PNP|16]
set CONFIG_AIRO [expr $CONFIG_AIRO|16]
set CONFIG_HERMES [expr $CONFIG_HERMES|16]
set CONFIG_AIRO_CS [expr $CONFIG_AIRO_CS|16]
	global CONFIG_NET
	global CONFIG_NETDEVICES
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	set CONFIG_NET_RADIO [expr $CONFIG_NET_RADIO&15]}
	global CONFIG_INET
	global CONFIG_STRIP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_INET == 1 || $CONFIG_INET == 2 || $CONFIG_INET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INET]]; set CONFIG_STRIP [sync_tristate $CONFIG_STRIP $tmpvar_dep]; set CONFIG_STRIP [expr $CONFIG_STRIP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_WAVELAN == 2)} then {set CONFIG_WAVELAN 1}; set CONFIG_WAVELAN [expr $CONFIG_WAVELAN&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ARLAN == 2)} then {set CONFIG_ARLAN 1}; set CONFIG_ARLAN [expr $CONFIG_ARLAN&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_AIRONET4500 == 2)} then {set CONFIG_AIRONET4500 1}; set CONFIG_AIRONET4500 [expr $CONFIG_AIRONET4500&15]}
	global CONFIG_AIRONET4500_NONCS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_AIRONET4500 == 1 || $CONFIG_AIRONET4500 == 2 || $CONFIG_AIRONET4500 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AIRONET4500]]; set CONFIG_AIRONET4500_NONCS [sync_tristate $CONFIG_AIRONET4500_NONCS $tmpvar_dep]; set CONFIG_AIRONET4500_NONCS [expr $CONFIG_AIRONET4500_NONCS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_AIRONET4500 != 0 && $CONFIG_AIRONET4500_NONCS != 0)} then {
	set CONFIG_AIRONET4500_PNP [expr $CONFIG_AIRONET4500_PNP&15]}
	global CONFIG_PCI
	global CONFIG_AIRONET4500_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_AIRONET4500 != 0 && $CONFIG_AIRONET4500_NONCS != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_AIRONET4500_PCI [sync_bool $CONFIG_AIRONET4500_PCI $tmpvar_dep 0];set CONFIG_AIRONET4500_PCI [expr $CONFIG_AIRONET4500_PCI&15]}
	global CONFIG_EXPERIMENTAL
	global CONFIG_AIRONET4500_ISA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_AIRONET4500 != 0 && $CONFIG_AIRONET4500_NONCS != 0) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_AIRONET4500_ISA [sync_bool $CONFIG_AIRONET4500_ISA $tmpvar_dep 0];set CONFIG_AIRONET4500_ISA [expr $CONFIG_AIRONET4500_ISA&15]}
	global CONFIG_AIRONET4500_I365
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_AIRONET4500 != 0 && $CONFIG_AIRONET4500_NONCS != 0) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_AIRONET4500_I365 [sync_bool $CONFIG_AIRONET4500_I365 $tmpvar_dep 0];set CONFIG_AIRONET4500_I365 [expr $CONFIG_AIRONET4500_I365&15]}
	global CONFIG_AIRONET4500_PROC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_AIRONET4500 == 1 || $CONFIG_AIRONET4500 == 2 || $CONFIG_AIRONET4500 == 4)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONFIG_AIRONET4500 $CONSTANT_M]]; set CONFIG_AIRONET4500_PROC [sync_tristate $CONFIG_AIRONET4500_PROC $tmpvar_dep]; set CONFIG_AIRONET4500_PROC [expr $CONFIG_AIRONET4500_PROC&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_PCI == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_AIRO == 2)} then {set CONFIG_AIRO 1}; set CONFIG_AIRO [expr $CONFIG_AIRO&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_HERMES == 2)} then {set CONFIG_HERMES 1}; set CONFIG_HERMES [expr $CONFIG_HERMES&15]}
	global CONFIG_PLX_HERMES
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_PCI == 1) && ($CONFIG_HERMES == 1 || $CONFIG_HERMES == 2 || $CONFIG_HERMES == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_HERMES $CONFIG_EXPERIMENTAL]]; set CONFIG_PLX_HERMES [sync_tristate $CONFIG_PLX_HERMES $tmpvar_dep]; set CONFIG_PLX_HERMES [expr $CONFIG_PLX_HERMES&15]}
	global CONFIG_PCMCIA
	global CONFIG_PCMCIA_HERMES
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_PCMCIA != 0) && ($CONFIG_HERMES == 1 || $CONFIG_HERMES == 2 || $CONFIG_HERMES == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_HERMES]]; set CONFIG_PCMCIA_HERMES [sync_tristate $CONFIG_PCMCIA_HERMES $tmpvar_dep]; set CONFIG_PCMCIA_HERMES [expr $CONFIG_PCMCIA_HERMES&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_PCMCIA != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_AIRO_CS == 2)} then {set CONFIG_AIRO_CS 1}; set CONFIG_AIRO_CS [expr $CONFIG_AIRO_CS&15]}
	global CONFIG_ALL_PPC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_PCI == 1 || $CONFIG_ALL_PPC == 1 || $CONFIG_PCMCIA != 0)} then {	global CONSTANT_Y
set CONFIG_NET_WIRELESS $CONSTANT_Y }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_PCI != 1 && $CONFIG_ALL_PPC != 1 && $CONFIG_PCMCIA == 0)} then {	global CONSTANT_N
set CONFIG_NET_WIRELESS $CONSTANT_N }
}


proc menu32 {w title} {
	set oldFocus [focus]
	catch {focus .menu26}
	catch {destroy $w; unregister_active 32}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 32]]
	message $w.m -width 400 -aspect 300 -text \
		"Token Ring devices"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Token Ring devices" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 32; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 32; menu33 .menu33 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 32"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 32; menu31 .menu31 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 32; menu31 .menu31 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 32 0 "Token Ring driver support" CONFIG_TR
	tristate $w.config.f 32 1 "  IBM Tropic chipset based adapter support" CONFIG_IBMTR
	dep_tristate $w.config.f 32 2 "  IBM Olympic chipset PCI adapter support" CONFIG_IBMOL
	dep_tristate $w.config.f 32 3 "  IBM Lanstreamer chipset PCI adapter support" CONFIG_IBMLS
	tristate $w.config.f 32 4 "  Generic TMS380 Token Ring ISA/PCI adapter support" CONFIG_TMS380TR
	dep_tristate $w.config.f 32 5 "    Generic TMS380 PCI support" CONFIG_TMSPCI
	dep_tristate $w.config.f 32 6 "    Generic TMS380 ISA support" CONFIG_TMSISA
	dep_tristate $w.config.f 32 7 "    Madge Smart 16/4 PCI Mk2 support" CONFIG_ABYSS
	dep_tristate $w.config.f 32 8 "    Madge Smart 16/4 Ringnode MicroChannel" CONFIG_MADGEMC
	tristate $w.config.f 32 9 "  SMC ISA/MCA adapter support" CONFIG_SMCTR



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu26] == 0} then {menu26 .menu26 "Network device support"}
	set winx [expr [winfo x .menu26]+30]; set winy [expr [winfo y .menu26]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu32 {} {
	global CONFIG_NET
	global CONFIG_NETDEVICES
	global CONFIG_PCI
	global CONFIG_ISA
	global CONFIG_MCA
	global CONFIG_TR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_ISA == 1 || $CONFIG_MCA == 1)} then {
	configure_entry .menu32.config.f.x0 normal {n l y}} else {configure_entry .menu32.config.f.x0 disabled {y n l}}
	global CONFIG_MODULES
	global CONFIG_IBMTR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_MCA == 1)} then {
	configure_entry .menu32.config.f.x1 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu32.config.f.x1 normal {m}} else {configure_entry .menu32.config.f.x1 disabled {m}}; configure_entry .menu32.config.f.x1 normal {n l}} else {configure_entry .menu32.config.f.x1 disabled {y n m l}}
	global CONFIG_IBMOL
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_TR == 1 || $CONFIG_TR == 2 || $CONFIG_TR == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_TR $CONFIG_PCI]];set CONFIG_IBMOL [sync_tristate $CONFIG_IBMOL $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu32.config.f.x2 disabled {y}} else {configure_entry .menu32.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu32.config.f.x2 disabled {m}} else {configure_entry .menu32.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu32.config.f.x2 normal {m}} else {configure_entry .menu32.config.f.x2 disabled {m}}; configure_entry .menu32.config.f.x2 normal {n l}} else {configure_entry .menu32.config.f.x2 disabled {y n m l}}
	global CONFIG_IBMLS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_TR == 1 || $CONFIG_TR == 2 || $CONFIG_TR == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_TR $CONFIG_PCI]];set CONFIG_IBMLS [sync_tristate $CONFIG_IBMLS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu32.config.f.x3 disabled {y}} else {configure_entry .menu32.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu32.config.f.x3 disabled {m}} else {configure_entry .menu32.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu32.config.f.x3 normal {m}} else {configure_entry .menu32.config.f.x3 disabled {m}}; configure_entry .menu32.config.f.x3 normal {n l}} else {configure_entry .menu32.config.f.x3 disabled {y n m l}}
	global CONFIG_TMS380TR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0)} then {
	configure_entry .menu32.config.f.x4 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu32.config.f.x4 normal {m}} else {configure_entry .menu32.config.f.x4 disabled {m}}; configure_entry .menu32.config.f.x4 normal {n l}} else {configure_entry .menu32.config.f.x4 disabled {y n m l}}
	global CONFIG_TMSPCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_TMS380TR != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_TMSPCI [sync_tristate $CONFIG_TMSPCI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu32.config.f.x5 disabled {y}} else {configure_entry .menu32.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu32.config.f.x5 disabled {m}} else {configure_entry .menu32.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu32.config.f.x5 normal {m}} else {configure_entry .menu32.config.f.x5 disabled {m}}; configure_entry .menu32.config.f.x5 normal {n l}} else {configure_entry .menu32.config.f.x5 disabled {y n m l}}
	global CONFIG_TMSISA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_TMS380TR != 0) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]];set CONFIG_TMSISA [sync_tristate $CONFIG_TMSISA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu32.config.f.x6 disabled {y}} else {configure_entry .menu32.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu32.config.f.x6 disabled {m}} else {configure_entry .menu32.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu32.config.f.x6 normal {m}} else {configure_entry .menu32.config.f.x6 disabled {m}}; configure_entry .menu32.config.f.x6 normal {n l}} else {configure_entry .menu32.config.f.x6 disabled {y n m l}}
	global CONFIG_ABYSS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_TMS380TR != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_ABYSS [sync_tristate $CONFIG_ABYSS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu32.config.f.x7 disabled {y}} else {configure_entry .menu32.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu32.config.f.x7 disabled {m}} else {configure_entry .menu32.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu32.config.f.x7 normal {m}} else {configure_entry .menu32.config.f.x7 disabled {m}}; configure_entry .menu32.config.f.x7 normal {n l}} else {configure_entry .menu32.config.f.x7 disabled {y n m l}}
	global CONFIG_MADGEMC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_TMS380TR != 0) && ($CONFIG_MCA == 1 || $CONFIG_MCA == 2 || $CONFIG_MCA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MCA]];set CONFIG_MADGEMC [sync_tristate $CONFIG_MADGEMC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu32.config.f.x8 disabled {y}} else {configure_entry .menu32.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu32.config.f.x8 disabled {m}} else {configure_entry .menu32.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu32.config.f.x8 normal {m}} else {configure_entry .menu32.config.f.x8 disabled {m}}; configure_entry .menu32.config.f.x8 normal {n l}} else {configure_entry .menu32.config.f.x8 disabled {y n m l}}
	global CONFIG_SMCTR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_MCA == 1)} then {
	configure_entry .menu32.config.f.x9 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu32.config.f.x9 normal {m}} else {configure_entry .menu32.config.f.x9 disabled {m}}; configure_entry .menu32.config.f.x9 normal {n l}} else {configure_entry .menu32.config.f.x9 disabled {y n m l}}
}


proc update_define_menu32 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_TR
	global CONFIG_IBMTR
	global CONFIG_TMS380TR
	global CONFIG_SMCTR
set CONFIG_TR [expr $CONFIG_TR|16]
set CONFIG_IBMTR [expr $CONFIG_IBMTR|16]
set CONFIG_TMS380TR [expr $CONFIG_TMS380TR|16]
set CONFIG_SMCTR [expr $CONFIG_SMCTR|16]
	global CONFIG_NET
	global CONFIG_NETDEVICES
	global CONFIG_PCI
	global CONFIG_ISA
	global CONFIG_MCA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_ISA == 1 || $CONFIG_MCA == 1)} then {
	set CONFIG_TR [expr $CONFIG_TR&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI != 1 && $CONFIG_ISA != 1 && $CONFIG_MCA != 1)} then {	global CONSTANT_N
set CONFIG_TR $CONSTANT_N }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_MCA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IBMTR == 2)} then {set CONFIG_IBMTR 1}; set CONFIG_IBMTR [expr $CONFIG_IBMTR&15]}
	global CONFIG_IBMOL
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_TR == 1 || $CONFIG_TR == 2 || $CONFIG_TR == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_TR $CONFIG_PCI]]; set CONFIG_IBMOL [sync_tristate $CONFIG_IBMOL $tmpvar_dep]; set CONFIG_IBMOL [expr $CONFIG_IBMOL&15]}
	global CONFIG_IBMLS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_TR == 1 || $CONFIG_TR == 2 || $CONFIG_TR == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_TR $CONFIG_PCI]]; set CONFIG_IBMLS [sync_tristate $CONFIG_IBMLS $tmpvar_dep]; set CONFIG_IBMLS [expr $CONFIG_IBMLS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_TMS380TR == 2)} then {set CONFIG_TMS380TR 1}; set CONFIG_TMS380TR [expr $CONFIG_TMS380TR&15]}
	global CONFIG_TMSPCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_TMS380TR != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_TMSPCI [sync_tristate $CONFIG_TMSPCI $tmpvar_dep]; set CONFIG_TMSPCI [expr $CONFIG_TMSPCI&15]}
	global CONFIG_TMSISA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_TMS380TR != 0) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISA]]; set CONFIG_TMSISA [sync_tristate $CONFIG_TMSISA $tmpvar_dep]; set CONFIG_TMSISA [expr $CONFIG_TMSISA&15]}
	global CONFIG_ABYSS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_TMS380TR != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_ABYSS [sync_tristate $CONFIG_ABYSS $tmpvar_dep]; set CONFIG_ABYSS [expr $CONFIG_ABYSS&15]}
	global CONFIG_MADGEMC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_TMS380TR != 0) && ($CONFIG_MCA == 1 || $CONFIG_MCA == 2 || $CONFIG_MCA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MCA]]; set CONFIG_MADGEMC [sync_tristate $CONFIG_MADGEMC $tmpvar_dep]; set CONFIG_MADGEMC [expr $CONFIG_MADGEMC&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_MCA == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_SMCTR == 2)} then {set CONFIG_SMCTR 1}; set CONFIG_SMCTR [expr $CONFIG_SMCTR&15]}
}


proc menu33 {w title} {
	set oldFocus [focus]
	catch {focus .menu26}
	catch {destroy $w; unregister_active 33}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 33]]
	message $w.m -width 400 -aspect 300 -text \
		"Wan interfaces"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Wan interfaces" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 33; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 33; menu34 .menu34 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 33"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 33; menu32 .menu32 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 33; menu32 .menu32 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 33 0 "Wan interfaces support" CONFIG_WAN
	dep_tristate $w.config.f 33 1 "  Comtrol Hostess SV-11 support" CONFIG_HOSTESS_SV11
	dep_tristate $w.config.f 33 2 "  COSA/SRP sync serial boards support" CONFIG_COSA
	tristate $w.config.f 33 3 "  MultiGate (COMX) synchronous serial boards support" CONFIG_COMX
	dep_tristate $w.config.f 33 4 "    Support for COMX/CMX/HiCOMX boards" CONFIG_COMX_HW_COMX
	dep_tristate $w.config.f 33 5 "    Support for LoCOMX board" CONFIG_COMX_HW_LOCOMX
	dep_tristate $w.config.f 33 6 "    Support for MixCOM board" CONFIG_COMX_HW_MIXCOM
	dep_tristate $w.config.f 33 7 "    Support for HDLC and syncPPP protocols on MultiGate boards" CONFIG_COMX_PROTO_PPP
	dep_tristate $w.config.f 33 8 "    Support for LAPB protocol on MultiGate boards" CONFIG_COMX_PROTO_LAPB
	dep_tristate $w.config.f 33 9 "    Support for LAPB protocol on MultiGate boards" CONFIG_COMX_PROTO_LAPB
	dep_tristate $w.config.f 33 10 "    Support for Frame Relay on MultiGate boards" CONFIG_COMX_PROTO_FR
	dep_tristate $w.config.f 33 11 "  Etinc PCISYNC serial board support (EXPERIMENTAL)" CONFIG_DSCC4
	tristate $w.config.f 33 12 "  FarSync T-Series X.21 (and V.35/V.24) cards" CONFIG_FARSYNC
	tristate $w.config.f 33 13 "  LanMedia Corp. SSI/V.35, T1/E1, HSSI, T3 boards" CONFIG_LANMEDIA
	dep_tristate $w.config.f 33 14 "  Sealevel Systems 4021 support" CONFIG_SEALEVEL_4021
	tristate $w.config.f 33 15 "  SyncLink HDLC/SYNCPPP support" CONFIG_SYNCLINK_SYNCPPP
	tristate $w.config.f 33 16 "  Generic HDLC driver" CONFIG_HDLC
	bool $w.config.f 33 17 "    Synchronous Point-to-Point Protocol (PPP) support" CONFIG_HDLC_PPP
	bool $w.config.f 33 18 "    X.25 protocol support" CONFIG_HDLC_X25
	comment $w.config.f 33 19 "    X.25/LAPB support is disabled"
	dep_tristate $w.config.f 33 20 "    SDL RISCom/N2 support" CONFIG_N2
	dep_tristate $w.config.f 33 21 "    Moxa C101 support" CONFIG_C101
	tristate $w.config.f 33 22 "  Frame relay DLCI support" CONFIG_DLCI
	int $w.config.f 33 23 "    Max open DLCI" CONFIG_DLCI_COUNT
	int $w.config.f 33 24 "    Max DLCI per device" CONFIG_DLCI_MAX
	dep_tristate $w.config.f 33 25 "    SDLA (Sangoma S502/S508) support" CONFIG_SDLA
	bool $w.config.f 33 26 "  WAN router drivers" CONFIG_WAN_ROUTER_DRIVERS
	dep_tristate $w.config.f 33 27 "    Sangoma WANPIPE(tm) multiprotocol cards" CONFIG_VENDOR_SANGOMA
	bool $w.config.f 33 28 "      WANPIPE Cisco HDLC support" CONFIG_WANPIPE_CHDLC
	bool $w.config.f 33 29 "      WANPIPE Frame Relay support" CONFIG_WANPIPE_FR
	bool $w.config.f 33 30 "      WANPIPE X.25 support" CONFIG_WANPIPE_X25
	bool $w.config.f 33 31 "      WANPIPE PPP support" CONFIG_WANPIPE_PPP
	bool $w.config.f 33 32 "      WANPIPE Multi-Port PPP support" CONFIG_WANPIPE_MULTPPP
	dep_tristate $w.config.f 33 33 "    Cyclom 2X(tm) cards (EXPERIMENTAL)" CONFIG_CYCLADES_SYNC
	bool $w.config.f 33 34 "      Cyclom 2X X.25 support" CONFIG_CYCLOMX_X25
	dep_tristate $w.config.f 33 35 "  LAPB over Ethernet driver (EXPERIMENTAL)" CONFIG_LAPBETHER
	dep_tristate $w.config.f 33 36 "  X.25 async driver (EXPERIMENTAL)" CONFIG_X25_ASY



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu26] == 0} then {menu26 .menu26 "Network device support"}
	set winx [expr [winfo x .menu26]+30]; set winy [expr [winfo y .menu26]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu33 {} {
	global CONFIG_NET
	global CONFIG_NETDEVICES
	global CONFIG_WAN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	configure_entry .menu33.config.f.x0 normal {n l y}} else {configure_entry .menu33.config.f.x0 disabled {y n l}}
	global CONFIG_MODULES
	global CONFIG_HOSTESS_SV11
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M]];set CONFIG_HOSTESS_SV11 [sync_tristate $CONFIG_HOSTESS_SV11 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu33.config.f.x1 disabled {y}} else {configure_entry .menu33.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu33.config.f.x1 disabled {m}} else {configure_entry .menu33.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x1 normal {m}} else {configure_entry .menu33.config.f.x1 disabled {m}}; configure_entry .menu33.config.f.x1 normal {n l}} else {configure_entry .menu33.config.f.x1 disabled {y n m l}}
	global CONFIG_COSA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M]];set CONFIG_COSA [sync_tristate $CONFIG_COSA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu33.config.f.x2 disabled {y}} else {configure_entry .menu33.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu33.config.f.x2 disabled {m}} else {configure_entry .menu33.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x2 normal {m}} else {configure_entry .menu33.config.f.x2 disabled {m}}; configure_entry .menu33.config.f.x2 normal {n l}} else {configure_entry .menu33.config.f.x2 disabled {y n m l}}
	global CONFIG_COMX
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {
	configure_entry .menu33.config.f.x3 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x3 normal {m}} else {configure_entry .menu33.config.f.x3 disabled {m}}; configure_entry .menu33.config.f.x3 normal {n l}} else {configure_entry .menu33.config.f.x3 disabled {y n m l}}
	global CONFIG_COMX_HW_COMX
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_COMX == 1 || $CONFIG_COMX == 2 || $CONFIG_COMX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_COMX]];set CONFIG_COMX_HW_COMX [sync_tristate $CONFIG_COMX_HW_COMX $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu33.config.f.x4 disabled {y}} else {configure_entry .menu33.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu33.config.f.x4 disabled {m}} else {configure_entry .menu33.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x4 normal {m}} else {configure_entry .menu33.config.f.x4 disabled {m}}; configure_entry .menu33.config.f.x4 normal {n l}} else {configure_entry .menu33.config.f.x4 disabled {y n m l}}
	global CONFIG_COMX_HW_LOCOMX
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_COMX == 1 || $CONFIG_COMX == 2 || $CONFIG_COMX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_COMX]];set CONFIG_COMX_HW_LOCOMX [sync_tristate $CONFIG_COMX_HW_LOCOMX $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu33.config.f.x5 disabled {y}} else {configure_entry .menu33.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu33.config.f.x5 disabled {m}} else {configure_entry .menu33.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x5 normal {m}} else {configure_entry .menu33.config.f.x5 disabled {m}}; configure_entry .menu33.config.f.x5 normal {n l}} else {configure_entry .menu33.config.f.x5 disabled {y n m l}}
	global CONFIG_COMX_HW_MIXCOM
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_COMX == 1 || $CONFIG_COMX == 2 || $CONFIG_COMX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_COMX]];set CONFIG_COMX_HW_MIXCOM [sync_tristate $CONFIG_COMX_HW_MIXCOM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu33.config.f.x6 disabled {y}} else {configure_entry .menu33.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu33.config.f.x6 disabled {m}} else {configure_entry .menu33.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x6 normal {m}} else {configure_entry .menu33.config.f.x6 disabled {m}}; configure_entry .menu33.config.f.x6 normal {n l}} else {configure_entry .menu33.config.f.x6 disabled {y n m l}}
	global CONFIG_COMX_PROTO_PPP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_COMX == 1 || $CONFIG_COMX == 2 || $CONFIG_COMX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_COMX]];set CONFIG_COMX_PROTO_PPP [sync_tristate $CONFIG_COMX_PROTO_PPP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu33.config.f.x7 disabled {y}} else {configure_entry .menu33.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu33.config.f.x7 disabled {m}} else {configure_entry .menu33.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x7 normal {m}} else {configure_entry .menu33.config.f.x7 disabled {m}}; configure_entry .menu33.config.f.x7 normal {n l}} else {configure_entry .menu33.config.f.x7 disabled {y n m l}}
	global CONFIG_LAPB
	global CONFIG_COMX_PROTO_LAPB
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_LAPB == 1) && ($CONFIG_COMX == 1 || $CONFIG_COMX == 2 || $CONFIG_COMX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_COMX]];set CONFIG_COMX_PROTO_LAPB [sync_tristate $CONFIG_COMX_PROTO_LAPB $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu33.config.f.x8 disabled {y}} else {configure_entry .menu33.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu33.config.f.x8 disabled {m}} else {configure_entry .menu33.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x8 normal {m}} else {configure_entry .menu33.config.f.x8 disabled {m}}; configure_entry .menu33.config.f.x8 normal {n l}} else {configure_entry .menu33.config.f.x8 disabled {y n m l}}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_LAPB == 2) && ($CONFIG_LAPB == 1 || $CONFIG_LAPB == 2 || $CONFIG_LAPB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_LAPB]];set CONFIG_COMX_PROTO_LAPB [sync_tristate $CONFIG_COMX_PROTO_LAPB $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu33.config.f.x9 disabled {y}} else {configure_entry .menu33.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu33.config.f.x9 disabled {m}} else {configure_entry .menu33.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x9 normal {m}} else {configure_entry .menu33.config.f.x9 disabled {m}}; configure_entry .menu33.config.f.x9 normal {n l}} else {configure_entry .menu33.config.f.x9 disabled {y n m l}}
	global CONFIG_COMX_PROTO_FR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_COMX == 1 || $CONFIG_COMX == 2 || $CONFIG_COMX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_COMX]];set CONFIG_COMX_PROTO_FR [sync_tristate $CONFIG_COMX_PROTO_FR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu33.config.f.x10 disabled {y}} else {configure_entry .menu33.config.f.x10 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu33.config.f.x10 disabled {m}} else {configure_entry .menu33.config.f.x10 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x10 normal {m}} else {configure_entry .menu33.config.f.x10 disabled {m}}; configure_entry .menu33.config.f.x10 normal {n l}} else {configure_entry .menu33.config.f.x10 disabled {y n m l}}
	global CONFIG_DSCC4
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M]];set CONFIG_DSCC4 [sync_tristate $CONFIG_DSCC4 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu33.config.f.x11 disabled {y}} else {configure_entry .menu33.config.f.x11 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu33.config.f.x11 disabled {m}} else {configure_entry .menu33.config.f.x11 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x11 normal {m}} else {configure_entry .menu33.config.f.x11 disabled {m}}; configure_entry .menu33.config.f.x11 normal {n l}} else {configure_entry .menu33.config.f.x11 disabled {y n m l}}
	global CONFIG_FARSYNC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {
	configure_entry .menu33.config.f.x12 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x12 normal {m}} else {configure_entry .menu33.config.f.x12 disabled {m}}; configure_entry .menu33.config.f.x12 normal {n l}} else {configure_entry .menu33.config.f.x12 disabled {y n m l}}
	global CONFIG_LANMEDIA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {
	configure_entry .menu33.config.f.x13 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x13 normal {m}} else {configure_entry .menu33.config.f.x13 disabled {m}}; configure_entry .menu33.config.f.x13 normal {n l}} else {configure_entry .menu33.config.f.x13 disabled {y n m l}}
	global CONFIG_SEALEVEL_4021
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M]];set CONFIG_SEALEVEL_4021 [sync_tristate $CONFIG_SEALEVEL_4021 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu33.config.f.x14 disabled {y}} else {configure_entry .menu33.config.f.x14 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu33.config.f.x14 disabled {m}} else {configure_entry .menu33.config.f.x14 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x14 normal {m}} else {configure_entry .menu33.config.f.x14 disabled {m}}; configure_entry .menu33.config.f.x14 normal {n l}} else {configure_entry .menu33.config.f.x14 disabled {y n m l}}
	global CONFIG_SYNCLINK_SYNCPPP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {
	configure_entry .menu33.config.f.x15 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x15 normal {m}} else {configure_entry .menu33.config.f.x15 disabled {m}}; configure_entry .menu33.config.f.x15 normal {n l}} else {configure_entry .menu33.config.f.x15 disabled {y n m l}}
	global CONFIG_HDLC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {
	configure_entry .menu33.config.f.x16 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x16 normal {m}} else {configure_entry .menu33.config.f.x16 disabled {m}}; configure_entry .menu33.config.f.x16 normal {n l}} else {configure_entry .menu33.config.f.x16 disabled {y n m l}}
	global CONFIG_HDLC_PPP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_HDLC != 0)} then {
	configure_entry .menu33.config.f.x17 normal {n l y}} else {configure_entry .menu33.config.f.x17 disabled {y n l}}
	global CONFIG_HDLC_X25
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_HDLC != 0) && ($CONFIG_LAPB == 2 && $CONFIG_HDLC == 2 || $CONFIG_LAPB == 1)} then {
	configure_entry .menu33.config.f.x18 normal {n l y}} else {configure_entry .menu33.config.f.x18 disabled {y n l}}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_HDLC != 0) && ($CONFIG_LAPB != 2 || $CONFIG_HDLC != 2 && $CONFIG_LAPB != 1)} then {configure_entry .menu33.config.f.x19 normal {m}} else {configure_entry .menu33.config.f.x19 disabled {m}}
	global CONFIG_N2
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_HDLC != 0) && ($CONFIG_HDLC == 1 || $CONFIG_HDLC == 2 || $CONFIG_HDLC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_HDLC]];set CONFIG_N2 [sync_tristate $CONFIG_N2 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu33.config.f.x20 disabled {y}} else {configure_entry .menu33.config.f.x20 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu33.config.f.x20 disabled {m}} else {configure_entry .menu33.config.f.x20 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x20 normal {m}} else {configure_entry .menu33.config.f.x20 disabled {m}}; configure_entry .menu33.config.f.x20 normal {n l}} else {configure_entry .menu33.config.f.x20 disabled {y n m l}}
	global CONFIG_C101
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_HDLC != 0) && ($CONFIG_HDLC == 1 || $CONFIG_HDLC == 2 || $CONFIG_HDLC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_HDLC]];set CONFIG_C101 [sync_tristate $CONFIG_C101 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu33.config.f.x21 disabled {y}} else {configure_entry .menu33.config.f.x21 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu33.config.f.x21 disabled {m}} else {configure_entry .menu33.config.f.x21 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x21 normal {m}} else {configure_entry .menu33.config.f.x21 disabled {m}}; configure_entry .menu33.config.f.x21 normal {n l}} else {configure_entry .menu33.config.f.x21 disabled {y n m l}}
	global CONFIG_DLCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {
	configure_entry .menu33.config.f.x22 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x22 normal {m}} else {configure_entry .menu33.config.f.x22 disabled {m}}; configure_entry .menu33.config.f.x22 normal {n l}} else {configure_entry .menu33.config.f.x22 disabled {y n m l}}
	global CONFIG_DLCI_COUNT
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_DLCI != 0)} then {.menu33.config.f.x23.x configure -state normal -foreground [ cget .ref -foreground ]; .menu33.config.f.x23.l configure -state normal; } else {.menu33.config.f.x23.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu33.config.f.x23.l configure -state disabled}
	global CONFIG_DLCI_MAX
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_DLCI != 0)} then {.menu33.config.f.x24.x configure -state normal -foreground [ cget .ref -foreground ]; .menu33.config.f.x24.l configure -state normal; } else {.menu33.config.f.x24.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu33.config.f.x24.l configure -state disabled}
	global CONFIG_SDLA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_DLCI != 0) && ($CONFIG_DLCI == 1 || $CONFIG_DLCI == 2 || $CONFIG_DLCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_DLCI]];set CONFIG_SDLA [sync_tristate $CONFIG_SDLA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu33.config.f.x25 disabled {y}} else {configure_entry .menu33.config.f.x25 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu33.config.f.x25 disabled {m}} else {configure_entry .menu33.config.f.x25 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x25 normal {m}} else {configure_entry .menu33.config.f.x25 disabled {m}}; configure_entry .menu33.config.f.x25 normal {n l}} else {configure_entry .menu33.config.f.x25 disabled {y n m l}}
	global CONFIG_WAN_ROUTER
	global CONFIG_WAN_ROUTER_DRIVERS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0)} then {
	configure_entry .menu33.config.f.x26 normal {n l y}} else {configure_entry .menu33.config.f.x26 disabled {y n l}}
	global CONFIG_VENDOR_SANGOMA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_WAN_ROUTER == 1 || $CONFIG_WAN_ROUTER == 2 || $CONFIG_WAN_ROUTER == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_WAN_ROUTER]];set CONFIG_VENDOR_SANGOMA [sync_tristate $CONFIG_VENDOR_SANGOMA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu33.config.f.x27 disabled {y}} else {configure_entry .menu33.config.f.x27 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu33.config.f.x27 disabled {m}} else {configure_entry .menu33.config.f.x27 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x27 normal {m}} else {configure_entry .menu33.config.f.x27 disabled {m}}; configure_entry .menu33.config.f.x27 normal {n l}} else {configure_entry .menu33.config.f.x27 disabled {y n m l}}
	global CONFIG_WANPIPE_CHDLC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_VENDOR_SANGOMA != 0)} then {
	configure_entry .menu33.config.f.x28 normal {n l y}} else {configure_entry .menu33.config.f.x28 disabled {y n l}}
	global CONFIG_WANPIPE_FR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_VENDOR_SANGOMA != 0)} then {
	configure_entry .menu33.config.f.x29 normal {n l y}} else {configure_entry .menu33.config.f.x29 disabled {y n l}}
	global CONFIG_WANPIPE_X25
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_VENDOR_SANGOMA != 0)} then {
	configure_entry .menu33.config.f.x30 normal {n l y}} else {configure_entry .menu33.config.f.x30 disabled {y n l}}
	global CONFIG_WANPIPE_PPP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_VENDOR_SANGOMA != 0)} then {
	configure_entry .menu33.config.f.x31 normal {n l y}} else {configure_entry .menu33.config.f.x31 disabled {y n l}}
	global CONFIG_WANPIPE_MULTPPP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_VENDOR_SANGOMA != 0)} then {
	configure_entry .menu33.config.f.x32 normal {n l y}} else {configure_entry .menu33.config.f.x32 disabled {y n l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_CYCLADES_SYNC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_WAN_ROUTER_DRIVERS == 1 || $CONFIG_WAN_ROUTER_DRIVERS == 2 || $CONFIG_WAN_ROUTER_DRIVERS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_WAN_ROUTER_DRIVERS]];set CONFIG_CYCLADES_SYNC [sync_tristate $CONFIG_CYCLADES_SYNC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu33.config.f.x33 disabled {y}} else {configure_entry .menu33.config.f.x33 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu33.config.f.x33 disabled {m}} else {configure_entry .menu33.config.f.x33 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x33 normal {m}} else {configure_entry .menu33.config.f.x33 disabled {m}}; configure_entry .menu33.config.f.x33 normal {n l}} else {configure_entry .menu33.config.f.x33 disabled {y n m l}}
	global CONFIG_CYCLOMX_X25
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_CYCLADES_SYNC != 0)} then {
	configure_entry .menu33.config.f.x34 normal {n l y}} else {configure_entry .menu33.config.f.x34 disabled {y n l}}
	global CONFIG_X25
	global CONFIG_LAPBETHER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_LAPB == 1 || $CONFIG_LAPB == 2 || $CONFIG_LAPB == 4) && ($CONFIG_X25 == 1 || $CONFIG_X25 == 2 || $CONFIG_X25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_LAPB $CONFIG_X25]];set CONFIG_LAPBETHER [sync_tristate $CONFIG_LAPBETHER $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu33.config.f.x35 disabled {y}} else {configure_entry .menu33.config.f.x35 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu33.config.f.x35 disabled {m}} else {configure_entry .menu33.config.f.x35 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x35 normal {m}} else {configure_entry .menu33.config.f.x35 disabled {m}}; configure_entry .menu33.config.f.x35 normal {n l}} else {configure_entry .menu33.config.f.x35 disabled {y n m l}}
	global CONFIG_X25_ASY
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_LAPB == 1 || $CONFIG_LAPB == 2 || $CONFIG_LAPB == 4) && ($CONFIG_X25 == 1 || $CONFIG_X25 == 2 || $CONFIG_X25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_LAPB $CONFIG_X25]];set CONFIG_X25_ASY [sync_tristate $CONFIG_X25_ASY $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu33.config.f.x36 disabled {y}} else {configure_entry .menu33.config.f.x36 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu33.config.f.x36 disabled {m}} else {configure_entry .menu33.config.f.x36 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu33.config.f.x36 normal {m}} else {configure_entry .menu33.config.f.x36 disabled {m}}; configure_entry .menu33.config.f.x36 normal {n l}} else {configure_entry .menu33.config.f.x36 disabled {y n m l}}
}


proc update_define_menu33 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_COMX
	global CONFIG_FARSYNC
	global CONFIG_LANMEDIA
	global CONFIG_SYNCLINK_SYNCPPP
	global CONFIG_HDLC
	global CONFIG_DLCI
	global CONFIG_WAN
set CONFIG_WAN [expr $CONFIG_WAN|16]
set CONFIG_COMX [expr $CONFIG_COMX|16]
set CONFIG_FARSYNC [expr $CONFIG_FARSYNC|16]
set CONFIG_LANMEDIA [expr $CONFIG_LANMEDIA|16]
set CONFIG_SYNCLINK_SYNCPPP [expr $CONFIG_SYNCLINK_SYNCPPP|16]
set CONFIG_HDLC [expr $CONFIG_HDLC|16]
	global CONFIG_HDLC_PPP
set CONFIG_HDLC_PPP [expr $CONFIG_HDLC_PPP|16]
	global CONFIG_HDLC_X25
set CONFIG_HDLC_X25 [expr $CONFIG_HDLC_X25|16]
set CONFIG_DLCI [expr $CONFIG_DLCI|16]
	global CONFIG_WAN_ROUTER_DRIVERS
set CONFIG_WAN_ROUTER_DRIVERS [expr $CONFIG_WAN_ROUTER_DRIVERS|16]
	global CONFIG_WANPIPE_CHDLC
set CONFIG_WANPIPE_CHDLC [expr $CONFIG_WANPIPE_CHDLC|16]
	global CONFIG_WANPIPE_FR
set CONFIG_WANPIPE_FR [expr $CONFIG_WANPIPE_FR|16]
	global CONFIG_WANPIPE_X25
set CONFIG_WANPIPE_X25 [expr $CONFIG_WANPIPE_X25|16]
	global CONFIG_WANPIPE_PPP
set CONFIG_WANPIPE_PPP [expr $CONFIG_WANPIPE_PPP|16]
	global CONFIG_WANPIPE_MULTPPP
set CONFIG_WANPIPE_MULTPPP [expr $CONFIG_WANPIPE_MULTPPP|16]
	global CONFIG_CYCLOMX_X25
set CONFIG_CYCLOMX_X25 [expr $CONFIG_CYCLOMX_X25|16]
	global CONFIG_NET
	global CONFIG_NETDEVICES
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {
	set CONFIG_WAN [expr $CONFIG_WAN&15]}
	global CONFIG_HOSTESS_SV11
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M]]; set CONFIG_HOSTESS_SV11 [sync_tristate $CONFIG_HOSTESS_SV11 $tmpvar_dep]; set CONFIG_HOSTESS_SV11 [expr $CONFIG_HOSTESS_SV11&15]}
	global CONFIG_COSA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M]]; set CONFIG_COSA [sync_tristate $CONFIG_COSA $tmpvar_dep]; set CONFIG_COSA [expr $CONFIG_COSA&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_COMX == 2)} then {set CONFIG_COMX 1}; set CONFIG_COMX [expr $CONFIG_COMX&15]}
	global CONFIG_COMX_HW_COMX
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_COMX == 1 || $CONFIG_COMX == 2 || $CONFIG_COMX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_COMX]]; set CONFIG_COMX_HW_COMX [sync_tristate $CONFIG_COMX_HW_COMX $tmpvar_dep]; set CONFIG_COMX_HW_COMX [expr $CONFIG_COMX_HW_COMX&15]}
	global CONFIG_COMX_HW_LOCOMX
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_COMX == 1 || $CONFIG_COMX == 2 || $CONFIG_COMX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_COMX]]; set CONFIG_COMX_HW_LOCOMX [sync_tristate $CONFIG_COMX_HW_LOCOMX $tmpvar_dep]; set CONFIG_COMX_HW_LOCOMX [expr $CONFIG_COMX_HW_LOCOMX&15]}
	global CONFIG_COMX_HW_MIXCOM
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_COMX == 1 || $CONFIG_COMX == 2 || $CONFIG_COMX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_COMX]]; set CONFIG_COMX_HW_MIXCOM [sync_tristate $CONFIG_COMX_HW_MIXCOM $tmpvar_dep]; set CONFIG_COMX_HW_MIXCOM [expr $CONFIG_COMX_HW_MIXCOM&15]}
	global CONFIG_COMX_PROTO_PPP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_COMX == 1 || $CONFIG_COMX == 2 || $CONFIG_COMX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_COMX]]; set CONFIG_COMX_PROTO_PPP [sync_tristate $CONFIG_COMX_PROTO_PPP $tmpvar_dep]; set CONFIG_COMX_PROTO_PPP [expr $CONFIG_COMX_PROTO_PPP&15]}
	global CONFIG_LAPB
	global CONFIG_COMX_PROTO_LAPB
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_LAPB == 1) && ($CONFIG_COMX == 1 || $CONFIG_COMX == 2 || $CONFIG_COMX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_COMX]]; set CONFIG_COMX_PROTO_LAPB [sync_tristate $CONFIG_COMX_PROTO_LAPB $tmpvar_dep]; set CONFIG_COMX_PROTO_LAPB [expr $CONFIG_COMX_PROTO_LAPB&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_LAPB == 2) && ($CONFIG_LAPB == 1 || $CONFIG_LAPB == 2 || $CONFIG_LAPB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_LAPB]]; set CONFIG_COMX_PROTO_LAPB [sync_tristate $CONFIG_COMX_PROTO_LAPB $tmpvar_dep]; set CONFIG_COMX_PROTO_LAPB [expr $CONFIG_COMX_PROTO_LAPB&15]}
	global CONFIG_COMX_PROTO_FR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_COMX == 1 || $CONFIG_COMX == 2 || $CONFIG_COMX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_COMX]]; set CONFIG_COMX_PROTO_FR [sync_tristate $CONFIG_COMX_PROTO_FR $tmpvar_dep]; set CONFIG_COMX_PROTO_FR [expr $CONFIG_COMX_PROTO_FR&15]}
	global CONFIG_DSCC4
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M]]; set CONFIG_DSCC4 [sync_tristate $CONFIG_DSCC4 $tmpvar_dep]; set CONFIG_DSCC4 [expr $CONFIG_DSCC4&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FARSYNC == 2)} then {set CONFIG_FARSYNC 1}; set CONFIG_FARSYNC [expr $CONFIG_FARSYNC&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_LANMEDIA == 2)} then {set CONFIG_LANMEDIA 1}; set CONFIG_LANMEDIA [expr $CONFIG_LANMEDIA&15]}
	global CONFIG_SEALEVEL_4021
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M]]; set CONFIG_SEALEVEL_4021 [sync_tristate $CONFIG_SEALEVEL_4021 $tmpvar_dep]; set CONFIG_SEALEVEL_4021 [expr $CONFIG_SEALEVEL_4021&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_SYNCLINK_SYNCPPP == 2)} then {set CONFIG_SYNCLINK_SYNCPPP 1}; set CONFIG_SYNCLINK_SYNCPPP [expr $CONFIG_SYNCLINK_SYNCPPP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_HDLC == 2)} then {set CONFIG_HDLC 1}; set CONFIG_HDLC [expr $CONFIG_HDLC&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_HDLC != 0)} then {
	set CONFIG_HDLC_PPP [expr $CONFIG_HDLC_PPP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_HDLC != 0) && ($CONFIG_LAPB == 2 && $CONFIG_HDLC == 2 || $CONFIG_LAPB == 1)} then {
	set CONFIG_HDLC_X25 [expr $CONFIG_HDLC_X25&15]}
	global CONFIG_N2
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_HDLC != 0) && ($CONFIG_HDLC == 1 || $CONFIG_HDLC == 2 || $CONFIG_HDLC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_HDLC]]; set CONFIG_N2 [sync_tristate $CONFIG_N2 $tmpvar_dep]; set CONFIG_N2 [expr $CONFIG_N2&15]}
	global CONFIG_C101
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_HDLC != 0) && ($CONFIG_HDLC == 1 || $CONFIG_HDLC == 2 || $CONFIG_HDLC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_HDLC]]; set CONFIG_C101 [sync_tristate $CONFIG_C101 $tmpvar_dep]; set CONFIG_C101 [expr $CONFIG_C101&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_DLCI == 2)} then {set CONFIG_DLCI 1}; set CONFIG_DLCI [expr $CONFIG_DLCI&15]}
	global CONFIG_DLCI_COUNT
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_DLCI != 0)} then {validate_int CONFIG_DLCI_COUNT "$CONFIG_DLCI_COUNT" 24}
	global CONFIG_DLCI_MAX
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_DLCI != 0)} then {validate_int CONFIG_DLCI_MAX "$CONFIG_DLCI_MAX" 8}
	global CONFIG_SDLA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_DLCI != 0) && ($CONFIG_DLCI == 1 || $CONFIG_DLCI == 2 || $CONFIG_DLCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_DLCI]]; set CONFIG_SDLA [sync_tristate $CONFIG_SDLA $tmpvar_dep]; set CONFIG_SDLA [expr $CONFIG_SDLA&15]}
	global CONFIG_WAN_ROUTER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0)} then {
	set CONFIG_WAN_ROUTER_DRIVERS [expr $CONFIG_WAN_ROUTER_DRIVERS&15]}
	global CONFIG_VENDOR_SANGOMA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_WAN_ROUTER == 1 || $CONFIG_WAN_ROUTER == 2 || $CONFIG_WAN_ROUTER == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_WAN_ROUTER]]; set CONFIG_VENDOR_SANGOMA [sync_tristate $CONFIG_VENDOR_SANGOMA $tmpvar_dep]; set CONFIG_VENDOR_SANGOMA [expr $CONFIG_VENDOR_SANGOMA&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_VENDOR_SANGOMA != 0)} then {
	set CONFIG_WANPIPE_CHDLC [expr $CONFIG_WANPIPE_CHDLC&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_VENDOR_SANGOMA != 0)} then {
	set CONFIG_WANPIPE_FR [expr $CONFIG_WANPIPE_FR&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_VENDOR_SANGOMA != 0)} then {
	set CONFIG_WANPIPE_X25 [expr $CONFIG_WANPIPE_X25&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_VENDOR_SANGOMA != 0)} then {
	set CONFIG_WANPIPE_PPP [expr $CONFIG_WANPIPE_PPP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_VENDOR_SANGOMA != 0)} then {
	set CONFIG_WANPIPE_MULTPPP [expr $CONFIG_WANPIPE_MULTPPP&15]}
	global CONFIG_EXPERIMENTAL
	global CONFIG_CYCLADES_SYNC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_WAN_ROUTER_DRIVERS == 1 || $CONFIG_WAN_ROUTER_DRIVERS == 2 || $CONFIG_WAN_ROUTER_DRIVERS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_WAN_ROUTER_DRIVERS]]; set CONFIG_CYCLADES_SYNC [sync_tristate $CONFIG_CYCLADES_SYNC $tmpvar_dep]; set CONFIG_CYCLADES_SYNC [expr $CONFIG_CYCLADES_SYNC&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_CYCLADES_SYNC != 0)} then {
	set CONFIG_CYCLOMX_X25 [expr $CONFIG_CYCLOMX_X25&15]}
	global CONFIG_X25
	global CONFIG_LAPBETHER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_LAPB == 1 || $CONFIG_LAPB == 2 || $CONFIG_LAPB == 4) && ($CONFIG_X25 == 1 || $CONFIG_X25 == 2 || $CONFIG_X25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_LAPB $CONFIG_X25]]; set CONFIG_LAPBETHER [sync_tristate $CONFIG_LAPBETHER $tmpvar_dep]; set CONFIG_LAPBETHER [expr $CONFIG_LAPBETHER&15]}
	global CONFIG_X25_ASY
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_LAPB == 1 || $CONFIG_LAPB == 2 || $CONFIG_LAPB == 4) && ($CONFIG_X25 == 1 || $CONFIG_X25 == 2 || $CONFIG_X25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_LAPB $CONFIG_X25]]; set CONFIG_X25_ASY [sync_tristate $CONFIG_X25_ASY $tmpvar_dep]; set CONFIG_X25_ASY [expr $CONFIG_X25_ASY&15]}
}


proc menu34 {w title} {
	set oldFocus [focus]
	catch {focus .menu26}
	catch {destroy $w; unregister_active 34}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 34]]
	message $w.m -width 400 -aspect 300 -text \
		"PCMCIA network device support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "PCMCIA network device support" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 34; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 34; menu35 .menu35 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 34"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 34; menu33 .menu33 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 34; menu33 .menu33 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 34 0 "PCMCIA network device support" CONFIG_NET_PCMCIA
	dep_tristate $w.config.f 34 1 "  3Com 3c589 PCMCIA support" CONFIG_PCMCIA_3C589
	dep_tristate $w.config.f 34 2 "  3Com 3c574 PCMCIA support" CONFIG_PCMCIA_3C574
	dep_tristate $w.config.f 34 3 "  Fujitsu FMV-J18x PCMCIA support" CONFIG_PCMCIA_FMVJ18X
	dep_tristate $w.config.f 34 4 "  NE2000 compatible PCMCIA support" CONFIG_PCMCIA_PCNET
	dep_tristate $w.config.f 34 5 "  Asix AX88190 PCMCIA support" CONFIG_PCMCIA_AXNET
	dep_tristate $w.config.f 34 6 "  New Media PCMCIA support" CONFIG_PCMCIA_NMCLAN
	dep_tristate $w.config.f 34 7 "  SMC 91Cxx PCMCIA support" CONFIG_PCMCIA_SMC91C92
	dep_tristate $w.config.f 34 8 "  Xircom 16-bit PCMCIA support" CONFIG_PCMCIA_XIRC2PS
	dep_tristate $w.config.f 34 9 "  COM20020 ARCnet PCMCIA support" CONFIG_ARCNET_COM20020_CS
	dep_tristate $w.config.f 34 10 "  IBM PCMCIA tokenring adapter support" CONFIG_PCMCIA_IBMTR
	tristate $w.config.f 34 11 "  Xircom CardBus support (new driver)" CONFIG_PCMCIA_XIRCOM
	tristate $w.config.f 34 12 "  Xircom Tulip-like CardBus support (old driver)" CONFIG_PCMCIA_XIRTULIP
	bool $w.config.f 34 13 "  Pcmcia Wireless LAN" CONFIG_NET_PCMCIA_RADIO
	dep_tristate $w.config.f 34 14 "    Aviator/Raytheon 2.4MHz wireless support" CONFIG_PCMCIA_RAYCS
	dep_tristate $w.config.f 34 15 "    Xircom Netwave AirSurfer wireless support" CONFIG_PCMCIA_NETWAVE
	dep_tristate $w.config.f 34 16 "    AT&T/Lucent Wavelan wireless support" CONFIG_PCMCIA_WAVELAN
	dep_tristate $w.config.f 34 17 "    Aironet 4500/4800 PCMCIA support" CONFIG_AIRONET4500_CS



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu26] == 0} then {menu26 .menu26 "Network device support"}
	set winx [expr [winfo x .menu26]+30]; set winy [expr [winfo y .menu26]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu34 {} {
	global CONFIG_NET
	global CONFIG_NETDEVICES
	global CONFIG_HOTPLUG
	global CONFIG_PCMCIA
	global CONFIG_NET_PCMCIA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0)} then {
	configure_entry .menu34.config.f.x0 normal {n l y}} else {configure_entry .menu34.config.f.x0 disabled {y n l}}
	global CONFIG_MODULES
	global CONFIG_PCMCIA_3C589
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]];set CONFIG_PCMCIA_3C589 [sync_tristate $CONFIG_PCMCIA_3C589 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu34.config.f.x1 disabled {y}} else {configure_entry .menu34.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu34.config.f.x1 disabled {m}} else {configure_entry .menu34.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu34.config.f.x1 normal {m}} else {configure_entry .menu34.config.f.x1 disabled {m}}; configure_entry .menu34.config.f.x1 normal {n l}} else {configure_entry .menu34.config.f.x1 disabled {y n m l}}
	global CONFIG_PCMCIA_3C574
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]];set CONFIG_PCMCIA_3C574 [sync_tristate $CONFIG_PCMCIA_3C574 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu34.config.f.x2 disabled {y}} else {configure_entry .menu34.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu34.config.f.x2 disabled {m}} else {configure_entry .menu34.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu34.config.f.x2 normal {m}} else {configure_entry .menu34.config.f.x2 disabled {m}}; configure_entry .menu34.config.f.x2 normal {n l}} else {configure_entry .menu34.config.f.x2 disabled {y n m l}}
	global CONFIG_PCMCIA_FMVJ18X
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]];set CONFIG_PCMCIA_FMVJ18X [sync_tristate $CONFIG_PCMCIA_FMVJ18X $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu34.config.f.x3 disabled {y}} else {configure_entry .menu34.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu34.config.f.x3 disabled {m}} else {configure_entry .menu34.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu34.config.f.x3 normal {m}} else {configure_entry .menu34.config.f.x3 disabled {m}}; configure_entry .menu34.config.f.x3 normal {n l}} else {configure_entry .menu34.config.f.x3 disabled {y n m l}}
	global CONFIG_PCMCIA_PCNET
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]];set CONFIG_PCMCIA_PCNET [sync_tristate $CONFIG_PCMCIA_PCNET $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu34.config.f.x4 disabled {y}} else {configure_entry .menu34.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu34.config.f.x4 disabled {m}} else {configure_entry .menu34.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu34.config.f.x4 normal {m}} else {configure_entry .menu34.config.f.x4 disabled {m}}; configure_entry .menu34.config.f.x4 normal {n l}} else {configure_entry .menu34.config.f.x4 disabled {y n m l}}
	global CONFIG_PCMCIA_AXNET
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]];set CONFIG_PCMCIA_AXNET [sync_tristate $CONFIG_PCMCIA_AXNET $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu34.config.f.x5 disabled {y}} else {configure_entry .menu34.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu34.config.f.x5 disabled {m}} else {configure_entry .menu34.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu34.config.f.x5 normal {m}} else {configure_entry .menu34.config.f.x5 disabled {m}}; configure_entry .menu34.config.f.x5 normal {n l}} else {configure_entry .menu34.config.f.x5 disabled {y n m l}}
	global CONFIG_PCMCIA_NMCLAN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]];set CONFIG_PCMCIA_NMCLAN [sync_tristate $CONFIG_PCMCIA_NMCLAN $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu34.config.f.x6 disabled {y}} else {configure_entry .menu34.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu34.config.f.x6 disabled {m}} else {configure_entry .menu34.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu34.config.f.x6 normal {m}} else {configure_entry .menu34.config.f.x6 disabled {m}}; configure_entry .menu34.config.f.x6 normal {n l}} else {configure_entry .menu34.config.f.x6 disabled {y n m l}}
	global CONFIG_PCMCIA_SMC91C92
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]];set CONFIG_PCMCIA_SMC91C92 [sync_tristate $CONFIG_PCMCIA_SMC91C92 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu34.config.f.x7 disabled {y}} else {configure_entry .menu34.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu34.config.f.x7 disabled {m}} else {configure_entry .menu34.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu34.config.f.x7 normal {m}} else {configure_entry .menu34.config.f.x7 disabled {m}}; configure_entry .menu34.config.f.x7 normal {n l}} else {configure_entry .menu34.config.f.x7 disabled {y n m l}}
	global CONFIG_PCMCIA_XIRC2PS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]];set CONFIG_PCMCIA_XIRC2PS [sync_tristate $CONFIG_PCMCIA_XIRC2PS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu34.config.f.x8 disabled {y}} else {configure_entry .menu34.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu34.config.f.x8 disabled {m}} else {configure_entry .menu34.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu34.config.f.x8 normal {m}} else {configure_entry .menu34.config.f.x8 disabled {m}}; configure_entry .menu34.config.f.x8 normal {n l}} else {configure_entry .menu34.config.f.x8 disabled {y n m l}}
	global CONFIG_ARCNET_COM20020
	global CONFIG_ARCNET
	global CONFIG_ARCNET_COM20020_CS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_ARCNET_COM20020 == 1 || $CONFIG_ARCNET_COM20020 == 2 || $CONFIG_ARCNET_COM20020 == 4) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET_COM20020 $CONFIG_ARCNET $CONFIG_PCMCIA]];set CONFIG_ARCNET_COM20020_CS [sync_tristate $CONFIG_ARCNET_COM20020_CS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu34.config.f.x9 disabled {y}} else {configure_entry .menu34.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu34.config.f.x9 disabled {m}} else {configure_entry .menu34.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu34.config.f.x9 normal {m}} else {configure_entry .menu34.config.f.x9 disabled {m}}; configure_entry .menu34.config.f.x9 normal {n l}} else {configure_entry .menu34.config.f.x9 disabled {y n m l}}
	global CONFIG_IBMTR
	global CONFIG_TR
	global CONFIG_PCMCIA_IBMTR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_IBMTR != 1) && ($CONFIG_TR == 1 || $CONFIG_TR == 2 || $CONFIG_TR == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_TR $CONFIG_PCMCIA]];set CONFIG_PCMCIA_IBMTR [sync_tristate $CONFIG_PCMCIA_IBMTR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu34.config.f.x10 disabled {y}} else {configure_entry .menu34.config.f.x10 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu34.config.f.x10 disabled {m}} else {configure_entry .menu34.config.f.x10 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu34.config.f.x10 normal {m}} else {configure_entry .menu34.config.f.x10 disabled {m}}; configure_entry .menu34.config.f.x10 normal {n l}} else {configure_entry .menu34.config.f.x10 disabled {y n m l}}
	global CONFIG_CARDBUS
	global CONFIG_PCMCIA_XIRCOM
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_CARDBUS == 1)} then {
	configure_entry .menu34.config.f.x11 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu34.config.f.x11 normal {m}} else {configure_entry .menu34.config.f.x11 disabled {m}}; configure_entry .menu34.config.f.x11 normal {n l}} else {configure_entry .menu34.config.f.x11 disabled {y n m l}}
	global CONFIG_PCMCIA_XIRTULIP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_CARDBUS == 1)} then {
	configure_entry .menu34.config.f.x12 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu34.config.f.x12 normal {m}} else {configure_entry .menu34.config.f.x12 disabled {m}}; configure_entry .menu34.config.f.x12 normal {n l}} else {configure_entry .menu34.config.f.x12 disabled {y n m l}}
	global CONFIG_NET_PCMCIA_RADIO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1)} then {
	configure_entry .menu34.config.f.x13 normal {n l y}} else {configure_entry .menu34.config.f.x13 disabled {y n l}}
	global CONFIG_PCMCIA_RAYCS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_NET_PCMCIA_RADIO == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]];set CONFIG_PCMCIA_RAYCS [sync_tristate $CONFIG_PCMCIA_RAYCS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu34.config.f.x14 disabled {y}} else {configure_entry .menu34.config.f.x14 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu34.config.f.x14 disabled {m}} else {configure_entry .menu34.config.f.x14 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu34.config.f.x14 normal {m}} else {configure_entry .menu34.config.f.x14 disabled {m}}; configure_entry .menu34.config.f.x14 normal {n l}} else {configure_entry .menu34.config.f.x14 disabled {y n m l}}
	global CONFIG_PCMCIA_NETWAVE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_NET_PCMCIA_RADIO == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]];set CONFIG_PCMCIA_NETWAVE [sync_tristate $CONFIG_PCMCIA_NETWAVE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu34.config.f.x15 disabled {y}} else {configure_entry .menu34.config.f.x15 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu34.config.f.x15 disabled {m}} else {configure_entry .menu34.config.f.x15 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu34.config.f.x15 normal {m}} else {configure_entry .menu34.config.f.x15 disabled {m}}; configure_entry .menu34.config.f.x15 normal {n l}} else {configure_entry .menu34.config.f.x15 disabled {y n m l}}
	global CONFIG_PCMCIA_WAVELAN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_NET_PCMCIA_RADIO == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]];set CONFIG_PCMCIA_WAVELAN [sync_tristate $CONFIG_PCMCIA_WAVELAN $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu34.config.f.x16 disabled {y}} else {configure_entry .menu34.config.f.x16 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu34.config.f.x16 disabled {m}} else {configure_entry .menu34.config.f.x16 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu34.config.f.x16 normal {m}} else {configure_entry .menu34.config.f.x16 disabled {m}}; configure_entry .menu34.config.f.x16 normal {n l}} else {configure_entry .menu34.config.f.x16 disabled {y n m l}}
	global CONFIG_AIRONET4500
	global CONFIG_AIRONET4500_CS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_NET_PCMCIA_RADIO == 1) && ($CONFIG_AIRONET4500 == 1 || $CONFIG_AIRONET4500 == 2 || $CONFIG_AIRONET4500 == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AIRONET4500 $CONFIG_PCMCIA]];set CONFIG_AIRONET4500_CS [sync_tristate $CONFIG_AIRONET4500_CS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu34.config.f.x17 disabled {y}} else {configure_entry .menu34.config.f.x17 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu34.config.f.x17 disabled {m}} else {configure_entry .menu34.config.f.x17 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu34.config.f.x17 normal {m}} else {configure_entry .menu34.config.f.x17 disabled {m}}; configure_entry .menu34.config.f.x17 normal {n l}} else {configure_entry .menu34.config.f.x17 disabled {y n m l}}
}


proc update_define_menu34 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_PCMCIA_XIRCOM
	global CONFIG_PCMCIA_XIRTULIP
	global CONFIG_NET_PCMCIA
set CONFIG_NET_PCMCIA [expr $CONFIG_NET_PCMCIA|16]
set CONFIG_PCMCIA_XIRCOM [expr $CONFIG_PCMCIA_XIRCOM|16]
set CONFIG_PCMCIA_XIRTULIP [expr $CONFIG_PCMCIA_XIRTULIP|16]
	global CONFIG_NET_PCMCIA_RADIO
set CONFIG_NET_PCMCIA_RADIO [expr $CONFIG_NET_PCMCIA_RADIO|16]
	global CONFIG_NET
	global CONFIG_NETDEVICES
	global CONFIG_HOTPLUG
	global CONFIG_PCMCIA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0)} then {
	set CONFIG_NET_PCMCIA [expr $CONFIG_NET_PCMCIA&15]}
	global CONFIG_PCMCIA_3C589
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]]; set CONFIG_PCMCIA_3C589 [sync_tristate $CONFIG_PCMCIA_3C589 $tmpvar_dep]; set CONFIG_PCMCIA_3C589 [expr $CONFIG_PCMCIA_3C589&15]}
	global CONFIG_PCMCIA_3C574
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]]; set CONFIG_PCMCIA_3C574 [sync_tristate $CONFIG_PCMCIA_3C574 $tmpvar_dep]; set CONFIG_PCMCIA_3C574 [expr $CONFIG_PCMCIA_3C574&15]}
	global CONFIG_PCMCIA_FMVJ18X
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]]; set CONFIG_PCMCIA_FMVJ18X [sync_tristate $CONFIG_PCMCIA_FMVJ18X $tmpvar_dep]; set CONFIG_PCMCIA_FMVJ18X [expr $CONFIG_PCMCIA_FMVJ18X&15]}
	global CONFIG_PCMCIA_PCNET
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]]; set CONFIG_PCMCIA_PCNET [sync_tristate $CONFIG_PCMCIA_PCNET $tmpvar_dep]; set CONFIG_PCMCIA_PCNET [expr $CONFIG_PCMCIA_PCNET&15]}
	global CONFIG_PCMCIA_AXNET
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]]; set CONFIG_PCMCIA_AXNET [sync_tristate $CONFIG_PCMCIA_AXNET $tmpvar_dep]; set CONFIG_PCMCIA_AXNET [expr $CONFIG_PCMCIA_AXNET&15]}
	global CONFIG_PCMCIA_NMCLAN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]]; set CONFIG_PCMCIA_NMCLAN [sync_tristate $CONFIG_PCMCIA_NMCLAN $tmpvar_dep]; set CONFIG_PCMCIA_NMCLAN [expr $CONFIG_PCMCIA_NMCLAN&15]}
	global CONFIG_PCMCIA_SMC91C92
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]]; set CONFIG_PCMCIA_SMC91C92 [sync_tristate $CONFIG_PCMCIA_SMC91C92 $tmpvar_dep]; set CONFIG_PCMCIA_SMC91C92 [expr $CONFIG_PCMCIA_SMC91C92&15]}
	global CONFIG_PCMCIA_XIRC2PS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]]; set CONFIG_PCMCIA_XIRC2PS [sync_tristate $CONFIG_PCMCIA_XIRC2PS $tmpvar_dep]; set CONFIG_PCMCIA_XIRC2PS [expr $CONFIG_PCMCIA_XIRC2PS&15]}
	global CONFIG_ARCNET_COM20020
	global CONFIG_ARCNET
	global CONFIG_ARCNET_COM20020_CS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_ARCNET_COM20020 == 1 || $CONFIG_ARCNET_COM20020 == 2 || $CONFIG_ARCNET_COM20020 == 4) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCNET_COM20020 $CONFIG_ARCNET $CONFIG_PCMCIA]]; set CONFIG_ARCNET_COM20020_CS [sync_tristate $CONFIG_ARCNET_COM20020_CS $tmpvar_dep]; set CONFIG_ARCNET_COM20020_CS [expr $CONFIG_ARCNET_COM20020_CS&15]}
	global CONFIG_IBMTR
	global CONFIG_TR
	global CONFIG_PCMCIA_IBMTR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_IBMTR != 1) && ($CONFIG_TR == 1 || $CONFIG_TR == 2 || $CONFIG_TR == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_TR $CONFIG_PCMCIA]]; set CONFIG_PCMCIA_IBMTR [sync_tristate $CONFIG_PCMCIA_IBMTR $tmpvar_dep]; set CONFIG_PCMCIA_IBMTR [expr $CONFIG_PCMCIA_IBMTR&15]}
	global CONFIG_CARDBUS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_CARDBUS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_PCMCIA_XIRCOM == 2)} then {set CONFIG_PCMCIA_XIRCOM 1}; set CONFIG_PCMCIA_XIRCOM [expr $CONFIG_PCMCIA_XIRCOM&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_CARDBUS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_PCMCIA_XIRTULIP == 2)} then {set CONFIG_PCMCIA_XIRTULIP 1}; set CONFIG_PCMCIA_XIRTULIP [expr $CONFIG_PCMCIA_XIRTULIP&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1)} then {
	set CONFIG_NET_PCMCIA_RADIO [expr $CONFIG_NET_PCMCIA_RADIO&15]}
	global CONFIG_PCMCIA_RAYCS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_NET_PCMCIA_RADIO == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]]; set CONFIG_PCMCIA_RAYCS [sync_tristate $CONFIG_PCMCIA_RAYCS $tmpvar_dep]; set CONFIG_PCMCIA_RAYCS [expr $CONFIG_PCMCIA_RAYCS&15]}
	global CONFIG_PCMCIA_NETWAVE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_NET_PCMCIA_RADIO == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]]; set CONFIG_PCMCIA_NETWAVE [sync_tristate $CONFIG_PCMCIA_NETWAVE $tmpvar_dep]; set CONFIG_PCMCIA_NETWAVE [expr $CONFIG_PCMCIA_NETWAVE&15]}
	global CONFIG_PCMCIA_WAVELAN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_NET_PCMCIA_RADIO == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]]; set CONFIG_PCMCIA_WAVELAN [sync_tristate $CONFIG_PCMCIA_WAVELAN $tmpvar_dep]; set CONFIG_PCMCIA_WAVELAN [expr $CONFIG_PCMCIA_WAVELAN&15]}
	global CONFIG_AIRONET4500
	global CONFIG_AIRONET4500_CS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_NET_PCMCIA_RADIO == 1) && ($CONFIG_AIRONET4500 == 1 || $CONFIG_AIRONET4500 == 2 || $CONFIG_AIRONET4500 == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AIRONET4500 $CONFIG_PCMCIA]]; set CONFIG_AIRONET4500_CS [sync_tristate $CONFIG_AIRONET4500_CS $tmpvar_dep]; set CONFIG_AIRONET4500_CS [expr $CONFIG_AIRONET4500_CS&15]}
}


proc menu35 {w title} {
	set oldFocus [focus]
	catch {focus .menu26}
	catch {destroy $w; unregister_active 35}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 35]]
	message $w.m -width 400 -aspect 300 -text \
		"ATM drivers"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "ATM drivers" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 35; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 35; catch {destroy .menu26}; unregister_active 26; menu36 .menu36 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 35"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 35; menu34 .menu34 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 35; menu34 .menu34 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 35 0 "ATM over TCP" CONFIG_ATM_TCP
	tristate $w.config.f 35 1 "Efficient Networks Speedstream 3010" CONFIG_ATM_LANAI
	tristate $w.config.f 35 2 "Efficient Networks ENI155P" CONFIG_ATM_ENI
	bool $w.config.f 35 3 "  Enable extended debugging" CONFIG_ATM_ENI_DEBUG
	bool $w.config.f 35 4 "  Fine-tune burst settings" CONFIG_ATM_ENI_TUNE_BURST
	bool $w.config.f 35 5 "    Enable 16W TX bursts (discouraged)" CONFIG_ATM_ENI_BURST_TX_16W
	bool $w.config.f 35 6 "    Enable 8W TX bursts (recommended)" CONFIG_ATM_ENI_BURST_TX_8W
	bool $w.config.f 35 7 "    Enable 4W TX bursts (optional)" CONFIG_ATM_ENI_BURST_TX_4W
	bool $w.config.f 35 8 "    Enable 2W TX bursts (optional)" CONFIG_ATM_ENI_BURST_TX_2W
	bool $w.config.f 35 9 "    Enable 16W RX bursts (discouraged)" CONFIG_ATM_ENI_BURST_RX_16W
	bool $w.config.f 35 10 "    Enable 8W RX bursts (discouraged)" CONFIG_ATM_ENI_BURST_RX_8W
	bool $w.config.f 35 11 "    Enable 4W RX bursts (recommended)" CONFIG_ATM_ENI_BURST_RX_4W
	bool $w.config.f 35 12 "    Enable 2W RX bursts (optional)" CONFIG_ATM_ENI_BURST_RX_2W
	tristate $w.config.f 35 13 "Fujitsu FireStream (FS50/FS155) " CONFIG_ATM_FIRESTREAM
	tristate $w.config.f 35 14 "ZeitNet ZN1221/ZN1225" CONFIG_ATM_ZATM
	bool $w.config.f 35 15 "  Enable extended debugging" CONFIG_ATM_ZATM_DEBUG
	tristate $w.config.f 35 16 "IDT 77201 (NICStAR) (ForeRunnerLE)" CONFIG_ATM_NICSTAR
	bool $w.config.f 35 17 "  Use suni PHY driver (155Mbps)" CONFIG_ATM_NICSTAR_USE_SUNI
	bool $w.config.f 35 18 "  Use IDT77015 PHY driver (25Mbps)" CONFIG_ATM_NICSTAR_USE_IDT77105
	tristate $w.config.f 35 19 "IDT 77252 (NICStAR II)" CONFIG_ATM_IDT77252
	bool $w.config.f 35 20 "  Enable debugging messages" CONFIG_ATM_IDT77252_DEBUG
	bool $w.config.f 35 21 "  Receive ALL cells in raw queue" CONFIG_ATM_IDT77252_RCV_ALL
	tristate $w.config.f 35 22 "Madge Ambassador (Collage PCI 155 Server)" CONFIG_ATM_AMBASSADOR
	bool $w.config.f 35 23 "  Enable debugging messages" CONFIG_ATM_AMBASSADOR_DEBUG
	tristate $w.config.f 35 24 "Madge Horizon \[Ultra\] (Collage PCI 25 and Collage PCI 155 Client)" CONFIG_ATM_HORIZON
	bool $w.config.f 35 25 "  Enable debugging messages" CONFIG_ATM_HORIZON_DEBUG
	tristate $w.config.f 35 26 "Interphase ATM PCI x575/x525/x531" CONFIG_ATM_IA
	bool $w.config.f 35 27 "  Enable debugging messages" CONFIG_ATM_IA_DEBUG
	tristate $w.config.f 35 28 "FORE Systems 200E-series" CONFIG_ATM_FORE200E_MAYBE
	bool $w.config.f 35 29 "  PCA-200E support" CONFIG_ATM_FORE200E_PCA
	bool $w.config.f 35 30 "   Use default PCA-200E firmware (normally enabled)" CONFIG_ATM_FORE200E_PCA_DEFAULT_FW
	istring $w.config.f 35 31 "   Pathname of user-supplied binary firmware" CONFIG_ATM_FORE200E_PCA_FW
	int $w.config.f 35 32 "  Maximum number of tx retries" CONFIG_ATM_FORE200E_TX_RETRY
	int $w.config.f 35 33 "  Debugging level (0-3)" CONFIG_ATM_FORE200E_DEBUG



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu26] == 0} then {menu26 .menu26 "Network device support"}
	set winx [expr [winfo x .menu26]+30]; set winy [expr [winfo y .menu26]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu35 {} {
	global CONFIG_MODULES
	global CONFIG_NET
	global CONFIG_NETDEVICES
	global CONFIG_ATM
	global CONFIG_INET
	global CONFIG_ATM_TCP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_INET == 1)} then {
	configure_entry .menu35.config.f.x0 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu35.config.f.x0 normal {m}} else {configure_entry .menu35.config.f.x0 disabled {m}}; configure_entry .menu35.config.f.x0 normal {n l}} else {configure_entry .menu35.config.f.x0 disabled {y n m l}}
	global CONFIG_PCI
	global CONFIG_ATM_LANAI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu35.config.f.x1 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu35.config.f.x1 normal {m}} else {configure_entry .menu35.config.f.x1 disabled {m}}; configure_entry .menu35.config.f.x1 normal {n l}} else {configure_entry .menu35.config.f.x1 disabled {y n m l}}
	global CONFIG_ATM_ENI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu35.config.f.x2 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu35.config.f.x2 normal {m}} else {configure_entry .menu35.config.f.x2 disabled {m}}; configure_entry .menu35.config.f.x2 normal {n l}} else {configure_entry .menu35.config.f.x2 disabled {y n m l}}
	global CONFIG_ATM_ENI_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0)} then {
	configure_entry .menu35.config.f.x3 normal {n l y}} else {configure_entry .menu35.config.f.x3 disabled {y n l}}
	global CONFIG_ATM_ENI_TUNE_BURST
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0)} then {
	configure_entry .menu35.config.f.x4 normal {n l y}} else {configure_entry .menu35.config.f.x4 disabled {y n l}}
	global CONFIG_ATM_ENI_BURST_TX_16W
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {
	configure_entry .menu35.config.f.x5 normal {n l y}} else {configure_entry .menu35.config.f.x5 disabled {y n l}}
	global CONFIG_ATM_ENI_BURST_TX_8W
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {
	configure_entry .menu35.config.f.x6 normal {n l y}} else {configure_entry .menu35.config.f.x6 disabled {y n l}}
	global CONFIG_ATM_ENI_BURST_TX_4W
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {
	configure_entry .menu35.config.f.x7 normal {n l y}} else {configure_entry .menu35.config.f.x7 disabled {y n l}}
	global CONFIG_ATM_ENI_BURST_TX_2W
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {
	configure_entry .menu35.config.f.x8 normal {n l y}} else {configure_entry .menu35.config.f.x8 disabled {y n l}}
	global CONFIG_ATM_ENI_BURST_RX_16W
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {
	configure_entry .menu35.config.f.x9 normal {n l y}} else {configure_entry .menu35.config.f.x9 disabled {y n l}}
	global CONFIG_ATM_ENI_BURST_RX_8W
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {
	configure_entry .menu35.config.f.x10 normal {n l y}} else {configure_entry .menu35.config.f.x10 disabled {y n l}}
	global CONFIG_ATM_ENI_BURST_RX_4W
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {
	configure_entry .menu35.config.f.x11 normal {n l y}} else {configure_entry .menu35.config.f.x11 disabled {y n l}}
	global CONFIG_ATM_ENI_BURST_RX_2W
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {
	configure_entry .menu35.config.f.x12 normal {n l y}} else {configure_entry .menu35.config.f.x12 disabled {y n l}}
	global CONFIG_ATM_FIRESTREAM
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu35.config.f.x13 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu35.config.f.x13 normal {m}} else {configure_entry .menu35.config.f.x13 disabled {m}}; configure_entry .menu35.config.f.x13 normal {n l}} else {configure_entry .menu35.config.f.x13 disabled {y n m l}}
	global CONFIG_ATM_ZATM
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu35.config.f.x14 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu35.config.f.x14 normal {m}} else {configure_entry .menu35.config.f.x14 disabled {m}}; configure_entry .menu35.config.f.x14 normal {n l}} else {configure_entry .menu35.config.f.x14 disabled {y n m l}}
	global CONFIG_ATM_ZATM_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ZATM != 0)} then {
	configure_entry .menu35.config.f.x15 normal {n l y}} else {configure_entry .menu35.config.f.x15 disabled {y n l}}
	global CONFIG_ATM_NICSTAR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu35.config.f.x16 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu35.config.f.x16 normal {m}} else {configure_entry .menu35.config.f.x16 disabled {m}}; configure_entry .menu35.config.f.x16 normal {n l}} else {configure_entry .menu35.config.f.x16 disabled {y n m l}}
	global CONFIG_ATM_NICSTAR_USE_SUNI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_NICSTAR != 0)} then {
	configure_entry .menu35.config.f.x17 normal {n l y}} else {configure_entry .menu35.config.f.x17 disabled {y n l}}
	global CONFIG_ATM_NICSTAR_USE_IDT77105
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_NICSTAR != 0)} then {
	configure_entry .menu35.config.f.x18 normal {n l y}} else {configure_entry .menu35.config.f.x18 disabled {y n l}}
	global CONFIG_ATM_IDT77252
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu35.config.f.x19 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu35.config.f.x19 normal {m}} else {configure_entry .menu35.config.f.x19 disabled {m}}; configure_entry .menu35.config.f.x19 normal {n l}} else {configure_entry .menu35.config.f.x19 disabled {y n m l}}
	global CONFIG_ATM_IDT77252_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_IDT77252 != 0)} then {
	configure_entry .menu35.config.f.x20 normal {n l y}} else {configure_entry .menu35.config.f.x20 disabled {y n l}}
	global CONFIG_ATM_IDT77252_RCV_ALL
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_IDT77252 != 0)} then {
	configure_entry .menu35.config.f.x21 normal {n l y}} else {configure_entry .menu35.config.f.x21 disabled {y n l}}
	global CONFIG_ATM_AMBASSADOR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu35.config.f.x22 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu35.config.f.x22 normal {m}} else {configure_entry .menu35.config.f.x22 disabled {m}}; configure_entry .menu35.config.f.x22 normal {n l}} else {configure_entry .menu35.config.f.x22 disabled {y n m l}}
	global CONFIG_ATM_AMBASSADOR_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_AMBASSADOR != 0)} then {
	configure_entry .menu35.config.f.x23 normal {n l y}} else {configure_entry .menu35.config.f.x23 disabled {y n l}}
	global CONFIG_ATM_HORIZON
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu35.config.f.x24 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu35.config.f.x24 normal {m}} else {configure_entry .menu35.config.f.x24 disabled {m}}; configure_entry .menu35.config.f.x24 normal {n l}} else {configure_entry .menu35.config.f.x24 disabled {y n m l}}
	global CONFIG_ATM_HORIZON_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_HORIZON != 0)} then {
	configure_entry .menu35.config.f.x25 normal {n l y}} else {configure_entry .menu35.config.f.x25 disabled {y n l}}
	global CONFIG_ATM_IA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu35.config.f.x26 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu35.config.f.x26 normal {m}} else {configure_entry .menu35.config.f.x26 disabled {m}}; configure_entry .menu35.config.f.x26 normal {n l}} else {configure_entry .menu35.config.f.x26 disabled {y n m l}}
	global CONFIG_ATM_IA_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_IA != 0)} then {
	configure_entry .menu35.config.f.x27 normal {n l y}} else {configure_entry .menu35.config.f.x27 disabled {y n l}}
	global CONFIG_SBUS
	global CONFIG_ATM_FORE200E_MAYBE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1)} then {
	configure_entry .menu35.config.f.x28 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu35.config.f.x28 normal {m}} else {configure_entry .menu35.config.f.x28 disabled {m}}; configure_entry .menu35.config.f.x28 normal {n l}} else {configure_entry .menu35.config.f.x28 disabled {y n m l}}
	global CONFIG_ATM_FORE200E_PCA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1) && ($CONFIG_ATM_FORE200E_MAYBE != 0) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu35.config.f.x29 normal {n l y}} else {configure_entry .menu35.config.f.x29 disabled {y n l}}
	global CONFIG_ATM_FORE200E_PCA_DEFAULT_FW
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1) && ($CONFIG_ATM_FORE200E_MAYBE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_FORE200E_PCA == 1)} then {
	configure_entry .menu35.config.f.x30 normal {n l y}} else {configure_entry .menu35.config.f.x30 disabled {y n l}}
	global CONFIG_ATM_FORE200E_PCA_FW
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1) && ($CONFIG_ATM_FORE200E_MAYBE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_FORE200E_PCA == 1) && ($CONFIG_ATM_FORE200E_PCA_DEFAULT_FW == 0)} then {.menu35.config.f.x31.x configure -state normal -foreground [ cget .ref -foreground ]; .menu35.config.f.x31.l configure -state normal; } else {.menu35.config.f.x31.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu35.config.f.x31.l configure -state disabled}
	global CONFIG_ATM_FORE200E_SBA
	global CONFIG_ATM_FORE200E_TX_RETRY
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1) && ($CONFIG_ATM_FORE200E_PCA == 1 || $CONFIG_ATM_FORE200E_SBA == 1)} then {.menu35.config.f.x32.x configure -state normal -foreground [ cget .ref -foreground ]; .menu35.config.f.x32.l configure -state normal; } else {.menu35.config.f.x32.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu35.config.f.x32.l configure -state disabled}
	global CONFIG_ATM_FORE200E_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1) && ($CONFIG_ATM_FORE200E_PCA == 1 || $CONFIG_ATM_FORE200E_SBA == 1)} then {.menu35.config.f.x33.x configure -state normal -foreground [ cget .ref -foreground ]; .menu35.config.f.x33.l configure -state normal; } else {.menu35.config.f.x33.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu35.config.f.x33.l configure -state disabled}
}


proc update_define_menu35 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_ATM_TCP
	global CONFIG_ATM_LANAI
	global CONFIG_ATM_ENI
	global CONFIG_ATM_FIRESTREAM
	global CONFIG_ATM_ZATM
	global CONFIG_ATM_NICSTAR
	global CONFIG_ATM_IDT77252
	global CONFIG_ATM_IDT77252_USE_SUNI
	global CONFIG_ATM_AMBASSADOR
	global CONFIG_ATM_HORIZON
	global CONFIG_ATM_IA
	global CONFIG_ATM_FORE200E_MAYBE
	global CONFIG_ATM_FORE200E
set CONFIG_ATM_TCP [expr $CONFIG_ATM_TCP|16]
set CONFIG_ATM_LANAI [expr $CONFIG_ATM_LANAI|16]
set CONFIG_ATM_ENI [expr $CONFIG_ATM_ENI|16]
	global CONFIG_ATM_ENI_DEBUG
set CONFIG_ATM_ENI_DEBUG [expr $CONFIG_ATM_ENI_DEBUG|16]
	global CONFIG_ATM_ENI_TUNE_BURST
set CONFIG_ATM_ENI_TUNE_BURST [expr $CONFIG_ATM_ENI_TUNE_BURST|16]
	global CONFIG_ATM_ENI_BURST_TX_16W
set CONFIG_ATM_ENI_BURST_TX_16W [expr $CONFIG_ATM_ENI_BURST_TX_16W|16]
	global CONFIG_ATM_ENI_BURST_TX_8W
set CONFIG_ATM_ENI_BURST_TX_8W [expr $CONFIG_ATM_ENI_BURST_TX_8W|16]
	global CONFIG_ATM_ENI_BURST_TX_4W
set CONFIG_ATM_ENI_BURST_TX_4W [expr $CONFIG_ATM_ENI_BURST_TX_4W|16]
	global CONFIG_ATM_ENI_BURST_TX_2W
set CONFIG_ATM_ENI_BURST_TX_2W [expr $CONFIG_ATM_ENI_BURST_TX_2W|16]
	global CONFIG_ATM_ENI_BURST_RX_16W
set CONFIG_ATM_ENI_BURST_RX_16W [expr $CONFIG_ATM_ENI_BURST_RX_16W|16]
	global CONFIG_ATM_ENI_BURST_RX_8W
set CONFIG_ATM_ENI_BURST_RX_8W [expr $CONFIG_ATM_ENI_BURST_RX_8W|16]
	global CONFIG_ATM_ENI_BURST_RX_4W
set CONFIG_ATM_ENI_BURST_RX_4W [expr $CONFIG_ATM_ENI_BURST_RX_4W|16]
	global CONFIG_ATM_ENI_BURST_RX_2W
set CONFIG_ATM_ENI_BURST_RX_2W [expr $CONFIG_ATM_ENI_BURST_RX_2W|16]
set CONFIG_ATM_FIRESTREAM [expr $CONFIG_ATM_FIRESTREAM|16]
set CONFIG_ATM_ZATM [expr $CONFIG_ATM_ZATM|16]
	global CONFIG_ATM_ZATM_DEBUG
set CONFIG_ATM_ZATM_DEBUG [expr $CONFIG_ATM_ZATM_DEBUG|16]
set CONFIG_ATM_NICSTAR [expr $CONFIG_ATM_NICSTAR|16]
	global CONFIG_ATM_NICSTAR_USE_SUNI
set CONFIG_ATM_NICSTAR_USE_SUNI [expr $CONFIG_ATM_NICSTAR_USE_SUNI|16]
	global CONFIG_ATM_NICSTAR_USE_IDT77105
set CONFIG_ATM_NICSTAR_USE_IDT77105 [expr $CONFIG_ATM_NICSTAR_USE_IDT77105|16]
set CONFIG_ATM_IDT77252 [expr $CONFIG_ATM_IDT77252|16]
	global CONFIG_ATM_IDT77252_DEBUG
set CONFIG_ATM_IDT77252_DEBUG [expr $CONFIG_ATM_IDT77252_DEBUG|16]
	global CONFIG_ATM_IDT77252_RCV_ALL
set CONFIG_ATM_IDT77252_RCV_ALL [expr $CONFIG_ATM_IDT77252_RCV_ALL|16]
set CONFIG_ATM_AMBASSADOR [expr $CONFIG_ATM_AMBASSADOR|16]
	global CONFIG_ATM_AMBASSADOR_DEBUG
set CONFIG_ATM_AMBASSADOR_DEBUG [expr $CONFIG_ATM_AMBASSADOR_DEBUG|16]
set CONFIG_ATM_HORIZON [expr $CONFIG_ATM_HORIZON|16]
	global CONFIG_ATM_HORIZON_DEBUG
set CONFIG_ATM_HORIZON_DEBUG [expr $CONFIG_ATM_HORIZON_DEBUG|16]
set CONFIG_ATM_IA [expr $CONFIG_ATM_IA|16]
	global CONFIG_ATM_IA_DEBUG
set CONFIG_ATM_IA_DEBUG [expr $CONFIG_ATM_IA_DEBUG|16]
set CONFIG_ATM_FORE200E_MAYBE [expr $CONFIG_ATM_FORE200E_MAYBE|16]
	global CONFIG_ATM_FORE200E_PCA
set CONFIG_ATM_FORE200E_PCA [expr $CONFIG_ATM_FORE200E_PCA|16]
	global CONFIG_ATM_FORE200E_PCA_DEFAULT_FW
set CONFIG_ATM_FORE200E_PCA_DEFAULT_FW [expr $CONFIG_ATM_FORE200E_PCA_DEFAULT_FW|16]
	global CONFIG_NET
	global CONFIG_NETDEVICES
	global CONFIG_ATM
	global CONFIG_INET
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_INET == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ATM_TCP == 2)} then {set CONFIG_ATM_TCP 1}; set CONFIG_ATM_TCP [expr $CONFIG_ATM_TCP&15]}
	global CONFIG_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ATM_LANAI == 2)} then {set CONFIG_ATM_LANAI 1}; set CONFIG_ATM_LANAI [expr $CONFIG_ATM_LANAI&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ATM_ENI == 2)} then {set CONFIG_ATM_ENI 1}; set CONFIG_ATM_ENI [expr $CONFIG_ATM_ENI&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0)} then {
	set CONFIG_ATM_ENI_DEBUG [expr $CONFIG_ATM_ENI_DEBUG&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0)} then {
	set CONFIG_ATM_ENI_TUNE_BURST [expr $CONFIG_ATM_ENI_TUNE_BURST&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {
	set CONFIG_ATM_ENI_BURST_TX_16W [expr $CONFIG_ATM_ENI_BURST_TX_16W&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {
	set CONFIG_ATM_ENI_BURST_TX_8W [expr $CONFIG_ATM_ENI_BURST_TX_8W&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {
	set CONFIG_ATM_ENI_BURST_TX_4W [expr $CONFIG_ATM_ENI_BURST_TX_4W&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {
	set CONFIG_ATM_ENI_BURST_TX_2W [expr $CONFIG_ATM_ENI_BURST_TX_2W&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {
	set CONFIG_ATM_ENI_BURST_RX_16W [expr $CONFIG_ATM_ENI_BURST_RX_16W&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {
	set CONFIG_ATM_ENI_BURST_RX_8W [expr $CONFIG_ATM_ENI_BURST_RX_8W&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {
	set CONFIG_ATM_ENI_BURST_RX_4W [expr $CONFIG_ATM_ENI_BURST_RX_4W&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {
	set CONFIG_ATM_ENI_BURST_RX_2W [expr $CONFIG_ATM_ENI_BURST_RX_2W&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ATM_FIRESTREAM == 2)} then {set CONFIG_ATM_FIRESTREAM 1}; set CONFIG_ATM_FIRESTREAM [expr $CONFIG_ATM_FIRESTREAM&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ATM_ZATM == 2)} then {set CONFIG_ATM_ZATM 1}; set CONFIG_ATM_ZATM [expr $CONFIG_ATM_ZATM&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ZATM != 0)} then {
	set CONFIG_ATM_ZATM_DEBUG [expr $CONFIG_ATM_ZATM_DEBUG&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ATM_NICSTAR == 2)} then {set CONFIG_ATM_NICSTAR 1}; set CONFIG_ATM_NICSTAR [expr $CONFIG_ATM_NICSTAR&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_NICSTAR != 0)} then {
	set CONFIG_ATM_NICSTAR_USE_SUNI [expr $CONFIG_ATM_NICSTAR_USE_SUNI&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_NICSTAR != 0)} then {
	set CONFIG_ATM_NICSTAR_USE_IDT77105 [expr $CONFIG_ATM_NICSTAR_USE_IDT77105&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ATM_IDT77252 == 2)} then {set CONFIG_ATM_IDT77252 1}; set CONFIG_ATM_IDT77252 [expr $CONFIG_ATM_IDT77252&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_IDT77252 != 0)} then {
	set CONFIG_ATM_IDT77252_DEBUG [expr $CONFIG_ATM_IDT77252_DEBUG&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_IDT77252 != 0)} then {
	set CONFIG_ATM_IDT77252_RCV_ALL [expr $CONFIG_ATM_IDT77252_RCV_ALL&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_IDT77252 != 0)} then {	global CONSTANT_Y
set CONFIG_ATM_IDT77252_USE_SUNI $CONSTANT_Y }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ATM_AMBASSADOR == 2)} then {set CONFIG_ATM_AMBASSADOR 1}; set CONFIG_ATM_AMBASSADOR [expr $CONFIG_ATM_AMBASSADOR&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_AMBASSADOR != 0)} then {
	set CONFIG_ATM_AMBASSADOR_DEBUG [expr $CONFIG_ATM_AMBASSADOR_DEBUG&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ATM_HORIZON == 2)} then {set CONFIG_ATM_HORIZON 1}; set CONFIG_ATM_HORIZON [expr $CONFIG_ATM_HORIZON&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_HORIZON != 0)} then {
	set CONFIG_ATM_HORIZON_DEBUG [expr $CONFIG_ATM_HORIZON_DEBUG&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ATM_IA == 2)} then {set CONFIG_ATM_IA 1}; set CONFIG_ATM_IA [expr $CONFIG_ATM_IA&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_IA != 0)} then {
	set CONFIG_ATM_IA_DEBUG [expr $CONFIG_ATM_IA_DEBUG&15]}
	global CONFIG_SBUS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ATM_FORE200E_MAYBE == 2)} then {set CONFIG_ATM_FORE200E_MAYBE 1}; set CONFIG_ATM_FORE200E_MAYBE [expr $CONFIG_ATM_FORE200E_MAYBE&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1) && ($CONFIG_ATM_FORE200E_MAYBE != 0) && ($CONFIG_PCI == 1)} then {
	set CONFIG_ATM_FORE200E_PCA [expr $CONFIG_ATM_FORE200E_PCA&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1) && ($CONFIG_ATM_FORE200E_MAYBE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_FORE200E_PCA == 1)} then {
	set CONFIG_ATM_FORE200E_PCA_DEFAULT_FW [expr $CONFIG_ATM_FORE200E_PCA_DEFAULT_FW&15]}
	global CONFIG_ATM_FORE200E_SBA
	global CONFIG_ATM_FORE200E_TX_RETRY
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1) && ($CONFIG_ATM_FORE200E_PCA == 1 || $CONFIG_ATM_FORE200E_SBA == 1)} then {validate_int CONFIG_ATM_FORE200E_TX_RETRY "$CONFIG_ATM_FORE200E_TX_RETRY" 16}
	global CONFIG_ATM_FORE200E_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1) && ($CONFIG_ATM_FORE200E_PCA == 1 || $CONFIG_ATM_FORE200E_SBA == 1)} then {validate_int CONFIG_ATM_FORE200E_DEBUG "$CONFIG_ATM_FORE200E_DEBUG" 0}
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1) && ($CONFIG_ATM_FORE200E_PCA == 1 || $CONFIG_ATM_FORE200E_SBA == 1) && ($CONFIG_ATM_FORE200E_MAYBE == 1)} then {	global CONSTANT_Y
set CONFIG_ATM_FORE200E $CONSTANT_Y }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1) && ($CONFIG_ATM_FORE200E_PCA == 1 || $CONFIG_ATM_FORE200E_SBA == 1) && ($CONFIG_ATM_FORE200E_MAYBE != 1)} then {	global CONSTANT_M
set CONFIG_ATM_FORE200E $CONSTANT_M }
}


menu_option menu36 36 "Amateur Radio support"
proc menu36 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 36}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 36]]
	message $w.m -width 400 -aspect 300 -text \
		"Amateur Radio support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Amateur Radio support" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 36; break"
	set nextscript "catch {focus $oldFocus}; menu37 .menu37 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 36"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 36; menu35 .menu35 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 36; menu35 .menu35 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 36 0 "Amateur Radio support" CONFIG_HAMRADIO
	comment $w.config.f 36 1 "Packet Radio protocols"
	tristate $w.config.f 36 2 "  Amateur Radio AX.25 Level 2 protocol" CONFIG_AX25
	bool $w.config.f 36 3 "    AX.25 DAMA Slave support" CONFIG_AX25_DAMA_SLAVE
	dep_tristate $w.config.f 36 4 "    Amateur Radio NET/ROM protocol" CONFIG_NETROM
	dep_tristate $w.config.f 36 5 "    Amateur Radio X.25 PLP (Rose)" CONFIG_ROSE
	submenu $w.config.f 36 6 "AX.25 network device drivers" 37



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu36 {} {
	global CONFIG_HAMRADIO
	global CONFIG_NET
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0)} then {configure_entry .menu36.config.f.x1 normal {m}} else {configure_entry .menu36.config.f.x1 disabled {m}}
	global CONFIG_MODULES
	global CONFIG_AX25
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0)} then {
	configure_entry .menu36.config.f.x2 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu36.config.f.x2 normal {m}} else {configure_entry .menu36.config.f.x2 disabled {m}}; configure_entry .menu36.config.f.x2 normal {n l}} else {configure_entry .menu36.config.f.x2 disabled {y n m l}}
	global CONFIG_AX25_DAMA_SLAVE
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0)} then {
	configure_entry .menu36.config.f.x3 normal {n l y}} else {configure_entry .menu36.config.f.x3 disabled {y n l}}
	global CONFIG_NETROM
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]];set CONFIG_NETROM [sync_tristate $CONFIG_NETROM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu36.config.f.x4 disabled {y}} else {configure_entry .menu36.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu36.config.f.x4 disabled {m}} else {configure_entry .menu36.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu36.config.f.x4 normal {m}} else {configure_entry .menu36.config.f.x4 disabled {m}}; configure_entry .menu36.config.f.x4 normal {n l}} else {configure_entry .menu36.config.f.x4 disabled {y n m l}}
	global CONFIG_ROSE
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]];set CONFIG_ROSE [sync_tristate $CONFIG_ROSE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu36.config.f.x5 disabled {y}} else {configure_entry .menu36.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu36.config.f.x5 disabled {m}} else {configure_entry .menu36.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu36.config.f.x5 normal {m}} else {configure_entry .menu36.config.f.x5 disabled {m}}; configure_entry .menu36.config.f.x5 normal {n l}} else {configure_entry .menu36.config.f.x5 disabled {y n m l}}
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0)} then {configure_entry .menu36.config.f.x6 normal {m}} else {configure_entry .menu36.config.f.x6 disabled {m}}
}


proc update_define_menu36 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_AX25
set CONFIG_AX25 [expr $CONFIG_AX25|16]
	global CONFIG_AX25_DAMA_SLAVE
set CONFIG_AX25_DAMA_SLAVE [expr $CONFIG_AX25_DAMA_SLAVE|16]
	global CONFIG_HAMRADIO
	global CONFIG_NET
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_AX25 == 2)} then {set CONFIG_AX25 1}; set CONFIG_AX25 [expr $CONFIG_AX25&15]}
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0)} then {
	set CONFIG_AX25_DAMA_SLAVE [expr $CONFIG_AX25_DAMA_SLAVE&15]}
	global CONFIG_NETROM
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]]; set CONFIG_NETROM [sync_tristate $CONFIG_NETROM $tmpvar_dep]; set CONFIG_NETROM [expr $CONFIG_NETROM&15]}
	global CONFIG_ROSE
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]]; set CONFIG_ROSE [sync_tristate $CONFIG_ROSE $tmpvar_dep]; set CONFIG_ROSE [expr $CONFIG_ROSE&15]}
}


proc menu37 {w title} {
	set oldFocus [focus]
	catch {focus .menu36}
	catch {destroy $w; unregister_active 37}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 37]]
	message $w.m -width 400 -aspect 300 -text \
		"AX.25 network device drivers"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "AX.25 network device drivers" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 37; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 37; catch {destroy .menu36}; unregister_active 36; menu38 .menu38 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 37"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 37; menu36 .menu36 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 37; menu36 .menu36 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	comment $w.config.f 37 0 "AX.25 network device drivers"
	dep_tristate $w.config.f 37 1 "Serial port KISS driver" CONFIG_MKISS
	dep_tristate $w.config.f 37 2 "Serial port 6PACK driver" CONFIG_6PACK
	dep_tristate $w.config.f 37 3 "BPQ Ethernet driver" CONFIG_BPQETHER
	dep_tristate $w.config.f 37 4 "High-speed (DMA) SCC driver for AX.25" CONFIG_DMASCC
	dep_tristate $w.config.f 37 5 "Z8530 SCC driver" CONFIG_SCC
	bool $w.config.f 37 6 "  additional delay for PA0HZP OptoSCC compatible boards" CONFIG_SCC_DELAY
	bool $w.config.f 37 7 "  support for TRX that feedback the tx signal to rx" CONFIG_SCC_TRXECHO
	dep_tristate $w.config.f 37 8 "BAYCOM ser12 fullduplex driver for AX.25" CONFIG_BAYCOM_SER_FDX
	dep_tristate $w.config.f 37 9 "BAYCOM ser12 halfduplex driver for AX.25" CONFIG_BAYCOM_SER_HDX
	dep_tristate $w.config.f 37 10 "BAYCOM picpar and par96 driver for AX.25" CONFIG_BAYCOM_PAR
	dep_tristate $w.config.f 37 11 "BAYCOM epp driver for AX.25" CONFIG_BAYCOM_EPP
	dep_tristate $w.config.f 37 12 "Soundcard modem driver" CONFIG_SOUNDMODEM
	bool $w.config.f 37 13 "  soundmodem support for Soundblaster and compatible cards" CONFIG_SOUNDMODEM_SBC
	bool $w.config.f 37 14 "  soundmodem support for WSS and Crystal cards" CONFIG_SOUNDMODEM_WSS
	bool $w.config.f 37 15 "  soundmodem support for 1200 baud AFSK modulation" CONFIG_SOUNDMODEM_AFSK1200
	bool $w.config.f 37 16 "  soundmodem support for 2400 baud AFSK modulation (7.3728MHz crystal)" CONFIG_SOUNDMODEM_AFSK2400_7
	bool $w.config.f 37 17 "  soundmodem support for 2400 baud AFSK modulation (8MHz crystal)" CONFIG_SOUNDMODEM_AFSK2400_8
	bool $w.config.f 37 18 "  soundmodem support for 2666 baud AFSK modulation" CONFIG_SOUNDMODEM_AFSK2666
	bool $w.config.f 37 19 "  soundmodem support for 4800 baud HAPN-1 modulation" CONFIG_SOUNDMODEM_HAPN4800
	bool $w.config.f 37 20 "  soundmodem support for 4800 baud PSK modulation" CONFIG_SOUNDMODEM_PSK4800
	bool $w.config.f 37 21 "  soundmodem support for 9600 baud FSK G3RUH modulation" CONFIG_SOUNDMODEM_FSK9600
	dep_tristate $w.config.f 37 22 "YAM driver for AX.25" CONFIG_YAM



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu36] == 0} then {menu36 .menu36 "Amateur Radio support"}
	set winx [expr [winfo x .menu36]+30]; set winy [expr [winfo y .menu36]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu37 {} {
	global CONFIG_HAMRADIO
	global CONFIG_NET
	global CONFIG_AX25
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0)} then {configure_entry .menu37.config.f.x0 normal {m}} else {configure_entry .menu37.config.f.x0 disabled {m}}
	global CONFIG_MODULES
	global CONFIG_MKISS
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]];set CONFIG_MKISS [sync_tristate $CONFIG_MKISS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu37.config.f.x1 disabled {y}} else {configure_entry .menu37.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu37.config.f.x1 disabled {m}} else {configure_entry .menu37.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu37.config.f.x1 normal {m}} else {configure_entry .menu37.config.f.x1 disabled {m}}; configure_entry .menu37.config.f.x1 normal {n l}} else {configure_entry .menu37.config.f.x1 disabled {y n m l}}
	global CONFIG_6PACK
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]];set CONFIG_6PACK [sync_tristate $CONFIG_6PACK $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu37.config.f.x2 disabled {y}} else {configure_entry .menu37.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu37.config.f.x2 disabled {m}} else {configure_entry .menu37.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu37.config.f.x2 normal {m}} else {configure_entry .menu37.config.f.x2 disabled {m}}; configure_entry .menu37.config.f.x2 normal {n l}} else {configure_entry .menu37.config.f.x2 disabled {y n m l}}
	global CONFIG_BPQETHER
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]];set CONFIG_BPQETHER [sync_tristate $CONFIG_BPQETHER $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu37.config.f.x3 disabled {y}} else {configure_entry .menu37.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu37.config.f.x3 disabled {m}} else {configure_entry .menu37.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu37.config.f.x3 normal {m}} else {configure_entry .menu37.config.f.x3 disabled {m}}; configure_entry .menu37.config.f.x3 normal {n l}} else {configure_entry .menu37.config.f.x3 disabled {y n m l}}
	global CONFIG_DMASCC
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]];set CONFIG_DMASCC [sync_tristate $CONFIG_DMASCC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu37.config.f.x4 disabled {y}} else {configure_entry .menu37.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu37.config.f.x4 disabled {m}} else {configure_entry .menu37.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu37.config.f.x4 normal {m}} else {configure_entry .menu37.config.f.x4 disabled {m}}; configure_entry .menu37.config.f.x4 normal {n l}} else {configure_entry .menu37.config.f.x4 disabled {y n m l}}
	global CONFIG_SCC
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]];set CONFIG_SCC [sync_tristate $CONFIG_SCC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu37.config.f.x5 disabled {y}} else {configure_entry .menu37.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu37.config.f.x5 disabled {m}} else {configure_entry .menu37.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu37.config.f.x5 normal {m}} else {configure_entry .menu37.config.f.x5 disabled {m}}; configure_entry .menu37.config.f.x5 normal {n l}} else {configure_entry .menu37.config.f.x5 disabled {y n m l}}
	global CONFIG_SCC_DELAY
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SCC != 0)} then {
	configure_entry .menu37.config.f.x6 normal {n l y}} else {configure_entry .menu37.config.f.x6 disabled {y n l}}
	global CONFIG_SCC_TRXECHO
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SCC != 0)} then {
	configure_entry .menu37.config.f.x7 normal {n l y}} else {configure_entry .menu37.config.f.x7 disabled {y n l}}
	global CONFIG_BAYCOM_SER_FDX
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]];set CONFIG_BAYCOM_SER_FDX [sync_tristate $CONFIG_BAYCOM_SER_FDX $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu37.config.f.x8 disabled {y}} else {configure_entry .menu37.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu37.config.f.x8 disabled {m}} else {configure_entry .menu37.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu37.config.f.x8 normal {m}} else {configure_entry .menu37.config.f.x8 disabled {m}}; configure_entry .menu37.config.f.x8 normal {n l}} else {configure_entry .menu37.config.f.x8 disabled {y n m l}}
	global CONFIG_BAYCOM_SER_HDX
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]];set CONFIG_BAYCOM_SER_HDX [sync_tristate $CONFIG_BAYCOM_SER_HDX $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu37.config.f.x9 disabled {y}} else {configure_entry .menu37.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu37.config.f.x9 disabled {m}} else {configure_entry .menu37.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu37.config.f.x9 normal {m}} else {configure_entry .menu37.config.f.x9 disabled {m}}; configure_entry .menu37.config.f.x9 normal {n l}} else {configure_entry .menu37.config.f.x9 disabled {y n m l}}
	global CONFIG_PARPORT
	global CONFIG_BAYCOM_PAR
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT $CONFIG_AX25]];set CONFIG_BAYCOM_PAR [sync_tristate $CONFIG_BAYCOM_PAR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu37.config.f.x10 disabled {y}} else {configure_entry .menu37.config.f.x10 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu37.config.f.x10 disabled {m}} else {configure_entry .menu37.config.f.x10 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu37.config.f.x10 normal {m}} else {configure_entry .menu37.config.f.x10 disabled {m}}; configure_entry .menu37.config.f.x10 normal {n l}} else {configure_entry .menu37.config.f.x10 disabled {y n m l}}
	global CONFIG_BAYCOM_EPP
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT $CONFIG_AX25]];set CONFIG_BAYCOM_EPP [sync_tristate $CONFIG_BAYCOM_EPP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu37.config.f.x11 disabled {y}} else {configure_entry .menu37.config.f.x11 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu37.config.f.x11 disabled {m}} else {configure_entry .menu37.config.f.x11 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu37.config.f.x11 normal {m}} else {configure_entry .menu37.config.f.x11 disabled {m}}; configure_entry .menu37.config.f.x11 normal {n l}} else {configure_entry .menu37.config.f.x11 disabled {y n m l}}
	global CONFIG_SOUNDMODEM
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT $CONFIG_AX25]];set CONFIG_SOUNDMODEM [sync_tristate $CONFIG_SOUNDMODEM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu37.config.f.x12 disabled {y}} else {configure_entry .menu37.config.f.x12 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu37.config.f.x12 disabled {m}} else {configure_entry .menu37.config.f.x12 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu37.config.f.x12 normal {m}} else {configure_entry .menu37.config.f.x12 disabled {m}}; configure_entry .menu37.config.f.x12 normal {n l}} else {configure_entry .menu37.config.f.x12 disabled {y n m l}}
	global CONFIG_SOUNDMODEM_SBC
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {
	configure_entry .menu37.config.f.x13 normal {n l y}} else {configure_entry .menu37.config.f.x13 disabled {y n l}}
	global CONFIG_SOUNDMODEM_WSS
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {
	configure_entry .menu37.config.f.x14 normal {n l y}} else {configure_entry .menu37.config.f.x14 disabled {y n l}}
	global CONFIG_SOUNDMODEM_AFSK1200
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {
	configure_entry .menu37.config.f.x15 normal {n l y}} else {configure_entry .menu37.config.f.x15 disabled {y n l}}
	global CONFIG_SOUNDMODEM_AFSK2400_7
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {
	configure_entry .menu37.config.f.x16 normal {n l y}} else {configure_entry .menu37.config.f.x16 disabled {y n l}}
	global CONFIG_SOUNDMODEM_AFSK2400_8
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {
	configure_entry .menu37.config.f.x17 normal {n l y}} else {configure_entry .menu37.config.f.x17 disabled {y n l}}
	global CONFIG_SOUNDMODEM_AFSK2666
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {
	configure_entry .menu37.config.f.x18 normal {n l y}} else {configure_entry .menu37.config.f.x18 disabled {y n l}}
	global CONFIG_SOUNDMODEM_HAPN4800
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {
	configure_entry .menu37.config.f.x19 normal {n l y}} else {configure_entry .menu37.config.f.x19 disabled {y n l}}
	global CONFIG_SOUNDMODEM_PSK4800
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {
	configure_entry .menu37.config.f.x20 normal {n l y}} else {configure_entry .menu37.config.f.x20 disabled {y n l}}
	global CONFIG_SOUNDMODEM_FSK9600
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {
	configure_entry .menu37.config.f.x21 normal {n l y}} else {configure_entry .menu37.config.f.x21 disabled {y n l}}
	global CONFIG_YAM
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]];set CONFIG_YAM [sync_tristate $CONFIG_YAM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu37.config.f.x22 disabled {y}} else {configure_entry .menu37.config.f.x22 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu37.config.f.x22 disabled {m}} else {configure_entry .menu37.config.f.x22 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu37.config.f.x22 normal {m}} else {configure_entry .menu37.config.f.x22 disabled {m}}; configure_entry .menu37.config.f.x22 normal {n l}} else {configure_entry .menu37.config.f.x22 disabled {y n m l}}
}


proc update_define_menu37 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_SCC_DELAY
set CONFIG_SCC_DELAY [expr $CONFIG_SCC_DELAY|16]
	global CONFIG_SCC_TRXECHO
set CONFIG_SCC_TRXECHO [expr $CONFIG_SCC_TRXECHO|16]
	global CONFIG_SOUNDMODEM_SBC
set CONFIG_SOUNDMODEM_SBC [expr $CONFIG_SOUNDMODEM_SBC|16]
	global CONFIG_SOUNDMODEM_WSS
set CONFIG_SOUNDMODEM_WSS [expr $CONFIG_SOUNDMODEM_WSS|16]
	global CONFIG_SOUNDMODEM_AFSK1200
set CONFIG_SOUNDMODEM_AFSK1200 [expr $CONFIG_SOUNDMODEM_AFSK1200|16]
	global CONFIG_SOUNDMODEM_AFSK2400_7
set CONFIG_SOUNDMODEM_AFSK2400_7 [expr $CONFIG_SOUNDMODEM_AFSK2400_7|16]
	global CONFIG_SOUNDMODEM_AFSK2400_8
set CONFIG_SOUNDMODEM_AFSK2400_8 [expr $CONFIG_SOUNDMODEM_AFSK2400_8|16]
	global CONFIG_SOUNDMODEM_AFSK2666
set CONFIG_SOUNDMODEM_AFSK2666 [expr $CONFIG_SOUNDMODEM_AFSK2666|16]
	global CONFIG_SOUNDMODEM_HAPN4800
set CONFIG_SOUNDMODEM_HAPN4800 [expr $CONFIG_SOUNDMODEM_HAPN4800|16]
	global CONFIG_SOUNDMODEM_PSK4800
set CONFIG_SOUNDMODEM_PSK4800 [expr $CONFIG_SOUNDMODEM_PSK4800|16]
	global CONFIG_SOUNDMODEM_FSK9600
set CONFIG_SOUNDMODEM_FSK9600 [expr $CONFIG_SOUNDMODEM_FSK9600|16]
	global CONFIG_HAMRADIO
	global CONFIG_NET
	global CONFIG_AX25
	global CONFIG_MKISS
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]]; set CONFIG_MKISS [sync_tristate $CONFIG_MKISS $tmpvar_dep]; set CONFIG_MKISS [expr $CONFIG_MKISS&15]}
	global CONFIG_6PACK
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]]; set CONFIG_6PACK [sync_tristate $CONFIG_6PACK $tmpvar_dep]; set CONFIG_6PACK [expr $CONFIG_6PACK&15]}
	global CONFIG_BPQETHER
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]]; set CONFIG_BPQETHER [sync_tristate $CONFIG_BPQETHER $tmpvar_dep]; set CONFIG_BPQETHER [expr $CONFIG_BPQETHER&15]}
	global CONFIG_DMASCC
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]]; set CONFIG_DMASCC [sync_tristate $CONFIG_DMASCC $tmpvar_dep]; set CONFIG_DMASCC [expr $CONFIG_DMASCC&15]}
	global CONFIG_SCC
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]]; set CONFIG_SCC [sync_tristate $CONFIG_SCC $tmpvar_dep]; set CONFIG_SCC [expr $CONFIG_SCC&15]}
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SCC != 0)} then {
	set CONFIG_SCC_DELAY [expr $CONFIG_SCC_DELAY&15]}
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SCC != 0)} then {
	set CONFIG_SCC_TRXECHO [expr $CONFIG_SCC_TRXECHO&15]}
	global CONFIG_BAYCOM_SER_FDX
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]]; set CONFIG_BAYCOM_SER_FDX [sync_tristate $CONFIG_BAYCOM_SER_FDX $tmpvar_dep]; set CONFIG_BAYCOM_SER_FDX [expr $CONFIG_BAYCOM_SER_FDX&15]}
	global CONFIG_BAYCOM_SER_HDX
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]]; set CONFIG_BAYCOM_SER_HDX [sync_tristate $CONFIG_BAYCOM_SER_HDX $tmpvar_dep]; set CONFIG_BAYCOM_SER_HDX [expr $CONFIG_BAYCOM_SER_HDX&15]}
	global CONFIG_PARPORT
	global CONFIG_BAYCOM_PAR
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT $CONFIG_AX25]]; set CONFIG_BAYCOM_PAR [sync_tristate $CONFIG_BAYCOM_PAR $tmpvar_dep]; set CONFIG_BAYCOM_PAR [expr $CONFIG_BAYCOM_PAR&15]}
	global CONFIG_BAYCOM_EPP
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT $CONFIG_AX25]]; set CONFIG_BAYCOM_EPP [sync_tristate $CONFIG_BAYCOM_EPP $tmpvar_dep]; set CONFIG_BAYCOM_EPP [expr $CONFIG_BAYCOM_EPP&15]}
	global CONFIG_SOUNDMODEM
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT $CONFIG_AX25]]; set CONFIG_SOUNDMODEM [sync_tristate $CONFIG_SOUNDMODEM $tmpvar_dep]; set CONFIG_SOUNDMODEM [expr $CONFIG_SOUNDMODEM&15]}
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {
	set CONFIG_SOUNDMODEM_SBC [expr $CONFIG_SOUNDMODEM_SBC&15]}
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {
	set CONFIG_SOUNDMODEM_WSS [expr $CONFIG_SOUNDMODEM_WSS&15]}
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {
	set CONFIG_SOUNDMODEM_AFSK1200 [expr $CONFIG_SOUNDMODEM_AFSK1200&15]}
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {
	set CONFIG_SOUNDMODEM_AFSK2400_7 [expr $CONFIG_SOUNDMODEM_AFSK2400_7&15]}
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {
	set CONFIG_SOUNDMODEM_AFSK2400_8 [expr $CONFIG_SOUNDMODEM_AFSK2400_8&15]}
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {
	set CONFIG_SOUNDMODEM_AFSK2666 [expr $CONFIG_SOUNDMODEM_AFSK2666&15]}
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {
	set CONFIG_SOUNDMODEM_HAPN4800 [expr $CONFIG_SOUNDMODEM_HAPN4800&15]}
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {
	set CONFIG_SOUNDMODEM_PSK4800 [expr $CONFIG_SOUNDMODEM_PSK4800&15]}
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {
	set CONFIG_SOUNDMODEM_FSK9600 [expr $CONFIG_SOUNDMODEM_FSK9600&15]}
	global CONFIG_YAM
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AX25]]; set CONFIG_YAM [sync_tristate $CONFIG_YAM $tmpvar_dep]; set CONFIG_YAM [expr $CONFIG_YAM&15]}
}


menu_option menu38 38 "IrDA (infrared) support"
proc menu38 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 38}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 38]]
	message $w.m -width 400 -aspect 300 -text \
		"IrDA (infrared) support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "IrDA (infrared) support" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 38; break"
	set nextscript "catch {focus $oldFocus}; menu39 .menu39 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 38"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 38; menu37 .menu37 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 38; menu37 .menu37 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 38 0 "IrDA subsystem support" CONFIG_IRDA
	comment $w.config.f 38 1 "IrDA protocols"
	dep_tristate $w.config.f 38 2 "  IrLAN protocol" CONFIG_IRLAN
	dep_tristate $w.config.f 38 3 "  IrNET protocol" CONFIG_IRNET
	dep_tristate $w.config.f 38 4 "  IrCOMM protocol" CONFIG_IRCOMM
	bool $w.config.f 38 5 "  Ultra (connectionless) protocol" CONFIG_IRDA_ULTRA
	bool $w.config.f 38 6 "  IrDA protocol options" CONFIG_IRDA_OPTIONS
	comment $w.config.f 38 7 "  IrDA options"
	bool $w.config.f 38 8 "    Cache last LSAP" CONFIG_IRDA_CACHE_LAST_LSAP
	bool $w.config.f 38 9 "    Fast RRs" CONFIG_IRDA_FAST_RR
	bool $w.config.f 38 10 "    Debug information" CONFIG_IRDA_DEBUG
	submenu $w.config.f 38 11 "Infrared-port device drivers" 39



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu38 {} {
	global CONFIG_MODULES
	global CONFIG_NET
	global CONFIG_IRDA
	if {($CONFIG_NET != 0) && ($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NET]];set CONFIG_IRDA [sync_tristate $CONFIG_IRDA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu38.config.f.x0 disabled {y}} else {configure_entry .menu38.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu38.config.f.x0 disabled {m}} else {configure_entry .menu38.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu38.config.f.x0 normal {m}} else {configure_entry .menu38.config.f.x0 disabled {m}}; configure_entry .menu38.config.f.x0 normal {n l}} else {configure_entry .menu38.config.f.x0 disabled {y n m l}}
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {configure_entry .menu38.config.f.x1 normal {m}} else {configure_entry .menu38.config.f.x1 disabled {m}}
	global CONFIG_IRLAN
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]];set CONFIG_IRLAN [sync_tristate $CONFIG_IRLAN $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu38.config.f.x2 disabled {y}} else {configure_entry .menu38.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu38.config.f.x2 disabled {m}} else {configure_entry .menu38.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu38.config.f.x2 normal {m}} else {configure_entry .menu38.config.f.x2 disabled {m}}; configure_entry .menu38.config.f.x2 normal {n l}} else {configure_entry .menu38.config.f.x2 disabled {y n m l}}
	global CONFIG_NETDEVICES
	global CONFIG_PPP
	global CONFIG_IRNET
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_NETDEVICES != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA $CONFIG_PPP]];set CONFIG_IRNET [sync_tristate $CONFIG_IRNET $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu38.config.f.x3 disabled {y}} else {configure_entry .menu38.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu38.config.f.x3 disabled {m}} else {configure_entry .menu38.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu38.config.f.x3 normal {m}} else {configure_entry .menu38.config.f.x3 disabled {m}}; configure_entry .menu38.config.f.x3 normal {n l}} else {configure_entry .menu38.config.f.x3 disabled {y n m l}}
	global CONFIG_IRCOMM
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]];set CONFIG_IRCOMM [sync_tristate $CONFIG_IRCOMM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu38.config.f.x4 disabled {y}} else {configure_entry .menu38.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu38.config.f.x4 disabled {m}} else {configure_entry .menu38.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu38.config.f.x4 normal {m}} else {configure_entry .menu38.config.f.x4 disabled {m}}; configure_entry .menu38.config.f.x4 normal {n l}} else {configure_entry .menu38.config.f.x4 disabled {y n m l}}
	global CONFIG_IRDA_ULTRA
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {
	configure_entry .menu38.config.f.x5 normal {n l y}} else {configure_entry .menu38.config.f.x5 disabled {y n l}}
	global CONFIG_IRDA_OPTIONS
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {
	configure_entry .menu38.config.f.x6 normal {n l y}} else {configure_entry .menu38.config.f.x6 disabled {y n l}}
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA_OPTIONS != 0)} then {configure_entry .menu38.config.f.x7 normal {m}} else {configure_entry .menu38.config.f.x7 disabled {m}}
	global CONFIG_IRDA_CACHE_LAST_LSAP
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA_OPTIONS != 0)} then {
	configure_entry .menu38.config.f.x8 normal {n l y}} else {configure_entry .menu38.config.f.x8 disabled {y n l}}
	global CONFIG_IRDA_FAST_RR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA_OPTIONS != 0)} then {
	configure_entry .menu38.config.f.x9 normal {n l y}} else {configure_entry .menu38.config.f.x9 disabled {y n l}}
	global CONFIG_IRDA_DEBUG
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA_OPTIONS != 0)} then {
	configure_entry .menu38.config.f.x10 normal {n l y}} else {configure_entry .menu38.config.f.x10 disabled {y n l}}
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {configure_entry .menu38.config.f.x11 normal {m}} else {configure_entry .menu38.config.f.x11 disabled {m}}
}


proc update_define_menu38 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_IRDA_ULTRA
set CONFIG_IRDA_ULTRA [expr $CONFIG_IRDA_ULTRA|16]
	global CONFIG_IRDA_OPTIONS
set CONFIG_IRDA_OPTIONS [expr $CONFIG_IRDA_OPTIONS|16]
	global CONFIG_IRDA_CACHE_LAST_LSAP
set CONFIG_IRDA_CACHE_LAST_LSAP [expr $CONFIG_IRDA_CACHE_LAST_LSAP|16]
	global CONFIG_IRDA_FAST_RR
set CONFIG_IRDA_FAST_RR [expr $CONFIG_IRDA_FAST_RR|16]
	global CONFIG_IRDA_DEBUG
set CONFIG_IRDA_DEBUG [expr $CONFIG_IRDA_DEBUG|16]
	global CONFIG_NET
	global CONFIG_IRDA
	if {($CONFIG_NET != 0) && ($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NET]]; set CONFIG_IRDA [sync_tristate $CONFIG_IRDA $tmpvar_dep]; set CONFIG_IRDA [expr $CONFIG_IRDA&15]}
	global CONFIG_IRLAN
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]]; set CONFIG_IRLAN [sync_tristate $CONFIG_IRLAN $tmpvar_dep]; set CONFIG_IRLAN [expr $CONFIG_IRLAN&15]}
	global CONFIG_NETDEVICES
	global CONFIG_PPP
	global CONFIG_IRNET
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_NETDEVICES != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA $CONFIG_PPP]]; set CONFIG_IRNET [sync_tristate $CONFIG_IRNET $tmpvar_dep]; set CONFIG_IRNET [expr $CONFIG_IRNET&15]}
	global CONFIG_IRCOMM
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]]; set CONFIG_IRCOMM [sync_tristate $CONFIG_IRCOMM $tmpvar_dep]; set CONFIG_IRCOMM [expr $CONFIG_IRCOMM&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {
	set CONFIG_IRDA_ULTRA [expr $CONFIG_IRDA_ULTRA&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {
	set CONFIG_IRDA_OPTIONS [expr $CONFIG_IRDA_OPTIONS&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA_OPTIONS != 0)} then {
	set CONFIG_IRDA_CACHE_LAST_LSAP [expr $CONFIG_IRDA_CACHE_LAST_LSAP&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA_OPTIONS != 0)} then {
	set CONFIG_IRDA_FAST_RR [expr $CONFIG_IRDA_FAST_RR&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA_OPTIONS != 0)} then {
	set CONFIG_IRDA_DEBUG [expr $CONFIG_IRDA_DEBUG&15]}
}


proc menu39 {w title} {
	set oldFocus [focus]
	catch {focus .menu38}
	catch {destroy $w; unregister_active 39}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 39]]
	message $w.m -width 400 -aspect 300 -text \
		"Infrared-port device drivers"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Infrared-port device drivers" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 39; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 39; catch {destroy .menu38}; unregister_active 38; menu40 .menu40 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 39"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 39; menu38 .menu38 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 39; menu38 .menu38 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	comment $w.config.f 39 0 "SIR device drivers"
	dep_tristate $w.config.f 39 1 "IrTTY (uses Linux serial driver)" CONFIG_IRTTY_SIR
	dep_tristate $w.config.f 39 2 "IrPORT (IrDA serial driver)" CONFIG_IRPORT_SIR
	comment $w.config.f 39 3 "Dongle support"
	bool $w.config.f 39 4 "Serial dongle support" CONFIG_DONGLE
	dep_tristate $w.config.f 39 5 "  ESI JetEye PC dongle" CONFIG_ESI_DONGLE
	dep_tristate $w.config.f 39 6 "  ACTiSYS IR-220L and IR220L+ dongle" CONFIG_ACTISYS_DONGLE
	dep_tristate $w.config.f 39 7 "  Tekram IrMate 210B dongle" CONFIG_TEKRAM_DONGLE
	dep_tristate $w.config.f 39 8 "  Greenwich GIrBIL dongle" CONFIG_GIRBIL_DONGLE
	dep_tristate $w.config.f 39 9 "  Parallax LiteLink dongle" CONFIG_LITELINK_DONGLE
	dep_tristate $w.config.f 39 10 "  Old Belkin dongle" CONFIG_OLD_BELKIN_DONGLE
	comment $w.config.f 39 11 "FIR device drivers"
	dep_tristate $w.config.f 39 12 "IrDA USB dongles (Experimental)" CONFIG_USB_IRDA
	dep_tristate $w.config.f 39 13 "NSC PC87108/PC87338" CONFIG_NSC_FIR
	dep_tristate $w.config.f 39 14 "Winbond W83977AF (IR)" CONFIG_WINBOND_FIR
	dep_tristate $w.config.f 39 15 "Toshiba Type-O IR Port" CONFIG_TOSHIBA_FIR
	dep_tristate $w.config.f 39 16 "SMC IrCC (Experimental)" CONFIG_SMC_IRCC_FIR
	dep_tristate $w.config.f 39 17 "ALi M5123 FIR (Experimental)" CONFIG_ALI_FIR
	dep_tristate $w.config.f 39 18 "VLSI 82C147 SIR/MIR/FIR (Experimental)" CONFIG_VLSI_FIR



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu38] == 0} then {menu38 .menu38 "IrDA (infrared) support"}
	set winx [expr [winfo x .menu38]+30]; set winy [expr [winfo y .menu38]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu39 {} {
	global CONFIG_NET
	global CONFIG_IRDA
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {configure_entry .menu39.config.f.x0 normal {m}} else {configure_entry .menu39.config.f.x0 disabled {m}}
	global CONFIG_MODULES
	global CONFIG_IRTTY_SIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]];set CONFIG_IRTTY_SIR [sync_tristate $CONFIG_IRTTY_SIR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu39.config.f.x1 disabled {y}} else {configure_entry .menu39.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu39.config.f.x1 disabled {m}} else {configure_entry .menu39.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu39.config.f.x1 normal {m}} else {configure_entry .menu39.config.f.x1 disabled {m}}; configure_entry .menu39.config.f.x1 normal {n l}} else {configure_entry .menu39.config.f.x1 disabled {y n m l}}
	global CONFIG_IRPORT_SIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]];set CONFIG_IRPORT_SIR [sync_tristate $CONFIG_IRPORT_SIR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu39.config.f.x2 disabled {y}} else {configure_entry .menu39.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu39.config.f.x2 disabled {m}} else {configure_entry .menu39.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu39.config.f.x2 normal {m}} else {configure_entry .menu39.config.f.x2 disabled {m}}; configure_entry .menu39.config.f.x2 normal {n l}} else {configure_entry .menu39.config.f.x2 disabled {y n m l}}
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {configure_entry .menu39.config.f.x3 normal {m}} else {configure_entry .menu39.config.f.x3 disabled {m}}
	global CONFIG_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {
	configure_entry .menu39.config.f.x4 normal {n l y}} else {configure_entry .menu39.config.f.x4 disabled {y n l}}
	global CONFIG_ESI_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_DONGLE != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]];set CONFIG_ESI_DONGLE [sync_tristate $CONFIG_ESI_DONGLE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu39.config.f.x5 disabled {y}} else {configure_entry .menu39.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu39.config.f.x5 disabled {m}} else {configure_entry .menu39.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu39.config.f.x5 normal {m}} else {configure_entry .menu39.config.f.x5 disabled {m}}; configure_entry .menu39.config.f.x5 normal {n l}} else {configure_entry .menu39.config.f.x5 disabled {y n m l}}
	global CONFIG_ACTISYS_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_DONGLE != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]];set CONFIG_ACTISYS_DONGLE [sync_tristate $CONFIG_ACTISYS_DONGLE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu39.config.f.x6 disabled {y}} else {configure_entry .menu39.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu39.config.f.x6 disabled {m}} else {configure_entry .menu39.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu39.config.f.x6 normal {m}} else {configure_entry .menu39.config.f.x6 disabled {m}}; configure_entry .menu39.config.f.x6 normal {n l}} else {configure_entry .menu39.config.f.x6 disabled {y n m l}}
	global CONFIG_TEKRAM_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_DONGLE != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]];set CONFIG_TEKRAM_DONGLE [sync_tristate $CONFIG_TEKRAM_DONGLE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu39.config.f.x7 disabled {y}} else {configure_entry .menu39.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu39.config.f.x7 disabled {m}} else {configure_entry .menu39.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu39.config.f.x7 normal {m}} else {configure_entry .menu39.config.f.x7 disabled {m}}; configure_entry .menu39.config.f.x7 normal {n l}} else {configure_entry .menu39.config.f.x7 disabled {y n m l}}
	global CONFIG_GIRBIL_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_DONGLE != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]];set CONFIG_GIRBIL_DONGLE [sync_tristate $CONFIG_GIRBIL_DONGLE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu39.config.f.x8 disabled {y}} else {configure_entry .menu39.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu39.config.f.x8 disabled {m}} else {configure_entry .menu39.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu39.config.f.x8 normal {m}} else {configure_entry .menu39.config.f.x8 disabled {m}}; configure_entry .menu39.config.f.x8 normal {n l}} else {configure_entry .menu39.config.f.x8 disabled {y n m l}}
	global CONFIG_LITELINK_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_DONGLE != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]];set CONFIG_LITELINK_DONGLE [sync_tristate $CONFIG_LITELINK_DONGLE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu39.config.f.x9 disabled {y}} else {configure_entry .menu39.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu39.config.f.x9 disabled {m}} else {configure_entry .menu39.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu39.config.f.x9 normal {m}} else {configure_entry .menu39.config.f.x9 disabled {m}}; configure_entry .menu39.config.f.x9 normal {n l}} else {configure_entry .menu39.config.f.x9 disabled {y n m l}}
	global CONFIG_OLD_BELKIN_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_DONGLE != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]];set CONFIG_OLD_BELKIN_DONGLE [sync_tristate $CONFIG_OLD_BELKIN_DONGLE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu39.config.f.x10 disabled {y}} else {configure_entry .menu39.config.f.x10 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu39.config.f.x10 disabled {m}} else {configure_entry .menu39.config.f.x10 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu39.config.f.x10 normal {m}} else {configure_entry .menu39.config.f.x10 disabled {m}}; configure_entry .menu39.config.f.x10 normal {n l}} else {configure_entry .menu39.config.f.x10 disabled {y n m l}}
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {configure_entry .menu39.config.f.x11 normal {m}} else {configure_entry .menu39.config.f.x11 disabled {m}}
	global CONFIG_USB
	global CONFIG_EXPERIMENTAL
	global CONFIG_USB_IRDA
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA $CONFIG_USB $CONFIG_EXPERIMENTAL]];set CONFIG_USB_IRDA [sync_tristate $CONFIG_USB_IRDA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu39.config.f.x12 disabled {y}} else {configure_entry .menu39.config.f.x12 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu39.config.f.x12 disabled {m}} else {configure_entry .menu39.config.f.x12 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu39.config.f.x12 normal {m}} else {configure_entry .menu39.config.f.x12 disabled {m}}; configure_entry .menu39.config.f.x12 normal {n l}} else {configure_entry .menu39.config.f.x12 disabled {y n m l}}
	global CONFIG_NSC_FIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]];set CONFIG_NSC_FIR [sync_tristate $CONFIG_NSC_FIR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu39.config.f.x13 disabled {y}} else {configure_entry .menu39.config.f.x13 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu39.config.f.x13 disabled {m}} else {configure_entry .menu39.config.f.x13 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu39.config.f.x13 normal {m}} else {configure_entry .menu39.config.f.x13 disabled {m}}; configure_entry .menu39.config.f.x13 normal {n l}} else {configure_entry .menu39.config.f.x13 disabled {y n m l}}
	global CONFIG_WINBOND_FIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]];set CONFIG_WINBOND_FIR [sync_tristate $CONFIG_WINBOND_FIR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu39.config.f.x14 disabled {y}} else {configure_entry .menu39.config.f.x14 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu39.config.f.x14 disabled {m}} else {configure_entry .menu39.config.f.x14 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu39.config.f.x14 normal {m}} else {configure_entry .menu39.config.f.x14 disabled {m}}; configure_entry .menu39.config.f.x14 normal {n l}} else {configure_entry .menu39.config.f.x14 disabled {y n m l}}
	global CONFIG_TOSHIBA_FIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]];set CONFIG_TOSHIBA_FIR [sync_tristate $CONFIG_TOSHIBA_FIR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu39.config.f.x15 disabled {y}} else {configure_entry .menu39.config.f.x15 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu39.config.f.x15 disabled {m}} else {configure_entry .menu39.config.f.x15 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu39.config.f.x15 normal {m}} else {configure_entry .menu39.config.f.x15 disabled {m}}; configure_entry .menu39.config.f.x15 normal {n l}} else {configure_entry .menu39.config.f.x15 disabled {y n m l}}
	global CONFIG_SMC_IRCC_FIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_EXPERIMENTAL != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]];set CONFIG_SMC_IRCC_FIR [sync_tristate $CONFIG_SMC_IRCC_FIR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu39.config.f.x16 disabled {y}} else {configure_entry .menu39.config.f.x16 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu39.config.f.x16 disabled {m}} else {configure_entry .menu39.config.f.x16 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu39.config.f.x16 normal {m}} else {configure_entry .menu39.config.f.x16 disabled {m}}; configure_entry .menu39.config.f.x16 normal {n l}} else {configure_entry .menu39.config.f.x16 disabled {y n m l}}
	global CONFIG_ALI_FIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_EXPERIMENTAL != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]];set CONFIG_ALI_FIR [sync_tristate $CONFIG_ALI_FIR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu39.config.f.x17 disabled {y}} else {configure_entry .menu39.config.f.x17 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu39.config.f.x17 disabled {m}} else {configure_entry .menu39.config.f.x17 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu39.config.f.x17 normal {m}} else {configure_entry .menu39.config.f.x17 disabled {m}}; configure_entry .menu39.config.f.x17 normal {n l}} else {configure_entry .menu39.config.f.x17 disabled {y n m l}}
	global CONFIG_VLSI_FIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_EXPERIMENTAL != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]];set CONFIG_VLSI_FIR [sync_tristate $CONFIG_VLSI_FIR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu39.config.f.x18 disabled {y}} else {configure_entry .menu39.config.f.x18 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu39.config.f.x18 disabled {m}} else {configure_entry .menu39.config.f.x18 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu39.config.f.x18 normal {m}} else {configure_entry .menu39.config.f.x18 disabled {m}}; configure_entry .menu39.config.f.x18 normal {n l}} else {configure_entry .menu39.config.f.x18 disabled {y n m l}}
}


proc update_define_menu39 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_DONGLE
set CONFIG_DONGLE [expr $CONFIG_DONGLE|16]
	global CONFIG_NET
	global CONFIG_IRDA
	global CONFIG_IRTTY_SIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]]; set CONFIG_IRTTY_SIR [sync_tristate $CONFIG_IRTTY_SIR $tmpvar_dep]; set CONFIG_IRTTY_SIR [expr $CONFIG_IRTTY_SIR&15]}
	global CONFIG_IRPORT_SIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]]; set CONFIG_IRPORT_SIR [sync_tristate $CONFIG_IRPORT_SIR $tmpvar_dep]; set CONFIG_IRPORT_SIR [expr $CONFIG_IRPORT_SIR&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {
	set CONFIG_DONGLE [expr $CONFIG_DONGLE&15]}
	global CONFIG_ESI_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_DONGLE != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]]; set CONFIG_ESI_DONGLE [sync_tristate $CONFIG_ESI_DONGLE $tmpvar_dep]; set CONFIG_ESI_DONGLE [expr $CONFIG_ESI_DONGLE&15]}
	global CONFIG_ACTISYS_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_DONGLE != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]]; set CONFIG_ACTISYS_DONGLE [sync_tristate $CONFIG_ACTISYS_DONGLE $tmpvar_dep]; set CONFIG_ACTISYS_DONGLE [expr $CONFIG_ACTISYS_DONGLE&15]}
	global CONFIG_TEKRAM_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_DONGLE != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]]; set CONFIG_TEKRAM_DONGLE [sync_tristate $CONFIG_TEKRAM_DONGLE $tmpvar_dep]; set CONFIG_TEKRAM_DONGLE [expr $CONFIG_TEKRAM_DONGLE&15]}
	global CONFIG_GIRBIL_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_DONGLE != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]]; set CONFIG_GIRBIL_DONGLE [sync_tristate $CONFIG_GIRBIL_DONGLE $tmpvar_dep]; set CONFIG_GIRBIL_DONGLE [expr $CONFIG_GIRBIL_DONGLE&15]}
	global CONFIG_LITELINK_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_DONGLE != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]]; set CONFIG_LITELINK_DONGLE [sync_tristate $CONFIG_LITELINK_DONGLE $tmpvar_dep]; set CONFIG_LITELINK_DONGLE [expr $CONFIG_LITELINK_DONGLE&15]}
	global CONFIG_OLD_BELKIN_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_DONGLE != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]]; set CONFIG_OLD_BELKIN_DONGLE [sync_tristate $CONFIG_OLD_BELKIN_DONGLE $tmpvar_dep]; set CONFIG_OLD_BELKIN_DONGLE [expr $CONFIG_OLD_BELKIN_DONGLE&15]}
	global CONFIG_USB
	global CONFIG_EXPERIMENTAL
	global CONFIG_USB_IRDA
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA $CONFIG_USB $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_IRDA [sync_tristate $CONFIG_USB_IRDA $tmpvar_dep]; set CONFIG_USB_IRDA [expr $CONFIG_USB_IRDA&15]}
	global CONFIG_NSC_FIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]]; set CONFIG_NSC_FIR [sync_tristate $CONFIG_NSC_FIR $tmpvar_dep]; set CONFIG_NSC_FIR [expr $CONFIG_NSC_FIR&15]}
	global CONFIG_WINBOND_FIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]]; set CONFIG_WINBOND_FIR [sync_tristate $CONFIG_WINBOND_FIR $tmpvar_dep]; set CONFIG_WINBOND_FIR [expr $CONFIG_WINBOND_FIR&15]}
	global CONFIG_TOSHIBA_FIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]]; set CONFIG_TOSHIBA_FIR [sync_tristate $CONFIG_TOSHIBA_FIR $tmpvar_dep]; set CONFIG_TOSHIBA_FIR [expr $CONFIG_TOSHIBA_FIR&15]}
	global CONFIG_SMC_IRCC_FIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_EXPERIMENTAL != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]]; set CONFIG_SMC_IRCC_FIR [sync_tristate $CONFIG_SMC_IRCC_FIR $tmpvar_dep]; set CONFIG_SMC_IRCC_FIR [expr $CONFIG_SMC_IRCC_FIR&15]}
	global CONFIG_ALI_FIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_EXPERIMENTAL != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]]; set CONFIG_ALI_FIR [sync_tristate $CONFIG_ALI_FIR $tmpvar_dep]; set CONFIG_ALI_FIR [expr $CONFIG_ALI_FIR&15]}
	global CONFIG_VLSI_FIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_EXPERIMENTAL != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_IRDA]]; set CONFIG_VLSI_FIR [sync_tristate $CONFIG_VLSI_FIR $tmpvar_dep]; set CONFIG_VLSI_FIR [expr $CONFIG_VLSI_FIR&15]}
}


menu_option menu40 40 "ISDN subsystem"
proc menu40 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 40}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 40]]
	message $w.m -width 400 -aspect 300 -text \
		"ISDN subsystem"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "ISDN subsystem" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 40; break"
	set nextscript "catch {focus $oldFocus}; menu41 .menu41 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 40"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 40; menu39 .menu39 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 40; menu39 .menu39 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 40 0 "ISDN support" CONFIG_ISDN
	bool $w.config.f 40 1 "  Support synchronous PPP" CONFIG_ISDN_PPP
	bool $w.config.f 40 2 "    Use VJ-compression with synchronous PPP" CONFIG_ISDN_PPP_VJ
	bool $w.config.f 40 3 "    Support generic MP (RFC 1717)" CONFIG_ISDN_MPP
	dep_tristate $w.config.f 40 4 "    Support BSD compression" CONFIG_ISDN_PPP_BSDCOMP
	bool $w.config.f 40 5 "  Support audio via ISDN" CONFIG_ISDN_AUDIO
	bool $w.config.f 40 6 "    Support AT-Fax Class 1 and 2 commands" CONFIG_ISDN_TTY_FAX
	bool $w.config.f 40 7 "  X.25 PLP on top of ISDN" CONFIG_ISDN_X25
	submenu $w.config.f 40 8 "ISDN feature submodules" 41
	comment $w.config.f 40 9 "low-level hardware drivers"
	submenu $w.config.f 40 10 "Passive ISDN cards" 42
	submenu $w.config.f 40 11 "Active ISDN cards" 43



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu40 {} {
	global CONFIG_MODULES
	global CONFIG_NET
	global CONFIG_ISDN
	if {($CONFIG_NET != 0)} then {
	configure_entry .menu40.config.f.x0 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu40.config.f.x0 normal {m}} else {configure_entry .menu40.config.f.x0 disabled {m}}; configure_entry .menu40.config.f.x0 normal {n l}} else {configure_entry .menu40.config.f.x0 disabled {y n m l}}
	global CONFIG_INET
	global CONFIG_ISDN_PPP
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_INET != 0)} then {
	configure_entry .menu40.config.f.x1 normal {n l y}} else {configure_entry .menu40.config.f.x1 disabled {y n l}}
	global CONFIG_ISDN_PPP_VJ
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_INET != 0) && ($CONFIG_ISDN_PPP != 0)} then {
	configure_entry .menu40.config.f.x2 normal {n l y}} else {configure_entry .menu40.config.f.x2 disabled {y n l}}
	global CONFIG_ISDN_MPP
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_INET != 0) && ($CONFIG_ISDN_PPP != 0)} then {
	configure_entry .menu40.config.f.x3 normal {n l y}} else {configure_entry .menu40.config.f.x3 disabled {y n l}}
	global CONFIG_ISDN_PPP_BSDCOMP
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_INET != 0) && ($CONFIG_ISDN_PPP != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN]];set CONFIG_ISDN_PPP_BSDCOMP [sync_tristate $CONFIG_ISDN_PPP_BSDCOMP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu40.config.f.x4 disabled {y}} else {configure_entry .menu40.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu40.config.f.x4 disabled {m}} else {configure_entry .menu40.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu40.config.f.x4 normal {m}} else {configure_entry .menu40.config.f.x4 disabled {m}}; configure_entry .menu40.config.f.x4 normal {n l}} else {configure_entry .menu40.config.f.x4 disabled {y n m l}}
	global CONFIG_ISDN_AUDIO
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0)} then {
	configure_entry .menu40.config.f.x5 normal {n l y}} else {configure_entry .menu40.config.f.x5 disabled {y n l}}
	global CONFIG_ISDN_TTY_FAX
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_AUDIO != 0)} then {
	configure_entry .menu40.config.f.x6 normal {n l y}} else {configure_entry .menu40.config.f.x6 disabled {y n l}}
	global CONFIG_X25
	global CONFIG_ISDN_X25
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_X25 != 0)} then {
	configure_entry .menu40.config.f.x7 normal {n l y}} else {configure_entry .menu40.config.f.x7 disabled {y n l}}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0)} then {configure_entry .menu40.config.f.x8 normal {m}} else {configure_entry .menu40.config.f.x8 disabled {m}}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0)} then {configure_entry .menu40.config.f.x9 normal {m}} else {configure_entry .menu40.config.f.x9 disabled {m}}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0)} then {configure_entry .menu40.config.f.x10 normal {m}} else {configure_entry .menu40.config.f.x10 disabled {m}}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0)} then {configure_entry .menu40.config.f.x11 normal {m}} else {configure_entry .menu40.config.f.x11 disabled {m}}
}


proc update_define_menu40 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_ISDN
set CONFIG_ISDN [expr $CONFIG_ISDN|16]
	global CONFIG_ISDN_PPP
set CONFIG_ISDN_PPP [expr $CONFIG_ISDN_PPP|16]
	global CONFIG_ISDN_PPP_VJ
set CONFIG_ISDN_PPP_VJ [expr $CONFIG_ISDN_PPP_VJ|16]
	global CONFIG_ISDN_MPP
set CONFIG_ISDN_MPP [expr $CONFIG_ISDN_MPP|16]
	global CONFIG_ISDN_AUDIO
set CONFIG_ISDN_AUDIO [expr $CONFIG_ISDN_AUDIO|16]
	global CONFIG_ISDN_TTY_FAX
set CONFIG_ISDN_TTY_FAX [expr $CONFIG_ISDN_TTY_FAX|16]
	global CONFIG_ISDN_X25
set CONFIG_ISDN_X25 [expr $CONFIG_ISDN_X25|16]
	global CONFIG_NET
	if {($CONFIG_NET != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ISDN == 2)} then {set CONFIG_ISDN 1}; set CONFIG_ISDN [expr $CONFIG_ISDN&15]}
	global CONFIG_INET
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_INET != 0)} then {
	set CONFIG_ISDN_PPP [expr $CONFIG_ISDN_PPP&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_INET != 0) && ($CONFIG_ISDN_PPP != 0)} then {
	set CONFIG_ISDN_PPP_VJ [expr $CONFIG_ISDN_PPP_VJ&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_INET != 0) && ($CONFIG_ISDN_PPP != 0)} then {
	set CONFIG_ISDN_MPP [expr $CONFIG_ISDN_MPP&15]}
	global CONFIG_ISDN_PPP_BSDCOMP
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_INET != 0) && ($CONFIG_ISDN_PPP != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN]]; set CONFIG_ISDN_PPP_BSDCOMP [sync_tristate $CONFIG_ISDN_PPP_BSDCOMP $tmpvar_dep]; set CONFIG_ISDN_PPP_BSDCOMP [expr $CONFIG_ISDN_PPP_BSDCOMP&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0)} then {
	set CONFIG_ISDN_AUDIO [expr $CONFIG_ISDN_AUDIO&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_AUDIO != 0)} then {
	set CONFIG_ISDN_TTY_FAX [expr $CONFIG_ISDN_TTY_FAX&15]}
	global CONFIG_X25
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_X25 != 0)} then {
	set CONFIG_ISDN_X25 [expr $CONFIG_ISDN_X25&15]}
}


proc menu41 {w title} {
	set oldFocus [focus]
	catch {focus .menu40}
	catch {destroy $w; unregister_active 41}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 41]]
	message $w.m -width 400 -aspect 300 -text \
		"ISDN feature submodules"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "ISDN feature submodules" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 41; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 41; menu42 .menu42 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 41"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 41; menu40 .menu40 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 41; menu40 .menu40 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 41 0 "isdnloop support" CONFIG_ISDN_DRV_LOOP
	dep_tristate $w.config.f 41 1 "Support isdn diversion services" CONFIG_ISDN_DIVERSION



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu40] == 0} then {menu40 .menu40 "ISDN subsystem"}
	set winx [expr [winfo x .menu40]+30]; set winy [expr [winfo y .menu40]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu41 {} {
	global CONFIG_MODULES
	global CONFIG_NET
	global CONFIG_ISDN
	global CONFIG_ISDN_DRV_LOOP
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN]];set CONFIG_ISDN_DRV_LOOP [sync_tristate $CONFIG_ISDN_DRV_LOOP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu41.config.f.x0 disabled {y}} else {configure_entry .menu41.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu41.config.f.x0 disabled {m}} else {configure_entry .menu41.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu41.config.f.x0 normal {m}} else {configure_entry .menu41.config.f.x0 disabled {m}}; configure_entry .menu41.config.f.x0 normal {n l}} else {configure_entry .menu41.config.f.x0 disabled {y n m l}}
	global CONFIG_ISDN_DIVERSION
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN]];set CONFIG_ISDN_DIVERSION [sync_tristate $CONFIG_ISDN_DIVERSION $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu41.config.f.x1 disabled {y}} else {configure_entry .menu41.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu41.config.f.x1 disabled {m}} else {configure_entry .menu41.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu41.config.f.x1 normal {m}} else {configure_entry .menu41.config.f.x1 disabled {m}}; configure_entry .menu41.config.f.x1 normal {n l}} else {configure_entry .menu41.config.f.x1 disabled {y n m l}}
}


proc update_define_menu41 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_NET
	global CONFIG_ISDN
	global CONFIG_ISDN_DRV_LOOP
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN]]; set CONFIG_ISDN_DRV_LOOP [sync_tristate $CONFIG_ISDN_DRV_LOOP $tmpvar_dep]; set CONFIG_ISDN_DRV_LOOP [expr $CONFIG_ISDN_DRV_LOOP&15]}
	global CONFIG_ISDN_DIVERSION
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN]]; set CONFIG_ISDN_DIVERSION [sync_tristate $CONFIG_ISDN_DIVERSION $tmpvar_dep]; set CONFIG_ISDN_DIVERSION [expr $CONFIG_ISDN_DIVERSION&15]}
}


proc menu42 {w title} {
	set oldFocus [focus]
	catch {focus .menu40}
	catch {destroy $w; unregister_active 42}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 42]]
	message $w.m -width 400 -aspect 300 -text \
		"Passive ISDN cards"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Passive ISDN cards" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 42; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 42; menu43 .menu43 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 42"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 42; menu41 .menu41 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 42; menu41 .menu41 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 42 0 "HiSax SiemensChipSet driver support" CONFIG_ISDN_DRV_HISAX
	comment $w.config.f 42 1 "  D-channel protocol features"
	bool $w.config.f 42 2 "  HiSax Support for EURO/DSS1" CONFIG_HISAX_EURO
	bool $w.config.f 42 3 "    Support for german chargeinfo" CONFIG_DE_AOC
	bool $w.config.f 42 4 "    Disable sending complete" CONFIG_HISAX_NO_SENDCOMPLETE
	bool $w.config.f 42 5 "    Disable sending low layer compatibility" CONFIG_HISAX_NO_LLC
	bool $w.config.f 42 6 "    Disable keypad protocol option" CONFIG_HISAX_NO_KEYPAD
	bool $w.config.f 42 7 "  HiSax Support for german 1TR6" CONFIG_HISAX_1TR6
	bool $w.config.f 42 8 "  HiSax Support for US NI1" CONFIG_HISAX_NI1
	int $w.config.f 42 9 "  Maximum number of cards supported by HiSax" CONFIG_HISAX_MAX_CARDS
	comment $w.config.f 42 10 "  HiSax supported cards"
	bool $w.config.f 42 11 "  Teles 16.0/8.0" CONFIG_HISAX_16_0
	bool $w.config.f 42 12 "  Teles 16.3 or PNP or PCMCIA" CONFIG_HISAX_16_3
	bool $w.config.f 42 13 "  Teles PCI" CONFIG_HISAX_TELESPCI
	bool $w.config.f 42 14 "  Teles S0Box" CONFIG_HISAX_S0BOX
	bool $w.config.f 42 15 "  AVM A1 (Fritz)" CONFIG_HISAX_AVM_A1
	bool $w.config.f 42 16 "  AVM PnP/PCI (Fritz!PnP/PCI)" CONFIG_HISAX_FRITZPCI
	bool $w.config.f 42 17 "  AVM A1 PCMCIA (Fritz)" CONFIG_HISAX_AVM_A1_PCMCIA
	bool $w.config.f 42 18 "  Elsa cards" CONFIG_HISAX_ELSA
	bool $w.config.f 42 19 "  ITK ix1-micro Revision 2" CONFIG_HISAX_IX1MICROR2
	bool $w.config.f 42 20 "  Eicon.Diehl Diva cards" CONFIG_HISAX_DIEHLDIVA
	bool $w.config.f 42 21 "  ASUSCOM ISA cards" CONFIG_HISAX_ASUSCOM
	bool $w.config.f 42 22 "  TELEINT cards" CONFIG_HISAX_TELEINT
	bool $w.config.f 42 23 "  HFC-S based cards" CONFIG_HISAX_HFCS
	bool $w.config.f 42 24 "  Sedlbauer cards" CONFIG_HISAX_SEDLBAUER
	bool $w.config.f 42 25 "  USR Sportster internal TA" CONFIG_HISAX_SPORTSTER
	bool $w.config.f 42 26 "  MIC card" CONFIG_HISAX_MIC
	bool $w.config.f 42 27 "  NETjet card" CONFIG_HISAX_NETJET
	bool $w.config.f 42 28 "  NETspider U card" CONFIG_HISAX_NETJET_U
	bool $w.config.f 42 29 "  Niccy PnP/PCI card" CONFIG_HISAX_NICCY
	bool $w.config.f 42 30 "  Siemens I-Surf card" CONFIG_HISAX_ISURF
	bool $w.config.f 42 31 "  HST Saphir card" CONFIG_HISAX_HSTSAPHIR
	bool $w.config.f 42 32 "  Telekom A4T card" CONFIG_HISAX_BKM_A4T
	bool $w.config.f 42 33 "  Scitel Quadro card" CONFIG_HISAX_SCT_QUADRO
	bool $w.config.f 42 34 "  Gazel cards" CONFIG_HISAX_GAZEL
	bool $w.config.f 42 35 "  HFC PCI-Bus cards" CONFIG_HISAX_HFC_PCI
	bool $w.config.f 42 36 "  Winbond W6692 based cards" CONFIG_HISAX_W6692
	bool $w.config.f 42 37 "  HFC-S+, HFC-SP, HFC-PCMCIA cards" CONFIG_HISAX_HFC_SX
	bool $w.config.f 42 38 "  HiSax debugging" CONFIG_HISAX_DEBUG
	dep_tristate $w.config.f 42 39 "Sedlbauer PCMCIA cards" CONFIG_HISAX_SEDLBAUER_CS
	dep_tristate $w.config.f 42 40 "ELSA PCMCIA MicroLink cards" CONFIG_HISAX_ELSA_CS
	dep_tristate $w.config.f 42 41 "ST5481 USB ISDN modem (EXPERIMENTAL)" CONFIG_HISAX_ST5481
	dep_tristate $w.config.f 42 42 "Fritz!PCIv2 support (EXPERIMENTAL)" CONFIG_HISAX_FRITZ_PCIPNP



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu40] == 0} then {menu40 .menu40 "ISDN subsystem"}
	set winx [expr [winfo x .menu40]+30]; set winy [expr [winfo y .menu40]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu42 {} {
	global CONFIG_MODULES
	global CONFIG_NET
	global CONFIG_ISDN
	global CONFIG_ISDN_DRV_HISAX
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN]];set CONFIG_ISDN_DRV_HISAX [sync_tristate $CONFIG_ISDN_DRV_HISAX $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu42.config.f.x0 disabled {y}} else {configure_entry .menu42.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu42.config.f.x0 disabled {m}} else {configure_entry .menu42.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu42.config.f.x0 normal {m}} else {configure_entry .menu42.config.f.x0 disabled {m}}; configure_entry .menu42.config.f.x0 normal {n l}} else {configure_entry .menu42.config.f.x0 disabled {y n m l}}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {configure_entry .menu42.config.f.x1 normal {m}} else {configure_entry .menu42.config.f.x1 disabled {m}}
	global CONFIG_HISAX_EURO
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x2 normal {n l y}} else {configure_entry .menu42.config.f.x2 disabled {y n l}}
	global CONFIG_DE_AOC
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_HISAX_EURO != 0)} then {
	configure_entry .menu42.config.f.x3 normal {n l y}} else {configure_entry .menu42.config.f.x3 disabled {y n l}}
	global CONFIG_HISAX_NO_SENDCOMPLETE
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_HISAX_EURO != 0)} then {
	configure_entry .menu42.config.f.x4 normal {n l y}} else {configure_entry .menu42.config.f.x4 disabled {y n l}}
	global CONFIG_HISAX_NO_LLC
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_HISAX_EURO != 0)} then {
	configure_entry .menu42.config.f.x5 normal {n l y}} else {configure_entry .menu42.config.f.x5 disabled {y n l}}
	global CONFIG_HISAX_NO_KEYPAD
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_HISAX_EURO != 0)} then {
	configure_entry .menu42.config.f.x6 normal {n l y}} else {configure_entry .menu42.config.f.x6 disabled {y n l}}
	global CONFIG_HISAX_1TR6
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x7 normal {n l y}} else {configure_entry .menu42.config.f.x7 disabled {y n l}}
	global CONFIG_HISAX_NI1
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x8 normal {n l y}} else {configure_entry .menu42.config.f.x8 disabled {y n l}}
	global CONFIG_HISAX_MAX_CARDS
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {.menu42.config.f.x9.x configure -state normal -foreground [ cget .ref -foreground ]; .menu42.config.f.x9.l configure -state normal; } else {.menu42.config.f.x9.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu42.config.f.x9.l configure -state disabled}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {configure_entry .menu42.config.f.x10 normal {m}} else {configure_entry .menu42.config.f.x10 disabled {m}}
	global CONFIG_HISAX_16_0
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x11 normal {n l y}} else {configure_entry .menu42.config.f.x11 disabled {y n l}}
	global CONFIG_HISAX_16_3
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x12 normal {n l y}} else {configure_entry .menu42.config.f.x12 disabled {y n l}}
	global CONFIG_HISAX_TELESPCI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x13 normal {n l y}} else {configure_entry .menu42.config.f.x13 disabled {y n l}}
	global CONFIG_HISAX_S0BOX
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x14 normal {n l y}} else {configure_entry .menu42.config.f.x14 disabled {y n l}}
	global CONFIG_HISAX_AVM_A1
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x15 normal {n l y}} else {configure_entry .menu42.config.f.x15 disabled {y n l}}
	global CONFIG_HISAX_FRITZPCI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x16 normal {n l y}} else {configure_entry .menu42.config.f.x16 disabled {y n l}}
	global CONFIG_HISAX_AVM_A1_PCMCIA
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x17 normal {n l y}} else {configure_entry .menu42.config.f.x17 disabled {y n l}}
	global CONFIG_HISAX_ELSA
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x18 normal {n l y}} else {configure_entry .menu42.config.f.x18 disabled {y n l}}
	global CONFIG_HISAX_IX1MICROR2
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x19 normal {n l y}} else {configure_entry .menu42.config.f.x19 disabled {y n l}}
	global CONFIG_HISAX_DIEHLDIVA
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x20 normal {n l y}} else {configure_entry .menu42.config.f.x20 disabled {y n l}}
	global CONFIG_HISAX_ASUSCOM
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x21 normal {n l y}} else {configure_entry .menu42.config.f.x21 disabled {y n l}}
	global CONFIG_HISAX_TELEINT
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x22 normal {n l y}} else {configure_entry .menu42.config.f.x22 disabled {y n l}}
	global CONFIG_HISAX_HFCS
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x23 normal {n l y}} else {configure_entry .menu42.config.f.x23 disabled {y n l}}
	global CONFIG_HISAX_SEDLBAUER
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x24 normal {n l y}} else {configure_entry .menu42.config.f.x24 disabled {y n l}}
	global CONFIG_HISAX_SPORTSTER
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x25 normal {n l y}} else {configure_entry .menu42.config.f.x25 disabled {y n l}}
	global CONFIG_HISAX_MIC
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x26 normal {n l y}} else {configure_entry .menu42.config.f.x26 disabled {y n l}}
	global CONFIG_HISAX_NETJET
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x27 normal {n l y}} else {configure_entry .menu42.config.f.x27 disabled {y n l}}
	global CONFIG_HISAX_NETJET_U
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x28 normal {n l y}} else {configure_entry .menu42.config.f.x28 disabled {y n l}}
	global CONFIG_HISAX_NICCY
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x29 normal {n l y}} else {configure_entry .menu42.config.f.x29 disabled {y n l}}
	global CONFIG_HISAX_ISURF
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x30 normal {n l y}} else {configure_entry .menu42.config.f.x30 disabled {y n l}}
	global CONFIG_HISAX_HSTSAPHIR
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x31 normal {n l y}} else {configure_entry .menu42.config.f.x31 disabled {y n l}}
	global CONFIG_HISAX_BKM_A4T
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x32 normal {n l y}} else {configure_entry .menu42.config.f.x32 disabled {y n l}}
	global CONFIG_HISAX_SCT_QUADRO
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x33 normal {n l y}} else {configure_entry .menu42.config.f.x33 disabled {y n l}}
	global CONFIG_HISAX_GAZEL
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x34 normal {n l y}} else {configure_entry .menu42.config.f.x34 disabled {y n l}}
	global CONFIG_HISAX_HFC_PCI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x35 normal {n l y}} else {configure_entry .menu42.config.f.x35 disabled {y n l}}
	global CONFIG_HISAX_W6692
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x36 normal {n l y}} else {configure_entry .menu42.config.f.x36 disabled {y n l}}
	global CONFIG_HISAX_HFC_SX
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x37 normal {n l y}} else {configure_entry .menu42.config.f.x37 disabled {y n l}}
	global CONFIG_HISAX_DEBUG
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	configure_entry .menu42.config.f.x38 normal {n l y}} else {configure_entry .menu42.config.f.x38 disabled {y n l}}
	global CONFIG_PCMCIA
	global CONFIG_HISAX_SEDLBAUER_CS
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]];set CONFIG_HISAX_SEDLBAUER_CS [sync_tristate $CONFIG_HISAX_SEDLBAUER_CS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu42.config.f.x39 disabled {y}} else {configure_entry .menu42.config.f.x39 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu42.config.f.x39 disabled {m}} else {configure_entry .menu42.config.f.x39 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu42.config.f.x39 normal {m}} else {configure_entry .menu42.config.f.x39 disabled {m}}; configure_entry .menu42.config.f.x39 normal {n l}} else {configure_entry .menu42.config.f.x39 disabled {y n m l}}
	global CONFIG_HISAX_ELSA_CS
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]];set CONFIG_HISAX_ELSA_CS [sync_tristate $CONFIG_HISAX_ELSA_CS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu42.config.f.x40 disabled {y}} else {configure_entry .menu42.config.f.x40 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu42.config.f.x40 disabled {m}} else {configure_entry .menu42.config.f.x40 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu42.config.f.x40 normal {m}} else {configure_entry .menu42.config.f.x40 disabled {m}}; configure_entry .menu42.config.f.x40 normal {n l}} else {configure_entry .menu42.config.f.x40 disabled {y n m l}}
	global CONFIG_HISAX
	global CONFIG_USB
	global CONFIG_EXPERIMENTAL
	global CONFIG_HISAX_ST5481
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_HISAX == 1 || $CONFIG_HISAX == 2 || $CONFIG_HISAX == 4) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_HISAX $CONFIG_USB $CONFIG_EXPERIMENTAL]];set CONFIG_HISAX_ST5481 [sync_tristate $CONFIG_HISAX_ST5481 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu42.config.f.x41 disabled {y}} else {configure_entry .menu42.config.f.x41 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu42.config.f.x41 disabled {m}} else {configure_entry .menu42.config.f.x41 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu42.config.f.x41 normal {m}} else {configure_entry .menu42.config.f.x41 disabled {m}}; configure_entry .menu42.config.f.x41 normal {n l}} else {configure_entry .menu42.config.f.x41 disabled {y n m l}}
	global CONFIG_HISAX_FRITZ_PCIPNP
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_HISAX == 1 || $CONFIG_HISAX == 2 || $CONFIG_HISAX == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_HISAX $CONFIG_EXPERIMENTAL]];set CONFIG_HISAX_FRITZ_PCIPNP [sync_tristate $CONFIG_HISAX_FRITZ_PCIPNP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu42.config.f.x42 disabled {y}} else {configure_entry .menu42.config.f.x42 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu42.config.f.x42 disabled {m}} else {configure_entry .menu42.config.f.x42 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu42.config.f.x42 normal {m}} else {configure_entry .menu42.config.f.x42 disabled {m}}; configure_entry .menu42.config.f.x42 normal {n l}} else {configure_entry .menu42.config.f.x42 disabled {y n m l}}
}


proc update_define_menu42 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_HISAX_EURO
set CONFIG_HISAX_EURO [expr $CONFIG_HISAX_EURO|16]
	global CONFIG_DE_AOC
set CONFIG_DE_AOC [expr $CONFIG_DE_AOC|16]
	global CONFIG_HISAX_NO_SENDCOMPLETE
set CONFIG_HISAX_NO_SENDCOMPLETE [expr $CONFIG_HISAX_NO_SENDCOMPLETE|16]
	global CONFIG_HISAX_NO_LLC
set CONFIG_HISAX_NO_LLC [expr $CONFIG_HISAX_NO_LLC|16]
	global CONFIG_HISAX_NO_KEYPAD
set CONFIG_HISAX_NO_KEYPAD [expr $CONFIG_HISAX_NO_KEYPAD|16]
	global CONFIG_HISAX_1TR6
set CONFIG_HISAX_1TR6 [expr $CONFIG_HISAX_1TR6|16]
	global CONFIG_HISAX_NI1
set CONFIG_HISAX_NI1 [expr $CONFIG_HISAX_NI1|16]
	global CONFIG_HISAX_16_0
set CONFIG_HISAX_16_0 [expr $CONFIG_HISAX_16_0|16]
	global CONFIG_HISAX_16_3
set CONFIG_HISAX_16_3 [expr $CONFIG_HISAX_16_3|16]
	global CONFIG_HISAX_TELESPCI
set CONFIG_HISAX_TELESPCI [expr $CONFIG_HISAX_TELESPCI|16]
	global CONFIG_HISAX_S0BOX
set CONFIG_HISAX_S0BOX [expr $CONFIG_HISAX_S0BOX|16]
	global CONFIG_HISAX_AVM_A1
set CONFIG_HISAX_AVM_A1 [expr $CONFIG_HISAX_AVM_A1|16]
	global CONFIG_HISAX_FRITZPCI
set CONFIG_HISAX_FRITZPCI [expr $CONFIG_HISAX_FRITZPCI|16]
	global CONFIG_HISAX_AVM_A1_PCMCIA
set CONFIG_HISAX_AVM_A1_PCMCIA [expr $CONFIG_HISAX_AVM_A1_PCMCIA|16]
	global CONFIG_HISAX_ELSA
set CONFIG_HISAX_ELSA [expr $CONFIG_HISAX_ELSA|16]
	global CONFIG_HISAX_IX1MICROR2
set CONFIG_HISAX_IX1MICROR2 [expr $CONFIG_HISAX_IX1MICROR2|16]
	global CONFIG_HISAX_DIEHLDIVA
set CONFIG_HISAX_DIEHLDIVA [expr $CONFIG_HISAX_DIEHLDIVA|16]
	global CONFIG_HISAX_ASUSCOM
set CONFIG_HISAX_ASUSCOM [expr $CONFIG_HISAX_ASUSCOM|16]
	global CONFIG_HISAX_TELEINT
set CONFIG_HISAX_TELEINT [expr $CONFIG_HISAX_TELEINT|16]
	global CONFIG_HISAX_HFCS
set CONFIG_HISAX_HFCS [expr $CONFIG_HISAX_HFCS|16]
	global CONFIG_HISAX_SEDLBAUER
set CONFIG_HISAX_SEDLBAUER [expr $CONFIG_HISAX_SEDLBAUER|16]
	global CONFIG_HISAX_SPORTSTER
set CONFIG_HISAX_SPORTSTER [expr $CONFIG_HISAX_SPORTSTER|16]
	global CONFIG_HISAX_MIC
set CONFIG_HISAX_MIC [expr $CONFIG_HISAX_MIC|16]
	global CONFIG_HISAX_NETJET
set CONFIG_HISAX_NETJET [expr $CONFIG_HISAX_NETJET|16]
	global CONFIG_HISAX_NETJET_U
set CONFIG_HISAX_NETJET_U [expr $CONFIG_HISAX_NETJET_U|16]
	global CONFIG_HISAX_NICCY
set CONFIG_HISAX_NICCY [expr $CONFIG_HISAX_NICCY|16]
	global CONFIG_HISAX_ISURF
set CONFIG_HISAX_ISURF [expr $CONFIG_HISAX_ISURF|16]
	global CONFIG_HISAX_HSTSAPHIR
set CONFIG_HISAX_HSTSAPHIR [expr $CONFIG_HISAX_HSTSAPHIR|16]
	global CONFIG_HISAX_BKM_A4T
set CONFIG_HISAX_BKM_A4T [expr $CONFIG_HISAX_BKM_A4T|16]
	global CONFIG_HISAX_SCT_QUADRO
set CONFIG_HISAX_SCT_QUADRO [expr $CONFIG_HISAX_SCT_QUADRO|16]
	global CONFIG_HISAX_GAZEL
set CONFIG_HISAX_GAZEL [expr $CONFIG_HISAX_GAZEL|16]
	global CONFIG_HISAX_HFC_PCI
set CONFIG_HISAX_HFC_PCI [expr $CONFIG_HISAX_HFC_PCI|16]
	global CONFIG_HISAX_W6692
set CONFIG_HISAX_W6692 [expr $CONFIG_HISAX_W6692|16]
	global CONFIG_HISAX_HFC_SX
set CONFIG_HISAX_HFC_SX [expr $CONFIG_HISAX_HFC_SX|16]
	global CONFIG_HISAX_DEBUG
set CONFIG_HISAX_DEBUG [expr $CONFIG_HISAX_DEBUG|16]
	global CONFIG_NET
	global CONFIG_ISDN
	global CONFIG_ISDN_DRV_HISAX
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN]]; set CONFIG_ISDN_DRV_HISAX [sync_tristate $CONFIG_ISDN_DRV_HISAX $tmpvar_dep]; set CONFIG_ISDN_DRV_HISAX [expr $CONFIG_ISDN_DRV_HISAX&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_EURO [expr $CONFIG_HISAX_EURO&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_HISAX_EURO != 0)} then {
	set CONFIG_DE_AOC [expr $CONFIG_DE_AOC&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_HISAX_EURO != 0)} then {
	set CONFIG_HISAX_NO_SENDCOMPLETE [expr $CONFIG_HISAX_NO_SENDCOMPLETE&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_HISAX_EURO != 0)} then {
	set CONFIG_HISAX_NO_LLC [expr $CONFIG_HISAX_NO_LLC&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_HISAX_EURO != 0)} then {
	set CONFIG_HISAX_NO_KEYPAD [expr $CONFIG_HISAX_NO_KEYPAD&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_1TR6 [expr $CONFIG_HISAX_1TR6&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_NI1 [expr $CONFIG_HISAX_NI1&15]}
	global CONFIG_HISAX_MAX_CARDS
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {validate_int CONFIG_HISAX_MAX_CARDS "$CONFIG_HISAX_MAX_CARDS" 8}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_16_0 [expr $CONFIG_HISAX_16_0&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_16_3 [expr $CONFIG_HISAX_16_3&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_TELESPCI [expr $CONFIG_HISAX_TELESPCI&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_S0BOX [expr $CONFIG_HISAX_S0BOX&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_AVM_A1 [expr $CONFIG_HISAX_AVM_A1&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_FRITZPCI [expr $CONFIG_HISAX_FRITZPCI&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_AVM_A1_PCMCIA [expr $CONFIG_HISAX_AVM_A1_PCMCIA&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_ELSA [expr $CONFIG_HISAX_ELSA&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_IX1MICROR2 [expr $CONFIG_HISAX_IX1MICROR2&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_DIEHLDIVA [expr $CONFIG_HISAX_DIEHLDIVA&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_ASUSCOM [expr $CONFIG_HISAX_ASUSCOM&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_TELEINT [expr $CONFIG_HISAX_TELEINT&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_HFCS [expr $CONFIG_HISAX_HFCS&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_SEDLBAUER [expr $CONFIG_HISAX_SEDLBAUER&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_SPORTSTER [expr $CONFIG_HISAX_SPORTSTER&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_MIC [expr $CONFIG_HISAX_MIC&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_NETJET [expr $CONFIG_HISAX_NETJET&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_NETJET_U [expr $CONFIG_HISAX_NETJET_U&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_NICCY [expr $CONFIG_HISAX_NICCY&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_ISURF [expr $CONFIG_HISAX_ISURF&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_HSTSAPHIR [expr $CONFIG_HISAX_HSTSAPHIR&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_BKM_A4T [expr $CONFIG_HISAX_BKM_A4T&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_SCT_QUADRO [expr $CONFIG_HISAX_SCT_QUADRO&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_GAZEL [expr $CONFIG_HISAX_GAZEL&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_HFC_PCI [expr $CONFIG_HISAX_HFC_PCI&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_W6692 [expr $CONFIG_HISAX_W6692&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_HFC_SX [expr $CONFIG_HISAX_HFC_SX&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {
	set CONFIG_HISAX_DEBUG [expr $CONFIG_HISAX_DEBUG&15]}
	global CONFIG_PCMCIA
	global CONFIG_HISAX_SEDLBAUER_CS
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]]; set CONFIG_HISAX_SEDLBAUER_CS [sync_tristate $CONFIG_HISAX_SEDLBAUER_CS $tmpvar_dep]; set CONFIG_HISAX_SEDLBAUER_CS [expr $CONFIG_HISAX_SEDLBAUER_CS&15]}
	global CONFIG_HISAX_ELSA_CS
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCMCIA]]; set CONFIG_HISAX_ELSA_CS [sync_tristate $CONFIG_HISAX_ELSA_CS $tmpvar_dep]; set CONFIG_HISAX_ELSA_CS [expr $CONFIG_HISAX_ELSA_CS&15]}
	global CONFIG_HISAX
	global CONFIG_USB
	global CONFIG_EXPERIMENTAL
	global CONFIG_HISAX_ST5481
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_HISAX == 1 || $CONFIG_HISAX == 2 || $CONFIG_HISAX == 4) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_HISAX $CONFIG_USB $CONFIG_EXPERIMENTAL]]; set CONFIG_HISAX_ST5481 [sync_tristate $CONFIG_HISAX_ST5481 $tmpvar_dep]; set CONFIG_HISAX_ST5481 [expr $CONFIG_HISAX_ST5481&15]}
	global CONFIG_HISAX_FRITZ_PCIPNP
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_HISAX == 1 || $CONFIG_HISAX == 2 || $CONFIG_HISAX == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_HISAX $CONFIG_EXPERIMENTAL]]; set CONFIG_HISAX_FRITZ_PCIPNP [sync_tristate $CONFIG_HISAX_FRITZ_PCIPNP $tmpvar_dep]; set CONFIG_HISAX_FRITZ_PCIPNP [expr $CONFIG_HISAX_FRITZ_PCIPNP&15]}
}


proc menu43 {w title} {
	set oldFocus [focus]
	catch {focus .menu40}
	catch {destroy $w; unregister_active 43}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 43]]
	message $w.m -width 400 -aspect 300 -text \
		"Active ISDN cards"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Active ISDN cards" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 43; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 43; catch {destroy .menu40}; unregister_active 40; menu44 .menu44 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 43"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 43; menu42 .menu42 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 43; menu42 .menu42 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 43 0 "ICN 2B and 4B support" CONFIG_ISDN_DRV_ICN
	dep_tristate $w.config.f 43 1 "PCBIT-D support" CONFIG_ISDN_DRV_PCBIT
	dep_tristate $w.config.f 43 2 "Spellcaster support" CONFIG_ISDN_DRV_SC
	dep_tristate $w.config.f 43 3 "IBM Active 2000 support" CONFIG_ISDN_DRV_ACT2000
	bool $w.config.f 43 4 "Eicon active card support" CONFIG_ISDN_DRV_EICON
	dep_tristate $w.config.f 43 5 "  Build Eicon driver type standalone" CONFIG_ISDN_DRV_EICON_DIVAS
	dep_tristate $w.config.f 43 6 "  Legacy Eicon driver" CONFIG_ISDN_DRV_EICON_OLD
	dep_bool $w.config.f 43 7 "    Eicon PCI DIVA Server BRI/PRI/4BRI support" CONFIG_ISDN_DRV_EICON_PCI
	bool $w.config.f 43 8 "    Eicon S,SX,SCOM,Quadro,S2M support" CONFIG_ISDN_DRV_EICON_ISA
	dep_tristate $w.config.f 43 9 "Auvertech TurboPAM support" CONFIG_ISDN_DRV_TPAM
	tristate $w.config.f 43 10 "CAPI2.0 support" CONFIG_ISDN_CAPI
	bool $w.config.f 43 11 "  Verbose reason code reporting (kernel size +=7K)" CONFIG_ISDN_DRV_AVMB1_VERBOSE_REASON
	dep_bool $w.config.f 43 12 "  CAPI2.0 Middleware support (EXPERIMENTAL)" CONFIG_ISDN_CAPI_MIDDLEWARE
	dep_tristate $w.config.f 43 13 "  CAPI2.0 /dev/capi support" CONFIG_ISDN_CAPI_CAPI20
	dep_bool $w.config.f 43 14 "    CAPI2.0 filesystem support" CONFIG_ISDN_CAPI_CAPIFS_BOOL
	dep_tristate $w.config.f 43 15 "  CAPI2.0 capidrv interface support" CONFIG_ISDN_CAPI_CAPIDRV
	dep_tristate $w.config.f 43 16 "  AVM B1 ISA support" CONFIG_ISDN_DRV_AVMB1_B1ISA
	dep_tristate $w.config.f 43 17 "  AVM B1 PCI support" CONFIG_ISDN_DRV_AVMB1_B1PCI
	dep_bool $w.config.f 43 18 "    AVM B1 PCI V4 support" CONFIG_ISDN_DRV_AVMB1_B1PCIV4
	dep_tristate $w.config.f 43 19 "  AVM T1/T1-B ISA support" CONFIG_ISDN_DRV_AVMB1_T1ISA
	dep_tristate $w.config.f 43 20 "  AVM B1/M1/M2 PCMCIA support" CONFIG_ISDN_DRV_AVMB1_B1PCMCIA
	dep_tristate $w.config.f 43 21 "  AVM B1/M1/M2 PCMCIA cs module" CONFIG_ISDN_DRV_AVMB1_AVM_CS
	dep_tristate $w.config.f 43 22 "  AVM T1/T1-B PCI support" CONFIG_ISDN_DRV_AVMB1_T1PCI
	dep_tristate $w.config.f 43 23 "  AVM C4/C2 support" CONFIG_ISDN_DRV_AVMB1_C4
	dep_tristate $w.config.f 43 24 "  Hypercope HYSDN cards (Champ, Ergo, Metro) support (module only)" CONFIG_HYSDN
	dep_bool $w.config.f 43 25 "    HYSDN CAPI 2.0 support" CONFIG_HYSDN_CAPI



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu40] == 0} then {menu40 .menu40 "ISDN subsystem"}
	set winx [expr [winfo x .menu40]+30]; set winy [expr [winfo y .menu40]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu43 {} {
	global CONFIG_MODULES
	global CONFIG_NET
	global CONFIG_ISDN
	global CONFIG_ISDN_DRV_ICN
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN]];set CONFIG_ISDN_DRV_ICN [sync_tristate $CONFIG_ISDN_DRV_ICN $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x0 disabled {y}} else {configure_entry .menu43.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu43.config.f.x0 disabled {m}} else {configure_entry .menu43.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu43.config.f.x0 normal {m}} else {configure_entry .menu43.config.f.x0 disabled {m}}; configure_entry .menu43.config.f.x0 normal {n l}} else {configure_entry .menu43.config.f.x0 disabled {y n m l}}
	global CONFIG_ISDN_DRV_PCBIT
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN]];set CONFIG_ISDN_DRV_PCBIT [sync_tristate $CONFIG_ISDN_DRV_PCBIT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x1 disabled {y}} else {configure_entry .menu43.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu43.config.f.x1 disabled {m}} else {configure_entry .menu43.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu43.config.f.x1 normal {m}} else {configure_entry .menu43.config.f.x1 disabled {m}}; configure_entry .menu43.config.f.x1 normal {n l}} else {configure_entry .menu43.config.f.x1 disabled {y n m l}}
	global CONFIG_ISDN_DRV_SC
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN]];set CONFIG_ISDN_DRV_SC [sync_tristate $CONFIG_ISDN_DRV_SC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x2 disabled {y}} else {configure_entry .menu43.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu43.config.f.x2 disabled {m}} else {configure_entry .menu43.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu43.config.f.x2 normal {m}} else {configure_entry .menu43.config.f.x2 disabled {m}}; configure_entry .menu43.config.f.x2 normal {n l}} else {configure_entry .menu43.config.f.x2 disabled {y n m l}}
	global CONFIG_ISDN_DRV_ACT2000
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN]];set CONFIG_ISDN_DRV_ACT2000 [sync_tristate $CONFIG_ISDN_DRV_ACT2000 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x3 disabled {y}} else {configure_entry .menu43.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu43.config.f.x3 disabled {m}} else {configure_entry .menu43.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu43.config.f.x3 normal {m}} else {configure_entry .menu43.config.f.x3 disabled {m}}; configure_entry .menu43.config.f.x3 normal {n l}} else {configure_entry .menu43.config.f.x3 disabled {y n m l}}
	global CONFIG_ISDN_DRV_EICON
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0)} then {
	configure_entry .menu43.config.f.x4 normal {n l y}} else {configure_entry .menu43.config.f.x4 disabled {y n l}}
	global CONFIG_ISDN_DRV_EICON_OLD
	global CONFIG_PCI
	global CONFIG_ISDN_DRV_EICON_DIVAS
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_EICON != 0) && ($CONFIG_ISDN_DRV_EICON_OLD != 1) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN $CONFIG_PCI]];set CONFIG_ISDN_DRV_EICON_DIVAS [sync_tristate $CONFIG_ISDN_DRV_EICON_DIVAS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x5 disabled {y}} else {configure_entry .menu43.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu43.config.f.x5 disabled {m}} else {configure_entry .menu43.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu43.config.f.x5 normal {m}} else {configure_entry .menu43.config.f.x5 disabled {m}}; configure_entry .menu43.config.f.x5 normal {n l}} else {configure_entry .menu43.config.f.x5 disabled {y n m l}}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_EICON != 0) && ($CONFIG_ISDN_DRV_EICON_DIVAS != 1) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN]];set CONFIG_ISDN_DRV_EICON_OLD [sync_tristate $CONFIG_ISDN_DRV_EICON_OLD $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x6 disabled {y}} else {configure_entry .menu43.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu43.config.f.x6 disabled {m}} else {configure_entry .menu43.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu43.config.f.x6 normal {m}} else {configure_entry .menu43.config.f.x6 disabled {m}}; configure_entry .menu43.config.f.x6 normal {n l}} else {configure_entry .menu43.config.f.x6 disabled {y n m l}}
	global CONFIG_ISDN_DRV_EICON_PCI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_EICON != 0) && ($CONFIG_ISDN_DRV_EICON_DIVAS != 1) && ($CONFIG_ISDN_DRV_EICON_OLD != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_ISDN_DRV_EICON_PCI [sync_bool $CONFIG_ISDN_DRV_EICON_PCI $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x7 disabled {y};} else {configure_entry .menu43.config.f.x7 normal {y};}; configure_entry .menu43.config.f.x7 normal {n l}} else {configure_entry .menu43.config.f.x7 disabled {y n l}}
	global CONFIG_ISDN_DRV_EICON_ISA
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_EICON != 0) && ($CONFIG_ISDN_DRV_EICON_DIVAS != 1) && ($CONFIG_ISDN_DRV_EICON_OLD != 0)} then {
	configure_entry .menu43.config.f.x8 normal {n l y}} else {configure_entry .menu43.config.f.x8 disabled {y n l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_ISDN_DRV_TPAM
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_EXPERIMENTAL != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN $CONFIG_PCI]];set CONFIG_ISDN_DRV_TPAM [sync_tristate $CONFIG_ISDN_DRV_TPAM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x9 disabled {y}} else {configure_entry .menu43.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu43.config.f.x9 disabled {m}} else {configure_entry .menu43.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu43.config.f.x9 normal {m}} else {configure_entry .menu43.config.f.x9 disabled {m}}; configure_entry .menu43.config.f.x9 normal {n l}} else {configure_entry .menu43.config.f.x9 disabled {y n m l}}
	global CONFIG_ISDN_CAPI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0)} then {
	configure_entry .menu43.config.f.x10 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu43.config.f.x10 normal {m}} else {configure_entry .menu43.config.f.x10 disabled {m}}; configure_entry .menu43.config.f.x10 normal {n l}} else {configure_entry .menu43.config.f.x10 disabled {y n m l}}
	global CONFIG_ISDN_DRV_AVMB1_VERBOSE_REASON
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0)} then {
	configure_entry .menu43.config.f.x11 normal {n l y}} else {configure_entry .menu43.config.f.x11 disabled {y n l}}
	global CONFIG_ISDN_CAPI_MIDDLEWARE
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_ISDN_CAPI_MIDDLEWARE [sync_bool $CONFIG_ISDN_CAPI_MIDDLEWARE $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x12 disabled {y};} else {configure_entry .menu43.config.f.x12 normal {y};}; configure_entry .menu43.config.f.x12 normal {n l}} else {configure_entry .menu43.config.f.x12 disabled {y n l}}
	global CONFIG_ISDN_CAPI_CAPI20
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_CAPI]];set CONFIG_ISDN_CAPI_CAPI20 [sync_tristate $CONFIG_ISDN_CAPI_CAPI20 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x13 disabled {y}} else {configure_entry .menu43.config.f.x13 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu43.config.f.x13 disabled {m}} else {configure_entry .menu43.config.f.x13 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu43.config.f.x13 normal {m}} else {configure_entry .menu43.config.f.x13 disabled {m}}; configure_entry .menu43.config.f.x13 normal {n l}} else {configure_entry .menu43.config.f.x13 disabled {y n m l}}
	global CONFIG_ISDN_CAPI_CAPIFS_BOOL
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI_MIDDLEWARE == 1) && ($CONFIG_ISDN_CAPI_CAPI20 == 1 || $CONFIG_ISDN_CAPI_CAPI20 == 2 || $CONFIG_ISDN_CAPI_CAPI20 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_CAPI_CAPI20]];set CONFIG_ISDN_CAPI_CAPIFS_BOOL [sync_bool $CONFIG_ISDN_CAPI_CAPIFS_BOOL $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu43.config.f.x14 disabled {y};} else {configure_entry .menu43.config.f.x14 normal {y};}; configure_entry .menu43.config.f.x14 normal {n l}} else {configure_entry .menu43.config.f.x14 disabled {y n l}}
	global CONFIG_ISDN_CAPI_CAPIDRV
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_CAPI $CONFIG_ISDN]];set CONFIG_ISDN_CAPI_CAPIDRV [sync_tristate $CONFIG_ISDN_CAPI_CAPIDRV $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x15 disabled {y}} else {configure_entry .menu43.config.f.x15 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu43.config.f.x15 disabled {m}} else {configure_entry .menu43.config.f.x15 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu43.config.f.x15 normal {m}} else {configure_entry .menu43.config.f.x15 disabled {m}}; configure_entry .menu43.config.f.x15 normal {n l}} else {configure_entry .menu43.config.f.x15 disabled {y n m l}}
	global CONFIG_ISDN_DRV_AVMB1_B1ISA
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_CAPI]];set CONFIG_ISDN_DRV_AVMB1_B1ISA [sync_tristate $CONFIG_ISDN_DRV_AVMB1_B1ISA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x16 disabled {y}} else {configure_entry .menu43.config.f.x16 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu43.config.f.x16 disabled {m}} else {configure_entry .menu43.config.f.x16 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu43.config.f.x16 normal {m}} else {configure_entry .menu43.config.f.x16 disabled {m}}; configure_entry .menu43.config.f.x16 normal {n l}} else {configure_entry .menu43.config.f.x16 disabled {y n m l}}
	global CONFIG_ISDN_DRV_AVMB1_B1PCI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_CAPI $CONFIG_PCI]];set CONFIG_ISDN_DRV_AVMB1_B1PCI [sync_tristate $CONFIG_ISDN_DRV_AVMB1_B1PCI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x17 disabled {y}} else {configure_entry .menu43.config.f.x17 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu43.config.f.x17 disabled {m}} else {configure_entry .menu43.config.f.x17 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu43.config.f.x17 normal {m}} else {configure_entry .menu43.config.f.x17 disabled {m}}; configure_entry .menu43.config.f.x17 normal {n l}} else {configure_entry .menu43.config.f.x17 disabled {y n m l}}
	global CONFIG_ISDN_DRV_AVMB1_B1PCIV4
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_DRV_AVMB1_B1PCI == 1 || $CONFIG_ISDN_DRV_AVMB1_B1PCI == 2 || $CONFIG_ISDN_DRV_AVMB1_B1PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_DRV_AVMB1_B1PCI]];set CONFIG_ISDN_DRV_AVMB1_B1PCIV4 [sync_bool $CONFIG_ISDN_DRV_AVMB1_B1PCIV4 $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu43.config.f.x18 disabled {y};} else {configure_entry .menu43.config.f.x18 normal {y};}; configure_entry .menu43.config.f.x18 normal {n l}} else {configure_entry .menu43.config.f.x18 disabled {y n l}}
	global CONFIG_ISDN_DRV_AVMB1_T1ISA
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_CAPI]];set CONFIG_ISDN_DRV_AVMB1_T1ISA [sync_tristate $CONFIG_ISDN_DRV_AVMB1_T1ISA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x19 disabled {y}} else {configure_entry .menu43.config.f.x19 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu43.config.f.x19 disabled {m}} else {configure_entry .menu43.config.f.x19 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu43.config.f.x19 normal {m}} else {configure_entry .menu43.config.f.x19 disabled {m}}; configure_entry .menu43.config.f.x19 normal {n l}} else {configure_entry .menu43.config.f.x19 disabled {y n m l}}
	global CONFIG_ISDN_DRV_AVMB1_B1PCMCIA
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_CAPI]];set CONFIG_ISDN_DRV_AVMB1_B1PCMCIA [sync_tristate $CONFIG_ISDN_DRV_AVMB1_B1PCMCIA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x20 disabled {y}} else {configure_entry .menu43.config.f.x20 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu43.config.f.x20 disabled {m}} else {configure_entry .menu43.config.f.x20 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu43.config.f.x20 normal {m}} else {configure_entry .menu43.config.f.x20 disabled {m}}; configure_entry .menu43.config.f.x20 normal {n l}} else {configure_entry .menu43.config.f.x20 disabled {y n m l}}
	global CONFIG_PCMCIA
	global CONFIG_ISDN_DRV_AVMB1_AVM_CS
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_DRV_AVMB1_B1PCMCIA == 1 || $CONFIG_ISDN_DRV_AVMB1_B1PCMCIA == 2 || $CONFIG_ISDN_DRV_AVMB1_B1PCMCIA == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_DRV_AVMB1_B1PCMCIA $CONFIG_PCMCIA]];set CONFIG_ISDN_DRV_AVMB1_AVM_CS [sync_tristate $CONFIG_ISDN_DRV_AVMB1_AVM_CS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x21 disabled {y}} else {configure_entry .menu43.config.f.x21 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu43.config.f.x21 disabled {m}} else {configure_entry .menu43.config.f.x21 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu43.config.f.x21 normal {m}} else {configure_entry .menu43.config.f.x21 disabled {m}}; configure_entry .menu43.config.f.x21 normal {n l}} else {configure_entry .menu43.config.f.x21 disabled {y n m l}}
	global CONFIG_ISDN_DRV_AVMB1_T1PCI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_CAPI $CONFIG_PCI]];set CONFIG_ISDN_DRV_AVMB1_T1PCI [sync_tristate $CONFIG_ISDN_DRV_AVMB1_T1PCI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x22 disabled {y}} else {configure_entry .menu43.config.f.x22 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu43.config.f.x22 disabled {m}} else {configure_entry .menu43.config.f.x22 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu43.config.f.x22 normal {m}} else {configure_entry .menu43.config.f.x22 disabled {m}}; configure_entry .menu43.config.f.x22 normal {n l}} else {configure_entry .menu43.config.f.x22 disabled {y n m l}}
	global CONFIG_ISDN_DRV_AVMB1_C4
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_CAPI $CONFIG_PCI]];set CONFIG_ISDN_DRV_AVMB1_C4 [sync_tristate $CONFIG_ISDN_DRV_AVMB1_C4 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x23 disabled {y}} else {configure_entry .menu43.config.f.x23 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu43.config.f.x23 disabled {m}} else {configure_entry .menu43.config.f.x23 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu43.config.f.x23 normal {m}} else {configure_entry .menu43.config.f.x23 disabled {m}}; configure_entry .menu43.config.f.x23 normal {n l}} else {configure_entry .menu43.config.f.x23 disabled {y n m l}}
	global CONFIG_PROC_FS
	global CONFIG_HYSDN
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_PROC_FS == 1 || $CONFIG_PROC_FS == 2 || $CONFIG_PROC_FS == 4)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M $CONFIG_PROC_FS]];set CONFIG_HYSDN [sync_tristate $CONFIG_HYSDN $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu43.config.f.x24 disabled {y}} else {configure_entry .menu43.config.f.x24 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu43.config.f.x24 disabled {m}} else {configure_entry .menu43.config.f.x24 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu43.config.f.x24 normal {m}} else {configure_entry .menu43.config.f.x24 disabled {m}}; configure_entry .menu43.config.f.x24 normal {n l}} else {configure_entry .menu43.config.f.x24 disabled {y n m l}}
	global CONFIG_HYSDN_CAPI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_HYSDN == 1 || $CONFIG_HYSDN == 2 || $CONFIG_HYSDN == 4) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_HYSDN $CONFIG_ISDN_CAPI]];set CONFIG_HYSDN_CAPI [sync_bool $CONFIG_HYSDN_CAPI $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu43.config.f.x25 disabled {y};} else {configure_entry .menu43.config.f.x25 normal {y};}; configure_entry .menu43.config.f.x25 normal {n l}} else {configure_entry .menu43.config.f.x25 disabled {y n l}}
}


proc update_define_menu43 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_ISDN_CAPI
	global CONFIG_ISDN_CAPI_CAPIFS
	global CONFIG_ISDN_DRV_EICON
set CONFIG_ISDN_DRV_EICON [expr $CONFIG_ISDN_DRV_EICON|16]
	global CONFIG_ISDN_DRV_EICON_ISA
set CONFIG_ISDN_DRV_EICON_ISA [expr $CONFIG_ISDN_DRV_EICON_ISA|16]
set CONFIG_ISDN_CAPI [expr $CONFIG_ISDN_CAPI|16]
	global CONFIG_ISDN_DRV_AVMB1_VERBOSE_REASON
set CONFIG_ISDN_DRV_AVMB1_VERBOSE_REASON [expr $CONFIG_ISDN_DRV_AVMB1_VERBOSE_REASON|16]
	global CONFIG_NET
	global CONFIG_ISDN
	global CONFIG_ISDN_DRV_ICN
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN]]; set CONFIG_ISDN_DRV_ICN [sync_tristate $CONFIG_ISDN_DRV_ICN $tmpvar_dep]; set CONFIG_ISDN_DRV_ICN [expr $CONFIG_ISDN_DRV_ICN&15]}
	global CONFIG_ISDN_DRV_PCBIT
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN]]; set CONFIG_ISDN_DRV_PCBIT [sync_tristate $CONFIG_ISDN_DRV_PCBIT $tmpvar_dep]; set CONFIG_ISDN_DRV_PCBIT [expr $CONFIG_ISDN_DRV_PCBIT&15]}
	global CONFIG_ISDN_DRV_SC
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN]]; set CONFIG_ISDN_DRV_SC [sync_tristate $CONFIG_ISDN_DRV_SC $tmpvar_dep]; set CONFIG_ISDN_DRV_SC [expr $CONFIG_ISDN_DRV_SC&15]}
	global CONFIG_ISDN_DRV_ACT2000
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN]]; set CONFIG_ISDN_DRV_ACT2000 [sync_tristate $CONFIG_ISDN_DRV_ACT2000 $tmpvar_dep]; set CONFIG_ISDN_DRV_ACT2000 [expr $CONFIG_ISDN_DRV_ACT2000&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0)} then {
	set CONFIG_ISDN_DRV_EICON [expr $CONFIG_ISDN_DRV_EICON&15]}
	global CONFIG_ISDN_DRV_EICON_OLD
	global CONFIG_PCI
	global CONFIG_ISDN_DRV_EICON_DIVAS
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_EICON != 0) && ($CONFIG_ISDN_DRV_EICON_OLD != 1) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN $CONFIG_PCI]]; set CONFIG_ISDN_DRV_EICON_DIVAS [sync_tristate $CONFIG_ISDN_DRV_EICON_DIVAS $tmpvar_dep]; set CONFIG_ISDN_DRV_EICON_DIVAS [expr $CONFIG_ISDN_DRV_EICON_DIVAS&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_EICON != 0) && ($CONFIG_ISDN_DRV_EICON_DIVAS != 1) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN]]; set CONFIG_ISDN_DRV_EICON_OLD [sync_tristate $CONFIG_ISDN_DRV_EICON_OLD $tmpvar_dep]; set CONFIG_ISDN_DRV_EICON_OLD [expr $CONFIG_ISDN_DRV_EICON_OLD&15]}
	global CONFIG_ISDN_DRV_EICON_PCI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_EICON != 0) && ($CONFIG_ISDN_DRV_EICON_DIVAS != 1) && ($CONFIG_ISDN_DRV_EICON_OLD != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_ISDN_DRV_EICON_PCI [sync_bool $CONFIG_ISDN_DRV_EICON_PCI $tmpvar_dep 0];set CONFIG_ISDN_DRV_EICON_PCI [expr $CONFIG_ISDN_DRV_EICON_PCI&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_EICON != 0) && ($CONFIG_ISDN_DRV_EICON_DIVAS != 1) && ($CONFIG_ISDN_DRV_EICON_OLD != 0)} then {
	set CONFIG_ISDN_DRV_EICON_ISA [expr $CONFIG_ISDN_DRV_EICON_ISA&15]}
	global CONFIG_EXPERIMENTAL
	global CONFIG_ISDN_DRV_TPAM
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_EXPERIMENTAL != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN $CONFIG_PCI]]; set CONFIG_ISDN_DRV_TPAM [sync_tristate $CONFIG_ISDN_DRV_TPAM $tmpvar_dep]; set CONFIG_ISDN_DRV_TPAM [expr $CONFIG_ISDN_DRV_TPAM&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ISDN_CAPI == 2)} then {set CONFIG_ISDN_CAPI 1}; set CONFIG_ISDN_CAPI [expr $CONFIG_ISDN_CAPI&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0)} then {
	set CONFIG_ISDN_DRV_AVMB1_VERBOSE_REASON [expr $CONFIG_ISDN_DRV_AVMB1_VERBOSE_REASON&15]}
	global CONFIG_ISDN_CAPI_MIDDLEWARE
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_ISDN_CAPI_MIDDLEWARE [sync_bool $CONFIG_ISDN_CAPI_MIDDLEWARE $tmpvar_dep 0];set CONFIG_ISDN_CAPI_MIDDLEWARE [expr $CONFIG_ISDN_CAPI_MIDDLEWARE&15]}
	global CONFIG_ISDN_CAPI_CAPI20
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_CAPI]]; set CONFIG_ISDN_CAPI_CAPI20 [sync_tristate $CONFIG_ISDN_CAPI_CAPI20 $tmpvar_dep]; set CONFIG_ISDN_CAPI_CAPI20 [expr $CONFIG_ISDN_CAPI_CAPI20&15]}
	global CONFIG_ISDN_CAPI_CAPIFS_BOOL
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI_MIDDLEWARE == 1) && ($CONFIG_ISDN_CAPI_CAPI20 == 1 || $CONFIG_ISDN_CAPI_CAPI20 == 2 || $CONFIG_ISDN_CAPI_CAPI20 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_CAPI_CAPI20]];set CONFIG_ISDN_CAPI_CAPIFS_BOOL [sync_bool $CONFIG_ISDN_CAPI_CAPIFS_BOOL $tmpvar_dep 1];set CONFIG_ISDN_CAPI_CAPIFS_BOOL [expr $CONFIG_ISDN_CAPI_CAPIFS_BOOL&15]}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI_MIDDLEWARE == 1) && ($CONFIG_ISDN_CAPI_CAPIFS_BOOL == 1)} then {set CONFIG_ISDN_CAPI_CAPIFS $CONFIG_ISDN_CAPI_CAPI20 }
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI_MIDDLEWARE == 1) && ($CONFIG_ISDN_CAPI_CAPIFS_BOOL != 1)} then {	global CONSTANT_N
set CONFIG_ISDN_CAPI_CAPIFS $CONSTANT_N }
	global CONFIG_ISDN_CAPI_CAPIDRV
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_CAPI $CONFIG_ISDN]]; set CONFIG_ISDN_CAPI_CAPIDRV [sync_tristate $CONFIG_ISDN_CAPI_CAPIDRV $tmpvar_dep]; set CONFIG_ISDN_CAPI_CAPIDRV [expr $CONFIG_ISDN_CAPI_CAPIDRV&15]}
	global CONFIG_ISDN_DRV_AVMB1_B1ISA
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_CAPI]]; set CONFIG_ISDN_DRV_AVMB1_B1ISA [sync_tristate $CONFIG_ISDN_DRV_AVMB1_B1ISA $tmpvar_dep]; set CONFIG_ISDN_DRV_AVMB1_B1ISA [expr $CONFIG_ISDN_DRV_AVMB1_B1ISA&15]}
	global CONFIG_ISDN_DRV_AVMB1_B1PCI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_CAPI $CONFIG_PCI]]; set CONFIG_ISDN_DRV_AVMB1_B1PCI [sync_tristate $CONFIG_ISDN_DRV_AVMB1_B1PCI $tmpvar_dep]; set CONFIG_ISDN_DRV_AVMB1_B1PCI [expr $CONFIG_ISDN_DRV_AVMB1_B1PCI&15]}
	global CONFIG_ISDN_DRV_AVMB1_B1PCIV4
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_DRV_AVMB1_B1PCI == 1 || $CONFIG_ISDN_DRV_AVMB1_B1PCI == 2 || $CONFIG_ISDN_DRV_AVMB1_B1PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_DRV_AVMB1_B1PCI]];set CONFIG_ISDN_DRV_AVMB1_B1PCIV4 [sync_bool $CONFIG_ISDN_DRV_AVMB1_B1PCIV4 $tmpvar_dep 1];set CONFIG_ISDN_DRV_AVMB1_B1PCIV4 [expr $CONFIG_ISDN_DRV_AVMB1_B1PCIV4&15]}
	global CONFIG_ISDN_DRV_AVMB1_T1ISA
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_CAPI]]; set CONFIG_ISDN_DRV_AVMB1_T1ISA [sync_tristate $CONFIG_ISDN_DRV_AVMB1_T1ISA $tmpvar_dep]; set CONFIG_ISDN_DRV_AVMB1_T1ISA [expr $CONFIG_ISDN_DRV_AVMB1_T1ISA&15]}
	global CONFIG_ISDN_DRV_AVMB1_B1PCMCIA
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_CAPI]]; set CONFIG_ISDN_DRV_AVMB1_B1PCMCIA [sync_tristate $CONFIG_ISDN_DRV_AVMB1_B1PCMCIA $tmpvar_dep]; set CONFIG_ISDN_DRV_AVMB1_B1PCMCIA [expr $CONFIG_ISDN_DRV_AVMB1_B1PCMCIA&15]}
	global CONFIG_PCMCIA
	global CONFIG_ISDN_DRV_AVMB1_AVM_CS
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_DRV_AVMB1_B1PCMCIA == 1 || $CONFIG_ISDN_DRV_AVMB1_B1PCMCIA == 2 || $CONFIG_ISDN_DRV_AVMB1_B1PCMCIA == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_DRV_AVMB1_B1PCMCIA $CONFIG_PCMCIA]]; set CONFIG_ISDN_DRV_AVMB1_AVM_CS [sync_tristate $CONFIG_ISDN_DRV_AVMB1_AVM_CS $tmpvar_dep]; set CONFIG_ISDN_DRV_AVMB1_AVM_CS [expr $CONFIG_ISDN_DRV_AVMB1_AVM_CS&15]}
	global CONFIG_ISDN_DRV_AVMB1_T1PCI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_CAPI $CONFIG_PCI]]; set CONFIG_ISDN_DRV_AVMB1_T1PCI [sync_tristate $CONFIG_ISDN_DRV_AVMB1_T1PCI $tmpvar_dep]; set CONFIG_ISDN_DRV_AVMB1_T1PCI [expr $CONFIG_ISDN_DRV_AVMB1_T1PCI&15]}
	global CONFIG_ISDN_DRV_AVMB1_C4
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISDN_CAPI $CONFIG_PCI]]; set CONFIG_ISDN_DRV_AVMB1_C4 [sync_tristate $CONFIG_ISDN_DRV_AVMB1_C4 $tmpvar_dep]; set CONFIG_ISDN_DRV_AVMB1_C4 [expr $CONFIG_ISDN_DRV_AVMB1_C4&15]}
	global CONFIG_PROC_FS
	global CONFIG_HYSDN
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_PROC_FS == 1 || $CONFIG_PROC_FS == 2 || $CONFIG_PROC_FS == 4)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M $CONFIG_PROC_FS]]; set CONFIG_HYSDN [sync_tristate $CONFIG_HYSDN $tmpvar_dep]; set CONFIG_HYSDN [expr $CONFIG_HYSDN&15]}
	global CONFIG_HYSDN_CAPI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_HYSDN == 1 || $CONFIG_HYSDN == 2 || $CONFIG_HYSDN == 4) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_HYSDN $CONFIG_ISDN_CAPI]];set CONFIG_HYSDN_CAPI [sync_bool $CONFIG_HYSDN_CAPI $tmpvar_dep 1];set CONFIG_HYSDN_CAPI [expr $CONFIG_HYSDN_CAPI&15]}
}


menu_option menu44 44 "Old CD-ROM drivers (not SCSI, not IDE)"
proc menu44 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 44}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 44]]
	message $w.m -width 400 -aspect 300 -text \
		"Old CD-ROM drivers (not SCSI, not IDE)"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Old CD-ROM drivers (not SCSI, not IDE)" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 44; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 44; menu45 .menu45 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 44"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 44; menu43 .menu43 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 44; menu43 .menu43 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 44 0 "Support non-SCSI/IDE/ATAPI CDROM drives" CONFIG_CD_NO_IDESCSI
	tristate $w.config.f 44 1 "  Aztech/Orchid/Okano/Wearnes/TXC/CyDROM  CDROM support" CONFIG_AZTCD
	tristate $w.config.f 44 2 "  Goldstar R420 CDROM support" CONFIG_GSCD
	tristate $w.config.f 44 3 "  Matsushita/Panasonic/Creative, Longshine, TEAC CDROM support" CONFIG_SBPCD
	bool $w.config.f 44 4 "    Matsushita/Panasonic, ... second CDROM controller support" CONFIG_SBPCD2
	bool $w.config.f 44 5 "    Matsushita/Panasonic, ... third CDROM controller support" CONFIG_SBPCD3
	bool $w.config.f 44 6 "    Matsushita/Panasonic, ... fourth CDROM controller support" CONFIG_SBPCD4
	tristate $w.config.f 44 7 "  Mitsumi (standard) \[no XA/Multisession\] CDROM support" CONFIG_MCD
	int $w.config.f 44 8 "MCD IRQ" CONFIG_MCD_IRQ
	hex $w.config.f 44 9 "MCD I/O base" CONFIG_MCD_BASE
	tristate $w.config.f 44 10 "  Mitsumi \[XA/MultiSession\] CDROM support" CONFIG_MCDX
	tristate $w.config.f 44 11 "  Optics Storage DOLPHIN 8000AT CDROM support" CONFIG_OPTCD
	tristate $w.config.f 44 12 "  Philips/LMS CM206 CDROM support" CONFIG_CM206
	tristate $w.config.f 44 13 "  Sanyo CDR-H94A CDROM support" CONFIG_SJCD
	tristate $w.config.f 44 14 "  ISP16/MAD16/Mozart soft configurable cdrom interface support" CONFIG_ISP16_CDI
	tristate $w.config.f 44 15 "  Sony CDU31A/CDU33A CDROM support" CONFIG_CDU31A
	tristate $w.config.f 44 16 "  Sony CDU535 CDROM support" CONFIG_CDU535



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu44 {} {
	global CONFIG_MODULES
	global CONFIG_CD_NO_IDESCSI
	global CONFIG_AZTCD
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {
	configure_entry .menu44.config.f.x1 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu44.config.f.x1 normal {m}} else {configure_entry .menu44.config.f.x1 disabled {m}}; configure_entry .menu44.config.f.x1 normal {n l}} else {configure_entry .menu44.config.f.x1 disabled {y n m l}}
	global CONFIG_GSCD
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {
	configure_entry .menu44.config.f.x2 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu44.config.f.x2 normal {m}} else {configure_entry .menu44.config.f.x2 disabled {m}}; configure_entry .menu44.config.f.x2 normal {n l}} else {configure_entry .menu44.config.f.x2 disabled {y n m l}}
	global CONFIG_SBPCD
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {
	configure_entry .menu44.config.f.x3 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu44.config.f.x3 normal {m}} else {configure_entry .menu44.config.f.x3 disabled {m}}; configure_entry .menu44.config.f.x3 normal {n l}} else {configure_entry .menu44.config.f.x3 disabled {y n m l}}
	global CONFIG_SBPCD2
	if {($CONFIG_CD_NO_IDESCSI != 0) && ($CONFIG_SBPCD == 1)} then {
	configure_entry .menu44.config.f.x4 normal {n l y}} else {configure_entry .menu44.config.f.x4 disabled {y n l}}
	global CONFIG_SBPCD3
	if {($CONFIG_CD_NO_IDESCSI != 0) && ($CONFIG_SBPCD == 1) && ($CONFIG_SBPCD2 == 1)} then {
	configure_entry .menu44.config.f.x5 normal {n l y}} else {configure_entry .menu44.config.f.x5 disabled {y n l}}
	global CONFIG_SBPCD4
	if {($CONFIG_CD_NO_IDESCSI != 0) && ($CONFIG_SBPCD == 1) && ($CONFIG_SBPCD2 == 1) && ($CONFIG_SBPCD3 == 1)} then {
	configure_entry .menu44.config.f.x6 normal {n l y}} else {configure_entry .menu44.config.f.x6 disabled {y n l}}
	global CONFIG_MCD
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {
	configure_entry .menu44.config.f.x7 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu44.config.f.x7 normal {m}} else {configure_entry .menu44.config.f.x7 disabled {m}}; configure_entry .menu44.config.f.x7 normal {n l}} else {configure_entry .menu44.config.f.x7 disabled {y n m l}}
	global CONFIG_MCD_IRQ
	if {($CONFIG_CD_NO_IDESCSI != 0) && ($CONFIG_MCD != 0)} then {.menu44.config.f.x8.x configure -state normal -foreground [ cget .ref -foreground ]; .menu44.config.f.x8.l configure -state normal; } else {.menu44.config.f.x8.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu44.config.f.x8.l configure -state disabled}
	global CONFIG_MCD_BASE
	if {($CONFIG_CD_NO_IDESCSI != 0) && ($CONFIG_MCD != 0)} then {.menu44.config.f.x9.x configure -state normal -foreground [ cget .ref -foreground ]; .menu44.config.f.x9.l configure -state normal; } else {.menu44.config.f.x9.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu44.config.f.x9.l configure -state disabled}
	global CONFIG_MCDX
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {
	configure_entry .menu44.config.f.x10 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu44.config.f.x10 normal {m}} else {configure_entry .menu44.config.f.x10 disabled {m}}; configure_entry .menu44.config.f.x10 normal {n l}} else {configure_entry .menu44.config.f.x10 disabled {y n m l}}
	global CONFIG_OPTCD
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {
	configure_entry .menu44.config.f.x11 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu44.config.f.x11 normal {m}} else {configure_entry .menu44.config.f.x11 disabled {m}}; configure_entry .menu44.config.f.x11 normal {n l}} else {configure_entry .menu44.config.f.x11 disabled {y n m l}}
	global CONFIG_CM206
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {
	configure_entry .menu44.config.f.x12 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu44.config.f.x12 normal {m}} else {configure_entry .menu44.config.f.x12 disabled {m}}; configure_entry .menu44.config.f.x12 normal {n l}} else {configure_entry .menu44.config.f.x12 disabled {y n m l}}
	global CONFIG_SJCD
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {
	configure_entry .menu44.config.f.x13 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu44.config.f.x13 normal {m}} else {configure_entry .menu44.config.f.x13 disabled {m}}; configure_entry .menu44.config.f.x13 normal {n l}} else {configure_entry .menu44.config.f.x13 disabled {y n m l}}
	global CONFIG_ISP16_CDI
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {
	configure_entry .menu44.config.f.x14 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu44.config.f.x14 normal {m}} else {configure_entry .menu44.config.f.x14 disabled {m}}; configure_entry .menu44.config.f.x14 normal {n l}} else {configure_entry .menu44.config.f.x14 disabled {y n m l}}
	global CONFIG_CDU31A
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {
	configure_entry .menu44.config.f.x15 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu44.config.f.x15 normal {m}} else {configure_entry .menu44.config.f.x15 disabled {m}}; configure_entry .menu44.config.f.x15 normal {n l}} else {configure_entry .menu44.config.f.x15 disabled {y n m l}}
	global CONFIG_CDU535
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {
	configure_entry .menu44.config.f.x16 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu44.config.f.x16 normal {m}} else {configure_entry .menu44.config.f.x16 disabled {m}}; configure_entry .menu44.config.f.x16 normal {n l}} else {configure_entry .menu44.config.f.x16 disabled {y n m l}}
}


proc update_define_menu44 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_AZTCD
	global CONFIG_GSCD
	global CONFIG_SBPCD
	global CONFIG_MCD
	global CONFIG_MCDX
	global CONFIG_OPTCD
	global CONFIG_CM206
	global CONFIG_SJCD
	global CONFIG_ISP16_CDI
	global CONFIG_CDU31A
	global CONFIG_CDU535
set CONFIG_AZTCD [expr $CONFIG_AZTCD|16]
set CONFIG_GSCD [expr $CONFIG_GSCD|16]
set CONFIG_SBPCD [expr $CONFIG_SBPCD|16]
	global CONFIG_SBPCD2
set CONFIG_SBPCD2 [expr $CONFIG_SBPCD2|16]
	global CONFIG_SBPCD3
set CONFIG_SBPCD3 [expr $CONFIG_SBPCD3|16]
	global CONFIG_SBPCD4
set CONFIG_SBPCD4 [expr $CONFIG_SBPCD4|16]
set CONFIG_MCD [expr $CONFIG_MCD|16]
set CONFIG_MCDX [expr $CONFIG_MCDX|16]
set CONFIG_OPTCD [expr $CONFIG_OPTCD|16]
set CONFIG_CM206 [expr $CONFIG_CM206|16]
set CONFIG_SJCD [expr $CONFIG_SJCD|16]
set CONFIG_ISP16_CDI [expr $CONFIG_ISP16_CDI|16]
set CONFIG_CDU31A [expr $CONFIG_CDU31A|16]
set CONFIG_CDU535 [expr $CONFIG_CDU535|16]
	global CONFIG_CD_NO_IDESCSI
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_AZTCD == 2)} then {set CONFIG_AZTCD 1}; set CONFIG_AZTCD [expr $CONFIG_AZTCD&15]}
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_GSCD == 2)} then {set CONFIG_GSCD 1}; set CONFIG_GSCD [expr $CONFIG_GSCD&15]}
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_SBPCD == 2)} then {set CONFIG_SBPCD 1}; set CONFIG_SBPCD [expr $CONFIG_SBPCD&15]}
	if {($CONFIG_CD_NO_IDESCSI != 0) && ($CONFIG_SBPCD == 1)} then {
	set CONFIG_SBPCD2 [expr $CONFIG_SBPCD2&15]}
	if {($CONFIG_CD_NO_IDESCSI != 0) && ($CONFIG_SBPCD == 1) && ($CONFIG_SBPCD2 == 1)} then {
	set CONFIG_SBPCD3 [expr $CONFIG_SBPCD3&15]}
	if {($CONFIG_CD_NO_IDESCSI != 0) && ($CONFIG_SBPCD == 1) && ($CONFIG_SBPCD2 == 1) && ($CONFIG_SBPCD3 == 1)} then {
	set CONFIG_SBPCD4 [expr $CONFIG_SBPCD4&15]}
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_MCD == 2)} then {set CONFIG_MCD 1}; set CONFIG_MCD [expr $CONFIG_MCD&15]}
	global CONFIG_MCD_IRQ
	if {($CONFIG_CD_NO_IDESCSI != 0) && ($CONFIG_MCD != 0)} then {validate_int CONFIG_MCD_IRQ "$CONFIG_MCD_IRQ" 11}
	global CONFIG_MCD_BASE
	if {($CONFIG_CD_NO_IDESCSI != 0) && ($CONFIG_MCD != 0)} then {validate_hex CONFIG_MCD_BASE "$CONFIG_MCD_BASE" 300}
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_MCDX == 2)} then {set CONFIG_MCDX 1}; set CONFIG_MCDX [expr $CONFIG_MCDX&15]}
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_OPTCD == 2)} then {set CONFIG_OPTCD 1}; set CONFIG_OPTCD [expr $CONFIG_OPTCD&15]}
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_CM206 == 2)} then {set CONFIG_CM206 1}; set CONFIG_CM206 [expr $CONFIG_CM206&15]}
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_SJCD == 2)} then {set CONFIG_SJCD 1}; set CONFIG_SJCD [expr $CONFIG_SJCD&15]}
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ISP16_CDI == 2)} then {set CONFIG_ISP16_CDI 1}; set CONFIG_ISP16_CDI [expr $CONFIG_ISP16_CDI&15]}
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_CDU31A == 2)} then {set CONFIG_CDU31A 1}; set CONFIG_CDU31A [expr $CONFIG_CDU31A&15]}
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_CDU535 == 2)} then {set CONFIG_CDU535 1}; set CONFIG_CDU535 [expr $CONFIG_CDU535&15]}
}


menu_option menu45 45 "Character devices"
proc menu45 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 45}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 45]]
	message $w.m -width 400 -aspect 300 -text \
		"Character devices"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Character devices" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 45; break"
	set nextscript "catch {focus $oldFocus}; menu46 .menu46 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 45"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 45; menu44 .menu44 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 45; menu44 .menu44 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 45 0 "68328 serial support" CONFIG_68328_SERIAL
	bool $w.config.f 45 1 "Support RTS/CTS on 68328 serial support" CONFIG_68328_SERIAL_RTS_CTS
	bool $w.config.f 45 2 "68328 digitizer support" CONFIG_68328_DIGI
	bool $w.config.f 45 3 "68328 serial support" CONFIG_68328_SERIAL
	bool $w.config.f 45 4 "Support RTS/CTS on 68328 serial support" CONFIG_68328_SERIAL_RTS_CTS
	bool $w.config.f 45 5 "68681 serial support" CONFIG_68681_SERIAL
	bool $w.config.f 45 6 "68328 serial support" CONFIG_68328_SERIAL
	bool $w.config.f 45 7 "68332 serial support" CONFIG_68332_SERIAL
	bool $w.config.f 45 8 "68302 serial support" CONFIG_68302_SERIAL
	bool $w.config.f 45 9 "68360 Serial console" CONFIG_SERIAL_CONSOLE
	global tmpvar_13
	minimenu $w.config.f 45 10 "Initial serial console speed" tmpvar_13 CONFIG_CONSOLE_9600
	menu $w.config.f.x10.x.menu -tearoffcommand "menutitle \"Initial serial console speed\""
	$w.config.f.x10.x.menu add radiobutton -label "9600" -variable tmpvar_13 -value "9600" -command "update_active"
	$w.config.f.x10.x.menu add radiobutton -label "19200" -variable tmpvar_13 -value "19200" -command "update_active"
	$w.config.f.x10.x.menu add radiobutton -label "115200" -variable tmpvar_13 -value "115200" -command "update_active"
	menusplit $w $w.config.f.x10.x.menu 3
	bool $w.config.f 45 11 "ColdFire serial support" CONFIG_COLDFIRE_SERIAL
	bool $w.config.f 45 12 "ColdFire MBUS Support" CONFIG_MCF_MBUS
	bool $w.config.f 45 13 "Support for TEXT based LCD driver" CONFIG_LCDTXT
	bool $w.config.f 45 14 "Support for ColdFire DMA driven LCD driver" CONFIG_LCDDMA
	bool $w.config.f 45 15 "Support for ColdFire DMA driven DAC0800 driver" CONFIG_DAC0800
	bool $w.config.f 45 16 "Support for ColdFire DMA driven I2S DAC driver" CONFIG_DACI2S
	bool $w.config.f 45 17 "Support for ColdFire T6963 driver" CONFIG_T6963
	bool $w.config.f 45 18 "   Use PIO mode" CONFIG_T6963_PIO
	bool $w.config.f 45 19 "LED Manager support" CONFIG_LEDMAN
	bool $w.config.f 45 20 "Virtual terminal" CONFIG_VT
	bool $w.config.f 45 21 "  Support for console on virtual terminal" CONFIG_VT_CONSOLE
	tristate $w.config.f 45 22 "Standard/generic (8250/16550 and compatible UARTs) serial support" CONFIG_SERIAL
	bool $w.config.f 45 23 "  Support for console on serial port" CONFIG_SERIAL_CONSOLE
	bool $w.config.f 45 24 "  Support for serial ports defined by ACPI tables" CONFIG_SERIAL_ACPI
	dep_bool $w.config.f 45 25 "Extended dumb serial driver options" CONFIG_SERIAL_EXTENDED
	bool $w.config.f 45 26 "  Support more than 4 serial ports" CONFIG_SERIAL_MANY_PORTS
	bool $w.config.f 45 27 "  Support for sharing serial interrupts" CONFIG_SERIAL_SHARE_IRQ
	bool $w.config.f 45 28 "  Autodetect IRQ on standard ports (unsafe)" CONFIG_SERIAL_DETECT_IRQ
	bool $w.config.f 45 29 "  Support special multiport boards" CONFIG_SERIAL_MULTIPORT
	bool $w.config.f 45 30 "  Support the Bell Technologies HUB6 card" CONFIG_HUB6
	bool $w.config.f 45 31 "Non-standard serial port support" CONFIG_SERIAL_NONSTANDARD
	tristate $w.config.f 45 32 "  Computone IntelliPort Plus serial support" CONFIG_COMPUTONE
	tristate $w.config.f 45 33 "  Comtrol Rocketport support" CONFIG_ROCKETPORT
	tristate $w.config.f 45 34 "  Cyclades async mux support" CONFIG_CYCLADES
	bool $w.config.f 45 35 "    Cyclades-Z interrupt mode operation (EXPERIMENTAL)" CONFIG_CYZ_INTR
	tristate $w.config.f 45 36 "  Digiboard Intelligent Async Support" CONFIG_DIGIEPCA
	tristate $w.config.f 45 37 "  Digiboard PC/Xx Support" CONFIG_DIGI
	tristate $w.config.f 45 38 "  Hayes ESP serial port support" CONFIG_ESPSERIAL
	tristate $w.config.f 45 39 "  Moxa Intellio support" CONFIG_MOXA_INTELLIO
	tristate $w.config.f 45 40 "  Moxa SmartIO support" CONFIG_MOXA_SMARTIO
	dep_tristate $w.config.f 45 41 "  Multi-Tech multiport card support (EXPERIMENTAL)" CONFIG_ISI
	tristate $w.config.f 45 42 "  Microgate SyncLink card support" CONFIG_SYNCLINK
	tristate $w.config.f 45 43 "  HDLC line discipline support" CONFIG_N_HDLC
	tristate $w.config.f 45 44 "  SDL RISCom/8 card support" CONFIG_RISCOM8
	tristate $w.config.f 45 45 "  Specialix IO8+ card support" CONFIG_SPECIALIX
	bool $w.config.f 45 46 "  Specialix DTR/RTS pin is RTS" CONFIG_SPECIALIX_RTSCTS
	tristate $w.config.f 45 47 "  Specialix SX (and SI) card support" CONFIG_SX
	tristate $w.config.f 45 48 "  Specialix RIO system support" CONFIG_RIO
	bool $w.config.f 45 49 "    Support really old RIO/PCI cards" CONFIG_RIO_OLDPCI
	bool $w.config.f 45 50 "  Stallion multiport serial support" CONFIG_STALDRV
	tristate $w.config.f 45 51 "    Stallion EasyIO or EC8/32 support" CONFIG_STALLION
	tristate $w.config.f 45 52 "    Stallion EC8/64, ONboard, Brumby support" CONFIG_ISTALLION
	tristate $w.config.f 45 53 "Commodore A2232 serial support (EXPERIMENTAL)" CONFIG_A2232
	bool $w.config.f 45 54 "Unix98 PTY support" CONFIG_UNIX98_PTYS
	int $w.config.f 45 55 "Maximum number of Unix98 PTYs in use (0-2048)" CONFIG_UNIX98_PTY_COUNT
	dep_tristate $w.config.f 45 56 "Parallel printer support" CONFIG_PRINTER
	bool $w.config.f 45 57 "  Support for console on line printer" CONFIG_LP_CONSOLE
	dep_tristate $w.config.f 45 58 "Support for user-space parallel port device drivers" CONFIG_PPDEV
	submenu $w.config.f 45 59 "I2C support" 46
	submenu $w.config.f 45 60 "Mice" 47
	submenu $w.config.f 45 61 "Joysticks" 48
	tristate $w.config.f 45 62 "QIC-02 tape support" CONFIG_QIC02_TAPE
	bool $w.config.f 45 63 "  Do you want runtime configuration for QIC-02" CONFIG_QIC02_DYNCONF
	comment $w.config.f 45 64 "  Edit configuration parameters in ./include/linux/tpqic02.h!"
	comment $w.config.f 45 65 "  Setting runtime QIC-02 configuration is done with qic02conf"
	comment $w.config.f 45 66 "  from the tpqic02-support package.  It is available at"
	comment $w.config.f 45 67 "  metalab.unc.edu or ftp://titus.cfw.com/pub/Linux/util/"
	submenu $w.config.f 45 68 "Watchdog Cards" 49
	dep_tristate $w.config.f 45 69 "Intel i8x0 Random Number Generator support" CONFIG_INTEL_RNG
	tristate $w.config.f 45 70 "/dev/nvram support" CONFIG_NVRAM
	tristate $w.config.f 45 71 "Enhanced Real Time Clock Support" CONFIG_RTC
	tristate $w.config.f 45 72 "Double Talk PC internal speech card support" CONFIG_DTLK
	tristate $w.config.f 45 73 "Siemens R3964 line discipline" CONFIG_R3964
	tristate $w.config.f 45 74 "Applicom intelligent fieldbus card support" CONFIG_APPLICOM
	dep_tristate $w.config.f 45 75 "Sony Vaio Programmable I/O Control Device support" CONFIG_SONYPI
	submenu $w.config.f 45 76 "Ftape, the floppy tape device driver" 50
	dep_tristate $w.config.f 45 77 "/dev/agpgart (AGP Support)" CONFIG_AGP
	bool $w.config.f 45 78 "  Intel 440LX/BX/GX and I815/I830M/I840/I850 support" CONFIG_AGP_INTEL
	bool $w.config.f 45 79 "  Intel I810/I815/I830M (on-board) support" CONFIG_AGP_I810
	bool $w.config.f 45 80 "  VIA chipset support" CONFIG_AGP_VIA
	bool $w.config.f 45 81 "  AMD Irongate, 761, and 762 support" CONFIG_AGP_AMD
	bool $w.config.f 45 82 "  Generic SiS support" CONFIG_AGP_SIS
	bool $w.config.f 45 83 "  ALI chipset support" CONFIG_AGP_ALI
	bool $w.config.f 45 84 "  Serverworks LE/HE support" CONFIG_AGP_SWORKS
	bool $w.config.f 45 85 "Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)" CONFIG_DRM
	tristate $w.config.f 45 86 "  3dfx Banshee/Voodoo3+" CONFIG_DRM_TDFX
	tristate $w.config.f 45 87 "  3dlabs GMX 2000" CONFIG_DRM_GAMMA
	tristate $w.config.f 45 88 "  ATI Rage 128" CONFIG_DRM_R128
	dep_tristate $w.config.f 45 89 "  ATI Radeon" CONFIG_DRM_RADEON
	dep_tristate $w.config.f 45 90 "  Intel I810" CONFIG_DRM_I810
	dep_tristate $w.config.f 45 91 "  Matrox g200/g400" CONFIG_DRM_MGA
	dep_tristate $w.config.f 45 92 "  SiS" CONFIG_DRM_SIS
	submenu $w.config.f 45 93 "PCMCIA character devices" 51



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu45 {} {
	global CONFIG_M68328
	global CONFIG_68328_SERIAL
	if {($CONFIG_M68328 == 1)} then {
	configure_entry .menu45.config.f.x0 normal {n l y}} else {configure_entry .menu45.config.f.x0 disabled {y n l}}
	global CONFIG_68328_SERIAL_RTS_CTS
	if {($CONFIG_M68328 == 1) && ($CONFIG_68328_SERIAL == 1)} then {
	configure_entry .menu45.config.f.x1 normal {n l y}} else {configure_entry .menu45.config.f.x1 disabled {y n l}}
	global CONFIG_PILOT
	global CONFIG_68328_DIGI
	if {($CONFIG_M68328 == 1) && ($CONFIG_PILOT == 1)} then {
	configure_entry .menu45.config.f.x2 normal {n l y}} else {configure_entry .menu45.config.f.x2 disabled {y n l}}
	global CONFIG_M68EZ328
	if {($CONFIG_M68EZ328 == 1)} then {
	configure_entry .menu45.config.f.x3 normal {n l y}} else {configure_entry .menu45.config.f.x3 disabled {y n l}}
	if {($CONFIG_M68EZ328 == 1) && ($CONFIG_68328_SERIAL == 1)} then {
	configure_entry .menu45.config.f.x4 normal {n l y}} else {configure_entry .menu45.config.f.x4 disabled {y n l}}
	global CONFIG_M68EZ328ADS
	global CONFIG_68681_SERIAL
	if {($CONFIG_M68EZ328 == 1) && ($CONFIG_M68EZ328ADS == 1)} then {
	configure_entry .menu45.config.f.x5 normal {n l y}} else {configure_entry .menu45.config.f.x5 disabled {y n l}}
	global CONFIG_M68VZ328
	if {($CONFIG_M68VZ328 == 1)} then {
	configure_entry .menu45.config.f.x6 normal {n l y}} else {configure_entry .menu45.config.f.x6 disabled {y n l}}
	global CONFIG_M68332
	global CONFIG_68332_SERIAL
	if {($CONFIG_M68332 == 1)} then {
	configure_entry .menu45.config.f.x7 normal {n l y}} else {configure_entry .menu45.config.f.x7 disabled {y n l}}
	global CONFIG_M68EN302
	global CONFIG_68302_SERIAL
	if {($CONFIG_M68EN302 == 1)} then {
	configure_entry .menu45.config.f.x8 normal {n l y}} else {configure_entry .menu45.config.f.x8 disabled {y n l}}
	global CONFIG_M68360_SMC_UART
	global CONFIG_SERIAL_CONSOLE
	if {($CONFIG_M68360_SMC_UART == 1)} then {
	configure_entry .menu45.config.f.x9 normal {n l y}} else {configure_entry .menu45.config.f.x9 disabled {y n l}}
	if {($CONFIG_M68360_SMC_UART == 1) && ($CONFIG_SERIAL_CONSOLE == 1)} then {configure_entry .menu45.config.f.x10 normal {x l}} else {configure_entry .menu45.config.f.x10 disabled {x l}}
	global CONFIG_COLDFIRE
	global CONFIG_COLDFIRE_SERIAL
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu45.config.f.x11 normal {n l y}} else {configure_entry .menu45.config.f.x11 disabled {y n l}}
	global CONFIG_MCF_MBUS
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu45.config.f.x12 normal {n l y}} else {configure_entry .menu45.config.f.x12 disabled {y n l}}
	global CONFIG_LCDTXT
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu45.config.f.x13 normal {n l y}} else {configure_entry .menu45.config.f.x13 disabled {y n l}}
	global CONFIG_LCDDMA
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu45.config.f.x14 normal {n l y}} else {configure_entry .menu45.config.f.x14 disabled {y n l}}
	global CONFIG_DAC0800
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu45.config.f.x15 normal {n l y}} else {configure_entry .menu45.config.f.x15 disabled {y n l}}
	global CONFIG_DACI2S
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu45.config.f.x16 normal {n l y}} else {configure_entry .menu45.config.f.x16 disabled {y n l}}
	global CONFIG_T6963
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu45.config.f.x17 normal {n l y}} else {configure_entry .menu45.config.f.x17 disabled {y n l}}
	global CONFIG_T6963_PIO
	if {($CONFIG_COLDFIRE == 1) && ($CONFIG_T6963 == 1)} then {
	configure_entry .menu45.config.f.x18 normal {n l y}} else {configure_entry .menu45.config.f.x18 disabled {y n l}}
	global CONFIG_VT
	global CONFIG_VT_CONSOLE
	if {($CONFIG_VT == 1)} then {
	configure_entry .menu45.config.f.x21 normal {n l y}} else {configure_entry .menu45.config.f.x21 disabled {y n l}}
	global CONFIG_SERIAL
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x22 normal {m}} else {configure_entry .menu45.config.f.x22 disabled {m}}
	if {($CONFIG_SERIAL == 1)} then {
	configure_entry .menu45.config.f.x23 normal {n l y}} else {configure_entry .menu45.config.f.x23 disabled {y n l}}
	global CONFIG_ACPI
	global CONFIG_SERIAL_ACPI
	if {($CONFIG_ACPI == 1)} then {
	configure_entry .menu45.config.f.x24 normal {n l y}} else {configure_entry .menu45.config.f.x24 disabled {y n l}}
	global CONFIG_SERIAL_EXTENDED
	if {($CONFIG_SERIAL == 1 || $CONFIG_SERIAL == 2 || $CONFIG_SERIAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SERIAL]];set CONFIG_SERIAL_EXTENDED [sync_bool $CONFIG_SERIAL_EXTENDED $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu45.config.f.x25 disabled {y};} else {configure_entry .menu45.config.f.x25 normal {y};}; configure_entry .menu45.config.f.x25 normal {n l}} else {configure_entry .menu45.config.f.x25 disabled {y n l}}
	global CONFIG_SERIAL_MANY_PORTS
	if {($CONFIG_SERIAL_EXTENDED == 1)} then {
	configure_entry .menu45.config.f.x26 normal {n l y}} else {configure_entry .menu45.config.f.x26 disabled {y n l}}
	global CONFIG_SERIAL_SHARE_IRQ
	if {($CONFIG_SERIAL_EXTENDED == 1)} then {
	configure_entry .menu45.config.f.x27 normal {n l y}} else {configure_entry .menu45.config.f.x27 disabled {y n l}}
	global CONFIG_SERIAL_DETECT_IRQ
	if {($CONFIG_SERIAL_EXTENDED == 1)} then {
	configure_entry .menu45.config.f.x28 normal {n l y}} else {configure_entry .menu45.config.f.x28 disabled {y n l}}
	global CONFIG_SERIAL_MULTIPORT
	if {($CONFIG_SERIAL_EXTENDED == 1)} then {
	configure_entry .menu45.config.f.x29 normal {n l y}} else {configure_entry .menu45.config.f.x29 disabled {y n l}}
	global CONFIG_HUB6
	if {($CONFIG_SERIAL_EXTENDED == 1)} then {
	configure_entry .menu45.config.f.x30 normal {n l y}} else {configure_entry .menu45.config.f.x30 disabled {y n l}}
	global CONFIG_SERIAL_NONSTANDARD
	global CONFIG_COMPUTONE
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {
	configure_entry .menu45.config.f.x32 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x32 normal {m}} else {configure_entry .menu45.config.f.x32 disabled {m}}; configure_entry .menu45.config.f.x32 normal {n l}} else {configure_entry .menu45.config.f.x32 disabled {y n m l}}
	global CONFIG_ROCKETPORT
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {
	configure_entry .menu45.config.f.x33 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x33 normal {m}} else {configure_entry .menu45.config.f.x33 disabled {m}}; configure_entry .menu45.config.f.x33 normal {n l}} else {configure_entry .menu45.config.f.x33 disabled {y n m l}}
	global CONFIG_CYCLADES
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {
	configure_entry .menu45.config.f.x34 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x34 normal {m}} else {configure_entry .menu45.config.f.x34 disabled {m}}; configure_entry .menu45.config.f.x34 normal {n l}} else {configure_entry .menu45.config.f.x34 disabled {y n m l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_CYZ_INTR
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_EXPERIMENTAL == 1 && $CONFIG_CYCLADES != 0)} then {
	configure_entry .menu45.config.f.x35 normal {n l y}} else {configure_entry .menu45.config.f.x35 disabled {y n l}}
	global CONFIG_DIGIEPCA
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {
	configure_entry .menu45.config.f.x36 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x36 normal {m}} else {configure_entry .menu45.config.f.x36 disabled {m}}; configure_entry .menu45.config.f.x36 normal {n l}} else {configure_entry .menu45.config.f.x36 disabled {y n m l}}
	global CONFIG_DIGI
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_DIGIEPCA == 0)} then {
	configure_entry .menu45.config.f.x37 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x37 normal {m}} else {configure_entry .menu45.config.f.x37 disabled {m}}; configure_entry .menu45.config.f.x37 normal {n l}} else {configure_entry .menu45.config.f.x37 disabled {y n m l}}
	global CONFIG_ESPSERIAL
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {
	configure_entry .menu45.config.f.x38 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x38 normal {m}} else {configure_entry .menu45.config.f.x38 disabled {m}}; configure_entry .menu45.config.f.x38 normal {n l}} else {configure_entry .menu45.config.f.x38 disabled {y n m l}}
	global CONFIG_MOXA_INTELLIO
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {
	configure_entry .menu45.config.f.x39 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x39 normal {m}} else {configure_entry .menu45.config.f.x39 disabled {m}}; configure_entry .menu45.config.f.x39 normal {n l}} else {configure_entry .menu45.config.f.x39 disabled {y n m l}}
	global CONFIG_MOXA_SMARTIO
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {
	configure_entry .menu45.config.f.x40 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x40 normal {m}} else {configure_entry .menu45.config.f.x40 disabled {m}}; configure_entry .menu45.config.f.x40 normal {n l}} else {configure_entry .menu45.config.f.x40 disabled {y n m l}}
	global CONFIG_ISI
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M]];set CONFIG_ISI [sync_tristate $CONFIG_ISI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu45.config.f.x41 disabled {y}} else {configure_entry .menu45.config.f.x41 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu45.config.f.x41 disabled {m}} else {configure_entry .menu45.config.f.x41 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x41 normal {m}} else {configure_entry .menu45.config.f.x41 disabled {m}}; configure_entry .menu45.config.f.x41 normal {n l}} else {configure_entry .menu45.config.f.x41 disabled {y n m l}}
	global CONFIG_SYNCLINK
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {
	configure_entry .menu45.config.f.x42 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x42 normal {m}} else {configure_entry .menu45.config.f.x42 disabled {m}}; configure_entry .menu45.config.f.x42 normal {n l}} else {configure_entry .menu45.config.f.x42 disabled {y n m l}}
	global CONFIG_N_HDLC
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {
	configure_entry .menu45.config.f.x43 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x43 normal {m}} else {configure_entry .menu45.config.f.x43 disabled {m}}; configure_entry .menu45.config.f.x43 normal {n l}} else {configure_entry .menu45.config.f.x43 disabled {y n m l}}
	global CONFIG_RISCOM8
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {
	configure_entry .menu45.config.f.x44 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x44 normal {m}} else {configure_entry .menu45.config.f.x44 disabled {m}}; configure_entry .menu45.config.f.x44 normal {n l}} else {configure_entry .menu45.config.f.x44 disabled {y n m l}}
	global CONFIG_SPECIALIX
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {
	configure_entry .menu45.config.f.x45 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x45 normal {m}} else {configure_entry .menu45.config.f.x45 disabled {m}}; configure_entry .menu45.config.f.x45 normal {n l}} else {configure_entry .menu45.config.f.x45 disabled {y n m l}}
	global CONFIG_SPECIALIX_RTSCTS
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_SPECIALIX != 0)} then {
	configure_entry .menu45.config.f.x46 normal {n l y}} else {configure_entry .menu45.config.f.x46 disabled {y n l}}
	global CONFIG_SX
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {
	configure_entry .menu45.config.f.x47 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x47 normal {m}} else {configure_entry .menu45.config.f.x47 disabled {m}}; configure_entry .menu45.config.f.x47 normal {n l}} else {configure_entry .menu45.config.f.x47 disabled {y n m l}}
	global CONFIG_RIO
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {
	configure_entry .menu45.config.f.x48 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x48 normal {m}} else {configure_entry .menu45.config.f.x48 disabled {m}}; configure_entry .menu45.config.f.x48 normal {n l}} else {configure_entry .menu45.config.f.x48 disabled {y n m l}}
	global CONFIG_RIO_OLDPCI
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_RIO != 0)} then {
	configure_entry .menu45.config.f.x49 normal {n l y}} else {configure_entry .menu45.config.f.x49 disabled {y n l}}
	global CONFIG_STALDRV
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {
	configure_entry .menu45.config.f.x50 normal {n l y}} else {configure_entry .menu45.config.f.x50 disabled {y n l}}
	global CONFIG_STALLION
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_STALDRV == 1)} then {
	configure_entry .menu45.config.f.x51 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x51 normal {m}} else {configure_entry .menu45.config.f.x51 disabled {m}}; configure_entry .menu45.config.f.x51 normal {n l}} else {configure_entry .menu45.config.f.x51 disabled {y n m l}}
	global CONFIG_ISTALLION
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_STALDRV == 1)} then {
	configure_entry .menu45.config.f.x52 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x52 normal {m}} else {configure_entry .menu45.config.f.x52 disabled {m}}; configure_entry .menu45.config.f.x52 normal {n l}} else {configure_entry .menu45.config.f.x52 disabled {y n m l}}
	global CONFIG_ZORRO
	global CONFIG_A2232
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_ZORRO == 1)} then {
	configure_entry .menu45.config.f.x53 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x53 normal {m}} else {configure_entry .menu45.config.f.x53 disabled {m}}; configure_entry .menu45.config.f.x53 normal {n l}} else {configure_entry .menu45.config.f.x53 disabled {y n m l}}
	global CONFIG_UNIX98_PTYS
	global CONFIG_UNIX98_PTY_COUNT
	if {($CONFIG_UNIX98_PTYS == 1)} then {.menu45.config.f.x55.x configure -state normal -foreground [ cget .ref -foreground ]; .menu45.config.f.x55.l configure -state normal; } else {.menu45.config.f.x55.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu45.config.f.x55.l configure -state disabled}
	global CONFIG_PARPORT
	global CONFIG_PRINTER
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT]];set CONFIG_PRINTER [sync_tristate $CONFIG_PRINTER $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu45.config.f.x56 disabled {y}} else {configure_entry .menu45.config.f.x56 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu45.config.f.x56 disabled {m}} else {configure_entry .menu45.config.f.x56 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x56 normal {m}} else {configure_entry .menu45.config.f.x56 disabled {m}}; configure_entry .menu45.config.f.x56 normal {n l}} else {configure_entry .menu45.config.f.x56 disabled {y n m l}}
	global CONFIG_LP_CONSOLE
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PRINTER != 0)} then {
	configure_entry .menu45.config.f.x57 normal {n l y}} else {configure_entry .menu45.config.f.x57 disabled {y n l}}
	global CONFIG_PPDEV
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT]];set CONFIG_PPDEV [sync_tristate $CONFIG_PPDEV $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu45.config.f.x58 disabled {y}} else {configure_entry .menu45.config.f.x58 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu45.config.f.x58 disabled {m}} else {configure_entry .menu45.config.f.x58 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x58 normal {m}} else {configure_entry .menu45.config.f.x58 disabled {m}}; configure_entry .menu45.config.f.x58 normal {n l}} else {configure_entry .menu45.config.f.x58 disabled {y n m l}}
	global CONFIG_QIC02_TAPE

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x62 normal {m}} else {configure_entry .menu45.config.f.x62 disabled {m}}
	global CONFIG_QIC02_DYNCONF
	if {($CONFIG_QIC02_TAPE != 0)} then {
	configure_entry .menu45.config.f.x63 normal {n l y}} else {configure_entry .menu45.config.f.x63 disabled {y n l}}
	if {($CONFIG_QIC02_TAPE != 0) && ($CONFIG_QIC02_DYNCONF != 1)} then {configure_entry .menu45.config.f.x64 normal {m}} else {configure_entry .menu45.config.f.x64 disabled {m}}
	if {($CONFIG_QIC02_TAPE != 0) && ($CONFIG_QIC02_DYNCONF == 1)} then {configure_entry .menu45.config.f.x65 normal {m}} else {configure_entry .menu45.config.f.x65 disabled {m}}
	if {($CONFIG_QIC02_TAPE != 0) && ($CONFIG_QIC02_DYNCONF == 1)} then {configure_entry .menu45.config.f.x66 normal {m}} else {configure_entry .menu45.config.f.x66 disabled {m}}
	if {($CONFIG_QIC02_TAPE != 0) && ($CONFIG_QIC02_DYNCONF == 1)} then {configure_entry .menu45.config.f.x67 normal {m}} else {configure_entry .menu45.config.f.x67 disabled {m}}
	global CONFIG_PCI
	global CONFIG_INTEL_RNG
	if {($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_INTEL_RNG [sync_tristate $CONFIG_INTEL_RNG $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu45.config.f.x69 disabled {y}} else {configure_entry .menu45.config.f.x69 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu45.config.f.x69 disabled {m}} else {configure_entry .menu45.config.f.x69 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x69 normal {m}} else {configure_entry .menu45.config.f.x69 disabled {m}}; configure_entry .menu45.config.f.x69 normal {n l}} else {configure_entry .menu45.config.f.x69 disabled {y n m l}}
	global CONFIG_NVRAM

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x70 normal {m}} else {configure_entry .menu45.config.f.x70 disabled {m}}
	global CONFIG_RTC

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x71 normal {m}} else {configure_entry .menu45.config.f.x71 disabled {m}}
	global CONFIG_DTLK

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x72 normal {m}} else {configure_entry .menu45.config.f.x72 disabled {m}}
	global CONFIG_R3964

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x73 normal {m}} else {configure_entry .menu45.config.f.x73 disabled {m}}
	global CONFIG_APPLICOM

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x74 normal {m}} else {configure_entry .menu45.config.f.x74 disabled {m}}
	global CONFIG_X86
	global CONFIG_SONYPI
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_X86 == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_SONYPI [sync_tristate $CONFIG_SONYPI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu45.config.f.x75 disabled {y}} else {configure_entry .menu45.config.f.x75 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu45.config.f.x75 disabled {m}} else {configure_entry .menu45.config.f.x75 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x75 normal {m}} else {configure_entry .menu45.config.f.x75 disabled {m}}; configure_entry .menu45.config.f.x75 normal {n l}} else {configure_entry .menu45.config.f.x75 disabled {y n m l}}
	global CONFIG_DRM_AGP
	global CONFIG_AGP
	if {($CONFIG_DRM_AGP == 1 || $CONFIG_DRM_AGP == 2 || $CONFIG_DRM_AGP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_DRM_AGP]];set CONFIG_AGP [sync_tristate $CONFIG_AGP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu45.config.f.x77 disabled {y}} else {configure_entry .menu45.config.f.x77 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu45.config.f.x77 disabled {m}} else {configure_entry .menu45.config.f.x77 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x77 normal {m}} else {configure_entry .menu45.config.f.x77 disabled {m}}; configure_entry .menu45.config.f.x77 normal {n l}} else {configure_entry .menu45.config.f.x77 disabled {y n m l}}
	global CONFIG_AGP_INTEL
	if {($CONFIG_AGP != 0)} then {
	configure_entry .menu45.config.f.x78 normal {n l y}} else {configure_entry .menu45.config.f.x78 disabled {y n l}}
	global CONFIG_AGP_I810
	if {($CONFIG_AGP != 0)} then {
	configure_entry .menu45.config.f.x79 normal {n l y}} else {configure_entry .menu45.config.f.x79 disabled {y n l}}
	global CONFIG_AGP_VIA
	if {($CONFIG_AGP != 0)} then {
	configure_entry .menu45.config.f.x80 normal {n l y}} else {configure_entry .menu45.config.f.x80 disabled {y n l}}
	global CONFIG_AGP_AMD
	if {($CONFIG_AGP != 0)} then {
	configure_entry .menu45.config.f.x81 normal {n l y}} else {configure_entry .menu45.config.f.x81 disabled {y n l}}
	global CONFIG_AGP_SIS
	if {($CONFIG_AGP != 0)} then {
	configure_entry .menu45.config.f.x82 normal {n l y}} else {configure_entry .menu45.config.f.x82 disabled {y n l}}
	global CONFIG_AGP_ALI
	if {($CONFIG_AGP != 0)} then {
	configure_entry .menu45.config.f.x83 normal {n l y}} else {configure_entry .menu45.config.f.x83 disabled {y n l}}
	global CONFIG_AGP_SWORKS
	if {($CONFIG_AGP != 0)} then {
	configure_entry .menu45.config.f.x84 normal {n l y}} else {configure_entry .menu45.config.f.x84 disabled {y n l}}
	global CONFIG_DRM
	global CONFIG_DRM_TDFX
	if {($CONFIG_DRM != 0)} then {
	configure_entry .menu45.config.f.x86 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x86 normal {m}} else {configure_entry .menu45.config.f.x86 disabled {m}}; configure_entry .menu45.config.f.x86 normal {n l}} else {configure_entry .menu45.config.f.x86 disabled {y n m l}}
	global CONFIG_DRM_GAMMA
	if {($CONFIG_DRM != 0)} then {
	configure_entry .menu45.config.f.x87 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x87 normal {m}} else {configure_entry .menu45.config.f.x87 disabled {m}}; configure_entry .menu45.config.f.x87 normal {n l}} else {configure_entry .menu45.config.f.x87 disabled {y n m l}}
	global CONFIG_DRM_R128
	if {($CONFIG_DRM != 0)} then {
	configure_entry .menu45.config.f.x88 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x88 normal {m}} else {configure_entry .menu45.config.f.x88 disabled {m}}; configure_entry .menu45.config.f.x88 normal {n l}} else {configure_entry .menu45.config.f.x88 disabled {y n m l}}
	global CONFIG_DRM_RADEON
	if {($CONFIG_DRM != 0) && ($CONFIG_AGP == 1 || $CONFIG_AGP == 2 || $CONFIG_AGP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AGP]];set CONFIG_DRM_RADEON [sync_tristate $CONFIG_DRM_RADEON $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu45.config.f.x89 disabled {y}} else {configure_entry .menu45.config.f.x89 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu45.config.f.x89 disabled {m}} else {configure_entry .menu45.config.f.x89 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x89 normal {m}} else {configure_entry .menu45.config.f.x89 disabled {m}}; configure_entry .menu45.config.f.x89 normal {n l}} else {configure_entry .menu45.config.f.x89 disabled {y n m l}}
	global CONFIG_DRM_I810
	if {($CONFIG_DRM != 0) && ($CONFIG_AGP == 1 || $CONFIG_AGP == 2 || $CONFIG_AGP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AGP]];set CONFIG_DRM_I810 [sync_tristate $CONFIG_DRM_I810 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu45.config.f.x90 disabled {y}} else {configure_entry .menu45.config.f.x90 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu45.config.f.x90 disabled {m}} else {configure_entry .menu45.config.f.x90 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x90 normal {m}} else {configure_entry .menu45.config.f.x90 disabled {m}}; configure_entry .menu45.config.f.x90 normal {n l}} else {configure_entry .menu45.config.f.x90 disabled {y n m l}}
	global CONFIG_DRM_MGA
	if {($CONFIG_DRM != 0) && ($CONFIG_AGP == 1 || $CONFIG_AGP == 2 || $CONFIG_AGP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AGP]];set CONFIG_DRM_MGA [sync_tristate $CONFIG_DRM_MGA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu45.config.f.x91 disabled {y}} else {configure_entry .menu45.config.f.x91 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu45.config.f.x91 disabled {m}} else {configure_entry .menu45.config.f.x91 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x91 normal {m}} else {configure_entry .menu45.config.f.x91 disabled {m}}; configure_entry .menu45.config.f.x91 normal {n l}} else {configure_entry .menu45.config.f.x91 disabled {y n m l}}
	global CONFIG_DRM_SIS
	if {($CONFIG_DRM != 0) && ($CONFIG_AGP == 1 || $CONFIG_AGP == 2 || $CONFIG_AGP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AGP]];set CONFIG_DRM_SIS [sync_tristate $CONFIG_DRM_SIS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu45.config.f.x92 disabled {y}} else {configure_entry .menu45.config.f.x92 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu45.config.f.x92 disabled {m}} else {configure_entry .menu45.config.f.x92 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu45.config.f.x92 normal {m}} else {configure_entry .menu45.config.f.x92 disabled {m}}; configure_entry .menu45.config.f.x92 normal {n l}} else {configure_entry .menu45.config.f.x92 disabled {y n m l}}
	global CONFIG_HOTPLUG
	global CONFIG_PCMCIA
	if {($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0)} then {configure_entry .menu45.config.f.x93 normal {m}} else {configure_entry .menu45.config.f.x93 disabled {m}}
}


proc update_define_menu45 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_T6963_DMA
	global CONFIG_SERIAL
	global CONFIG_COMPUTONE
	global CONFIG_ROCKETPORT
	global CONFIG_CYCLADES
	global CONFIG_DIGIEPCA
	global CONFIG_DIGI
	global CONFIG_ESPSERIAL
	global CONFIG_MOXA_INTELLIO
	global CONFIG_MOXA_SMARTIO
	global CONFIG_SYNCLINK
	global CONFIG_N_HDLC
	global CONFIG_RISCOM8
	global CONFIG_SPECIALIX
	global CONFIG_SX
	global CONFIG_RIO
	global CONFIG_STALLION
	global CONFIG_ISTALLION
	global CONFIG_A2232
	global CONFIG_SERIAL_CORE
	global CONFIG_SERIAL_CORE_CONSOLE
	global CONFIG_QIC02_TAPE
	global CONFIG_NVRAM
	global CONFIG_RTC
	global CONFIG_DTLK
	global CONFIG_R3964
	global CONFIG_APPLICOM
	global CONFIG_DRM_TDFX
	global CONFIG_DRM_GAMMA
	global CONFIG_DRM_R128
	global CONFIG_68328_SERIAL
set CONFIG_68328_SERIAL [expr $CONFIG_68328_SERIAL|16]
	global CONFIG_68328_SERIAL_RTS_CTS
set CONFIG_68328_SERIAL_RTS_CTS [expr $CONFIG_68328_SERIAL_RTS_CTS|16]
	global CONFIG_68328_DIGI
set CONFIG_68328_DIGI [expr $CONFIG_68328_DIGI|16]
set CONFIG_68328_SERIAL [expr $CONFIG_68328_SERIAL|16]
set CONFIG_68328_SERIAL_RTS_CTS [expr $CONFIG_68328_SERIAL_RTS_CTS|16]
	global CONFIG_68681_SERIAL
set CONFIG_68681_SERIAL [expr $CONFIG_68681_SERIAL|16]
set CONFIG_68328_SERIAL [expr $CONFIG_68328_SERIAL|16]
	global CONFIG_68332_SERIAL
set CONFIG_68332_SERIAL [expr $CONFIG_68332_SERIAL|16]
	global CONFIG_68302_SERIAL
set CONFIG_68302_SERIAL [expr $CONFIG_68302_SERIAL|16]
	global CONFIG_SERIAL_CONSOLE
set CONFIG_SERIAL_CONSOLE [expr $CONFIG_SERIAL_CONSOLE|16]
	global CONFIG_COLDFIRE_SERIAL
set CONFIG_COLDFIRE_SERIAL [expr $CONFIG_COLDFIRE_SERIAL|16]
	global CONFIG_MCF_MBUS
set CONFIG_MCF_MBUS [expr $CONFIG_MCF_MBUS|16]
	global CONFIG_LCDTXT
set CONFIG_LCDTXT [expr $CONFIG_LCDTXT|16]
	global CONFIG_LCDDMA
set CONFIG_LCDDMA [expr $CONFIG_LCDDMA|16]
	global CONFIG_DAC0800
set CONFIG_DAC0800 [expr $CONFIG_DAC0800|16]
	global CONFIG_DACI2S
set CONFIG_DACI2S [expr $CONFIG_DACI2S|16]
	global CONFIG_T6963
set CONFIG_T6963 [expr $CONFIG_T6963|16]
	global CONFIG_T6963_PIO
set CONFIG_T6963_PIO [expr $CONFIG_T6963_PIO|16]
	global CONFIG_VT_CONSOLE
set CONFIG_VT_CONSOLE [expr $CONFIG_VT_CONSOLE|16]
set CONFIG_SERIAL_CONSOLE [expr $CONFIG_SERIAL_CONSOLE|16]
	global CONFIG_SERIAL_ACPI
set CONFIG_SERIAL_ACPI [expr $CONFIG_SERIAL_ACPI|16]
	global CONFIG_SERIAL_MANY_PORTS
set CONFIG_SERIAL_MANY_PORTS [expr $CONFIG_SERIAL_MANY_PORTS|16]
	global CONFIG_SERIAL_SHARE_IRQ
set CONFIG_SERIAL_SHARE_IRQ [expr $CONFIG_SERIAL_SHARE_IRQ|16]
	global CONFIG_SERIAL_DETECT_IRQ
set CONFIG_SERIAL_DETECT_IRQ [expr $CONFIG_SERIAL_DETECT_IRQ|16]
	global CONFIG_SERIAL_MULTIPORT
set CONFIG_SERIAL_MULTIPORT [expr $CONFIG_SERIAL_MULTIPORT|16]
	global CONFIG_HUB6
set CONFIG_HUB6 [expr $CONFIG_HUB6|16]
set CONFIG_COMPUTONE [expr $CONFIG_COMPUTONE|16]
set CONFIG_ROCKETPORT [expr $CONFIG_ROCKETPORT|16]
set CONFIG_CYCLADES [expr $CONFIG_CYCLADES|16]
	global CONFIG_CYZ_INTR
set CONFIG_CYZ_INTR [expr $CONFIG_CYZ_INTR|16]
set CONFIG_DIGIEPCA [expr $CONFIG_DIGIEPCA|16]
set CONFIG_DIGI [expr $CONFIG_DIGI|16]
set CONFIG_ESPSERIAL [expr $CONFIG_ESPSERIAL|16]
set CONFIG_MOXA_INTELLIO [expr $CONFIG_MOXA_INTELLIO|16]
set CONFIG_MOXA_SMARTIO [expr $CONFIG_MOXA_SMARTIO|16]
set CONFIG_SYNCLINK [expr $CONFIG_SYNCLINK|16]
set CONFIG_N_HDLC [expr $CONFIG_N_HDLC|16]
set CONFIG_RISCOM8 [expr $CONFIG_RISCOM8|16]
set CONFIG_SPECIALIX [expr $CONFIG_SPECIALIX|16]
	global CONFIG_SPECIALIX_RTSCTS
set CONFIG_SPECIALIX_RTSCTS [expr $CONFIG_SPECIALIX_RTSCTS|16]
set CONFIG_SX [expr $CONFIG_SX|16]
set CONFIG_RIO [expr $CONFIG_RIO|16]
	global CONFIG_RIO_OLDPCI
set CONFIG_RIO_OLDPCI [expr $CONFIG_RIO_OLDPCI|16]
	global CONFIG_STALDRV
set CONFIG_STALDRV [expr $CONFIG_STALDRV|16]
set CONFIG_STALLION [expr $CONFIG_STALLION|16]
set CONFIG_ISTALLION [expr $CONFIG_ISTALLION|16]
set CONFIG_A2232 [expr $CONFIG_A2232|16]
	global CONFIG_LP_CONSOLE
set CONFIG_LP_CONSOLE [expr $CONFIG_LP_CONSOLE|16]
	global CONFIG_QIC02_DYNCONF
set CONFIG_QIC02_DYNCONF [expr $CONFIG_QIC02_DYNCONF|16]
	global CONFIG_AGP_INTEL
set CONFIG_AGP_INTEL [expr $CONFIG_AGP_INTEL|16]
	global CONFIG_AGP_I810
set CONFIG_AGP_I810 [expr $CONFIG_AGP_I810|16]
	global CONFIG_AGP_VIA
set CONFIG_AGP_VIA [expr $CONFIG_AGP_VIA|16]
	global CONFIG_AGP_AMD
set CONFIG_AGP_AMD [expr $CONFIG_AGP_AMD|16]
	global CONFIG_AGP_SIS
set CONFIG_AGP_SIS [expr $CONFIG_AGP_SIS|16]
	global CONFIG_AGP_ALI
set CONFIG_AGP_ALI [expr $CONFIG_AGP_ALI|16]
	global CONFIG_AGP_SWORKS
set CONFIG_AGP_SWORKS [expr $CONFIG_AGP_SWORKS|16]
set CONFIG_DRM_TDFX [expr $CONFIG_DRM_TDFX|16]
set CONFIG_DRM_GAMMA [expr $CONFIG_DRM_GAMMA|16]
set CONFIG_DRM_R128 [expr $CONFIG_DRM_R128|16]
	global CONFIG_M68328
	if {($CONFIG_M68328 == 1)} then {
	set CONFIG_68328_SERIAL [expr $CONFIG_68328_SERIAL&15]}
	if {($CONFIG_M68328 == 1) && ($CONFIG_68328_SERIAL == 1)} then {
	set CONFIG_68328_SERIAL_RTS_CTS [expr $CONFIG_68328_SERIAL_RTS_CTS&15]}
	global CONFIG_PILOT
	if {($CONFIG_M68328 == 1) && ($CONFIG_PILOT == 1)} then {
	set CONFIG_68328_DIGI [expr $CONFIG_68328_DIGI&15]}
	global CONFIG_M68EZ328
	if {($CONFIG_M68EZ328 == 1)} then {
	set CONFIG_68328_SERIAL [expr $CONFIG_68328_SERIAL&15]}
	if {($CONFIG_M68EZ328 == 1) && ($CONFIG_68328_SERIAL == 1)} then {
	set CONFIG_68328_SERIAL_RTS_CTS [expr $CONFIG_68328_SERIAL_RTS_CTS&15]}
	global CONFIG_M68EZ328ADS
	if {($CONFIG_M68EZ328 == 1) && ($CONFIG_M68EZ328ADS == 1)} then {
	set CONFIG_68681_SERIAL [expr $CONFIG_68681_SERIAL&15]}
	global CONFIG_M68VZ328
	if {($CONFIG_M68VZ328 == 1)} then {
	set CONFIG_68328_SERIAL [expr $CONFIG_68328_SERIAL&15]}
	global CONFIG_M68332
	if {($CONFIG_M68332 == 1)} then {
	set CONFIG_68332_SERIAL [expr $CONFIG_68332_SERIAL&15]}
	global CONFIG_M68EN302
	if {($CONFIG_M68EN302 == 1)} then {
	set CONFIG_68302_SERIAL [expr $CONFIG_68302_SERIAL&15]}
	global CONFIG_M68360_SMC_UART
	if {($CONFIG_M68360_SMC_UART == 1)} then {
	set CONFIG_SERIAL_CONSOLE [expr $CONFIG_SERIAL_CONSOLE&15]}
	global tmpvar_13
	global CONFIG_CONSOLE_9600
	if {$tmpvar_13 == "9600"} then {set CONFIG_CONSOLE_9600 1} else {set CONFIG_CONSOLE_9600 0}
	global CONFIG_CONSOLE_19200
	if {$tmpvar_13 == "19200"} then {set CONFIG_CONSOLE_19200 1} else {set CONFIG_CONSOLE_19200 0}
	global CONFIG_CONSOLE_115200
	if {$tmpvar_13 == "115200"} then {set CONFIG_CONSOLE_115200 1} else {set CONFIG_CONSOLE_115200 0}
	global CONFIG_COLDFIRE
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_COLDFIRE_SERIAL [expr $CONFIG_COLDFIRE_SERIAL&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_MCF_MBUS [expr $CONFIG_MCF_MBUS&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_LCDTXT [expr $CONFIG_LCDTXT&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_LCDDMA [expr $CONFIG_LCDDMA&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_DAC0800 [expr $CONFIG_DAC0800&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_DACI2S [expr $CONFIG_DACI2S&15]}
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_T6963 [expr $CONFIG_T6963&15]}
	if {($CONFIG_COLDFIRE == 1) && ($CONFIG_T6963 == 1)} then {
	set CONFIG_T6963_PIO [expr $CONFIG_T6963_PIO&15]}
	if {($CONFIG_COLDFIRE == 1) && ($CONFIG_T6963 == 1) && ($CONFIG_T6963_PIO != 1)} then {	global CONSTANT_Y
set CONFIG_T6963_DMA $CONSTANT_Y }
	global CONFIG_VT
	if {($CONFIG_VT == 1)} then {
	set CONFIG_VT_CONSOLE [expr $CONFIG_VT_CONSOLE&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_SERIAL == 2)} then {set CONFIG_SERIAL 1}}
	if {($CONFIG_SERIAL == 1)} then {
	set CONFIG_SERIAL_CONSOLE [expr $CONFIG_SERIAL_CONSOLE&15]}
	global CONFIG_ACPI
	if {($CONFIG_ACPI == 1)} then {
	set CONFIG_SERIAL_ACPI [expr $CONFIG_SERIAL_ACPI&15]}
	global CONFIG_SERIAL_EXTENDED
	if {($CONFIG_SERIAL == 1 || $CONFIG_SERIAL == 2 || $CONFIG_SERIAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SERIAL]];set CONFIG_SERIAL_EXTENDED [sync_bool $CONFIG_SERIAL_EXTENDED $tmpvar_dep 1];set CONFIG_SERIAL_EXTENDED [expr $CONFIG_SERIAL_EXTENDED&15]}
	if {($CONFIG_SERIAL_EXTENDED == 1)} then {
	set CONFIG_SERIAL_MANY_PORTS [expr $CONFIG_SERIAL_MANY_PORTS&15]}
	if {($CONFIG_SERIAL_EXTENDED == 1)} then {
	set CONFIG_SERIAL_SHARE_IRQ [expr $CONFIG_SERIAL_SHARE_IRQ&15]}
	if {($CONFIG_SERIAL_EXTENDED == 1)} then {
	set CONFIG_SERIAL_DETECT_IRQ [expr $CONFIG_SERIAL_DETECT_IRQ&15]}
	if {($CONFIG_SERIAL_EXTENDED == 1)} then {
	set CONFIG_SERIAL_MULTIPORT [expr $CONFIG_SERIAL_MULTIPORT&15]}
	if {($CONFIG_SERIAL_EXTENDED == 1)} then {
	set CONFIG_HUB6 [expr $CONFIG_HUB6&15]}
	global CONFIG_SERIAL_NONSTANDARD
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_COMPUTONE == 2)} then {set CONFIG_COMPUTONE 1}; set CONFIG_COMPUTONE [expr $CONFIG_COMPUTONE&15]}
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ROCKETPORT == 2)} then {set CONFIG_ROCKETPORT 1}; set CONFIG_ROCKETPORT [expr $CONFIG_ROCKETPORT&15]}
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_CYCLADES == 2)} then {set CONFIG_CYCLADES 1}; set CONFIG_CYCLADES [expr $CONFIG_CYCLADES&15]}
	global CONFIG_EXPERIMENTAL
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_EXPERIMENTAL == 1 && $CONFIG_CYCLADES != 0)} then {
	set CONFIG_CYZ_INTR [expr $CONFIG_CYZ_INTR&15]}
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_DIGIEPCA == 2)} then {set CONFIG_DIGIEPCA 1}; set CONFIG_DIGIEPCA [expr $CONFIG_DIGIEPCA&15]}
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_DIGIEPCA == 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_DIGI == 2)} then {set CONFIG_DIGI 1}; set CONFIG_DIGI [expr $CONFIG_DIGI&15]}
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ESPSERIAL == 2)} then {set CONFIG_ESPSERIAL 1}; set CONFIG_ESPSERIAL [expr $CONFIG_ESPSERIAL&15]}
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_MOXA_INTELLIO == 2)} then {set CONFIG_MOXA_INTELLIO 1}; set CONFIG_MOXA_INTELLIO [expr $CONFIG_MOXA_INTELLIO&15]}
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_MOXA_SMARTIO == 2)} then {set CONFIG_MOXA_SMARTIO 1}; set CONFIG_MOXA_SMARTIO [expr $CONFIG_MOXA_SMARTIO&15]}
	global CONFIG_ISI
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONSTANT_M]]; set CONFIG_ISI [sync_tristate $CONFIG_ISI $tmpvar_dep]; set CONFIG_ISI [expr $CONFIG_ISI&15]}
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_SYNCLINK == 2)} then {set CONFIG_SYNCLINK 1}; set CONFIG_SYNCLINK [expr $CONFIG_SYNCLINK&15]}
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_N_HDLC == 2)} then {set CONFIG_N_HDLC 1}; set CONFIG_N_HDLC [expr $CONFIG_N_HDLC&15]}
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_RISCOM8 == 2)} then {set CONFIG_RISCOM8 1}; set CONFIG_RISCOM8 [expr $CONFIG_RISCOM8&15]}
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_SPECIALIX == 2)} then {set CONFIG_SPECIALIX 1}; set CONFIG_SPECIALIX [expr $CONFIG_SPECIALIX&15]}
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_SPECIALIX != 0)} then {
	set CONFIG_SPECIALIX_RTSCTS [expr $CONFIG_SPECIALIX_RTSCTS&15]}
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_SX == 2)} then {set CONFIG_SX 1}; set CONFIG_SX [expr $CONFIG_SX&15]}
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_RIO == 2)} then {set CONFIG_RIO 1}; set CONFIG_RIO [expr $CONFIG_RIO&15]}
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_RIO != 0)} then {
	set CONFIG_RIO_OLDPCI [expr $CONFIG_RIO_OLDPCI&15]}
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {
	set CONFIG_STALDRV [expr $CONFIG_STALDRV&15]}
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_STALDRV == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_STALLION == 2)} then {set CONFIG_STALLION 1}; set CONFIG_STALLION [expr $CONFIG_STALLION&15]}
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_STALDRV == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ISTALLION == 2)} then {set CONFIG_ISTALLION 1}; set CONFIG_ISTALLION [expr $CONFIG_ISTALLION&15]}
	global CONFIG_ZORRO
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_ZORRO == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_A2232 == 2)} then {set CONFIG_A2232 1}; set CONFIG_A2232 [expr $CONFIG_A2232&15]}
	global CONFIG_SERIAL_AMBA
	global CONFIG_SERIAL_CLPS711X
	if {($CONFIG_SERIAL_AMBA == 1 || $CONFIG_SERIAL_CLPS711X == 1)} then {	global CONSTANT_Y
set CONFIG_SERIAL_CORE $CONSTANT_Y }
	global CONFIG_SERIAL_AMBA_CONSOLE
	global CONFIG_SERIAL_CLPS711X_CONSOLE
	if {($CONFIG_SERIAL_AMBA_CONSOLE == 1 || $CONFIG_SERIAL_CLPS711X_CONSOLE == 1)} then {	global CONSTANT_Y
set CONFIG_SERIAL_CORE_CONSOLE $CONSTANT_Y }
	global CONFIG_UNIX98_PTYS
	global CONFIG_UNIX98_PTY_COUNT
	if {($CONFIG_UNIX98_PTYS == 1)} then {validate_int CONFIG_UNIX98_PTY_COUNT "$CONFIG_UNIX98_PTY_COUNT" 256}
	global CONFIG_PARPORT
	global CONFIG_PRINTER
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT]]; set CONFIG_PRINTER [sync_tristate $CONFIG_PRINTER $tmpvar_dep]; set CONFIG_PRINTER [expr $CONFIG_PRINTER&15]}
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PRINTER != 0)} then {
	set CONFIG_LP_CONSOLE [expr $CONFIG_LP_CONSOLE&15]}
	global CONFIG_PPDEV
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PARPORT]]; set CONFIG_PPDEV [sync_tristate $CONFIG_PPDEV $tmpvar_dep]; set CONFIG_PPDEV [expr $CONFIG_PPDEV&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_QIC02_TAPE == 2)} then {set CONFIG_QIC02_TAPE 1}}
	if {($CONFIG_QIC02_TAPE != 0)} then {
	set CONFIG_QIC02_DYNCONF [expr $CONFIG_QIC02_DYNCONF&15]}
	global CONFIG_PCI
	global CONFIG_INTEL_RNG
	if {($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_INTEL_RNG [sync_tristate $CONFIG_INTEL_RNG $tmpvar_dep]; set CONFIG_INTEL_RNG [expr $CONFIG_INTEL_RNG&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_NVRAM == 2)} then {set CONFIG_NVRAM 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_RTC == 2)} then {set CONFIG_RTC 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_DTLK == 2)} then {set CONFIG_DTLK 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_R3964 == 2)} then {set CONFIG_R3964 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_APPLICOM == 2)} then {set CONFIG_APPLICOM 1}}
	global CONFIG_X86
	global CONFIG_SONYPI
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_X86 == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_SONYPI [sync_tristate $CONFIG_SONYPI $tmpvar_dep]; set CONFIG_SONYPI [expr $CONFIG_SONYPI&15]}
	global CONFIG_DRM_AGP
	global CONFIG_AGP
	if {($CONFIG_DRM_AGP == 1 || $CONFIG_DRM_AGP == 2 || $CONFIG_DRM_AGP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_DRM_AGP]]; set CONFIG_AGP [sync_tristate $CONFIG_AGP $tmpvar_dep]; set CONFIG_AGP [expr $CONFIG_AGP&15]}
	if {($CONFIG_AGP != 0)} then {
	set CONFIG_AGP_INTEL [expr $CONFIG_AGP_INTEL&15]}
	if {($CONFIG_AGP != 0)} then {
	set CONFIG_AGP_I810 [expr $CONFIG_AGP_I810&15]}
	if {($CONFIG_AGP != 0)} then {
	set CONFIG_AGP_VIA [expr $CONFIG_AGP_VIA&15]}
	if {($CONFIG_AGP != 0)} then {
	set CONFIG_AGP_AMD [expr $CONFIG_AGP_AMD&15]}
	if {($CONFIG_AGP != 0)} then {
	set CONFIG_AGP_SIS [expr $CONFIG_AGP_SIS&15]}
	if {($CONFIG_AGP != 0)} then {
	set CONFIG_AGP_ALI [expr $CONFIG_AGP_ALI&15]}
	if {($CONFIG_AGP != 0)} then {
	set CONFIG_AGP_SWORKS [expr $CONFIG_AGP_SWORKS&15]}
	global CONFIG_DRM
	if {($CONFIG_DRM != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_DRM_TDFX == 2)} then {set CONFIG_DRM_TDFX 1}; set CONFIG_DRM_TDFX [expr $CONFIG_DRM_TDFX&15]}
	if {($CONFIG_DRM != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_DRM_GAMMA == 2)} then {set CONFIG_DRM_GAMMA 1}; set CONFIG_DRM_GAMMA [expr $CONFIG_DRM_GAMMA&15]}
	if {($CONFIG_DRM != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_DRM_R128 == 2)} then {set CONFIG_DRM_R128 1}; set CONFIG_DRM_R128 [expr $CONFIG_DRM_R128&15]}
	global CONFIG_DRM_RADEON
	if {($CONFIG_DRM != 0) && ($CONFIG_AGP == 1 || $CONFIG_AGP == 2 || $CONFIG_AGP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AGP]]; set CONFIG_DRM_RADEON [sync_tristate $CONFIG_DRM_RADEON $tmpvar_dep]; set CONFIG_DRM_RADEON [expr $CONFIG_DRM_RADEON&15]}
	global CONFIG_DRM_I810
	if {($CONFIG_DRM != 0) && ($CONFIG_AGP == 1 || $CONFIG_AGP == 2 || $CONFIG_AGP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AGP]]; set CONFIG_DRM_I810 [sync_tristate $CONFIG_DRM_I810 $tmpvar_dep]; set CONFIG_DRM_I810 [expr $CONFIG_DRM_I810&15]}
	global CONFIG_DRM_MGA
	if {($CONFIG_DRM != 0) && ($CONFIG_AGP == 1 || $CONFIG_AGP == 2 || $CONFIG_AGP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AGP]]; set CONFIG_DRM_MGA [sync_tristate $CONFIG_DRM_MGA $tmpvar_dep]; set CONFIG_DRM_MGA [expr $CONFIG_DRM_MGA&15]}
	global CONFIG_DRM_SIS
	if {($CONFIG_DRM != 0) && ($CONFIG_AGP == 1 || $CONFIG_AGP == 2 || $CONFIG_AGP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_AGP]]; set CONFIG_DRM_SIS [sync_tristate $CONFIG_DRM_SIS $tmpvar_dep]; set CONFIG_DRM_SIS [expr $CONFIG_DRM_SIS&15]}
}


proc menu46 {w title} {
	set oldFocus [focus]
	catch {focus .menu45}
	catch {destroy $w; unregister_active 46}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 46]]
	message $w.m -width 400 -aspect 300 -text \
		"I2C support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "I2C support" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 46; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 46; menu47 .menu47 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 46"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 46; menu45 .menu45 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 46; menu45 .menu45 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 46 0 "I2C support" CONFIG_I2C
	dep_tristate $w.config.f 46 1 "I2C bit-banging interfaces" CONFIG_I2C_ALGOBIT
	dep_tristate $w.config.f 46 2 "  Philips style parallel port adapter" CONFIG_I2C_PHILIPSPAR
	dep_tristate $w.config.f 46 3 "  ELV adapter" CONFIG_I2C_ELV
	dep_tristate $w.config.f 46 4 "  Velleman K9000 adapter" CONFIG_I2C_VELLEMAN
	dep_tristate $w.config.f 46 5 "I2C PCF 8584 interfaces" CONFIG_I2C_ALGOPCF
	dep_tristate $w.config.f 46 6 "  Elektor ISA card" CONFIG_I2C_ELEKTOR
	dep_tristate $w.config.f 46 7 "I2C device interface" CONFIG_I2C_CHARDEV
	dep_tristate $w.config.f 46 8 "I2C /proc interface (required for hardware sensors)" CONFIG_I2C_PROC



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu45] == 0} then {menu45 .menu45 "Character devices"}
	set winx [expr [winfo x .menu45]+30]; set winy [expr [winfo y .menu45]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu46 {} {
	global CONFIG_I2C
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu46.config.f.x0 normal {m}} else {configure_entry .menu46.config.f.x0 disabled {m}}
	global CONFIG_I2C_ALGOBIT
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C == 1 || $CONFIG_I2C == 2 || $CONFIG_I2C == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2C]];set CONFIG_I2C_ALGOBIT [sync_tristate $CONFIG_I2C_ALGOBIT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu46.config.f.x1 disabled {y}} else {configure_entry .menu46.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu46.config.f.x1 disabled {m}} else {configure_entry .menu46.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu46.config.f.x1 normal {m}} else {configure_entry .menu46.config.f.x1 disabled {m}}; configure_entry .menu46.config.f.x1 normal {n l}} else {configure_entry .menu46.config.f.x1 disabled {y n m l}}
	global CONFIG_PARPORT
	global CONFIG_I2C_PHILIPSPAR
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C_ALGOBIT != 0) && ($CONFIG_I2C_ALGOBIT == 1 || $CONFIG_I2C_ALGOBIT == 2 || $CONFIG_I2C_ALGOBIT == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2C_ALGOBIT $CONFIG_PARPORT]];set CONFIG_I2C_PHILIPSPAR [sync_tristate $CONFIG_I2C_PHILIPSPAR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu46.config.f.x2 disabled {y}} else {configure_entry .menu46.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu46.config.f.x2 disabled {m}} else {configure_entry .menu46.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu46.config.f.x2 normal {m}} else {configure_entry .menu46.config.f.x2 disabled {m}}; configure_entry .menu46.config.f.x2 normal {n l}} else {configure_entry .menu46.config.f.x2 disabled {y n m l}}
	global CONFIG_I2C_ELV
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C_ALGOBIT != 0) && ($CONFIG_I2C_ALGOBIT == 1 || $CONFIG_I2C_ALGOBIT == 2 || $CONFIG_I2C_ALGOBIT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2C_ALGOBIT]];set CONFIG_I2C_ELV [sync_tristate $CONFIG_I2C_ELV $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu46.config.f.x3 disabled {y}} else {configure_entry .menu46.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu46.config.f.x3 disabled {m}} else {configure_entry .menu46.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu46.config.f.x3 normal {m}} else {configure_entry .menu46.config.f.x3 disabled {m}}; configure_entry .menu46.config.f.x3 normal {n l}} else {configure_entry .menu46.config.f.x3 disabled {y n m l}}
	global CONFIG_I2C_VELLEMAN
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C_ALGOBIT != 0) && ($CONFIG_I2C_ALGOBIT == 1 || $CONFIG_I2C_ALGOBIT == 2 || $CONFIG_I2C_ALGOBIT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2C_ALGOBIT]];set CONFIG_I2C_VELLEMAN [sync_tristate $CONFIG_I2C_VELLEMAN $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu46.config.f.x4 disabled {y}} else {configure_entry .menu46.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu46.config.f.x4 disabled {m}} else {configure_entry .menu46.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu46.config.f.x4 normal {m}} else {configure_entry .menu46.config.f.x4 disabled {m}}; configure_entry .menu46.config.f.x4 normal {n l}} else {configure_entry .menu46.config.f.x4 disabled {y n m l}}
	global CONFIG_I2C_ALGOPCF
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C == 1 || $CONFIG_I2C == 2 || $CONFIG_I2C == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2C]];set CONFIG_I2C_ALGOPCF [sync_tristate $CONFIG_I2C_ALGOPCF $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu46.config.f.x5 disabled {y}} else {configure_entry .menu46.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu46.config.f.x5 disabled {m}} else {configure_entry .menu46.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu46.config.f.x5 normal {m}} else {configure_entry .menu46.config.f.x5 disabled {m}}; configure_entry .menu46.config.f.x5 normal {n l}} else {configure_entry .menu46.config.f.x5 disabled {y n m l}}
	global CONFIG_I2C_ELEKTOR
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C_ALGOPCF != 0) && ($CONFIG_I2C_ALGOPCF == 1 || $CONFIG_I2C_ALGOPCF == 2 || $CONFIG_I2C_ALGOPCF == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2C_ALGOPCF]];set CONFIG_I2C_ELEKTOR [sync_tristate $CONFIG_I2C_ELEKTOR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu46.config.f.x6 disabled {y}} else {configure_entry .menu46.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu46.config.f.x6 disabled {m}} else {configure_entry .menu46.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu46.config.f.x6 normal {m}} else {configure_entry .menu46.config.f.x6 disabled {m}}; configure_entry .menu46.config.f.x6 normal {n l}} else {configure_entry .menu46.config.f.x6 disabled {y n m l}}
	global CONFIG_I2C_CHARDEV
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C == 1 || $CONFIG_I2C == 2 || $CONFIG_I2C == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2C]];set CONFIG_I2C_CHARDEV [sync_tristate $CONFIG_I2C_CHARDEV $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu46.config.f.x7 disabled {y}} else {configure_entry .menu46.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu46.config.f.x7 disabled {m}} else {configure_entry .menu46.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu46.config.f.x7 normal {m}} else {configure_entry .menu46.config.f.x7 disabled {m}}; configure_entry .menu46.config.f.x7 normal {n l}} else {configure_entry .menu46.config.f.x7 disabled {y n m l}}
	global CONFIG_I2C_PROC
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C == 1 || $CONFIG_I2C == 2 || $CONFIG_I2C == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2C]];set CONFIG_I2C_PROC [sync_tristate $CONFIG_I2C_PROC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu46.config.f.x8 disabled {y}} else {configure_entry .menu46.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu46.config.f.x8 disabled {m}} else {configure_entry .menu46.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu46.config.f.x8 normal {m}} else {configure_entry .menu46.config.f.x8 disabled {m}}; configure_entry .menu46.config.f.x8 normal {n l}} else {configure_entry .menu46.config.f.x8 disabled {y n m l}}
}


proc update_define_menu46 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_I2C

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_I2C == 2)} then {set CONFIG_I2C 1}}
	global CONFIG_I2C_ALGOBIT
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C == 1 || $CONFIG_I2C == 2 || $CONFIG_I2C == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2C]]; set CONFIG_I2C_ALGOBIT [sync_tristate $CONFIG_I2C_ALGOBIT $tmpvar_dep]; set CONFIG_I2C_ALGOBIT [expr $CONFIG_I2C_ALGOBIT&15]}
	global CONFIG_PARPORT
	global CONFIG_I2C_PHILIPSPAR
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C_ALGOBIT != 0) && ($CONFIG_I2C_ALGOBIT == 1 || $CONFIG_I2C_ALGOBIT == 2 || $CONFIG_I2C_ALGOBIT == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2C_ALGOBIT $CONFIG_PARPORT]]; set CONFIG_I2C_PHILIPSPAR [sync_tristate $CONFIG_I2C_PHILIPSPAR $tmpvar_dep]; set CONFIG_I2C_PHILIPSPAR [expr $CONFIG_I2C_PHILIPSPAR&15]}
	global CONFIG_I2C_ELV
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C_ALGOBIT != 0) && ($CONFIG_I2C_ALGOBIT == 1 || $CONFIG_I2C_ALGOBIT == 2 || $CONFIG_I2C_ALGOBIT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2C_ALGOBIT]]; set CONFIG_I2C_ELV [sync_tristate $CONFIG_I2C_ELV $tmpvar_dep]; set CONFIG_I2C_ELV [expr $CONFIG_I2C_ELV&15]}
	global CONFIG_I2C_VELLEMAN
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C_ALGOBIT != 0) && ($CONFIG_I2C_ALGOBIT == 1 || $CONFIG_I2C_ALGOBIT == 2 || $CONFIG_I2C_ALGOBIT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2C_ALGOBIT]]; set CONFIG_I2C_VELLEMAN [sync_tristate $CONFIG_I2C_VELLEMAN $tmpvar_dep]; set CONFIG_I2C_VELLEMAN [expr $CONFIG_I2C_VELLEMAN&15]}
	global CONFIG_I2C_ALGOPCF
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C == 1 || $CONFIG_I2C == 2 || $CONFIG_I2C == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2C]]; set CONFIG_I2C_ALGOPCF [sync_tristate $CONFIG_I2C_ALGOPCF $tmpvar_dep]; set CONFIG_I2C_ALGOPCF [expr $CONFIG_I2C_ALGOPCF&15]}
	global CONFIG_I2C_ELEKTOR
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C_ALGOPCF != 0) && ($CONFIG_I2C_ALGOPCF == 1 || $CONFIG_I2C_ALGOPCF == 2 || $CONFIG_I2C_ALGOPCF == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2C_ALGOPCF]]; set CONFIG_I2C_ELEKTOR [sync_tristate $CONFIG_I2C_ELEKTOR $tmpvar_dep]; set CONFIG_I2C_ELEKTOR [expr $CONFIG_I2C_ELEKTOR&15]}
	global CONFIG_I2C_CHARDEV
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C == 1 || $CONFIG_I2C == 2 || $CONFIG_I2C == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2C]]; set CONFIG_I2C_CHARDEV [sync_tristate $CONFIG_I2C_CHARDEV $tmpvar_dep]; set CONFIG_I2C_CHARDEV [expr $CONFIG_I2C_CHARDEV&15]}
	global CONFIG_I2C_PROC
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C == 1 || $CONFIG_I2C == 2 || $CONFIG_I2C == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_I2C]]; set CONFIG_I2C_PROC [sync_tristate $CONFIG_I2C_PROC $tmpvar_dep]; set CONFIG_I2C_PROC [expr $CONFIG_I2C_PROC&15]}
}


proc menu47 {w title} {
	set oldFocus [focus]
	catch {focus .menu45}
	catch {destroy $w; unregister_active 47}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 47]]
	message $w.m -width 400 -aspect 300 -text \
		"Mice"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Mice" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 47; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 47; menu48 .menu48 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 47"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 47; menu46 .menu46 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 47; menu46 .menu46 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 47 0 "Bus Mouse Support" CONFIG_BUSMOUSE
	dep_tristate $w.config.f 47 1 "  ATIXL busmouse support" CONFIG_ATIXL_BUSMOUSE
	dep_tristate $w.config.f 47 2 "  Logitech busmouse support" CONFIG_LOGIBUSMOUSE
	dep_tristate $w.config.f 47 3 "  Microsoft busmouse support" CONFIG_MS_BUSMOUSE
	tristate $w.config.f 47 4 "Mouse Support (not serial and bus mice)" CONFIG_MOUSE
	bool $w.config.f 47 5 "  PS/2 mouse (aka \"auxiliary device\") support" CONFIG_PSMOUSE
	tristate $w.config.f 47 6 "  C&T 82C710 mouse port support (as on TI Travelmate)" CONFIG_82C710_MOUSE
	tristate $w.config.f 47 7 "  PC110 digitizer pad support" CONFIG_PC110_PAD



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu45] == 0} then {menu45 .menu45 "Character devices"}
	set winx [expr [winfo x .menu45]+30]; set winy [expr [winfo y .menu45]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu47 {} {
	global CONFIG_BUSMOUSE
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu47.config.f.x0 normal {m}} else {configure_entry .menu47.config.f.x0 disabled {m}}
	global CONFIG_ATIXL_BUSMOUSE
	if {($CONFIG_BUSMOUSE != 0) && ($CONFIG_BUSMOUSE == 1 || $CONFIG_BUSMOUSE == 2 || $CONFIG_BUSMOUSE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BUSMOUSE]];set CONFIG_ATIXL_BUSMOUSE [sync_tristate $CONFIG_ATIXL_BUSMOUSE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu47.config.f.x1 disabled {y}} else {configure_entry .menu47.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu47.config.f.x1 disabled {m}} else {configure_entry .menu47.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu47.config.f.x1 normal {m}} else {configure_entry .menu47.config.f.x1 disabled {m}}; configure_entry .menu47.config.f.x1 normal {n l}} else {configure_entry .menu47.config.f.x1 disabled {y n m l}}
	global CONFIG_LOGIBUSMOUSE
	if {($CONFIG_BUSMOUSE != 0) && ($CONFIG_BUSMOUSE == 1 || $CONFIG_BUSMOUSE == 2 || $CONFIG_BUSMOUSE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BUSMOUSE]];set CONFIG_LOGIBUSMOUSE [sync_tristate $CONFIG_LOGIBUSMOUSE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu47.config.f.x2 disabled {y}} else {configure_entry .menu47.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu47.config.f.x2 disabled {m}} else {configure_entry .menu47.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu47.config.f.x2 normal {m}} else {configure_entry .menu47.config.f.x2 disabled {m}}; configure_entry .menu47.config.f.x2 normal {n l}} else {configure_entry .menu47.config.f.x2 disabled {y n m l}}
	global CONFIG_MS_BUSMOUSE
	if {($CONFIG_BUSMOUSE != 0) && ($CONFIG_BUSMOUSE == 1 || $CONFIG_BUSMOUSE == 2 || $CONFIG_BUSMOUSE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BUSMOUSE]];set CONFIG_MS_BUSMOUSE [sync_tristate $CONFIG_MS_BUSMOUSE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu47.config.f.x3 disabled {y}} else {configure_entry .menu47.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu47.config.f.x3 disabled {m}} else {configure_entry .menu47.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu47.config.f.x3 normal {m}} else {configure_entry .menu47.config.f.x3 disabled {m}}; configure_entry .menu47.config.f.x3 normal {n l}} else {configure_entry .menu47.config.f.x3 disabled {y n m l}}
	global CONFIG_MOUSE

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu47.config.f.x4 normal {m}} else {configure_entry .menu47.config.f.x4 disabled {m}}
	global CONFIG_PSMOUSE
	if {($CONFIG_MOUSE != 0)} then {
	configure_entry .menu47.config.f.x5 normal {n l y}} else {configure_entry .menu47.config.f.x5 disabled {y n l}}
	global CONFIG_82C710_MOUSE
	if {($CONFIG_MOUSE != 0)} then {
	configure_entry .menu47.config.f.x6 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu47.config.f.x6 normal {m}} else {configure_entry .menu47.config.f.x6 disabled {m}}; configure_entry .menu47.config.f.x6 normal {n l}} else {configure_entry .menu47.config.f.x6 disabled {y n m l}}
	global CONFIG_PC110_PAD
	if {($CONFIG_MOUSE != 0)} then {
	configure_entry .menu47.config.f.x7 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu47.config.f.x7 normal {m}} else {configure_entry .menu47.config.f.x7 disabled {m}}; configure_entry .menu47.config.f.x7 normal {n l}} else {configure_entry .menu47.config.f.x7 disabled {y n m l}}
}


proc update_define_menu47 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_BUSMOUSE
	global CONFIG_MOUSE
	global CONFIG_82C710_MOUSE
	global CONFIG_PC110_PAD
	global CONFIG_PSMOUSE
set CONFIG_PSMOUSE [expr $CONFIG_PSMOUSE|16]
set CONFIG_82C710_MOUSE [expr $CONFIG_82C710_MOUSE|16]
set CONFIG_PC110_PAD [expr $CONFIG_PC110_PAD|16]

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_BUSMOUSE == 2)} then {set CONFIG_BUSMOUSE 1}}
	global CONFIG_ATIXL_BUSMOUSE
	if {($CONFIG_BUSMOUSE != 0) && ($CONFIG_BUSMOUSE == 1 || $CONFIG_BUSMOUSE == 2 || $CONFIG_BUSMOUSE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BUSMOUSE]]; set CONFIG_ATIXL_BUSMOUSE [sync_tristate $CONFIG_ATIXL_BUSMOUSE $tmpvar_dep]; set CONFIG_ATIXL_BUSMOUSE [expr $CONFIG_ATIXL_BUSMOUSE&15]}
	global CONFIG_LOGIBUSMOUSE
	if {($CONFIG_BUSMOUSE != 0) && ($CONFIG_BUSMOUSE == 1 || $CONFIG_BUSMOUSE == 2 || $CONFIG_BUSMOUSE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BUSMOUSE]]; set CONFIG_LOGIBUSMOUSE [sync_tristate $CONFIG_LOGIBUSMOUSE $tmpvar_dep]; set CONFIG_LOGIBUSMOUSE [expr $CONFIG_LOGIBUSMOUSE&15]}
	global CONFIG_MS_BUSMOUSE
	if {($CONFIG_BUSMOUSE != 0) && ($CONFIG_BUSMOUSE == 1 || $CONFIG_BUSMOUSE == 2 || $CONFIG_BUSMOUSE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_BUSMOUSE]]; set CONFIG_MS_BUSMOUSE [sync_tristate $CONFIG_MS_BUSMOUSE $tmpvar_dep]; set CONFIG_MS_BUSMOUSE [expr $CONFIG_MS_BUSMOUSE&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_MOUSE == 2)} then {set CONFIG_MOUSE 1}}
	if {($CONFIG_MOUSE != 0)} then {
	set CONFIG_PSMOUSE [expr $CONFIG_PSMOUSE&15]}
	if {($CONFIG_MOUSE != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_82C710_MOUSE == 2)} then {set CONFIG_82C710_MOUSE 1}; set CONFIG_82C710_MOUSE [expr $CONFIG_82C710_MOUSE&15]}
	if {($CONFIG_MOUSE != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_PC110_PAD == 2)} then {set CONFIG_PC110_PAD 1}; set CONFIG_PC110_PAD [expr $CONFIG_PC110_PAD&15]}
}


proc menu48 {w title} {
	set oldFocus [focus]
	catch {focus .menu45}
	catch {destroy $w; unregister_active 48}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 48]]
	message $w.m -width 400 -aspect 300 -text \
		"Joysticks"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Joysticks" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 48; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 48; menu49 .menu49 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 48"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 48; menu47 .menu47 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 48; menu47 .menu47 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 48 0 "Game port support" CONFIG_INPUT_GAMEPORT
	dep_tristate $w.config.f 48 1 "  Classic ISA/PnP gameports" CONFIG_INPUT_NS558
	dep_tristate $w.config.f 48 2 "  PDPI Lightning 4 gamecard" CONFIG_INPUT_LIGHTNING
	dep_tristate $w.config.f 48 3 "  Aureal Vortex and Trident 4DWave gameports" CONFIG_INPUT_PCIGAME
	dep_tristate $w.config.f 48 4 "  Crystal SoundFusion gameports" CONFIG_INPUT_CS461X
	dep_tristate $w.config.f 48 5 "  SoundBlaster Live! gameports" CONFIG_INPUT_EMU10K1
	tristate $w.config.f 48 6 "Serial port device support" CONFIG_INPUT_SERIO
	dep_tristate $w.config.f 48 7 "  Serial port input line discipline" CONFIG_INPUT_SERPORT
	comment $w.config.f 48 8 "Input core support is needed for gameports"
	comment $w.config.f 48 9 "Joysticks"
	dep_tristate $w.config.f 48 10 "  Classic PC analog joysticks and gamepads" CONFIG_INPUT_ANALOG
	dep_tristate $w.config.f 48 11 "  Assasin 3D and MadCatz Panther devices" CONFIG_INPUT_A3D
	dep_tristate $w.config.f 48 12 "  Logitech ADI digital joysticks and gamepads" CONFIG_INPUT_ADI
	dep_tristate $w.config.f 48 13 "  Creative Labs Blaster Cobra gamepad" CONFIG_INPUT_COBRA
	dep_tristate $w.config.f 48 14 "  Genius Flight2000 Digital joysticks and gamepads" CONFIG_INPUT_GF2K
	dep_tristate $w.config.f 48 15 "  Gravis GrIP joysticks and gamepads" CONFIG_INPUT_GRIP
	dep_tristate $w.config.f 48 16 "  InterAct digital joysticks and gamepads" CONFIG_INPUT_INTERACT
	dep_tristate $w.config.f 48 17 "  ThrustMaster DirectConnect joysticks and gamepads" CONFIG_INPUT_TMDC
	dep_tristate $w.config.f 48 18 "  Microsoft SideWinder digital joysticks and gamepads" CONFIG_INPUT_SIDEWINDER
	dep_tristate $w.config.f 48 19 "  I-Force USB joysticks and wheels" CONFIG_INPUT_IFORCE_USB
	dep_tristate $w.config.f 48 20 "  I-Force Serial joysticks and wheels" CONFIG_INPUT_IFORCE_232
	dep_tristate $w.config.f 48 21 "  Logitech WingMan Warrior joystick" CONFIG_INPUT_WARRIOR
	dep_tristate $w.config.f 48 22 "  LogiCad3d Magellan/SpaceMouse 6dof controller" CONFIG_INPUT_MAGELLAN
	dep_tristate $w.config.f 48 23 "  SpaceTec SpaceOrb/Avenger 6dof controller" CONFIG_INPUT_SPACEORB
	dep_tristate $w.config.f 48 24 "  SpaceTec SpaceBall 4000 FLX 6dof controller" CONFIG_INPUT_SPACEBALL
	dep_tristate $w.config.f 48 25 "  Gravis Stinger gamepad" CONFIG_INPUT_STINGER
	dep_tristate $w.config.f 48 26 "  Multisystem, Sega Genesis, Saturn joysticks and gamepads" CONFIG_INPUT_DB9
	dep_tristate $w.config.f 48 27 "  Multisystem, NES, SNES, N64, PSX joysticks and gamepads" CONFIG_INPUT_GAMECON
	dep_tristate $w.config.f 48 28 "  Multisystem joysticks via TurboGraFX device" CONFIG_INPUT_TURBOGRAFX
	comment $w.config.f 48 29 "Input core support is needed for joysticks"



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu45] == 0} then {menu45 .menu45 "Character devices"}
	set winx [expr [winfo x .menu45]+30]; set winy [expr [winfo y .menu45]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu48 {} {
	global CONFIG_MODULES
	global CONFIG_INPUT
	global CONFIG_INPUT_GAMEPORT
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT]];set CONFIG_INPUT_GAMEPORT [sync_tristate $CONFIG_INPUT_GAMEPORT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x0 disabled {y}} else {configure_entry .menu48.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x0 disabled {m}} else {configure_entry .menu48.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x0 normal {m}} else {configure_entry .menu48.config.f.x0 disabled {m}}; configure_entry .menu48.config.f.x0 normal {n l}} else {configure_entry .menu48.config.f.x0 disabled {y n m l}}
	global CONFIG_INPUT_NS558
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT_GAMEPORT]];set CONFIG_INPUT_NS558 [sync_tristate $CONFIG_INPUT_NS558 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x1 disabled {y}} else {configure_entry .menu48.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x1 disabled {m}} else {configure_entry .menu48.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x1 normal {m}} else {configure_entry .menu48.config.f.x1 disabled {m}}; configure_entry .menu48.config.f.x1 normal {n l}} else {configure_entry .menu48.config.f.x1 disabled {y n m l}}
	global CONFIG_INPUT_LIGHTNING
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT_GAMEPORT]];set CONFIG_INPUT_LIGHTNING [sync_tristate $CONFIG_INPUT_LIGHTNING $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x2 disabled {y}} else {configure_entry .menu48.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x2 disabled {m}} else {configure_entry .menu48.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x2 normal {m}} else {configure_entry .menu48.config.f.x2 disabled {m}}; configure_entry .menu48.config.f.x2 normal {n l}} else {configure_entry .menu48.config.f.x2 disabled {y n m l}}
	global CONFIG_INPUT_PCIGAME
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT_GAMEPORT]];set CONFIG_INPUT_PCIGAME [sync_tristate $CONFIG_INPUT_PCIGAME $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x3 disabled {y}} else {configure_entry .menu48.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x3 disabled {m}} else {configure_entry .menu48.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x3 normal {m}} else {configure_entry .menu48.config.f.x3 disabled {m}}; configure_entry .menu48.config.f.x3 normal {n l}} else {configure_entry .menu48.config.f.x3 disabled {y n m l}}
	global CONFIG_INPUT_CS461X
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT_GAMEPORT]];set CONFIG_INPUT_CS461X [sync_tristate $CONFIG_INPUT_CS461X $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x4 disabled {y}} else {configure_entry .menu48.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x4 disabled {m}} else {configure_entry .menu48.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x4 normal {m}} else {configure_entry .menu48.config.f.x4 disabled {m}}; configure_entry .menu48.config.f.x4 normal {n l}} else {configure_entry .menu48.config.f.x4 disabled {y n m l}}
	global CONFIG_INPUT_EMU10K1
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT_GAMEPORT]];set CONFIG_INPUT_EMU10K1 [sync_tristate $CONFIG_INPUT_EMU10K1 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x5 disabled {y}} else {configure_entry .menu48.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x5 disabled {m}} else {configure_entry .menu48.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x5 normal {m}} else {configure_entry .menu48.config.f.x5 disabled {m}}; configure_entry .menu48.config.f.x5 normal {n l}} else {configure_entry .menu48.config.f.x5 disabled {y n m l}}
	global CONFIG_INPUT_SERIO
	if {($CONFIG_INPUT != 0)} then {
	configure_entry .menu48.config.f.x6 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x6 normal {m}} else {configure_entry .menu48.config.f.x6 disabled {m}}; configure_entry .menu48.config.f.x6 normal {n l}} else {configure_entry .menu48.config.f.x6 disabled {y n m l}}
	global CONFIG_INPUT_SERPORT
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT_SERIO]];set CONFIG_INPUT_SERPORT [sync_tristate $CONFIG_INPUT_SERPORT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x7 disabled {y}} else {configure_entry .menu48.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x7 disabled {m}} else {configure_entry .menu48.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x7 normal {m}} else {configure_entry .menu48.config.f.x7 disabled {m}}; configure_entry .menu48.config.f.x7 normal {n l}} else {configure_entry .menu48.config.f.x7 disabled {y n m l}}
	if {($CONFIG_INPUT == 0)} then {configure_entry .menu48.config.f.x8 normal {m}} else {configure_entry .menu48.config.f.x8 disabled {m}}
	if {($CONFIG_INPUT != 0)} then {configure_entry .menu48.config.f.x9 normal {m}} else {configure_entry .menu48.config.f.x9 disabled {m}}
	global CONFIG_INPUT_ANALOG
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT]];set CONFIG_INPUT_ANALOG [sync_tristate $CONFIG_INPUT_ANALOG $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x10 disabled {y}} else {configure_entry .menu48.config.f.x10 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x10 disabled {m}} else {configure_entry .menu48.config.f.x10 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x10 normal {m}} else {configure_entry .menu48.config.f.x10 disabled {m}}; configure_entry .menu48.config.f.x10 normal {n l}} else {configure_entry .menu48.config.f.x10 disabled {y n m l}}
	global CONFIG_INPUT_A3D
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT]];set CONFIG_INPUT_A3D [sync_tristate $CONFIG_INPUT_A3D $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x11 disabled {y}} else {configure_entry .menu48.config.f.x11 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x11 disabled {m}} else {configure_entry .menu48.config.f.x11 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x11 normal {m}} else {configure_entry .menu48.config.f.x11 disabled {m}}; configure_entry .menu48.config.f.x11 normal {n l}} else {configure_entry .menu48.config.f.x11 disabled {y n m l}}
	global CONFIG_INPUT_ADI
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT]];set CONFIG_INPUT_ADI [sync_tristate $CONFIG_INPUT_ADI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x12 disabled {y}} else {configure_entry .menu48.config.f.x12 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x12 disabled {m}} else {configure_entry .menu48.config.f.x12 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x12 normal {m}} else {configure_entry .menu48.config.f.x12 disabled {m}}; configure_entry .menu48.config.f.x12 normal {n l}} else {configure_entry .menu48.config.f.x12 disabled {y n m l}}
	global CONFIG_INPUT_COBRA
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT]];set CONFIG_INPUT_COBRA [sync_tristate $CONFIG_INPUT_COBRA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x13 disabled {y}} else {configure_entry .menu48.config.f.x13 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x13 disabled {m}} else {configure_entry .menu48.config.f.x13 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x13 normal {m}} else {configure_entry .menu48.config.f.x13 disabled {m}}; configure_entry .menu48.config.f.x13 normal {n l}} else {configure_entry .menu48.config.f.x13 disabled {y n m l}}
	global CONFIG_INPUT_GF2K
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT]];set CONFIG_INPUT_GF2K [sync_tristate $CONFIG_INPUT_GF2K $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x14 disabled {y}} else {configure_entry .menu48.config.f.x14 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x14 disabled {m}} else {configure_entry .menu48.config.f.x14 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x14 normal {m}} else {configure_entry .menu48.config.f.x14 disabled {m}}; configure_entry .menu48.config.f.x14 normal {n l}} else {configure_entry .menu48.config.f.x14 disabled {y n m l}}
	global CONFIG_INPUT_GRIP
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT]];set CONFIG_INPUT_GRIP [sync_tristate $CONFIG_INPUT_GRIP $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x15 disabled {y}} else {configure_entry .menu48.config.f.x15 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x15 disabled {m}} else {configure_entry .menu48.config.f.x15 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x15 normal {m}} else {configure_entry .menu48.config.f.x15 disabled {m}}; configure_entry .menu48.config.f.x15 normal {n l}} else {configure_entry .menu48.config.f.x15 disabled {y n m l}}
	global CONFIG_INPUT_INTERACT
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT]];set CONFIG_INPUT_INTERACT [sync_tristate $CONFIG_INPUT_INTERACT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x16 disabled {y}} else {configure_entry .menu48.config.f.x16 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x16 disabled {m}} else {configure_entry .menu48.config.f.x16 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x16 normal {m}} else {configure_entry .menu48.config.f.x16 disabled {m}}; configure_entry .menu48.config.f.x16 normal {n l}} else {configure_entry .menu48.config.f.x16 disabled {y n m l}}
	global CONFIG_INPUT_TMDC
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT]];set CONFIG_INPUT_TMDC [sync_tristate $CONFIG_INPUT_TMDC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x17 disabled {y}} else {configure_entry .menu48.config.f.x17 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x17 disabled {m}} else {configure_entry .menu48.config.f.x17 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x17 normal {m}} else {configure_entry .menu48.config.f.x17 disabled {m}}; configure_entry .menu48.config.f.x17 normal {n l}} else {configure_entry .menu48.config.f.x17 disabled {y n m l}}
	global CONFIG_INPUT_SIDEWINDER
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT]];set CONFIG_INPUT_SIDEWINDER [sync_tristate $CONFIG_INPUT_SIDEWINDER $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x18 disabled {y}} else {configure_entry .menu48.config.f.x18 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x18 disabled {m}} else {configure_entry .menu48.config.f.x18 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x18 normal {m}} else {configure_entry .menu48.config.f.x18 disabled {m}}; configure_entry .menu48.config.f.x18 normal {n l}} else {configure_entry .menu48.config.f.x18 disabled {y n m l}}
	global CONFIG_USB
	global CONFIG_INPUT_IFORCE_USB
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_USB]];set CONFIG_INPUT_IFORCE_USB [sync_tristate $CONFIG_INPUT_IFORCE_USB $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x19 disabled {y}} else {configure_entry .menu48.config.f.x19 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x19 disabled {m}} else {configure_entry .menu48.config.f.x19 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x19 normal {m}} else {configure_entry .menu48.config.f.x19 disabled {m}}; configure_entry .menu48.config.f.x19 normal {n l}} else {configure_entry .menu48.config.f.x19 disabled {y n m l}}
	global CONFIG_INPUT_IFORCE_232
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_SERIO]];set CONFIG_INPUT_IFORCE_232 [sync_tristate $CONFIG_INPUT_IFORCE_232 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x20 disabled {y}} else {configure_entry .menu48.config.f.x20 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x20 disabled {m}} else {configure_entry .menu48.config.f.x20 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x20 normal {m}} else {configure_entry .menu48.config.f.x20 disabled {m}}; configure_entry .menu48.config.f.x20 normal {n l}} else {configure_entry .menu48.config.f.x20 disabled {y n m l}}
	global CONFIG_INPUT_WARRIOR
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_SERIO]];set CONFIG_INPUT_WARRIOR [sync_tristate $CONFIG_INPUT_WARRIOR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x21 disabled {y}} else {configure_entry .menu48.config.f.x21 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x21 disabled {m}} else {configure_entry .menu48.config.f.x21 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x21 normal {m}} else {configure_entry .menu48.config.f.x21 disabled {m}}; configure_entry .menu48.config.f.x21 normal {n l}} else {configure_entry .menu48.config.f.x21 disabled {y n m l}}
	global CONFIG_INPUT_MAGELLAN
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_SERIO]];set CONFIG_INPUT_MAGELLAN [sync_tristate $CONFIG_INPUT_MAGELLAN $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x22 disabled {y}} else {configure_entry .menu48.config.f.x22 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x22 disabled {m}} else {configure_entry .menu48.config.f.x22 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x22 normal {m}} else {configure_entry .menu48.config.f.x22 disabled {m}}; configure_entry .menu48.config.f.x22 normal {n l}} else {configure_entry .menu48.config.f.x22 disabled {y n m l}}
	global CONFIG_INPUT_SPACEORB
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_SERIO]];set CONFIG_INPUT_SPACEORB [sync_tristate $CONFIG_INPUT_SPACEORB $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x23 disabled {y}} else {configure_entry .menu48.config.f.x23 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x23 disabled {m}} else {configure_entry .menu48.config.f.x23 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x23 normal {m}} else {configure_entry .menu48.config.f.x23 disabled {m}}; configure_entry .menu48.config.f.x23 normal {n l}} else {configure_entry .menu48.config.f.x23 disabled {y n m l}}
	global CONFIG_INPUT_SPACEBALL
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_SERIO]];set CONFIG_INPUT_SPACEBALL [sync_tristate $CONFIG_INPUT_SPACEBALL $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x24 disabled {y}} else {configure_entry .menu48.config.f.x24 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x24 disabled {m}} else {configure_entry .menu48.config.f.x24 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x24 normal {m}} else {configure_entry .menu48.config.f.x24 disabled {m}}; configure_entry .menu48.config.f.x24 normal {n l}} else {configure_entry .menu48.config.f.x24 disabled {y n m l}}
	global CONFIG_INPUT_STINGER
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_SERIO]];set CONFIG_INPUT_STINGER [sync_tristate $CONFIG_INPUT_STINGER $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x25 disabled {y}} else {configure_entry .menu48.config.f.x25 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x25 disabled {m}} else {configure_entry .menu48.config.f.x25 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x25 normal {m}} else {configure_entry .menu48.config.f.x25 disabled {m}}; configure_entry .menu48.config.f.x25 normal {n l}} else {configure_entry .menu48.config.f.x25 disabled {y n m l}}
	global CONFIG_PARPORT
	global CONFIG_INPUT_DB9
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_PARPORT]];set CONFIG_INPUT_DB9 [sync_tristate $CONFIG_INPUT_DB9 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x26 disabled {y}} else {configure_entry .menu48.config.f.x26 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x26 disabled {m}} else {configure_entry .menu48.config.f.x26 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x26 normal {m}} else {configure_entry .menu48.config.f.x26 disabled {m}}; configure_entry .menu48.config.f.x26 normal {n l}} else {configure_entry .menu48.config.f.x26 disabled {y n m l}}
	global CONFIG_INPUT_GAMECON
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_PARPORT]];set CONFIG_INPUT_GAMECON [sync_tristate $CONFIG_INPUT_GAMECON $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x27 disabled {y}} else {configure_entry .menu48.config.f.x27 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x27 disabled {m}} else {configure_entry .menu48.config.f.x27 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x27 normal {m}} else {configure_entry .menu48.config.f.x27 disabled {m}}; configure_entry .menu48.config.f.x27 normal {n l}} else {configure_entry .menu48.config.f.x27 disabled {y n m l}}
	global CONFIG_INPUT_TURBOGRAFX
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_PARPORT]];set CONFIG_INPUT_TURBOGRAFX [sync_tristate $CONFIG_INPUT_TURBOGRAFX $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu48.config.f.x28 disabled {y}} else {configure_entry .menu48.config.f.x28 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu48.config.f.x28 disabled {m}} else {configure_entry .menu48.config.f.x28 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu48.config.f.x28 normal {m}} else {configure_entry .menu48.config.f.x28 disabled {m}}; configure_entry .menu48.config.f.x28 normal {n l}} else {configure_entry .menu48.config.f.x28 disabled {y n m l}}
	if {($CONFIG_INPUT == 0)} then {configure_entry .menu48.config.f.x29 normal {m}} else {configure_entry .menu48.config.f.x29 disabled {m}}
}


proc update_define_menu48 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_INPUT_SERIO
	global CONFIG_INPUT_GAMEPORT
set CONFIG_INPUT_SERIO [expr $CONFIG_INPUT_SERIO|16]
	global CONFIG_INPUT
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT]]; set CONFIG_INPUT_GAMEPORT [sync_tristate $CONFIG_INPUT_GAMEPORT $tmpvar_dep]; set CONFIG_INPUT_GAMEPORT [expr $CONFIG_INPUT_GAMEPORT&15]}
	global CONFIG_INPUT_NS558
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT_GAMEPORT]]; set CONFIG_INPUT_NS558 [sync_tristate $CONFIG_INPUT_NS558 $tmpvar_dep]; set CONFIG_INPUT_NS558 [expr $CONFIG_INPUT_NS558&15]}
	global CONFIG_INPUT_LIGHTNING
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT_GAMEPORT]]; set CONFIG_INPUT_LIGHTNING [sync_tristate $CONFIG_INPUT_LIGHTNING $tmpvar_dep]; set CONFIG_INPUT_LIGHTNING [expr $CONFIG_INPUT_LIGHTNING&15]}
	global CONFIG_INPUT_PCIGAME
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT_GAMEPORT]]; set CONFIG_INPUT_PCIGAME [sync_tristate $CONFIG_INPUT_PCIGAME $tmpvar_dep]; set CONFIG_INPUT_PCIGAME [expr $CONFIG_INPUT_PCIGAME&15]}
	global CONFIG_INPUT_CS461X
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT_GAMEPORT]]; set CONFIG_INPUT_CS461X [sync_tristate $CONFIG_INPUT_CS461X $tmpvar_dep]; set CONFIG_INPUT_CS461X [expr $CONFIG_INPUT_CS461X&15]}
	global CONFIG_INPUT_EMU10K1
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT_GAMEPORT]]; set CONFIG_INPUT_EMU10K1 [sync_tristate $CONFIG_INPUT_EMU10K1 $tmpvar_dep]; set CONFIG_INPUT_EMU10K1 [expr $CONFIG_INPUT_EMU10K1&15]}
	if {($CONFIG_INPUT != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_INPUT_SERIO == 2)} then {set CONFIG_INPUT_SERIO 1}; set CONFIG_INPUT_SERIO [expr $CONFIG_INPUT_SERIO&15]}
	global CONFIG_INPUT_SERPORT
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT_SERIO]]; set CONFIG_INPUT_SERPORT [sync_tristate $CONFIG_INPUT_SERPORT $tmpvar_dep]; set CONFIG_INPUT_SERPORT [expr $CONFIG_INPUT_SERPORT&15]}
	if {($CONFIG_INPUT == 0)} then {	global CONSTANT_N
set CONFIG_INPUT_GAMEPORT $CONSTANT_N }
	global CONFIG_INPUT_ANALOG
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT]]; set CONFIG_INPUT_ANALOG [sync_tristate $CONFIG_INPUT_ANALOG $tmpvar_dep]; set CONFIG_INPUT_ANALOG [expr $CONFIG_INPUT_ANALOG&15]}
	global CONFIG_INPUT_A3D
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT]]; set CONFIG_INPUT_A3D [sync_tristate $CONFIG_INPUT_A3D $tmpvar_dep]; set CONFIG_INPUT_A3D [expr $CONFIG_INPUT_A3D&15]}
	global CONFIG_INPUT_ADI
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT]]; set CONFIG_INPUT_ADI [sync_tristate $CONFIG_INPUT_ADI $tmpvar_dep]; set CONFIG_INPUT_ADI [expr $CONFIG_INPUT_ADI&15]}
	global CONFIG_INPUT_COBRA
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT]]; set CONFIG_INPUT_COBRA [sync_tristate $CONFIG_INPUT_COBRA $tmpvar_dep]; set CONFIG_INPUT_COBRA [expr $CONFIG_INPUT_COBRA&15]}
	global CONFIG_INPUT_GF2K
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT]]; set CONFIG_INPUT_GF2K [sync_tristate $CONFIG_INPUT_GF2K $tmpvar_dep]; set CONFIG_INPUT_GF2K [expr $CONFIG_INPUT_GF2K&15]}
	global CONFIG_INPUT_GRIP
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT]]; set CONFIG_INPUT_GRIP [sync_tristate $CONFIG_INPUT_GRIP $tmpvar_dep]; set CONFIG_INPUT_GRIP [expr $CONFIG_INPUT_GRIP&15]}
	global CONFIG_INPUT_INTERACT
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT]]; set CONFIG_INPUT_INTERACT [sync_tristate $CONFIG_INPUT_INTERACT $tmpvar_dep]; set CONFIG_INPUT_INTERACT [expr $CONFIG_INPUT_INTERACT&15]}
	global CONFIG_INPUT_TMDC
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT]]; set CONFIG_INPUT_TMDC [sync_tristate $CONFIG_INPUT_TMDC $tmpvar_dep]; set CONFIG_INPUT_TMDC [expr $CONFIG_INPUT_TMDC&15]}
	global CONFIG_INPUT_SIDEWINDER
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT]]; set CONFIG_INPUT_SIDEWINDER [sync_tristate $CONFIG_INPUT_SIDEWINDER $tmpvar_dep]; set CONFIG_INPUT_SIDEWINDER [expr $CONFIG_INPUT_SIDEWINDER&15]}
	global CONFIG_USB
	global CONFIG_INPUT_IFORCE_USB
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_USB]]; set CONFIG_INPUT_IFORCE_USB [sync_tristate $CONFIG_INPUT_IFORCE_USB $tmpvar_dep]; set CONFIG_INPUT_IFORCE_USB [expr $CONFIG_INPUT_IFORCE_USB&15]}
	global CONFIG_INPUT_IFORCE_232
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_SERIO]]; set CONFIG_INPUT_IFORCE_232 [sync_tristate $CONFIG_INPUT_IFORCE_232 $tmpvar_dep]; set CONFIG_INPUT_IFORCE_232 [expr $CONFIG_INPUT_IFORCE_232&15]}
	global CONFIG_INPUT_WARRIOR
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_SERIO]]; set CONFIG_INPUT_WARRIOR [sync_tristate $CONFIG_INPUT_WARRIOR $tmpvar_dep]; set CONFIG_INPUT_WARRIOR [expr $CONFIG_INPUT_WARRIOR&15]}
	global CONFIG_INPUT_MAGELLAN
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_SERIO]]; set CONFIG_INPUT_MAGELLAN [sync_tristate $CONFIG_INPUT_MAGELLAN $tmpvar_dep]; set CONFIG_INPUT_MAGELLAN [expr $CONFIG_INPUT_MAGELLAN&15]}
	global CONFIG_INPUT_SPACEORB
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_SERIO]]; set CONFIG_INPUT_SPACEORB [sync_tristate $CONFIG_INPUT_SPACEORB $tmpvar_dep]; set CONFIG_INPUT_SPACEORB [expr $CONFIG_INPUT_SPACEORB&15]}
	global CONFIG_INPUT_SPACEBALL
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_SERIO]]; set CONFIG_INPUT_SPACEBALL [sync_tristate $CONFIG_INPUT_SPACEBALL $tmpvar_dep]; set CONFIG_INPUT_SPACEBALL [expr $CONFIG_INPUT_SPACEBALL&15]}
	global CONFIG_INPUT_STINGER
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_INPUT_SERIO]]; set CONFIG_INPUT_STINGER [sync_tristate $CONFIG_INPUT_STINGER $tmpvar_dep]; set CONFIG_INPUT_STINGER [expr $CONFIG_INPUT_STINGER&15]}
	global CONFIG_PARPORT
	global CONFIG_INPUT_DB9
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_PARPORT]]; set CONFIG_INPUT_DB9 [sync_tristate $CONFIG_INPUT_DB9 $tmpvar_dep]; set CONFIG_INPUT_DB9 [expr $CONFIG_INPUT_DB9&15]}
	global CONFIG_INPUT_GAMECON
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_PARPORT]]; set CONFIG_INPUT_GAMECON [sync_tristate $CONFIG_INPUT_GAMECON $tmpvar_dep]; set CONFIG_INPUT_GAMECON [expr $CONFIG_INPUT_GAMECON&15]}
	global CONFIG_INPUT_TURBOGRAFX
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INPUT $CONFIG_PARPORT]]; set CONFIG_INPUT_TURBOGRAFX [sync_tristate $CONFIG_INPUT_TURBOGRAFX $tmpvar_dep]; set CONFIG_INPUT_TURBOGRAFX [expr $CONFIG_INPUT_TURBOGRAFX&15]}
}


proc menu49 {w title} {
	set oldFocus [focus]
	catch {focus .menu45}
	catch {destroy $w; unregister_active 49}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 49]]
	message $w.m -width 400 -aspect 300 -text \
		"Watchdog Cards"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Watchdog Cards" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 49; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 49; menu50 .menu50 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 49"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 49; menu48 .menu48 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 49; menu48 .menu48 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 49 0 "Watchdog Timer Support" CONFIG_WATCHDOG
	bool $w.config.f 49 1 "  Disable watchdog shutdown on close" CONFIG_WATCHDOG_NOWAYOUT
	tristate $w.config.f 49 2 "  Software Watchdog" CONFIG_SOFT_WATCHDOG
	tristate $w.config.f 49 3 "  WDT Watchdog timer" CONFIG_WDT
	tristate $w.config.f 49 4 "  WDT PCI Watchdog timer" CONFIG_WDTPCI
	bool $w.config.f 49 5 "    WDT501 features" CONFIG_WDT_501
	bool $w.config.f 49 6 "      Fan Tachometer" CONFIG_WDT_501_FAN
	tristate $w.config.f 49 7 "  Berkshire Products PC Watchdog" CONFIG_PCWATCHDOG
	tristate $w.config.f 49 8 "  Acquire SBC Watchdog Timer" CONFIG_ACQUIRE_WDT
	tristate $w.config.f 49 9 "  Advantech SBC Watchdog Timer" CONFIG_ADVANTECH_WDT
	tristate $w.config.f 49 10 "  Eurotech CPU-1220/1410 Watchdog Timer" CONFIG_EUROTECH_WDT
	tristate $w.config.f 49 11 "  IB700 SBC Watchdog Timer" CONFIG_IB700_WDT
	tristate $w.config.f 49 12 "  Intel i810 TCO timer / Watchdog" CONFIG_I810_TCO
	tristate $w.config.f 49 13 "  Mixcom Watchdog" CONFIG_MIXCOMWD
	tristate $w.config.f 49 14 "  SBC-60XX Watchdog Timer" CONFIG_60XX_WDT
	tristate $w.config.f 49 15 "  W83877F (EMACS) Watchdog Timer" CONFIG_W83877F_WDT
	tristate $w.config.f 49 16 "  ZF MachZ Watchdog" CONFIG_MACHZ_WDT



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu45] == 0} then {menu45 .menu45 "Character devices"}
	set winx [expr [winfo x .menu45]+30]; set winy [expr [winfo y .menu45]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu49 {} {
	global CONFIG_WATCHDOG
	global CONFIG_WATCHDOG_NOWAYOUT
	if {($CONFIG_WATCHDOG != 0)} then {
	configure_entry .menu49.config.f.x1 normal {n l y}} else {configure_entry .menu49.config.f.x1 disabled {y n l}}
	global CONFIG_MODULES
	global CONFIG_SOFT_WATCHDOG
	if {($CONFIG_WATCHDOG != 0)} then {
	configure_entry .menu49.config.f.x2 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu49.config.f.x2 normal {m}} else {configure_entry .menu49.config.f.x2 disabled {m}}; configure_entry .menu49.config.f.x2 normal {n l}} else {configure_entry .menu49.config.f.x2 disabled {y n m l}}
	global CONFIG_WDT
	if {($CONFIG_WATCHDOG != 0)} then {
	configure_entry .menu49.config.f.x3 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu49.config.f.x3 normal {m}} else {configure_entry .menu49.config.f.x3 disabled {m}}; configure_entry .menu49.config.f.x3 normal {n l}} else {configure_entry .menu49.config.f.x3 disabled {y n m l}}
	global CONFIG_WDTPCI
	if {($CONFIG_WATCHDOG != 0)} then {
	configure_entry .menu49.config.f.x4 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu49.config.f.x4 normal {m}} else {configure_entry .menu49.config.f.x4 disabled {m}}; configure_entry .menu49.config.f.x4 normal {n l}} else {configure_entry .menu49.config.f.x4 disabled {y n m l}}
	global CONFIG_WDT_501
	if {($CONFIG_WATCHDOG != 0) && ($CONFIG_WDT != 0)} then {
	configure_entry .menu49.config.f.x5 normal {n l y}} else {configure_entry .menu49.config.f.x5 disabled {y n l}}
	global CONFIG_WDT_501_FAN
	if {($CONFIG_WATCHDOG != 0) && ($CONFIG_WDT != 0) && ($CONFIG_WDT_501 == 1)} then {
	configure_entry .menu49.config.f.x6 normal {n l y}} else {configure_entry .menu49.config.f.x6 disabled {y n l}}
	global CONFIG_PCWATCHDOG
	if {($CONFIG_WATCHDOG != 0)} then {
	configure_entry .menu49.config.f.x7 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu49.config.f.x7 normal {m}} else {configure_entry .menu49.config.f.x7 disabled {m}}; configure_entry .menu49.config.f.x7 normal {n l}} else {configure_entry .menu49.config.f.x7 disabled {y n m l}}
	global CONFIG_ACQUIRE_WDT
	if {($CONFIG_WATCHDOG != 0)} then {
	configure_entry .menu49.config.f.x8 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu49.config.f.x8 normal {m}} else {configure_entry .menu49.config.f.x8 disabled {m}}; configure_entry .menu49.config.f.x8 normal {n l}} else {configure_entry .menu49.config.f.x8 disabled {y n m l}}
	global CONFIG_ADVANTECH_WDT
	if {($CONFIG_WATCHDOG != 0)} then {
	configure_entry .menu49.config.f.x9 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu49.config.f.x9 normal {m}} else {configure_entry .menu49.config.f.x9 disabled {m}}; configure_entry .menu49.config.f.x9 normal {n l}} else {configure_entry .menu49.config.f.x9 disabled {y n m l}}
	global CONFIG_EUROTECH_WDT
	if {($CONFIG_WATCHDOG != 0)} then {
	configure_entry .menu49.config.f.x10 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu49.config.f.x10 normal {m}} else {configure_entry .menu49.config.f.x10 disabled {m}}; configure_entry .menu49.config.f.x10 normal {n l}} else {configure_entry .menu49.config.f.x10 disabled {y n m l}}
	global CONFIG_IB700_WDT
	if {($CONFIG_WATCHDOG != 0)} then {
	configure_entry .menu49.config.f.x11 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu49.config.f.x11 normal {m}} else {configure_entry .menu49.config.f.x11 disabled {m}}; configure_entry .menu49.config.f.x11 normal {n l}} else {configure_entry .menu49.config.f.x11 disabled {y n m l}}
	global CONFIG_I810_TCO
	if {($CONFIG_WATCHDOG != 0)} then {
	configure_entry .menu49.config.f.x12 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu49.config.f.x12 normal {m}} else {configure_entry .menu49.config.f.x12 disabled {m}}; configure_entry .menu49.config.f.x12 normal {n l}} else {configure_entry .menu49.config.f.x12 disabled {y n m l}}
	global CONFIG_MIXCOMWD
	if {($CONFIG_WATCHDOG != 0)} then {
	configure_entry .menu49.config.f.x13 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu49.config.f.x13 normal {m}} else {configure_entry .menu49.config.f.x13 disabled {m}}; configure_entry .menu49.config.f.x13 normal {n l}} else {configure_entry .menu49.config.f.x13 disabled {y n m l}}
	global CONFIG_60XX_WDT
	if {($CONFIG_WATCHDOG != 0)} then {
	configure_entry .menu49.config.f.x14 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu49.config.f.x14 normal {m}} else {configure_entry .menu49.config.f.x14 disabled {m}}; configure_entry .menu49.config.f.x14 normal {n l}} else {configure_entry .menu49.config.f.x14 disabled {y n m l}}
	global CONFIG_W83877F_WDT
	if {($CONFIG_WATCHDOG != 0)} then {
	configure_entry .menu49.config.f.x15 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu49.config.f.x15 normal {m}} else {configure_entry .menu49.config.f.x15 disabled {m}}; configure_entry .menu49.config.f.x15 normal {n l}} else {configure_entry .menu49.config.f.x15 disabled {y n m l}}
	global CONFIG_MACHZ_WDT
	if {($CONFIG_WATCHDOG != 0)} then {
	configure_entry .menu49.config.f.x16 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu49.config.f.x16 normal {m}} else {configure_entry .menu49.config.f.x16 disabled {m}}; configure_entry .menu49.config.f.x16 normal {n l}} else {configure_entry .menu49.config.f.x16 disabled {y n m l}}
}


proc update_define_menu49 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_SOFT_WATCHDOG
	global CONFIG_WDT
	global CONFIG_WDTPCI
	global CONFIG_PCWATCHDOG
	global CONFIG_ACQUIRE_WDT
	global CONFIG_ADVANTECH_WDT
	global CONFIG_EUROTECH_WDT
	global CONFIG_IB700_WDT
	global CONFIG_I810_TCO
	global CONFIG_MIXCOMWD
	global CONFIG_60XX_WDT
	global CONFIG_W83877F_WDT
	global CONFIG_MACHZ_WDT
	global CONFIG_WATCHDOG_NOWAYOUT
set CONFIG_WATCHDOG_NOWAYOUT [expr $CONFIG_WATCHDOG_NOWAYOUT|16]
set CONFIG_SOFT_WATCHDOG [expr $CONFIG_SOFT_WATCHDOG|16]
set CONFIG_WDT [expr $CONFIG_WDT|16]
set CONFIG_WDTPCI [expr $CONFIG_WDTPCI|16]
	global CONFIG_WDT_501
set CONFIG_WDT_501 [expr $CONFIG_WDT_501|16]
	global CONFIG_WDT_501_FAN
set CONFIG_WDT_501_FAN [expr $CONFIG_WDT_501_FAN|16]
set CONFIG_PCWATCHDOG [expr $CONFIG_PCWATCHDOG|16]
set CONFIG_ACQUIRE_WDT [expr $CONFIG_ACQUIRE_WDT|16]
set CONFIG_ADVANTECH_WDT [expr $CONFIG_ADVANTECH_WDT|16]
set CONFIG_EUROTECH_WDT [expr $CONFIG_EUROTECH_WDT|16]
set CONFIG_IB700_WDT [expr $CONFIG_IB700_WDT|16]
set CONFIG_I810_TCO [expr $CONFIG_I810_TCO|16]
set CONFIG_MIXCOMWD [expr $CONFIG_MIXCOMWD|16]
set CONFIG_60XX_WDT [expr $CONFIG_60XX_WDT|16]
set CONFIG_W83877F_WDT [expr $CONFIG_W83877F_WDT|16]
set CONFIG_MACHZ_WDT [expr $CONFIG_MACHZ_WDT|16]
	global CONFIG_WATCHDOG
	if {($CONFIG_WATCHDOG != 0)} then {
	set CONFIG_WATCHDOG_NOWAYOUT [expr $CONFIG_WATCHDOG_NOWAYOUT&15]}
	if {($CONFIG_WATCHDOG != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_SOFT_WATCHDOG == 2)} then {set CONFIG_SOFT_WATCHDOG 1}; set CONFIG_SOFT_WATCHDOG [expr $CONFIG_SOFT_WATCHDOG&15]}
	if {($CONFIG_WATCHDOG != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_WDT == 2)} then {set CONFIG_WDT 1}; set CONFIG_WDT [expr $CONFIG_WDT&15]}
	if {($CONFIG_WATCHDOG != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_WDTPCI == 2)} then {set CONFIG_WDTPCI 1}; set CONFIG_WDTPCI [expr $CONFIG_WDTPCI&15]}
	if {($CONFIG_WATCHDOG != 0) && ($CONFIG_WDT != 0)} then {
	set CONFIG_WDT_501 [expr $CONFIG_WDT_501&15]}
	if {($CONFIG_WATCHDOG != 0) && ($CONFIG_WDT != 0) && ($CONFIG_WDT_501 == 1)} then {
	set CONFIG_WDT_501_FAN [expr $CONFIG_WDT_501_FAN&15]}
	if {($CONFIG_WATCHDOG != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_PCWATCHDOG == 2)} then {set CONFIG_PCWATCHDOG 1}; set CONFIG_PCWATCHDOG [expr $CONFIG_PCWATCHDOG&15]}
	if {($CONFIG_WATCHDOG != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ACQUIRE_WDT == 2)} then {set CONFIG_ACQUIRE_WDT 1}; set CONFIG_ACQUIRE_WDT [expr $CONFIG_ACQUIRE_WDT&15]}
	if {($CONFIG_WATCHDOG != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_ADVANTECH_WDT == 2)} then {set CONFIG_ADVANTECH_WDT 1}; set CONFIG_ADVANTECH_WDT [expr $CONFIG_ADVANTECH_WDT&15]}
	if {($CONFIG_WATCHDOG != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_EUROTECH_WDT == 2)} then {set CONFIG_EUROTECH_WDT 1}; set CONFIG_EUROTECH_WDT [expr $CONFIG_EUROTECH_WDT&15]}
	if {($CONFIG_WATCHDOG != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_IB700_WDT == 2)} then {set CONFIG_IB700_WDT 1}; set CONFIG_IB700_WDT [expr $CONFIG_IB700_WDT&15]}
	if {($CONFIG_WATCHDOG != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_I810_TCO == 2)} then {set CONFIG_I810_TCO 1}; set CONFIG_I810_TCO [expr $CONFIG_I810_TCO&15]}
	if {($CONFIG_WATCHDOG != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_MIXCOMWD == 2)} then {set CONFIG_MIXCOMWD 1}; set CONFIG_MIXCOMWD [expr $CONFIG_MIXCOMWD&15]}
	if {($CONFIG_WATCHDOG != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_60XX_WDT == 2)} then {set CONFIG_60XX_WDT 1}; set CONFIG_60XX_WDT [expr $CONFIG_60XX_WDT&15]}
	if {($CONFIG_WATCHDOG != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_W83877F_WDT == 2)} then {set CONFIG_W83877F_WDT 1}; set CONFIG_W83877F_WDT [expr $CONFIG_W83877F_WDT&15]}
	if {($CONFIG_WATCHDOG != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_MACHZ_WDT == 2)} then {set CONFIG_MACHZ_WDT 1}; set CONFIG_MACHZ_WDT [expr $CONFIG_MACHZ_WDT&15]}
}


proc menu50 {w title} {
	set oldFocus [focus]
	catch {focus .menu45}
	catch {destroy $w; unregister_active 50}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 50]]
	message $w.m -width 400 -aspect 300 -text \
		"Ftape, the floppy tape device driver"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Ftape, the floppy tape device driver" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 50; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 50; menu51 .menu51 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 50"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 50; menu49 .menu49 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 50; menu49 .menu49 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 50 0 "Ftape (QIC-80/Travan) support" CONFIG_FTAPE
	dep_tristate $w.config.f 50 1 "  Zftape, the VFS interface" CONFIG_ZFTAPE
	int $w.config.f 50 2 "  Default block size" CONFIG_ZFT_DFLT_BLK_SZ
	comment $w.config.f 50 3 "  The compressor will be built as a module only!"
	int $w.config.f 50 4 "  Number of ftape buffers (EXPERIMENTAL)" CONFIG_FT_NR_BUFFERS
	bool $w.config.f 50 5 "  Enable procfs status report (+2kb)" CONFIG_FT_PROC_FS
	global tmpvar_14
	minimenu $w.config.f 50 6 "Debugging output" tmpvar_14 CONFIG_FT_NORMAL_DEBUG
	menu $w.config.f.x6.x.menu -tearoffcommand "menutitle \"Debugging output\""
	$w.config.f.x6.x.menu add radiobutton -label "Normal" -variable tmpvar_14 -value "Normal" -command "update_active"
	$w.config.f.x6.x.menu add radiobutton -label "Excessive" -variable tmpvar_14 -value "Excessive" -command "update_active"
	$w.config.f.x6.x.menu add radiobutton -label "Reduced" -variable tmpvar_14 -value "Reduced" -command "update_active"
	$w.config.f.x6.x.menu add radiobutton -label "None" -variable tmpvar_14 -value "None" -command "update_active"
	menusplit $w $w.config.f.x6.x.menu 4
	comment $w.config.f 50 7 "Hardware configuration"
	global tmpvar_15
	minimenu $w.config.f 50 8 "Floppy tape controllers" tmpvar_15 CONFIG_FT_STD_FDC
	menu $w.config.f.x8.x.menu -tearoffcommand "menutitle \"Floppy tape controllers\""
	$w.config.f.x8.x.menu add radiobutton -label "Standard" -variable tmpvar_15 -value "Standard" -command "update_active"
	$w.config.f.x8.x.menu add radiobutton -label "MACH-2" -variable tmpvar_15 -value "MACH-2" -command "update_active"
	$w.config.f.x8.x.menu add radiobutton -label "FC-10/FC-20" -variable tmpvar_15 -value "FC-10/FC-20" -command "update_active"
	$w.config.f.x8.x.menu add radiobutton -label "Alt/82078" -variable tmpvar_15 -value "Alt/82078" -command "update_active"
	menusplit $w $w.config.f.x8.x.menu 4
	comment $w.config.f 50 9 "   Consult the manuals of your tape drive for the correct settings!"
	hex $w.config.f 50 10 "  IO base of the floppy disk controller" CONFIG_FT_FDC_BASE
	int $w.config.f 50 11 "  IRQ channel of the floppy disk controller" CONFIG_FT_FDC_IRQ
	int $w.config.f 50 12 "  DMA channel of the floppy disk controller" CONFIG_FT_FDC_DMA
	int $w.config.f 50 13 "  Default FIFO threshold (EXPERIMENTAL)" CONFIG_FT_FDC_THR
	int $w.config.f 50 14 "  Maximal data rate to use (EXPERIMENTAL)" CONFIG_FT_FDC_MAX_RATE



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu45] == 0} then {menu45 .menu45 "Character devices"}
	set winx [expr [winfo x .menu45]+30]; set winy [expr [winfo y .menu45]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu50 {} {
	global CONFIG_FTAPE
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu50.config.f.x0 normal {m}} else {configure_entry .menu50.config.f.x0 disabled {m}}
	global CONFIG_ZFTAPE
	if {($CONFIG_FTAPE != 0) && ($CONFIG_FTAPE == 1 || $CONFIG_FTAPE == 2 || $CONFIG_FTAPE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FTAPE]];set CONFIG_ZFTAPE [sync_tristate $CONFIG_ZFTAPE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu50.config.f.x1 disabled {y}} else {configure_entry .menu50.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu50.config.f.x1 disabled {m}} else {configure_entry .menu50.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu50.config.f.x1 normal {m}} else {configure_entry .menu50.config.f.x1 disabled {m}}; configure_entry .menu50.config.f.x1 normal {n l}} else {configure_entry .menu50.config.f.x1 disabled {y n m l}}
	global CONFIG_ZFT_DFLT_BLK_SZ
	if {($CONFIG_FTAPE != 0) && ($CONFIG_ZFTAPE != 0)} then {.menu50.config.f.x2.x configure -state normal -foreground [ cget .ref -foreground ]; .menu50.config.f.x2.l configure -state normal; } else {.menu50.config.f.x2.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu50.config.f.x2.l configure -state disabled}
	if {($CONFIG_FTAPE != 0) && ($CONFIG_ZFTAPE != 0)} then {configure_entry .menu50.config.f.x3 normal {m}} else {configure_entry .menu50.config.f.x3 disabled {m}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_FT_NR_BUFFERS
	if {($CONFIG_FTAPE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {.menu50.config.f.x4.x configure -state normal -foreground [ cget .ref -foreground ]; .menu50.config.f.x4.l configure -state normal; } else {.menu50.config.f.x4.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu50.config.f.x4.l configure -state disabled}
	global CONFIG_PROC_FS
	global CONFIG_FT_PROC_FS
	if {($CONFIG_FTAPE != 0) && ($CONFIG_PROC_FS == 1)} then {
	configure_entry .menu50.config.f.x5 normal {n l y}} else {configure_entry .menu50.config.f.x5 disabled {y n l}}
	if {($CONFIG_FTAPE != 0)} then {configure_entry .menu50.config.f.x6 normal {x l}} else {configure_entry .menu50.config.f.x6 disabled {x l}}
	if {($CONFIG_FTAPE != 0)} then {configure_entry .menu50.config.f.x7 normal {m}} else {configure_entry .menu50.config.f.x7 disabled {m}}
	if {($CONFIG_FTAPE != 0)} then {configure_entry .menu50.config.f.x8 normal {x l}} else {configure_entry .menu50.config.f.x8 disabled {x l}}
	global CONFIG_FT_STD_FDC
	if {($CONFIG_FTAPE != 0) && ($CONFIG_FT_STD_FDC != 1)} then {configure_entry .menu50.config.f.x9 normal {m}} else {configure_entry .menu50.config.f.x9 disabled {m}}
	global CONFIG_FT_FDC_BASE
	if {($CONFIG_FTAPE != 0) && ($CONFIG_FT_STD_FDC != 1)} then {.menu50.config.f.x10.x configure -state normal -foreground [ cget .ref -foreground ]; .menu50.config.f.x10.l configure -state normal; } else {.menu50.config.f.x10.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu50.config.f.x10.l configure -state disabled}
	global CONFIG_FT_FDC_IRQ
	if {($CONFIG_FTAPE != 0) && ($CONFIG_FT_STD_FDC != 1)} then {.menu50.config.f.x11.x configure -state normal -foreground [ cget .ref -foreground ]; .menu50.config.f.x11.l configure -state normal; } else {.menu50.config.f.x11.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu50.config.f.x11.l configure -state disabled}
	global CONFIG_FT_FDC_DMA
	if {($CONFIG_FTAPE != 0) && ($CONFIG_FT_STD_FDC != 1)} then {.menu50.config.f.x12.x configure -state normal -foreground [ cget .ref -foreground ]; .menu50.config.f.x12.l configure -state normal; } else {.menu50.config.f.x12.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu50.config.f.x12.l configure -state disabled}
	global CONFIG_FT_FDC_THR
	if {($CONFIG_FTAPE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {.menu50.config.f.x13.x configure -state normal -foreground [ cget .ref -foreground ]; .menu50.config.f.x13.l configure -state normal; } else {.menu50.config.f.x13.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu50.config.f.x13.l configure -state disabled}
	global CONFIG_FT_FDC_MAX_RATE
	if {($CONFIG_FTAPE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {.menu50.config.f.x14.x configure -state normal -foreground [ cget .ref -foreground ]; .menu50.config.f.x14.l configure -state normal; } else {.menu50.config.f.x14.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu50.config.f.x14.l configure -state disabled}
}


proc update_define_menu50 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_FTAPE
	global CONFIG_ZFT_COMPRESSOR
	global CONFIG_FT_ALPHA_CLOCK
	global CONFIG_FT_PROC_FS
set CONFIG_FT_PROC_FS [expr $CONFIG_FT_PROC_FS|16]

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_FTAPE == 2)} then {set CONFIG_FTAPE 1}}
	global CONFIG_ZFTAPE
	if {($CONFIG_FTAPE != 0) && ($CONFIG_FTAPE == 1 || $CONFIG_FTAPE == 2 || $CONFIG_FTAPE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FTAPE]]; set CONFIG_ZFTAPE [sync_tristate $CONFIG_ZFTAPE $tmpvar_dep]; set CONFIG_ZFTAPE [expr $CONFIG_ZFTAPE&15]}
	global CONFIG_ZFT_DFLT_BLK_SZ
	if {($CONFIG_FTAPE != 0) && ($CONFIG_ZFTAPE != 0)} then {validate_int CONFIG_ZFT_DFLT_BLK_SZ "$CONFIG_ZFT_DFLT_BLK_SZ" 10240}
	if {($CONFIG_FTAPE != 0) && ($CONFIG_ZFTAPE != 0)} then {	global CONSTANT_M
set CONFIG_ZFT_COMPRESSOR $CONSTANT_M }
	global CONFIG_EXPERIMENTAL
	global CONFIG_FT_NR_BUFFERS
	if {($CONFIG_FTAPE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {validate_int CONFIG_FT_NR_BUFFERS "$CONFIG_FT_NR_BUFFERS" 3}
	global CONFIG_PROC_FS
	if {($CONFIG_FTAPE != 0) && ($CONFIG_PROC_FS == 1)} then {
	set CONFIG_FT_PROC_FS [expr $CONFIG_FT_PROC_FS&15]}
	global tmpvar_14
	global CONFIG_FT_NORMAL_DEBUG
	if {$tmpvar_14 == "Normal"} then {set CONFIG_FT_NORMAL_DEBUG 1} else {set CONFIG_FT_NORMAL_DEBUG 0}
	global CONFIG_FT_FULL_DEBUG
	if {$tmpvar_14 == "Excessive"} then {set CONFIG_FT_FULL_DEBUG 1} else {set CONFIG_FT_FULL_DEBUG 0}
	global CONFIG_FT_NO_TRACE
	if {$tmpvar_14 == "Reduced"} then {set CONFIG_FT_NO_TRACE 1} else {set CONFIG_FT_NO_TRACE 0}
	global CONFIG_FT_NO_TRACE_AT_ALL
	if {$tmpvar_14 == "None"} then {set CONFIG_FT_NO_TRACE_AT_ALL 1} else {set CONFIG_FT_NO_TRACE_AT_ALL 0}
	global tmpvar_15
	global CONFIG_FT_STD_FDC
	if {$tmpvar_15 == "Standard"} then {set CONFIG_FT_STD_FDC 1} else {set CONFIG_FT_STD_FDC 0}
	global CONFIG_FT_MACH2
	if {$tmpvar_15 == "MACH-2"} then {set CONFIG_FT_MACH2 1} else {set CONFIG_FT_MACH2 0}
	global CONFIG_FT_PROBE_FC10
	if {$tmpvar_15 == "FC-10/FC-20"} then {set CONFIG_FT_PROBE_FC10 1} else {set CONFIG_FT_PROBE_FC10 0}
	global CONFIG_FT_ALT_FDC
	if {$tmpvar_15 == "Alt/82078"} then {set CONFIG_FT_ALT_FDC 1} else {set CONFIG_FT_ALT_FDC 0}
	global CONFIG_FT_FDC_BASE
	if {($CONFIG_FTAPE != 0) && ($CONFIG_FT_STD_FDC != 1)} then {validate_hex CONFIG_FT_FDC_BASE "$CONFIG_FT_FDC_BASE" 0}
	global CONFIG_FT_FDC_IRQ
	if {($CONFIG_FTAPE != 0) && ($CONFIG_FT_STD_FDC != 1)} then {validate_int CONFIG_FT_FDC_IRQ "$CONFIG_FT_FDC_IRQ" 0}
	global CONFIG_FT_FDC_DMA
	if {($CONFIG_FTAPE != 0) && ($CONFIG_FT_STD_FDC != 1)} then {validate_int CONFIG_FT_FDC_DMA "$CONFIG_FT_FDC_DMA" 0}
	global CONFIG_FT_FDC_THR
	if {($CONFIG_FTAPE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {validate_int CONFIG_FT_FDC_THR "$CONFIG_FT_FDC_THR" 8}
	global CONFIG_FT_FDC_MAX_RATE
	if {($CONFIG_FTAPE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {validate_int CONFIG_FT_FDC_MAX_RATE "$CONFIG_FT_FDC_MAX_RATE" 2000}
	if {($CONFIG_FTAPE != 0)} then {set CONFIG_FT_ALPHA_CLOCK 0 }
}


proc menu51 {w title} {
	set oldFocus [focus]
	catch {focus .menu45}
	catch {destroy $w; unregister_active 51}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 51]]
	message $w.m -width 400 -aspect 300 -text \
		"PCMCIA character devices"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "PCMCIA character devices" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 51; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 51; catch {destroy .menu45}; unregister_active 45; menu52 .menu52 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 51"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 51; menu50 .menu50 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 51; menu50 .menu50 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 51 0 "PCMCIA serial device support" CONFIG_PCMCIA_SERIAL_CS



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu45] == 0} then {menu45 .menu45 "Character devices"}
	set winx [expr [winfo x .menu45]+30]; set winy [expr [winfo y .menu45]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu51 {} {
	global CONFIG_MODULES
	global CONFIG_HOTPLUG
	global CONFIG_PCMCIA
	global CONFIG_SERIAL
	global CONFIG_PCMCIA_SERIAL_CS
	if {($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_SERIAL == 1 || $CONFIG_SERIAL == 2 || $CONFIG_SERIAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SERIAL]];set CONFIG_PCMCIA_SERIAL_CS [sync_tristate $CONFIG_PCMCIA_SERIAL_CS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu51.config.f.x0 disabled {y}} else {configure_entry .menu51.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu51.config.f.x0 disabled {m}} else {configure_entry .menu51.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu51.config.f.x0 normal {m}} else {configure_entry .menu51.config.f.x0 disabled {m}}; configure_entry .menu51.config.f.x0 normal {n l}} else {configure_entry .menu51.config.f.x0 disabled {y n m l}}
}


proc update_define_menu51 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_PCMCIA_CHRDEV
	global CONFIG_HOTPLUG
	global CONFIG_PCMCIA
	global CONFIG_SERIAL
	global CONFIG_PCMCIA_SERIAL_CS
	if {($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_SERIAL == 1 || $CONFIG_SERIAL == 2 || $CONFIG_SERIAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SERIAL]]; set CONFIG_PCMCIA_SERIAL_CS [sync_tristate $CONFIG_PCMCIA_SERIAL_CS $tmpvar_dep]; set CONFIG_PCMCIA_SERIAL_CS [expr $CONFIG_PCMCIA_SERIAL_CS&15]}
	if {($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_PCMCIA_SERIAL_CS == 1)} then {	global CONSTANT_Y
set CONFIG_PCMCIA_CHRDEV $CONSTANT_Y }
}


menu_option menu52 52 "File systems"
proc menu52 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 52}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 52]]
	message $w.m -width 400 -aspect 300 -text \
		"File systems"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "File systems" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 52; break"
	set nextscript "catch {focus $oldFocus}; menu53 .menu53 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 52"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 52; menu51 .menu51 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 52; menu51 .menu51 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 52 0 "Quota support" CONFIG_QUOTA
	tristate $w.config.f 52 1 "Kernel automounter support" CONFIG_AUTOFS_FS
	tristate $w.config.f 52 2 "Kernel automounter version 4 support (also supports v3)" CONFIG_AUTOFS4_FS
	dep_tristate $w.config.f 52 3 "Reiserfs support" CONFIG_REISERFS_FS
	dep_bool $w.config.f 52 4 "  Have reiserfs do extra internal checking" CONFIG_REISERFS_CHECK
	dep_bool $w.config.f 52 5 "  Stats in /proc/fs/reiserfs" CONFIG_REISERFS_PROC_INFO
	dep_tristate $w.config.f 52 6 "ADFS file system support" CONFIG_ADFS_FS
	dep_bool $w.config.f 52 7 "  ADFS write support (DANGEROUS)" CONFIG_ADFS_FS_RW
	dep_tristate $w.config.f 52 8 "Amiga FFS file system support (EXPERIMENTAL)" CONFIG_AFFS_FS
	dep_tristate $w.config.f 52 9 "Apple Macintosh file system support (EXPERIMENTAL)" CONFIG_HFS_FS
	dep_tristate $w.config.f 52 10 "BFS file system support (EXPERIMENTAL)" CONFIG_BFS_FS
	tristate $w.config.f 52 11 "Ext3 journalling file system support (EXPERIMENTAL)" CONFIG_EXT3_FS
	dep_bool $w.config.f 52 12 "  JBD (ext3) debugging support" CONFIG_JBD_DEBUG
	tristate $w.config.f 52 13 "DOS FAT fs support" CONFIG_FAT_FS
	dep_tristate $w.config.f 52 14 "  MSDOS fs support" CONFIG_MSDOS_FS
	dep_tristate $w.config.f 52 15 "    UMSDOS: Unix-like file system on top of standard MSDOS fs" CONFIG_UMSDOS_FS
	dep_tristate $w.config.f 52 16 "  VFAT (Windows-95) fs support" CONFIG_VFAT_FS
	dep_tristate $w.config.f 52 17 "EFS file system support (read only) (EXPERIMENTAL)" CONFIG_EFS_FS
	dep_tristate $w.config.f 52 18 "Journalling Flash File System (JFFS) support" CONFIG_JFFS_FS
	int $w.config.f 52 19 "JFFS debugging verbosity (0 = quiet, 3 = noisy)" CONFIG_JFFS_FS_VERBOSE
	bool $w.config.f 52 20 "JFFS stats available in /proc filesystem" CONFIG_JFFS_PROC_FS
	dep_tristate $w.config.f 52 21 "Journalling Flash File System v2 (JFFS2) support" CONFIG_JFFS2_FS
	int $w.config.f 52 22 "JFFS2 debugging verbosity (0 = quiet, 2 = noisy)" CONFIG_JFFS2_FS_DEBUG
	tristate $w.config.f 52 23 "Compressed ROM file system support" CONFIG_CRAMFS
	bool $w.config.f 52 24 "Virtual memory file system support (former shm fs)" CONFIG_TMPFS
	tristate $w.config.f 52 25 "Simple RAM-based file system support" CONFIG_RAMFS
	tristate $w.config.f 52 26 "ISO 9660 CDROM file system support" CONFIG_ISO9660_FS
	dep_bool $w.config.f 52 27 "  Microsoft Joliet CDROM extensions" CONFIG_JOLIET
	dep_bool $w.config.f 52 28 "  Transparent decompression extension" CONFIG_ZISOFS
	tristate $w.config.f 52 29 "Minix fs support" CONFIG_MINIX_FS
	tristate $w.config.f 52 30 "FreeVxFS file system support (VERITAS VxFS(TM) compatible)" CONFIG_VXFS_FS
	tristate $w.config.f 52 31 "NTFS file system support (read only)" CONFIG_NTFS_FS
	dep_bool $w.config.f 52 32 "  NTFS write support (DANGEROUS)" CONFIG_NTFS_RW
	tristate $w.config.f 52 33 "OS/2 HPFS file system support" CONFIG_HPFS_FS
	bool $w.config.f 52 34 "/proc file system support" CONFIG_PROC_FS
	dep_bool $w.config.f 52 35 "/dev file system support (EXPERIMENTAL)" CONFIG_DEVFS_FS
	dep_bool $w.config.f 52 36 "  Automatically mount at boot" CONFIG_DEVFS_MOUNT
	dep_bool $w.config.f 52 37 "  Debug devfs" CONFIG_DEVFS_DEBUG
	dep_bool $w.config.f 52 38 "/dev/pts file system for Unix98 PTYs" CONFIG_DEVPTS_FS
	dep_tristate $w.config.f 52 39 "QNX4 file system support (read only) (EXPERIMENTAL)" CONFIG_QNX4FS_FS
	dep_bool $w.config.f 52 40 "  QNX4FS write support (DANGEROUS)" CONFIG_QNX4FS_RW
	tristate $w.config.f 52 41 "ROM file system support" CONFIG_ROMFS_FS
	tristate $w.config.f 52 42 "Second extended fs support" CONFIG_EXT2_FS
	tristate $w.config.f 52 43 "System V/Xenix/V7/Coherent file system support" CONFIG_SYSV_FS
	tristate $w.config.f 52 44 "UDF file system support (read only)" CONFIG_UDF_FS
	dep_bool $w.config.f 52 45 "  UDF write support (DANGEROUS)" CONFIG_UDF_RW
	tristate $w.config.f 52 46 "UFS file system support (read only)" CONFIG_UFS_FS
	dep_bool $w.config.f 52 47 "  UFS file system write support (DANGEROUS)" CONFIG_UFS_FS_WRITE
	submenu $w.config.f 52 48 "Network File Systems" 53
	submenu $w.config.f 52 49 "Partition Types" 54
	submenu $w.config.f 52 50 "Native Language Support" 55



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu52 {} {
	global CONFIG_AUTOFS_FS
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x1 normal {m}} else {configure_entry .menu52.config.f.x1 disabled {m}}
	global CONFIG_AUTOFS4_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x2 normal {m}} else {configure_entry .menu52.config.f.x2 disabled {m}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_REISERFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_REISERFS_FS [sync_tristate $CONFIG_REISERFS_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu52.config.f.x3 disabled {y}} else {configure_entry .menu52.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu52.config.f.x3 disabled {m}} else {configure_entry .menu52.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x3 normal {m}} else {configure_entry .menu52.config.f.x3 disabled {m}}; configure_entry .menu52.config.f.x3 normal {n l}} else {configure_entry .menu52.config.f.x3 disabled {y n m l}}
	global CONFIG_REISERFS_CHECK
	if {($CONFIG_REISERFS_FS == 1 || $CONFIG_REISERFS_FS == 2 || $CONFIG_REISERFS_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_REISERFS_FS $CONFIG_EXPERIMENTAL]];set CONFIG_REISERFS_CHECK [sync_bool $CONFIG_REISERFS_CHECK $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu52.config.f.x4 disabled {y};} else {configure_entry .menu52.config.f.x4 normal {y};}; configure_entry .menu52.config.f.x4 normal {n l}} else {configure_entry .menu52.config.f.x4 disabled {y n l}}
	global CONFIG_REISERFS_PROC_INFO
	if {($CONFIG_REISERFS_FS == 1 || $CONFIG_REISERFS_FS == 2 || $CONFIG_REISERFS_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_REISERFS_FS $CONFIG_EXPERIMENTAL]];set CONFIG_REISERFS_PROC_INFO [sync_bool $CONFIG_REISERFS_PROC_INFO $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu52.config.f.x5 disabled {y};} else {configure_entry .menu52.config.f.x5 normal {y};}; configure_entry .menu52.config.f.x5 normal {n l}} else {configure_entry .menu52.config.f.x5 disabled {y n l}}
	global CONFIG_ADFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_ADFS_FS [sync_tristate $CONFIG_ADFS_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu52.config.f.x6 disabled {y}} else {configure_entry .menu52.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu52.config.f.x6 disabled {m}} else {configure_entry .menu52.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x6 normal {m}} else {configure_entry .menu52.config.f.x6 disabled {m}}; configure_entry .menu52.config.f.x6 normal {n l}} else {configure_entry .menu52.config.f.x6 disabled {y n m l}}
	global CONFIG_ADFS_FS_RW
	if {($CONFIG_ADFS_FS == 1 || $CONFIG_ADFS_FS == 2 || $CONFIG_ADFS_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ADFS_FS $CONFIG_EXPERIMENTAL]];set CONFIG_ADFS_FS_RW [sync_bool $CONFIG_ADFS_FS_RW $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu52.config.f.x7 disabled {y};} else {configure_entry .menu52.config.f.x7 normal {y};}; configure_entry .menu52.config.f.x7 normal {n l}} else {configure_entry .menu52.config.f.x7 disabled {y n l}}
	global CONFIG_AFFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_AFFS_FS [sync_tristate $CONFIG_AFFS_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu52.config.f.x8 disabled {y}} else {configure_entry .menu52.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu52.config.f.x8 disabled {m}} else {configure_entry .menu52.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x8 normal {m}} else {configure_entry .menu52.config.f.x8 disabled {m}}; configure_entry .menu52.config.f.x8 normal {n l}} else {configure_entry .menu52.config.f.x8 disabled {y n m l}}
	global CONFIG_HFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_HFS_FS [sync_tristate $CONFIG_HFS_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu52.config.f.x9 disabled {y}} else {configure_entry .menu52.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu52.config.f.x9 disabled {m}} else {configure_entry .menu52.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x9 normal {m}} else {configure_entry .menu52.config.f.x9 disabled {m}}; configure_entry .menu52.config.f.x9 normal {n l}} else {configure_entry .menu52.config.f.x9 disabled {y n m l}}
	global CONFIG_BFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_BFS_FS [sync_tristate $CONFIG_BFS_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu52.config.f.x10 disabled {y}} else {configure_entry .menu52.config.f.x10 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu52.config.f.x10 disabled {m}} else {configure_entry .menu52.config.f.x10 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x10 normal {m}} else {configure_entry .menu52.config.f.x10 disabled {m}}; configure_entry .menu52.config.f.x10 normal {n l}} else {configure_entry .menu52.config.f.x10 disabled {y n m l}}
	global CONFIG_EXT3_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x11 normal {m}} else {configure_entry .menu52.config.f.x11 disabled {m}}
	global CONFIG_JBD
	global CONFIG_JBD_DEBUG
	if {($CONFIG_JBD == 1 || $CONFIG_JBD == 2 || $CONFIG_JBD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_JBD]];set CONFIG_JBD_DEBUG [sync_bool $CONFIG_JBD_DEBUG $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu52.config.f.x12 disabled {y};} else {configure_entry .menu52.config.f.x12 normal {y};}; configure_entry .menu52.config.f.x12 normal {n l}} else {configure_entry .menu52.config.f.x12 disabled {y n l}}
	global CONFIG_FAT_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x13 normal {m}} else {configure_entry .menu52.config.f.x13 disabled {m}}
	global CONFIG_MSDOS_FS
	if {($CONFIG_FAT_FS == 1 || $CONFIG_FAT_FS == 2 || $CONFIG_FAT_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FAT_FS]];set CONFIG_MSDOS_FS [sync_tristate $CONFIG_MSDOS_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu52.config.f.x14 disabled {y}} else {configure_entry .menu52.config.f.x14 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu52.config.f.x14 disabled {m}} else {configure_entry .menu52.config.f.x14 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x14 normal {m}} else {configure_entry .menu52.config.f.x14 disabled {m}}; configure_entry .menu52.config.f.x14 normal {n l}} else {configure_entry .menu52.config.f.x14 disabled {y n m l}}
	global CONFIG_UMSDOS_FS
	if {($CONFIG_MSDOS_FS == 1 || $CONFIG_MSDOS_FS == 2 || $CONFIG_MSDOS_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MSDOS_FS]];set CONFIG_UMSDOS_FS [sync_tristate $CONFIG_UMSDOS_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu52.config.f.x15 disabled {y}} else {configure_entry .menu52.config.f.x15 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu52.config.f.x15 disabled {m}} else {configure_entry .menu52.config.f.x15 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x15 normal {m}} else {configure_entry .menu52.config.f.x15 disabled {m}}; configure_entry .menu52.config.f.x15 normal {n l}} else {configure_entry .menu52.config.f.x15 disabled {y n m l}}
	global CONFIG_VFAT_FS
	if {($CONFIG_FAT_FS == 1 || $CONFIG_FAT_FS == 2 || $CONFIG_FAT_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FAT_FS]];set CONFIG_VFAT_FS [sync_tristate $CONFIG_VFAT_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu52.config.f.x16 disabled {y}} else {configure_entry .menu52.config.f.x16 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu52.config.f.x16 disabled {m}} else {configure_entry .menu52.config.f.x16 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x16 normal {m}} else {configure_entry .menu52.config.f.x16 disabled {m}}; configure_entry .menu52.config.f.x16 normal {n l}} else {configure_entry .menu52.config.f.x16 disabled {y n m l}}
	global CONFIG_EFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_EFS_FS [sync_tristate $CONFIG_EFS_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu52.config.f.x17 disabled {y}} else {configure_entry .menu52.config.f.x17 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu52.config.f.x17 disabled {m}} else {configure_entry .menu52.config.f.x17 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x17 normal {m}} else {configure_entry .menu52.config.f.x17 disabled {m}}; configure_entry .menu52.config.f.x17 normal {n l}} else {configure_entry .menu52.config.f.x17 disabled {y n m l}}
	global CONFIG_MTD
	global CONFIG_JFFS_FS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_JFFS_FS [sync_tristate $CONFIG_JFFS_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu52.config.f.x18 disabled {y}} else {configure_entry .menu52.config.f.x18 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu52.config.f.x18 disabled {m}} else {configure_entry .menu52.config.f.x18 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x18 normal {m}} else {configure_entry .menu52.config.f.x18 disabled {m}}; configure_entry .menu52.config.f.x18 normal {n l}} else {configure_entry .menu52.config.f.x18 disabled {y n m l}}
	global CONFIG_JFFS_FS_VERBOSE
	if {($CONFIG_JFFS_FS == 1 || $CONFIG_JFFS_FS == 2)} then {.menu52.config.f.x19.x configure -state normal -foreground [ cget .ref -foreground ]; .menu52.config.f.x19.l configure -state normal; } else {.menu52.config.f.x19.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu52.config.f.x19.l configure -state disabled}
	global CONFIG_JFFS_PROC_FS
	if {($CONFIG_JFFS_FS == 1 || $CONFIG_JFFS_FS == 2)} then {
	configure_entry .menu52.config.f.x20 normal {n l y}} else {configure_entry .menu52.config.f.x20 disabled {y n l}}
	global CONFIG_JFFS2_FS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]];set CONFIG_JFFS2_FS [sync_tristate $CONFIG_JFFS2_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu52.config.f.x21 disabled {y}} else {configure_entry .menu52.config.f.x21 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu52.config.f.x21 disabled {m}} else {configure_entry .menu52.config.f.x21 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x21 normal {m}} else {configure_entry .menu52.config.f.x21 disabled {m}}; configure_entry .menu52.config.f.x21 normal {n l}} else {configure_entry .menu52.config.f.x21 disabled {y n m l}}
	global CONFIG_JFFS2_FS_DEBUG
	if {($CONFIG_JFFS2_FS == 1 || $CONFIG_JFFS2_FS == 2)} then {.menu52.config.f.x22.x configure -state normal -foreground [ cget .ref -foreground ]; .menu52.config.f.x22.l configure -state normal; } else {.menu52.config.f.x22.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu52.config.f.x22.l configure -state disabled}
	global CONFIG_CRAMFS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x23 normal {m}} else {configure_entry .menu52.config.f.x23 disabled {m}}
	global CONFIG_RAMFS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x25 normal {m}} else {configure_entry .menu52.config.f.x25 disabled {m}}
	global CONFIG_ISO9660_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x26 normal {m}} else {configure_entry .menu52.config.f.x26 disabled {m}}
	global CONFIG_JOLIET
	if {($CONFIG_ISO9660_FS == 1 || $CONFIG_ISO9660_FS == 2 || $CONFIG_ISO9660_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISO9660_FS]];set CONFIG_JOLIET [sync_bool $CONFIG_JOLIET $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu52.config.f.x27 disabled {y};} else {configure_entry .menu52.config.f.x27 normal {y};}; configure_entry .menu52.config.f.x27 normal {n l}} else {configure_entry .menu52.config.f.x27 disabled {y n l}}
	global CONFIG_ZISOFS
	if {($CONFIG_ISO9660_FS == 1 || $CONFIG_ISO9660_FS == 2 || $CONFIG_ISO9660_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISO9660_FS]];set CONFIG_ZISOFS [sync_bool $CONFIG_ZISOFS $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu52.config.f.x28 disabled {y};} else {configure_entry .menu52.config.f.x28 normal {y};}; configure_entry .menu52.config.f.x28 normal {n l}} else {configure_entry .menu52.config.f.x28 disabled {y n l}}
	global CONFIG_MINIX_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x29 normal {m}} else {configure_entry .menu52.config.f.x29 disabled {m}}
	global CONFIG_VXFS_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x30 normal {m}} else {configure_entry .menu52.config.f.x30 disabled {m}}
	global CONFIG_NTFS_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x31 normal {m}} else {configure_entry .menu52.config.f.x31 disabled {m}}
	global CONFIG_NTFS_RW
	if {($CONFIG_NTFS_FS == 1 || $CONFIG_NTFS_FS == 2 || $CONFIG_NTFS_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NTFS_FS $CONFIG_EXPERIMENTAL]];set CONFIG_NTFS_RW [sync_bool $CONFIG_NTFS_RW $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu52.config.f.x32 disabled {y};} else {configure_entry .menu52.config.f.x32 normal {y};}; configure_entry .menu52.config.f.x32 normal {n l}} else {configure_entry .menu52.config.f.x32 disabled {y n l}}
	global CONFIG_HPFS_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x33 normal {m}} else {configure_entry .menu52.config.f.x33 disabled {m}}
	global CONFIG_DEVFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_DEVFS_FS [sync_bool $CONFIG_DEVFS_FS $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu52.config.f.x35 disabled {y};} else {configure_entry .menu52.config.f.x35 normal {y};}; configure_entry .menu52.config.f.x35 normal {n l}} else {configure_entry .menu52.config.f.x35 disabled {y n l}}
	global CONFIG_DEVFS_MOUNT
	if {($CONFIG_DEVFS_FS == 1 || $CONFIG_DEVFS_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_DEVFS_FS]];set CONFIG_DEVFS_MOUNT [sync_bool $CONFIG_DEVFS_MOUNT $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu52.config.f.x36 disabled {y};} else {configure_entry .menu52.config.f.x36 normal {y};}; configure_entry .menu52.config.f.x36 normal {n l}} else {configure_entry .menu52.config.f.x36 disabled {y n l}}
	global CONFIG_DEVFS_DEBUG
	if {($CONFIG_DEVFS_FS == 1 || $CONFIG_DEVFS_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_DEVFS_FS]];set CONFIG_DEVFS_DEBUG [sync_bool $CONFIG_DEVFS_DEBUG $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu52.config.f.x37 disabled {y};} else {configure_entry .menu52.config.f.x37 normal {y};}; configure_entry .menu52.config.f.x37 normal {n l}} else {configure_entry .menu52.config.f.x37 disabled {y n l}}
	global CONFIG_UNIX98_PTYS
	global CONFIG_DEVPTS_FS
	if {($CONFIG_UNIX98_PTYS == 1 || $CONFIG_UNIX98_PTYS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_UNIX98_PTYS]];set CONFIG_DEVPTS_FS [sync_bool $CONFIG_DEVPTS_FS $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu52.config.f.x38 disabled {y};} else {configure_entry .menu52.config.f.x38 normal {y};}; configure_entry .menu52.config.f.x38 normal {n l}} else {configure_entry .menu52.config.f.x38 disabled {y n l}}
	global CONFIG_QNX4FS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_QNX4FS_FS [sync_tristate $CONFIG_QNX4FS_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu52.config.f.x39 disabled {y}} else {configure_entry .menu52.config.f.x39 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu52.config.f.x39 disabled {m}} else {configure_entry .menu52.config.f.x39 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x39 normal {m}} else {configure_entry .menu52.config.f.x39 disabled {m}}; configure_entry .menu52.config.f.x39 normal {n l}} else {configure_entry .menu52.config.f.x39 disabled {y n m l}}
	global CONFIG_QNX4FS_RW
	if {($CONFIG_QNX4FS_FS == 1 || $CONFIG_QNX4FS_FS == 2 || $CONFIG_QNX4FS_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_QNX4FS_FS $CONFIG_EXPERIMENTAL]];set CONFIG_QNX4FS_RW [sync_bool $CONFIG_QNX4FS_RW $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu52.config.f.x40 disabled {y};} else {configure_entry .menu52.config.f.x40 normal {y};}; configure_entry .menu52.config.f.x40 normal {n l}} else {configure_entry .menu52.config.f.x40 disabled {y n l}}
	global CONFIG_ROMFS_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x41 normal {m}} else {configure_entry .menu52.config.f.x41 disabled {m}}
	global CONFIG_EXT2_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x42 normal {m}} else {configure_entry .menu52.config.f.x42 disabled {m}}
	global CONFIG_SYSV_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x43 normal {m}} else {configure_entry .menu52.config.f.x43 disabled {m}}
	global CONFIG_UDF_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x44 normal {m}} else {configure_entry .menu52.config.f.x44 disabled {m}}
	global CONFIG_UDF_RW
	if {($CONFIG_UDF_FS == 1 || $CONFIG_UDF_FS == 2 || $CONFIG_UDF_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_UDF_FS $CONFIG_EXPERIMENTAL]];set CONFIG_UDF_RW [sync_bool $CONFIG_UDF_RW $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu52.config.f.x45 disabled {y};} else {configure_entry .menu52.config.f.x45 normal {y};}; configure_entry .menu52.config.f.x45 normal {n l}} else {configure_entry .menu52.config.f.x45 disabled {y n l}}
	global CONFIG_UFS_FS

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu52.config.f.x46 normal {m}} else {configure_entry .menu52.config.f.x46 disabled {m}}
	global CONFIG_UFS_FS_WRITE
	if {($CONFIG_UFS_FS == 1 || $CONFIG_UFS_FS == 2 || $CONFIG_UFS_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_UFS_FS $CONFIG_EXPERIMENTAL]];set CONFIG_UFS_FS_WRITE [sync_bool $CONFIG_UFS_FS_WRITE $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu52.config.f.x47 disabled {y};} else {configure_entry .menu52.config.f.x47 normal {y};}; configure_entry .menu52.config.f.x47 normal {n l}} else {configure_entry .menu52.config.f.x47 disabled {y n l}}
	global CONFIG_NET
	if {($CONFIG_NET == 1)} then {configure_entry .menu52.config.f.x48 normal {m}} else {configure_entry .menu52.config.f.x48 disabled {m}}
	global CONFIG_NLS
	if {($CONFIG_NLS == 1)} then {configure_entry .menu52.config.f.x50 normal {m}} else {configure_entry .menu52.config.f.x50 disabled {m}}
}


proc update_define_menu52 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_AUTOFS_FS
	global CONFIG_AUTOFS4_FS
	global CONFIG_EXT3_FS
	global CONFIG_JBD
	global CONFIG_FAT_FS
	global CONFIG_CRAMFS
	global CONFIG_RAMFS
	global CONFIG_ISO9660_FS
	global CONFIG_MINIX_FS
	global CONFIG_VXFS_FS
	global CONFIG_NTFS_FS
	global CONFIG_HPFS_FS
	global CONFIG_ROMFS_FS
	global CONFIG_EXT2_FS
	global CONFIG_SYSV_FS
	global CONFIG_UDF_FS
	global CONFIG_UFS_FS
	global CONFIG_NCPFS_NLS
	global CONFIG_SMB_FS
	global CONFIG_ZISOFS_FS
	global CONFIG_ZLIB_FS_INFLATE
	global CONFIG_SMB_NLS
	global CONFIG_NLS
	global CONFIG_JFFS_PROC_FS
set CONFIG_JFFS_PROC_FS [expr $CONFIG_JFFS_PROC_FS|16]

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_AUTOFS_FS == 2)} then {set CONFIG_AUTOFS_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_AUTOFS4_FS == 2)} then {set CONFIG_AUTOFS4_FS 1}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_REISERFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]]; set CONFIG_REISERFS_FS [sync_tristate $CONFIG_REISERFS_FS $tmpvar_dep]; set CONFIG_REISERFS_FS [expr $CONFIG_REISERFS_FS&15]}
	global CONFIG_REISERFS_CHECK
	if {($CONFIG_REISERFS_FS == 1 || $CONFIG_REISERFS_FS == 2 || $CONFIG_REISERFS_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_REISERFS_FS $CONFIG_EXPERIMENTAL]];set CONFIG_REISERFS_CHECK [sync_bool $CONFIG_REISERFS_CHECK $tmpvar_dep 1];set CONFIG_REISERFS_CHECK [expr $CONFIG_REISERFS_CHECK&15]}
	global CONFIG_REISERFS_PROC_INFO
	if {($CONFIG_REISERFS_FS == 1 || $CONFIG_REISERFS_FS == 2 || $CONFIG_REISERFS_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_REISERFS_FS $CONFIG_EXPERIMENTAL]];set CONFIG_REISERFS_PROC_INFO [sync_bool $CONFIG_REISERFS_PROC_INFO $tmpvar_dep 1];set CONFIG_REISERFS_PROC_INFO [expr $CONFIG_REISERFS_PROC_INFO&15]}
	global CONFIG_ADFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]]; set CONFIG_ADFS_FS [sync_tristate $CONFIG_ADFS_FS $tmpvar_dep]; set CONFIG_ADFS_FS [expr $CONFIG_ADFS_FS&15]}
	global CONFIG_ADFS_FS_RW
	if {($CONFIG_ADFS_FS == 1 || $CONFIG_ADFS_FS == 2 || $CONFIG_ADFS_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ADFS_FS $CONFIG_EXPERIMENTAL]];set CONFIG_ADFS_FS_RW [sync_bool $CONFIG_ADFS_FS_RW $tmpvar_dep 1];set CONFIG_ADFS_FS_RW [expr $CONFIG_ADFS_FS_RW&15]}
	global CONFIG_AFFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]]; set CONFIG_AFFS_FS [sync_tristate $CONFIG_AFFS_FS $tmpvar_dep]; set CONFIG_AFFS_FS [expr $CONFIG_AFFS_FS&15]}
	global CONFIG_HFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]]; set CONFIG_HFS_FS [sync_tristate $CONFIG_HFS_FS $tmpvar_dep]; set CONFIG_HFS_FS [expr $CONFIG_HFS_FS&15]}
	global CONFIG_BFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]]; set CONFIG_BFS_FS [sync_tristate $CONFIG_BFS_FS $tmpvar_dep]; set CONFIG_BFS_FS [expr $CONFIG_BFS_FS&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_EXT3_FS == 2)} then {set CONFIG_EXT3_FS 1}}
	set CONFIG_JBD $CONFIG_EXT3_FS
	global CONFIG_JBD_DEBUG
	if {($CONFIG_JBD == 1 || $CONFIG_JBD == 2 || $CONFIG_JBD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_JBD]];set CONFIG_JBD_DEBUG [sync_bool $CONFIG_JBD_DEBUG $tmpvar_dep 1];set CONFIG_JBD_DEBUG [expr $CONFIG_JBD_DEBUG&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_FAT_FS == 2)} then {set CONFIG_FAT_FS 1}}
	global CONFIG_MSDOS_FS
	if {($CONFIG_FAT_FS == 1 || $CONFIG_FAT_FS == 2 || $CONFIG_FAT_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FAT_FS]]; set CONFIG_MSDOS_FS [sync_tristate $CONFIG_MSDOS_FS $tmpvar_dep]; set CONFIG_MSDOS_FS [expr $CONFIG_MSDOS_FS&15]}
	global CONFIG_UMSDOS_FS
	if {($CONFIG_MSDOS_FS == 1 || $CONFIG_MSDOS_FS == 2 || $CONFIG_MSDOS_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MSDOS_FS]]; set CONFIG_UMSDOS_FS [sync_tristate $CONFIG_UMSDOS_FS $tmpvar_dep]; set CONFIG_UMSDOS_FS [expr $CONFIG_UMSDOS_FS&15]}
	global CONFIG_VFAT_FS
	if {($CONFIG_FAT_FS == 1 || $CONFIG_FAT_FS == 2 || $CONFIG_FAT_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FAT_FS]]; set CONFIG_VFAT_FS [sync_tristate $CONFIG_VFAT_FS $tmpvar_dep]; set CONFIG_VFAT_FS [expr $CONFIG_VFAT_FS&15]}
	global CONFIG_EFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]]; set CONFIG_EFS_FS [sync_tristate $CONFIG_EFS_FS $tmpvar_dep]; set CONFIG_EFS_FS [expr $CONFIG_EFS_FS&15]}
	global CONFIG_MTD
	global CONFIG_JFFS_FS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_JFFS_FS [sync_tristate $CONFIG_JFFS_FS $tmpvar_dep]; set CONFIG_JFFS_FS [expr $CONFIG_JFFS_FS&15]}
	global CONFIG_JFFS_FS_VERBOSE
	if {($CONFIG_JFFS_FS == 1 || $CONFIG_JFFS_FS == 2)} then {validate_int CONFIG_JFFS_FS_VERBOSE "$CONFIG_JFFS_FS_VERBOSE" 0}
	if {($CONFIG_JFFS_FS == 1 || $CONFIG_JFFS_FS == 2)} then {
	set CONFIG_JFFS_PROC_FS [expr $CONFIG_JFFS_PROC_FS&15]}
	global CONFIG_JFFS2_FS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_MTD]]; set CONFIG_JFFS2_FS [sync_tristate $CONFIG_JFFS2_FS $tmpvar_dep]; set CONFIG_JFFS2_FS [expr $CONFIG_JFFS2_FS&15]}
	global CONFIG_JFFS2_FS_DEBUG
	if {($CONFIG_JFFS2_FS == 1 || $CONFIG_JFFS2_FS == 2)} then {validate_int CONFIG_JFFS2_FS_DEBUG "$CONFIG_JFFS2_FS_DEBUG" 0}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_CRAMFS == 2)} then {set CONFIG_CRAMFS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_RAMFS == 2)} then {set CONFIG_RAMFS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_ISO9660_FS == 2)} then {set CONFIG_ISO9660_FS 1}}
	global CONFIG_JOLIET
	if {($CONFIG_ISO9660_FS == 1 || $CONFIG_ISO9660_FS == 2 || $CONFIG_ISO9660_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISO9660_FS]];set CONFIG_JOLIET [sync_bool $CONFIG_JOLIET $tmpvar_dep 1];set CONFIG_JOLIET [expr $CONFIG_JOLIET&15]}
	global CONFIG_ZISOFS
	if {($CONFIG_ISO9660_FS == 1 || $CONFIG_ISO9660_FS == 2 || $CONFIG_ISO9660_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ISO9660_FS]];set CONFIG_ZISOFS [sync_bool $CONFIG_ZISOFS $tmpvar_dep 1];set CONFIG_ZISOFS [expr $CONFIG_ZISOFS&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_MINIX_FS == 2)} then {set CONFIG_MINIX_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_VXFS_FS == 2)} then {set CONFIG_VXFS_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_NTFS_FS == 2)} then {set CONFIG_NTFS_FS 1}}
	global CONFIG_NTFS_RW
	if {($CONFIG_NTFS_FS == 1 || $CONFIG_NTFS_FS == 2 || $CONFIG_NTFS_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NTFS_FS $CONFIG_EXPERIMENTAL]];set CONFIG_NTFS_RW [sync_bool $CONFIG_NTFS_RW $tmpvar_dep 1];set CONFIG_NTFS_RW [expr $CONFIG_NTFS_RW&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_HPFS_FS == 2)} then {set CONFIG_HPFS_FS 1}}
	global CONFIG_DEVFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_DEVFS_FS [sync_bool $CONFIG_DEVFS_FS $tmpvar_dep 0];set CONFIG_DEVFS_FS [expr $CONFIG_DEVFS_FS&15]}
	global CONFIG_DEVFS_MOUNT
	if {($CONFIG_DEVFS_FS == 1 || $CONFIG_DEVFS_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_DEVFS_FS]];set CONFIG_DEVFS_MOUNT [sync_bool $CONFIG_DEVFS_MOUNT $tmpvar_dep 0];set CONFIG_DEVFS_MOUNT [expr $CONFIG_DEVFS_MOUNT&15]}
	global CONFIG_DEVFS_DEBUG
	if {($CONFIG_DEVFS_FS == 1 || $CONFIG_DEVFS_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_DEVFS_FS]];set CONFIG_DEVFS_DEBUG [sync_bool $CONFIG_DEVFS_DEBUG $tmpvar_dep 0];set CONFIG_DEVFS_DEBUG [expr $CONFIG_DEVFS_DEBUG&15]}
	global CONFIG_UNIX98_PTYS
	global CONFIG_DEVPTS_FS
	if {($CONFIG_UNIX98_PTYS == 1 || $CONFIG_UNIX98_PTYS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_UNIX98_PTYS]];set CONFIG_DEVPTS_FS [sync_bool $CONFIG_DEVPTS_FS $tmpvar_dep 0];set CONFIG_DEVPTS_FS [expr $CONFIG_DEVPTS_FS&15]}
	global CONFIG_QNX4FS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]]; set CONFIG_QNX4FS_FS [sync_tristate $CONFIG_QNX4FS_FS $tmpvar_dep]; set CONFIG_QNX4FS_FS [expr $CONFIG_QNX4FS_FS&15]}
	global CONFIG_QNX4FS_RW
	if {($CONFIG_QNX4FS_FS == 1 || $CONFIG_QNX4FS_FS == 2 || $CONFIG_QNX4FS_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_QNX4FS_FS $CONFIG_EXPERIMENTAL]];set CONFIG_QNX4FS_RW [sync_bool $CONFIG_QNX4FS_RW $tmpvar_dep 1];set CONFIG_QNX4FS_RW [expr $CONFIG_QNX4FS_RW&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_ROMFS_FS == 2)} then {set CONFIG_ROMFS_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_EXT2_FS == 2)} then {set CONFIG_EXT2_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_SYSV_FS == 2)} then {set CONFIG_SYSV_FS 1}}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_UDF_FS == 2)} then {set CONFIG_UDF_FS 1}}
	global CONFIG_UDF_RW
	if {($CONFIG_UDF_FS == 1 || $CONFIG_UDF_FS == 2 || $CONFIG_UDF_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_UDF_FS $CONFIG_EXPERIMENTAL]];set CONFIG_UDF_RW [sync_bool $CONFIG_UDF_RW $tmpvar_dep 1];set CONFIG_UDF_RW [expr $CONFIG_UDF_RW&15]}

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_UFS_FS == 2)} then {set CONFIG_UFS_FS 1}}
	global CONFIG_UFS_FS_WRITE
	if {($CONFIG_UFS_FS == 1 || $CONFIG_UFS_FS == 2 || $CONFIG_UFS_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_UFS_FS $CONFIG_EXPERIMENTAL]];set CONFIG_UFS_FS_WRITE [sync_bool $CONFIG_UFS_FS_WRITE $tmpvar_dep 1];set CONFIG_UFS_FS_WRITE [expr $CONFIG_UFS_FS_WRITE&15]}
	global CONFIG_NET
	if {($CONFIG_NET != 1)} then {	global CONSTANT_N
set CONFIG_NCPFS_NLS $CONSTANT_N }
	if {($CONFIG_NET != 1)} then {	global CONSTANT_N
set CONFIG_SMB_FS $CONSTANT_N }
	if {($CONFIG_ZISOFS == 1)} then {set CONFIG_ZISOFS_FS $CONFIG_ISO9660_FS }
	if {($CONFIG_ZISOFS != 1)} then {	global CONSTANT_N
set CONFIG_ZISOFS_FS $CONSTANT_N }
	if {($CONFIG_CRAMFS == 1 || $CONFIG_ZISOFS_FS == 1)} then {	global CONSTANT_Y
set CONFIG_ZLIB_FS_INFLATE $CONSTANT_Y }
	if {($CONFIG_CRAMFS != 1 && $CONFIG_ZISOFS_FS != 1) && ($CONFIG_CRAMFS == 2 || $CONFIG_ZISOFS_FS == 2)} then {	global CONSTANT_M
set CONFIG_ZLIB_FS_INFLATE $CONSTANT_M }
	if {($CONFIG_CRAMFS != 1 && $CONFIG_ZISOFS_FS != 1) && ($CONFIG_CRAMFS != 2 && $CONFIG_ZISOFS_FS != 2)} then {	global CONSTANT_N
set CONFIG_ZLIB_FS_INFLATE $CONSTANT_N }
	if {($CONFIG_SMB_FS == 2 || $CONFIG_SMB_FS == 1)} then {	global CONSTANT_Y
set CONFIG_SMB_NLS $CONSTANT_Y }
	if {($CONFIG_SMB_FS != 2 && $CONFIG_SMB_FS != 1)} then {	global CONSTANT_N
set CONFIG_SMB_NLS $CONSTANT_N }
	if {($CONFIG_JOLIET == 1 || $CONFIG_FAT_FS != 0 || $CONFIG_NTFS_FS != 0 || $CONFIG_NCPFS_NLS == 1 || $CONFIG_SMB_NLS == 1)} then {	global CONSTANT_Y
set CONFIG_NLS $CONSTANT_Y }
	if {($CONFIG_JOLIET != 1 && $CONFIG_FAT_FS == 0 && $CONFIG_NTFS_FS == 0 && $CONFIG_NCPFS_NLS != 1 && $CONFIG_SMB_NLS != 1)} then {	global CONSTANT_N
set CONFIG_NLS $CONSTANT_N }
}


proc menu53 {w title} {
	set oldFocus [focus]
	catch {focus .menu52}
	catch {destroy $w; unregister_active 53}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 53]]
	message $w.m -width 400 -aspect 300 -text \
		"Network File Systems"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Network File Systems" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 53; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 53; menu54 .menu54 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 53"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 53; menu52 .menu52 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 53; menu52 .menu52 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 53 0 "Coda file system support (advanced network fs)" CONFIG_CODA_FS
	dep_tristate $w.config.f 53 1 "InterMezzo file system support (experimental, replicating fs)" CONFIG_INTERMEZZO_FS
	dep_tristate $w.config.f 53 2 "NFS file system support" CONFIG_NFS_FS
	dep_bool $w.config.f 53 3 "  Provide NFSv3 client support" CONFIG_NFS_V3
	dep_bool $w.config.f 53 4 "  Root file system on NFS" CONFIG_ROOT_NFS
	dep_tristate $w.config.f 53 5 "NFS server support" CONFIG_NFSD
	dep_bool $w.config.f 53 6 "  Provide NFSv3 server support" CONFIG_NFSD_V3
	dep_tristate $w.config.f 53 7 "SMB file system support (to mount Windows shares etc.)" CONFIG_SMB_FS
	bool $w.config.f 53 8 "  Use a default NLS" CONFIG_SMB_NLS_DEFAULT
	istring $w.config.f 53 9 "    Default Remote NLS Option" CONFIG_SMB_NLS_REMOTE
	tristate $w.config.f 53 10 "NCP file system support (to mount NetWare volumes)" CONFIG_NCP_FS
	dep_bool $w.config.f 53 11 "  Packet signatures" CONFIG_NCPFS_PACKET_SIGNING
	dep_bool $w.config.f 53 12 "  Proprietary file locking" CONFIG_NCPFS_IOCTL_LOCKING
	dep_bool $w.config.f 53 13 "  Clear remove/delete inhibit when needed" CONFIG_NCPFS_STRONG
	dep_bool $w.config.f 53 14 "  Use NFS namespace if available" CONFIG_NCPFS_NFS_NS
	dep_bool $w.config.f 53 15 "  Use LONG (OS/2) namespace if available" CONFIG_NCPFS_OS2_NS
	dep_bool $w.config.f 53 16 "  Lowercase DOS filenames" CONFIG_NCPFS_SMALLDOS
	dep_bool $w.config.f 53 17 "  Use Native Language Support" CONFIG_NCPFS_NLS
	dep_bool $w.config.f 53 18 "  Enable symbolic links and execute flags" CONFIG_NCPFS_EXTRAS



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu52] == 0} then {menu52 .menu52 "File systems"}
	set winx [expr [winfo x .menu52]+30]; set winy [expr [winfo y .menu52]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu53 {} {
	global CONFIG_MODULES
	global CONFIG_NET
	global CONFIG_INET
	global CONFIG_CODA_FS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1 || $CONFIG_INET == 2 || $CONFIG_INET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INET]];set CONFIG_CODA_FS [sync_tristate $CONFIG_CODA_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu53.config.f.x0 disabled {y}} else {configure_entry .menu53.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu53.config.f.x0 disabled {m}} else {configure_entry .menu53.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu53.config.f.x0 normal {m}} else {configure_entry .menu53.config.f.x0 disabled {m}}; configure_entry .menu53.config.f.x0 normal {n l}} else {configure_entry .menu53.config.f.x0 disabled {y n m l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_INTERMEZZO_FS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1 || $CONFIG_INET == 2 || $CONFIG_INET == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INET $CONFIG_EXPERIMENTAL]];set CONFIG_INTERMEZZO_FS [sync_tristate $CONFIG_INTERMEZZO_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu53.config.f.x1 disabled {y}} else {configure_entry .menu53.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu53.config.f.x1 disabled {m}} else {configure_entry .menu53.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu53.config.f.x1 normal {m}} else {configure_entry .menu53.config.f.x1 disabled {m}}; configure_entry .menu53.config.f.x1 normal {n l}} else {configure_entry .menu53.config.f.x1 disabled {y n m l}}
	global CONFIG_NFS_FS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1 || $CONFIG_INET == 2 || $CONFIG_INET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INET]];set CONFIG_NFS_FS [sync_tristate $CONFIG_NFS_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu53.config.f.x2 disabled {y}} else {configure_entry .menu53.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu53.config.f.x2 disabled {m}} else {configure_entry .menu53.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu53.config.f.x2 normal {m}} else {configure_entry .menu53.config.f.x2 disabled {m}}; configure_entry .menu53.config.f.x2 normal {n l}} else {configure_entry .menu53.config.f.x2 disabled {y n m l}}
	global CONFIG_NFS_V3
	if {($CONFIG_NET == 1) && ($CONFIG_NFS_FS == 1 || $CONFIG_NFS_FS == 2 || $CONFIG_NFS_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NFS_FS]];set CONFIG_NFS_V3 [sync_bool $CONFIG_NFS_V3 $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu53.config.f.x3 disabled {y};} else {configure_entry .menu53.config.f.x3 normal {y};}; configure_entry .menu53.config.f.x3 normal {n l}} else {configure_entry .menu53.config.f.x3 disabled {y n l}}
	global CONFIG_IP_PNP
	global CONFIG_ROOT_NFS
	if {($CONFIG_NET == 1) && ($CONFIG_NFS_FS == 1 || $CONFIG_NFS_FS == 4) && ($CONFIG_IP_PNP == 1 || $CONFIG_IP_PNP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NFS_FS $CONFIG_IP_PNP]];set CONFIG_ROOT_NFS [sync_bool $CONFIG_ROOT_NFS $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu53.config.f.x4 disabled {y};} else {configure_entry .menu53.config.f.x4 normal {y};}; configure_entry .menu53.config.f.x4 normal {n l}} else {configure_entry .menu53.config.f.x4 disabled {y n l}}
	global CONFIG_NFSD
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1 || $CONFIG_INET == 2 || $CONFIG_INET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INET]];set CONFIG_NFSD [sync_tristate $CONFIG_NFSD $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu53.config.f.x5 disabled {y}} else {configure_entry .menu53.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu53.config.f.x5 disabled {m}} else {configure_entry .menu53.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu53.config.f.x5 normal {m}} else {configure_entry .menu53.config.f.x5 disabled {m}}; configure_entry .menu53.config.f.x5 normal {n l}} else {configure_entry .menu53.config.f.x5 disabled {y n m l}}
	global CONFIG_NFSD_V3
	if {($CONFIG_NET == 1) && ($CONFIG_NFSD == 1 || $CONFIG_NFSD == 2 || $CONFIG_NFSD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NFSD]];set CONFIG_NFSD_V3 [sync_bool $CONFIG_NFSD_V3 $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu53.config.f.x6 disabled {y};} else {configure_entry .menu53.config.f.x6 normal {y};}; configure_entry .menu53.config.f.x6 normal {n l}} else {configure_entry .menu53.config.f.x6 disabled {y n l}}
	global CONFIG_SMB_FS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1 || $CONFIG_INET == 2 || $CONFIG_INET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INET]];set CONFIG_SMB_FS [sync_tristate $CONFIG_SMB_FS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu53.config.f.x7 disabled {y}} else {configure_entry .menu53.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu53.config.f.x7 disabled {m}} else {configure_entry .menu53.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu53.config.f.x7 normal {m}} else {configure_entry .menu53.config.f.x7 disabled {m}}; configure_entry .menu53.config.f.x7 normal {n l}} else {configure_entry .menu53.config.f.x7 disabled {y n m l}}
	global CONFIG_SMB_NLS_DEFAULT
	if {($CONFIG_NET == 1) && ($CONFIG_SMB_FS != 0)} then {
	configure_entry .menu53.config.f.x8 normal {n l y}} else {configure_entry .menu53.config.f.x8 disabled {y n l}}
	global CONFIG_SMB_NLS_REMOTE
	if {($CONFIG_NET == 1) && ($CONFIG_SMB_FS != 0) && ($CONFIG_SMB_NLS_DEFAULT == 1)} then {.menu53.config.f.x9.x configure -state normal -foreground [ cget .ref -foreground ]; .menu53.config.f.x9.l configure -state normal; } else {.menu53.config.f.x9.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu53.config.f.x9.l configure -state disabled}
	global CONFIG_IPX
	global CONFIG_NCP_FS
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0)} then {
	configure_entry .menu53.config.f.x10 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu53.config.f.x10 normal {m}} else {configure_entry .menu53.config.f.x10 disabled {m}}; configure_entry .menu53.config.f.x10 normal {n l}} else {configure_entry .menu53.config.f.x10 disabled {y n m l}}
	global CONFIG_NCPFS_PACKET_SIGNING
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NCP_FS]];set CONFIG_NCPFS_PACKET_SIGNING [sync_bool $CONFIG_NCPFS_PACKET_SIGNING $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu53.config.f.x11 disabled {y};} else {configure_entry .menu53.config.f.x11 normal {y};}; configure_entry .menu53.config.f.x11 normal {n l}} else {configure_entry .menu53.config.f.x11 disabled {y n l}}
	global CONFIG_NCPFS_IOCTL_LOCKING
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NCP_FS]];set CONFIG_NCPFS_IOCTL_LOCKING [sync_bool $CONFIG_NCPFS_IOCTL_LOCKING $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu53.config.f.x12 disabled {y};} else {configure_entry .menu53.config.f.x12 normal {y};}; configure_entry .menu53.config.f.x12 normal {n l}} else {configure_entry .menu53.config.f.x12 disabled {y n l}}
	global CONFIG_NCPFS_STRONG
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NCP_FS]];set CONFIG_NCPFS_STRONG [sync_bool $CONFIG_NCPFS_STRONG $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu53.config.f.x13 disabled {y};} else {configure_entry .menu53.config.f.x13 normal {y};}; configure_entry .menu53.config.f.x13 normal {n l}} else {configure_entry .menu53.config.f.x13 disabled {y n l}}
	global CONFIG_NCPFS_NFS_NS
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NCP_FS]];set CONFIG_NCPFS_NFS_NS [sync_bool $CONFIG_NCPFS_NFS_NS $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu53.config.f.x14 disabled {y};} else {configure_entry .menu53.config.f.x14 normal {y};}; configure_entry .menu53.config.f.x14 normal {n l}} else {configure_entry .menu53.config.f.x14 disabled {y n l}}
	global CONFIG_NCPFS_OS2_NS
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NCP_FS]];set CONFIG_NCPFS_OS2_NS [sync_bool $CONFIG_NCPFS_OS2_NS $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu53.config.f.x15 disabled {y};} else {configure_entry .menu53.config.f.x15 normal {y};}; configure_entry .menu53.config.f.x15 normal {n l}} else {configure_entry .menu53.config.f.x15 disabled {y n l}}
	global CONFIG_NCPFS_SMALLDOS
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NCP_FS]];set CONFIG_NCPFS_SMALLDOS [sync_bool $CONFIG_NCPFS_SMALLDOS $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu53.config.f.x16 disabled {y};} else {configure_entry .menu53.config.f.x16 normal {y};}; configure_entry .menu53.config.f.x16 normal {n l}} else {configure_entry .menu53.config.f.x16 disabled {y n l}}
	global CONFIG_NCPFS_NLS
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NCP_FS]];set CONFIG_NCPFS_NLS [sync_bool $CONFIG_NCPFS_NLS $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu53.config.f.x17 disabled {y};} else {configure_entry .menu53.config.f.x17 normal {y};}; configure_entry .menu53.config.f.x17 normal {n l}} else {configure_entry .menu53.config.f.x17 disabled {y n l}}
	global CONFIG_NCPFS_EXTRAS
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NCP_FS]];set CONFIG_NCPFS_EXTRAS [sync_bool $CONFIG_NCPFS_EXTRAS $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu53.config.f.x18 disabled {y};} else {configure_entry .menu53.config.f.x18 normal {y};}; configure_entry .menu53.config.f.x18 normal {n l}} else {configure_entry .menu53.config.f.x18 disabled {y n l}}
}


proc update_define_menu53 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_SUNRPC
	global CONFIG_LOCKD
	global CONFIG_LOCKD_V4
	global CONFIG_NCP_FS
	global CONFIG_NCPFS_NLS
	global CONFIG_SMB_NLS_DEFAULT
set CONFIG_SMB_NLS_DEFAULT [expr $CONFIG_SMB_NLS_DEFAULT|16]
set CONFIG_NCP_FS [expr $CONFIG_NCP_FS|16]
	global CONFIG_NET
	global CONFIG_INET
	global CONFIG_CODA_FS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1 || $CONFIG_INET == 2 || $CONFIG_INET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INET]]; set CONFIG_CODA_FS [sync_tristate $CONFIG_CODA_FS $tmpvar_dep]; set CONFIG_CODA_FS [expr $CONFIG_CODA_FS&15]}
	global CONFIG_EXPERIMENTAL
	global CONFIG_INTERMEZZO_FS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1 || $CONFIG_INET == 2 || $CONFIG_INET == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INET $CONFIG_EXPERIMENTAL]]; set CONFIG_INTERMEZZO_FS [sync_tristate $CONFIG_INTERMEZZO_FS $tmpvar_dep]; set CONFIG_INTERMEZZO_FS [expr $CONFIG_INTERMEZZO_FS&15]}
	global CONFIG_NFS_FS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1 || $CONFIG_INET == 2 || $CONFIG_INET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INET]]; set CONFIG_NFS_FS [sync_tristate $CONFIG_NFS_FS $tmpvar_dep]; set CONFIG_NFS_FS [expr $CONFIG_NFS_FS&15]}
	global CONFIG_NFS_V3
	if {($CONFIG_NET == 1) && ($CONFIG_NFS_FS == 1 || $CONFIG_NFS_FS == 2 || $CONFIG_NFS_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NFS_FS]];set CONFIG_NFS_V3 [sync_bool $CONFIG_NFS_V3 $tmpvar_dep 1];set CONFIG_NFS_V3 [expr $CONFIG_NFS_V3&15]}
	global CONFIG_IP_PNP
	global CONFIG_ROOT_NFS
	if {($CONFIG_NET == 1) && ($CONFIG_NFS_FS == 1 || $CONFIG_NFS_FS == 4) && ($CONFIG_IP_PNP == 1 || $CONFIG_IP_PNP == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NFS_FS $CONFIG_IP_PNP]];set CONFIG_ROOT_NFS [sync_bool $CONFIG_ROOT_NFS $tmpvar_dep 0];set CONFIG_ROOT_NFS [expr $CONFIG_ROOT_NFS&15]}
	global CONFIG_NFSD
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1 || $CONFIG_INET == 2 || $CONFIG_INET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INET]]; set CONFIG_NFSD [sync_tristate $CONFIG_NFSD $tmpvar_dep]; set CONFIG_NFSD [expr $CONFIG_NFSD&15]}
	global CONFIG_NFSD_V3
	if {($CONFIG_NET == 1) && ($CONFIG_NFSD == 1 || $CONFIG_NFSD == 2 || $CONFIG_NFSD == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NFSD]];set CONFIG_NFSD_V3 [sync_bool $CONFIG_NFSD_V3 $tmpvar_dep 1];set CONFIG_NFSD_V3 [expr $CONFIG_NFSD_V3&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_NFS_FS == 1 || $CONFIG_NFSD == 1)} then {	global CONSTANT_Y
set CONFIG_SUNRPC $CONSTANT_Y }
	if {($CONFIG_NET == 1) && ($CONFIG_NFS_FS == 1 || $CONFIG_NFSD == 1)} then {	global CONSTANT_Y
set CONFIG_LOCKD $CONSTANT_Y }
	if {($CONFIG_NET == 1) && ($CONFIG_NFS_FS != 1 && $CONFIG_NFSD != 1) && ($CONFIG_NFS_FS == 2 || $CONFIG_NFSD == 2)} then {	global CONSTANT_M
set CONFIG_SUNRPC $CONSTANT_M }
	if {($CONFIG_NET == 1) && ($CONFIG_NFS_FS != 1 && $CONFIG_NFSD != 1) && ($CONFIG_NFS_FS == 2 || $CONFIG_NFSD == 2)} then {	global CONSTANT_M
set CONFIG_LOCKD $CONSTANT_M }
	if {($CONFIG_NET == 1) && ($CONFIG_NFS_FS != 1 && $CONFIG_NFSD != 1) && ($CONFIG_NFS_FS != 2 && $CONFIG_NFSD != 2)} then {	global CONSTANT_N
set CONFIG_SUNRPC $CONSTANT_N }
	if {($CONFIG_NET == 1) && ($CONFIG_NFS_FS != 1 && $CONFIG_NFSD != 1) && ($CONFIG_NFS_FS != 2 && $CONFIG_NFSD != 2)} then {	global CONSTANT_N
set CONFIG_LOCKD $CONSTANT_N }
	if {($CONFIG_NET == 1) && ($CONFIG_NFSD_V3 == 1 || $CONFIG_NFS_V3 == 1)} then {	global CONSTANT_Y
set CONFIG_LOCKD_V4 $CONSTANT_Y }
	global CONFIG_SMB_FS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1 || $CONFIG_INET == 2 || $CONFIG_INET == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_INET]]; set CONFIG_SMB_FS [sync_tristate $CONFIG_SMB_FS $tmpvar_dep]; set CONFIG_SMB_FS [expr $CONFIG_SMB_FS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_SMB_FS != 0)} then {
	set CONFIG_SMB_NLS_DEFAULT [expr $CONFIG_SMB_NLS_DEFAULT&15]}
	global CONFIG_IPX
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NCP_FS == 2)} then {set CONFIG_NCP_FS 1}; set CONFIG_NCP_FS [expr $CONFIG_NCP_FS&15]}
	global CONFIG_NCPFS_PACKET_SIGNING
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NCP_FS]];set CONFIG_NCPFS_PACKET_SIGNING [sync_bool $CONFIG_NCPFS_PACKET_SIGNING $tmpvar_dep 1];set CONFIG_NCPFS_PACKET_SIGNING [expr $CONFIG_NCPFS_PACKET_SIGNING&15]}
	global CONFIG_NCPFS_IOCTL_LOCKING
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NCP_FS]];set CONFIG_NCPFS_IOCTL_LOCKING [sync_bool $CONFIG_NCPFS_IOCTL_LOCKING $tmpvar_dep 1];set CONFIG_NCPFS_IOCTL_LOCKING [expr $CONFIG_NCPFS_IOCTL_LOCKING&15]}
	global CONFIG_NCPFS_STRONG
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NCP_FS]];set CONFIG_NCPFS_STRONG [sync_bool $CONFIG_NCPFS_STRONG $tmpvar_dep 1];set CONFIG_NCPFS_STRONG [expr $CONFIG_NCPFS_STRONG&15]}
	global CONFIG_NCPFS_NFS_NS
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NCP_FS]];set CONFIG_NCPFS_NFS_NS [sync_bool $CONFIG_NCPFS_NFS_NS $tmpvar_dep 1];set CONFIG_NCPFS_NFS_NS [expr $CONFIG_NCPFS_NFS_NS&15]}
	global CONFIG_NCPFS_OS2_NS
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NCP_FS]];set CONFIG_NCPFS_OS2_NS [sync_bool $CONFIG_NCPFS_OS2_NS $tmpvar_dep 1];set CONFIG_NCPFS_OS2_NS [expr $CONFIG_NCPFS_OS2_NS&15]}
	global CONFIG_NCPFS_SMALLDOS
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NCP_FS]];set CONFIG_NCPFS_SMALLDOS [sync_bool $CONFIG_NCPFS_SMALLDOS $tmpvar_dep 1];set CONFIG_NCPFS_SMALLDOS [expr $CONFIG_NCPFS_SMALLDOS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NCP_FS]];set CONFIG_NCPFS_NLS [sync_bool $CONFIG_NCPFS_NLS $tmpvar_dep 1];set CONFIG_NCPFS_NLS [expr $CONFIG_NCPFS_NLS&15]}
	global CONFIG_NCPFS_EXTRAS
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_NCP_FS]];set CONFIG_NCPFS_EXTRAS [sync_bool $CONFIG_NCPFS_EXTRAS $tmpvar_dep 1];set CONFIG_NCPFS_EXTRAS [expr $CONFIG_NCPFS_EXTRAS&15]}
	if {($CONFIG_NET == 1) && ($CONFIG_IPX == 0 && $CONFIG_INET == 0)} then {	global CONSTANT_N
set CONFIG_NCPFS_NLS $CONSTANT_N }
}


proc menu54 {w title} {
	set oldFocus [focus]
	catch {focus .menu52}
	catch {destroy $w; unregister_active 54}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 54]]
	message $w.m -width 400 -aspect 300 -text \
		"Partition Types"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Partition Types" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 54; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 54; menu55 .menu55 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 54"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 54; menu53 .menu53 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 54; menu53 .menu53 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 54 0 "Advanced partition selection" CONFIG_PARTITION_ADVANCED
	bool $w.config.f 54 1 "  Acorn partition support" CONFIG_ACORN_PARTITION
	bool $w.config.f 54 2 "    ICS partition support" CONFIG_ACORN_PARTITION_ICS
	bool $w.config.f 54 3 "    Native filecore partition support" CONFIG_ACORN_PARTITION_ADFS
	bool $w.config.f 54 4 "    PowerTec partition support" CONFIG_ACORN_PARTITION_POWERTEC
	bool $w.config.f 54 5 "    RISCiX partition support" CONFIG_ACORN_PARTITION_RISCIX
	bool $w.config.f 54 6 "  Alpha OSF partition support" CONFIG_OSF_PARTITION
	bool $w.config.f 54 7 "  Amiga partition table support" CONFIG_AMIGA_PARTITION
	bool $w.config.f 54 8 "  Atari partition table support" CONFIG_ATARI_PARTITION
	bool $w.config.f 54 9 "  Macintosh partition map support" CONFIG_MAC_PARTITION
	bool $w.config.f 54 10 "  PC BIOS (MSDOS partition tables) support" CONFIG_MSDOS_PARTITION
	bool $w.config.f 54 11 "    BSD disklabel (FreeBSD partition tables) support" CONFIG_BSD_DISKLABEL
	bool $w.config.f 54 12 "    Minix subpartition support" CONFIG_MINIX_SUBPARTITION
	bool $w.config.f 54 13 "    Solaris (x86) partition table support" CONFIG_SOLARIS_X86_PARTITION
	bool $w.config.f 54 14 "    Unixware slices support" CONFIG_UNIXWARE_DISKLABEL
	dep_bool $w.config.f 54 15 "  Windows Logical Disk Manager (Dynamic Disk) support" CONFIG_LDM_PARTITION
	bool $w.config.f 54 16 "    Windows LDM extra logging" CONFIG_LDM_DEBUG
	bool $w.config.f 54 17 "  SGI partition support" CONFIG_SGI_PARTITION
	bool $w.config.f 54 18 "  Ultrix partition table support" CONFIG_ULTRIX_PARTITION
	bool $w.config.f 54 19 "  Sun partition tables support" CONFIG_SUN_PARTITION



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu52] == 0} then {menu52 .menu52 "File systems"}
	set winx [expr [winfo x .menu52]+30]; set winy [expr [winfo y .menu52]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu54 {} {
	global CONFIG_PARTITION_ADVANCED
	global CONFIG_ACORN_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {
	configure_entry .menu54.config.f.x1 normal {n l y}} else {configure_entry .menu54.config.f.x1 disabled {y n l}}
	global CONFIG_ACORN_PARTITION_ICS
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_ACORN_PARTITION != 0)} then {
	configure_entry .menu54.config.f.x2 normal {n l y}} else {configure_entry .menu54.config.f.x2 disabled {y n l}}
	global CONFIG_ACORN_PARTITION_ADFS
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_ACORN_PARTITION != 0)} then {
	configure_entry .menu54.config.f.x3 normal {n l y}} else {configure_entry .menu54.config.f.x3 disabled {y n l}}
	global CONFIG_ACORN_PARTITION_POWERTEC
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_ACORN_PARTITION != 0)} then {
	configure_entry .menu54.config.f.x4 normal {n l y}} else {configure_entry .menu54.config.f.x4 disabled {y n l}}
	global CONFIG_ACORN_PARTITION_RISCIX
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_ACORN_PARTITION != 0)} then {
	configure_entry .menu54.config.f.x5 normal {n l y}} else {configure_entry .menu54.config.f.x5 disabled {y n l}}
	global CONFIG_OSF_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {
	configure_entry .menu54.config.f.x6 normal {n l y}} else {configure_entry .menu54.config.f.x6 disabled {y n l}}
	global CONFIG_AMIGA_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {
	configure_entry .menu54.config.f.x7 normal {n l y}} else {configure_entry .menu54.config.f.x7 disabled {y n l}}
	global CONFIG_ATARI_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {
	configure_entry .menu54.config.f.x8 normal {n l y}} else {configure_entry .menu54.config.f.x8 disabled {y n l}}
	global CONFIG_MAC_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {
	configure_entry .menu54.config.f.x9 normal {n l y}} else {configure_entry .menu54.config.f.x9 disabled {y n l}}
	global CONFIG_MSDOS_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {
	configure_entry .menu54.config.f.x10 normal {n l y}} else {configure_entry .menu54.config.f.x10 disabled {y n l}}
	global CONFIG_BSD_DISKLABEL
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_MSDOS_PARTITION == 1)} then {
	configure_entry .menu54.config.f.x11 normal {n l y}} else {configure_entry .menu54.config.f.x11 disabled {y n l}}
	global CONFIG_MINIX_SUBPARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_MSDOS_PARTITION == 1)} then {
	configure_entry .menu54.config.f.x12 normal {n l y}} else {configure_entry .menu54.config.f.x12 disabled {y n l}}
	global CONFIG_SOLARIS_X86_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_MSDOS_PARTITION == 1)} then {
	configure_entry .menu54.config.f.x13 normal {n l y}} else {configure_entry .menu54.config.f.x13 disabled {y n l}}
	global CONFIG_UNIXWARE_DISKLABEL
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_MSDOS_PARTITION == 1)} then {
	configure_entry .menu54.config.f.x14 normal {n l y}} else {configure_entry .menu54.config.f.x14 disabled {y n l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_LDM_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_LDM_PARTITION [sync_bool $CONFIG_LDM_PARTITION $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu54.config.f.x15 disabled {y};} else {configure_entry .menu54.config.f.x15 normal {y};}; configure_entry .menu54.config.f.x15 normal {n l}} else {configure_entry .menu54.config.f.x15 disabled {y n l}}
	global CONFIG_LDM_DEBUG
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_LDM_PARTITION == 1)} then {
	configure_entry .menu54.config.f.x16 normal {n l y}} else {configure_entry .menu54.config.f.x16 disabled {y n l}}
	global CONFIG_SGI_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {
	configure_entry .menu54.config.f.x17 normal {n l y}} else {configure_entry .menu54.config.f.x17 disabled {y n l}}
	global CONFIG_ULTRIX_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {
	configure_entry .menu54.config.f.x18 normal {n l y}} else {configure_entry .menu54.config.f.x18 disabled {y n l}}
	global CONFIG_SUN_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {
	configure_entry .menu54.config.f.x19 normal {n l y}} else {configure_entry .menu54.config.f.x19 disabled {y n l}}
}


proc update_define_menu54 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_MSDOS_PARTITION
	global CONFIG_AMIGA_PARTITION
	global CONFIG_ACORN_PARTITION
set CONFIG_ACORN_PARTITION [expr $CONFIG_ACORN_PARTITION|16]
	global CONFIG_ACORN_PARTITION_ICS
set CONFIG_ACORN_PARTITION_ICS [expr $CONFIG_ACORN_PARTITION_ICS|16]
	global CONFIG_ACORN_PARTITION_ADFS
set CONFIG_ACORN_PARTITION_ADFS [expr $CONFIG_ACORN_PARTITION_ADFS|16]
	global CONFIG_ACORN_PARTITION_POWERTEC
set CONFIG_ACORN_PARTITION_POWERTEC [expr $CONFIG_ACORN_PARTITION_POWERTEC|16]
	global CONFIG_ACORN_PARTITION_RISCIX
set CONFIG_ACORN_PARTITION_RISCIX [expr $CONFIG_ACORN_PARTITION_RISCIX|16]
	global CONFIG_OSF_PARTITION
set CONFIG_OSF_PARTITION [expr $CONFIG_OSF_PARTITION|16]
set CONFIG_AMIGA_PARTITION [expr $CONFIG_AMIGA_PARTITION|16]
	global CONFIG_ATARI_PARTITION
set CONFIG_ATARI_PARTITION [expr $CONFIG_ATARI_PARTITION|16]
	global CONFIG_MAC_PARTITION
set CONFIG_MAC_PARTITION [expr $CONFIG_MAC_PARTITION|16]
set CONFIG_MSDOS_PARTITION [expr $CONFIG_MSDOS_PARTITION|16]
	global CONFIG_BSD_DISKLABEL
set CONFIG_BSD_DISKLABEL [expr $CONFIG_BSD_DISKLABEL|16]
	global CONFIG_MINIX_SUBPARTITION
set CONFIG_MINIX_SUBPARTITION [expr $CONFIG_MINIX_SUBPARTITION|16]
	global CONFIG_SOLARIS_X86_PARTITION
set CONFIG_SOLARIS_X86_PARTITION [expr $CONFIG_SOLARIS_X86_PARTITION|16]
	global CONFIG_UNIXWARE_DISKLABEL
set CONFIG_UNIXWARE_DISKLABEL [expr $CONFIG_UNIXWARE_DISKLABEL|16]
	global CONFIG_LDM_DEBUG
set CONFIG_LDM_DEBUG [expr $CONFIG_LDM_DEBUG|16]
	global CONFIG_SGI_PARTITION
set CONFIG_SGI_PARTITION [expr $CONFIG_SGI_PARTITION|16]
	global CONFIG_ULTRIX_PARTITION
set CONFIG_ULTRIX_PARTITION [expr $CONFIG_ULTRIX_PARTITION|16]
	global CONFIG_SUN_PARTITION
set CONFIG_SUN_PARTITION [expr $CONFIG_SUN_PARTITION|16]
	global CONFIG_PARTITION_ADVANCED
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {
	set CONFIG_ACORN_PARTITION [expr $CONFIG_ACORN_PARTITION&15]}
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_ACORN_PARTITION != 0)} then {
	set CONFIG_ACORN_PARTITION_ICS [expr $CONFIG_ACORN_PARTITION_ICS&15]}
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_ACORN_PARTITION != 0)} then {
	set CONFIG_ACORN_PARTITION_ADFS [expr $CONFIG_ACORN_PARTITION_ADFS&15]}
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_ACORN_PARTITION != 0)} then {
	set CONFIG_ACORN_PARTITION_POWERTEC [expr $CONFIG_ACORN_PARTITION_POWERTEC&15]}
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_ACORN_PARTITION != 0)} then {
	set CONFIG_ACORN_PARTITION_RISCIX [expr $CONFIG_ACORN_PARTITION_RISCIX&15]}
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {
	set CONFIG_OSF_PARTITION [expr $CONFIG_OSF_PARTITION&15]}
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {
	set CONFIG_AMIGA_PARTITION [expr $CONFIG_AMIGA_PARTITION&15]}
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {
	set CONFIG_ATARI_PARTITION [expr $CONFIG_ATARI_PARTITION&15]}
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {
	set CONFIG_MAC_PARTITION [expr $CONFIG_MAC_PARTITION&15]}
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {
	set CONFIG_MSDOS_PARTITION [expr $CONFIG_MSDOS_PARTITION&15]}
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_MSDOS_PARTITION == 1)} then {
	set CONFIG_BSD_DISKLABEL [expr $CONFIG_BSD_DISKLABEL&15]}
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_MSDOS_PARTITION == 1)} then {
	set CONFIG_MINIX_SUBPARTITION [expr $CONFIG_MINIX_SUBPARTITION&15]}
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_MSDOS_PARTITION == 1)} then {
	set CONFIG_SOLARIS_X86_PARTITION [expr $CONFIG_SOLARIS_X86_PARTITION&15]}
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_MSDOS_PARTITION == 1)} then {
	set CONFIG_UNIXWARE_DISKLABEL [expr $CONFIG_UNIXWARE_DISKLABEL&15]}
	global CONFIG_EXPERIMENTAL
	global CONFIG_LDM_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_EXPERIMENTAL]];set CONFIG_LDM_PARTITION [sync_bool $CONFIG_LDM_PARTITION $tmpvar_dep 0];set CONFIG_LDM_PARTITION [expr $CONFIG_LDM_PARTITION&15]}
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_LDM_PARTITION == 1)} then {
	set CONFIG_LDM_DEBUG [expr $CONFIG_LDM_DEBUG&15]}
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {
	set CONFIG_SGI_PARTITION [expr $CONFIG_SGI_PARTITION&15]}
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {
	set CONFIG_ULTRIX_PARTITION [expr $CONFIG_ULTRIX_PARTITION&15]}
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {
	set CONFIG_SUN_PARTITION [expr $CONFIG_SUN_PARTITION&15]}
	global CONFIG_AMIGA
	global CONFIG_ATARI
	global CONFIG_MAC
	global CONFIG_SGI_IP22
	global CONFIG_SGI_IP27
	if {($CONFIG_PARTITION_ADVANCED != 1) && ($CONFIG_AMIGA != 1 && $CONFIG_ATARI != 1 && $CONFIG_MAC != 1 && $CONFIG_SGI_IP22 != 1 && $CONFIG_SGI_IP27 != 1)} then {	global CONSTANT_Y
set CONFIG_MSDOS_PARTITION $CONSTANT_Y }
	global CONFIG_AFFS_FS
	if {($CONFIG_PARTITION_ADVANCED != 1) && ($CONFIG_AFFS_FS == 1)} then {	global CONSTANT_Y
set CONFIG_AMIGA_PARTITION $CONSTANT_Y }
}


proc menu55 {w title} {
	set oldFocus [focus]
	catch {focus .menu52}
	catch {destroy $w; unregister_active 55}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 55]]
	message $w.m -width 400 -aspect 300 -text \
		"Native Language Support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Native Language Support" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 55; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 55; catch {destroy .menu52}; unregister_active 52; menu56 .menu56 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 55"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 55; menu54 .menu54 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 55; menu54 .menu54 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	istring $w.config.f 55 0 "Default NLS Option" CONFIG_NLS_DEFAULT
	tristate $w.config.f 55 1 "Codepage 437 (United States, Canada)" CONFIG_NLS_CODEPAGE_437
	tristate $w.config.f 55 2 "Codepage 737 (Greek)" CONFIG_NLS_CODEPAGE_737
	tristate $w.config.f 55 3 "Codepage 775 (Baltic Rim)" CONFIG_NLS_CODEPAGE_775
	tristate $w.config.f 55 4 "Codepage 850 (Europe)" CONFIG_NLS_CODEPAGE_850
	tristate $w.config.f 55 5 "Codepage 852 (Central/Eastern Europe)" CONFIG_NLS_CODEPAGE_852
	tristate $w.config.f 55 6 "Codepage 855 (Cyrillic)" CONFIG_NLS_CODEPAGE_855
	tristate $w.config.f 55 7 "Codepage 857 (Turkish)" CONFIG_NLS_CODEPAGE_857
	tristate $w.config.f 55 8 "Codepage 860 (Portuguese)" CONFIG_NLS_CODEPAGE_860
	tristate $w.config.f 55 9 "Codepage 861 (Icelandic)" CONFIG_NLS_CODEPAGE_861
	tristate $w.config.f 55 10 "Codepage 862 (Hebrew)" CONFIG_NLS_CODEPAGE_862
	tristate $w.config.f 55 11 "Codepage 863 (Canadian French)" CONFIG_NLS_CODEPAGE_863
	tristate $w.config.f 55 12 "Codepage 864 (Arabic)" CONFIG_NLS_CODEPAGE_864
	tristate $w.config.f 55 13 "Codepage 865 (Norwegian, Danish)" CONFIG_NLS_CODEPAGE_865
	tristate $w.config.f 55 14 "Codepage 866 (Cyrillic/Russian)" CONFIG_NLS_CODEPAGE_866
	tristate $w.config.f 55 15 "Codepage 869 (Greek)" CONFIG_NLS_CODEPAGE_869
	tristate $w.config.f 55 16 "Simplified Chinese charset (CP936, GB2312)" CONFIG_NLS_CODEPAGE_936
	tristate $w.config.f 55 17 "Traditional Chinese charset (Big5)" CONFIG_NLS_CODEPAGE_950
	tristate $w.config.f 55 18 "Japanese charsets (Shift-JIS, EUC-JP)" CONFIG_NLS_CODEPAGE_932
	tristate $w.config.f 55 19 "Korean charset (CP949, EUC-KR)" CONFIG_NLS_CODEPAGE_949
	tristate $w.config.f 55 20 "Thai charset (CP874, TIS-620)" CONFIG_NLS_CODEPAGE_874
	tristate $w.config.f 55 21 "Hebrew charsets (ISO-8859-8, CP1255)" CONFIG_NLS_ISO8859_8
	tristate $w.config.f 55 22 "Windows CP1251 (Bulgarian, Belarusian)" CONFIG_NLS_CODEPAGE_1251
	tristate $w.config.f 55 23 "NLS ISO 8859-1  (Latin 1; Western European Languages)" CONFIG_NLS_ISO8859_1
	tristate $w.config.f 55 24 "NLS ISO 8859-2  (Latin 2; Slavic/Central European Languages)" CONFIG_NLS_ISO8859_2
	tristate $w.config.f 55 25 "NLS ISO 8859-3  (Latin 3; Esperanto, Galician, Maltese, Turkish)" CONFIG_NLS_ISO8859_3
	tristate $w.config.f 55 26 "NLS ISO 8859-4  (Latin 4; old Baltic charset)" CONFIG_NLS_ISO8859_4
	tristate $w.config.f 55 27 "NLS ISO 8859-5  (Cyrillic)" CONFIG_NLS_ISO8859_5
	tristate $w.config.f 55 28 "NLS ISO 8859-6  (Arabic)" CONFIG_NLS_ISO8859_6
	tristate $w.config.f 55 29 "NLS ISO 8859-7  (Modern Greek)" CONFIG_NLS_ISO8859_7
	tristate $w.config.f 55 30 "NLS ISO 8859-9  (Latin 5; Turkish)" CONFIG_NLS_ISO8859_9
	tristate $w.config.f 55 31 "NLS ISO 8859-13 (Latin 7; Baltic)" CONFIG_NLS_ISO8859_13
	tristate $w.config.f 55 32 "NLS ISO 8859-14 (Latin 8; Celtic)" CONFIG_NLS_ISO8859_14
	tristate $w.config.f 55 33 "NLS ISO 8859-15 (Latin 9; Western European Languages with Euro)" CONFIG_NLS_ISO8859_15
	tristate $w.config.f 55 34 "NLS KOI8-R (Russian)" CONFIG_NLS_KOI8_R
	tristate $w.config.f 55 35 "NLS KOI8-U/RU (Ukrainian, Belarusian)" CONFIG_NLS_KOI8_U
	tristate $w.config.f 55 36 "NLS UTF8" CONFIG_NLS_UTF8



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu52] == 0} then {menu52 .menu52 "File systems"}
	set winx [expr [winfo x .menu52]+30]; set winy [expr [winfo y .menu52]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu55 {} {
	global CONFIG_NLS
	global CONFIG_NLS_DEFAULT
	if {($CONFIG_NLS == 1)} then {.menu55.config.f.x0.x configure -state normal -foreground [ cget .ref -foreground ]; .menu55.config.f.x0.l configure -state normal; } else {.menu55.config.f.x0.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu55.config.f.x0.l configure -state disabled}
	global CONFIG_MODULES
	global CONFIG_NLS_CODEPAGE_437
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x1 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x1 normal {m}} else {configure_entry .menu55.config.f.x1 disabled {m}}; configure_entry .menu55.config.f.x1 normal {n l}} else {configure_entry .menu55.config.f.x1 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_737
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x2 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x2 normal {m}} else {configure_entry .menu55.config.f.x2 disabled {m}}; configure_entry .menu55.config.f.x2 normal {n l}} else {configure_entry .menu55.config.f.x2 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_775
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x3 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x3 normal {m}} else {configure_entry .menu55.config.f.x3 disabled {m}}; configure_entry .menu55.config.f.x3 normal {n l}} else {configure_entry .menu55.config.f.x3 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_850
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x4 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x4 normal {m}} else {configure_entry .menu55.config.f.x4 disabled {m}}; configure_entry .menu55.config.f.x4 normal {n l}} else {configure_entry .menu55.config.f.x4 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_852
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x5 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x5 normal {m}} else {configure_entry .menu55.config.f.x5 disabled {m}}; configure_entry .menu55.config.f.x5 normal {n l}} else {configure_entry .menu55.config.f.x5 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_855
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x6 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x6 normal {m}} else {configure_entry .menu55.config.f.x6 disabled {m}}; configure_entry .menu55.config.f.x6 normal {n l}} else {configure_entry .menu55.config.f.x6 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_857
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x7 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x7 normal {m}} else {configure_entry .menu55.config.f.x7 disabled {m}}; configure_entry .menu55.config.f.x7 normal {n l}} else {configure_entry .menu55.config.f.x7 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_860
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x8 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x8 normal {m}} else {configure_entry .menu55.config.f.x8 disabled {m}}; configure_entry .menu55.config.f.x8 normal {n l}} else {configure_entry .menu55.config.f.x8 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_861
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x9 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x9 normal {m}} else {configure_entry .menu55.config.f.x9 disabled {m}}; configure_entry .menu55.config.f.x9 normal {n l}} else {configure_entry .menu55.config.f.x9 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_862
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x10 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x10 normal {m}} else {configure_entry .menu55.config.f.x10 disabled {m}}; configure_entry .menu55.config.f.x10 normal {n l}} else {configure_entry .menu55.config.f.x10 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_863
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x11 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x11 normal {m}} else {configure_entry .menu55.config.f.x11 disabled {m}}; configure_entry .menu55.config.f.x11 normal {n l}} else {configure_entry .menu55.config.f.x11 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_864
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x12 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x12 normal {m}} else {configure_entry .menu55.config.f.x12 disabled {m}}; configure_entry .menu55.config.f.x12 normal {n l}} else {configure_entry .menu55.config.f.x12 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_865
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x13 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x13 normal {m}} else {configure_entry .menu55.config.f.x13 disabled {m}}; configure_entry .menu55.config.f.x13 normal {n l}} else {configure_entry .menu55.config.f.x13 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_866
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x14 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x14 normal {m}} else {configure_entry .menu55.config.f.x14 disabled {m}}; configure_entry .menu55.config.f.x14 normal {n l}} else {configure_entry .menu55.config.f.x14 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_869
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x15 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x15 normal {m}} else {configure_entry .menu55.config.f.x15 disabled {m}}; configure_entry .menu55.config.f.x15 normal {n l}} else {configure_entry .menu55.config.f.x15 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_936
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x16 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x16 normal {m}} else {configure_entry .menu55.config.f.x16 disabled {m}}; configure_entry .menu55.config.f.x16 normal {n l}} else {configure_entry .menu55.config.f.x16 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_950
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x17 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x17 normal {m}} else {configure_entry .menu55.config.f.x17 disabled {m}}; configure_entry .menu55.config.f.x17 normal {n l}} else {configure_entry .menu55.config.f.x17 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_932
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x18 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x18 normal {m}} else {configure_entry .menu55.config.f.x18 disabled {m}}; configure_entry .menu55.config.f.x18 normal {n l}} else {configure_entry .menu55.config.f.x18 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_949
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x19 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x19 normal {m}} else {configure_entry .menu55.config.f.x19 disabled {m}}; configure_entry .menu55.config.f.x19 normal {n l}} else {configure_entry .menu55.config.f.x19 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_874
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x20 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x20 normal {m}} else {configure_entry .menu55.config.f.x20 disabled {m}}; configure_entry .menu55.config.f.x20 normal {n l}} else {configure_entry .menu55.config.f.x20 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_8
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x21 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x21 normal {m}} else {configure_entry .menu55.config.f.x21 disabled {m}}; configure_entry .menu55.config.f.x21 normal {n l}} else {configure_entry .menu55.config.f.x21 disabled {y n m l}}
	global CONFIG_NLS_CODEPAGE_1251
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x22 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x22 normal {m}} else {configure_entry .menu55.config.f.x22 disabled {m}}; configure_entry .menu55.config.f.x22 normal {n l}} else {configure_entry .menu55.config.f.x22 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_1
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x23 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x23 normal {m}} else {configure_entry .menu55.config.f.x23 disabled {m}}; configure_entry .menu55.config.f.x23 normal {n l}} else {configure_entry .menu55.config.f.x23 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_2
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x24 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x24 normal {m}} else {configure_entry .menu55.config.f.x24 disabled {m}}; configure_entry .menu55.config.f.x24 normal {n l}} else {configure_entry .menu55.config.f.x24 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_3
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x25 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x25 normal {m}} else {configure_entry .menu55.config.f.x25 disabled {m}}; configure_entry .menu55.config.f.x25 normal {n l}} else {configure_entry .menu55.config.f.x25 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_4
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x26 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x26 normal {m}} else {configure_entry .menu55.config.f.x26 disabled {m}}; configure_entry .menu55.config.f.x26 normal {n l}} else {configure_entry .menu55.config.f.x26 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_5
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x27 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x27 normal {m}} else {configure_entry .menu55.config.f.x27 disabled {m}}; configure_entry .menu55.config.f.x27 normal {n l}} else {configure_entry .menu55.config.f.x27 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_6
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x28 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x28 normal {m}} else {configure_entry .menu55.config.f.x28 disabled {m}}; configure_entry .menu55.config.f.x28 normal {n l}} else {configure_entry .menu55.config.f.x28 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_7
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x29 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x29 normal {m}} else {configure_entry .menu55.config.f.x29 disabled {m}}; configure_entry .menu55.config.f.x29 normal {n l}} else {configure_entry .menu55.config.f.x29 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_9
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x30 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x30 normal {m}} else {configure_entry .menu55.config.f.x30 disabled {m}}; configure_entry .menu55.config.f.x30 normal {n l}} else {configure_entry .menu55.config.f.x30 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_13
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x31 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x31 normal {m}} else {configure_entry .menu55.config.f.x31 disabled {m}}; configure_entry .menu55.config.f.x31 normal {n l}} else {configure_entry .menu55.config.f.x31 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_14
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x32 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x32 normal {m}} else {configure_entry .menu55.config.f.x32 disabled {m}}; configure_entry .menu55.config.f.x32 normal {n l}} else {configure_entry .menu55.config.f.x32 disabled {y n m l}}
	global CONFIG_NLS_ISO8859_15
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x33 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x33 normal {m}} else {configure_entry .menu55.config.f.x33 disabled {m}}; configure_entry .menu55.config.f.x33 normal {n l}} else {configure_entry .menu55.config.f.x33 disabled {y n m l}}
	global CONFIG_NLS_KOI8_R
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x34 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x34 normal {m}} else {configure_entry .menu55.config.f.x34 disabled {m}}; configure_entry .menu55.config.f.x34 normal {n l}} else {configure_entry .menu55.config.f.x34 disabled {y n m l}}
	global CONFIG_NLS_KOI8_U
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x35 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x35 normal {m}} else {configure_entry .menu55.config.f.x35 disabled {m}}; configure_entry .menu55.config.f.x35 normal {n l}} else {configure_entry .menu55.config.f.x35 disabled {y n m l}}
	global CONFIG_NLS_UTF8
	if {($CONFIG_NLS == 1)} then {
	configure_entry .menu55.config.f.x36 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu55.config.f.x36 normal {m}} else {configure_entry .menu55.config.f.x36 disabled {m}}; configure_entry .menu55.config.f.x36 normal {n l}} else {configure_entry .menu55.config.f.x36 disabled {y n m l}}
}


proc update_define_menu55 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_NLS_CODEPAGE_437
	global CONFIG_NLS_CODEPAGE_737
	global CONFIG_NLS_CODEPAGE_775
	global CONFIG_NLS_CODEPAGE_850
	global CONFIG_NLS_CODEPAGE_852
	global CONFIG_NLS_CODEPAGE_855
	global CONFIG_NLS_CODEPAGE_857
	global CONFIG_NLS_CODEPAGE_860
	global CONFIG_NLS_CODEPAGE_861
	global CONFIG_NLS_CODEPAGE_862
	global CONFIG_NLS_CODEPAGE_863
	global CONFIG_NLS_CODEPAGE_864
	global CONFIG_NLS_CODEPAGE_865
	global CONFIG_NLS_CODEPAGE_866
	global CONFIG_NLS_CODEPAGE_869
	global CONFIG_NLS_CODEPAGE_936
	global CONFIG_NLS_CODEPAGE_950
	global CONFIG_NLS_CODEPAGE_932
	global CONFIG_NLS_CODEPAGE_949
	global CONFIG_NLS_CODEPAGE_874
	global CONFIG_NLS_ISO8859_8
	global CONFIG_NLS_CODEPAGE_1251
	global CONFIG_NLS_ISO8859_1
	global CONFIG_NLS_ISO8859_2
	global CONFIG_NLS_ISO8859_3
	global CONFIG_NLS_ISO8859_4
	global CONFIG_NLS_ISO8859_5
	global CONFIG_NLS_ISO8859_6
	global CONFIG_NLS_ISO8859_7
	global CONFIG_NLS_ISO8859_9
	global CONFIG_NLS_ISO8859_13
	global CONFIG_NLS_ISO8859_14
	global CONFIG_NLS_ISO8859_15
	global CONFIG_NLS_KOI8_R
	global CONFIG_NLS_KOI8_U
	global CONFIG_NLS_UTF8
set CONFIG_NLS_CODEPAGE_437 [expr $CONFIG_NLS_CODEPAGE_437|16]
set CONFIG_NLS_CODEPAGE_737 [expr $CONFIG_NLS_CODEPAGE_737|16]
set CONFIG_NLS_CODEPAGE_775 [expr $CONFIG_NLS_CODEPAGE_775|16]
set CONFIG_NLS_CODEPAGE_850 [expr $CONFIG_NLS_CODEPAGE_850|16]
set CONFIG_NLS_CODEPAGE_852 [expr $CONFIG_NLS_CODEPAGE_852|16]
set CONFIG_NLS_CODEPAGE_855 [expr $CONFIG_NLS_CODEPAGE_855|16]
set CONFIG_NLS_CODEPAGE_857 [expr $CONFIG_NLS_CODEPAGE_857|16]
set CONFIG_NLS_CODEPAGE_860 [expr $CONFIG_NLS_CODEPAGE_860|16]
set CONFIG_NLS_CODEPAGE_861 [expr $CONFIG_NLS_CODEPAGE_861|16]
set CONFIG_NLS_CODEPAGE_862 [expr $CONFIG_NLS_CODEPAGE_862|16]
set CONFIG_NLS_CODEPAGE_863 [expr $CONFIG_NLS_CODEPAGE_863|16]
set CONFIG_NLS_CODEPAGE_864 [expr $CONFIG_NLS_CODEPAGE_864|16]
set CONFIG_NLS_CODEPAGE_865 [expr $CONFIG_NLS_CODEPAGE_865|16]
set CONFIG_NLS_CODEPAGE_866 [expr $CONFIG_NLS_CODEPAGE_866|16]
set CONFIG_NLS_CODEPAGE_869 [expr $CONFIG_NLS_CODEPAGE_869|16]
set CONFIG_NLS_CODEPAGE_936 [expr $CONFIG_NLS_CODEPAGE_936|16]
set CONFIG_NLS_CODEPAGE_950 [expr $CONFIG_NLS_CODEPAGE_950|16]
set CONFIG_NLS_CODEPAGE_932 [expr $CONFIG_NLS_CODEPAGE_932|16]
set CONFIG_NLS_CODEPAGE_949 [expr $CONFIG_NLS_CODEPAGE_949|16]
set CONFIG_NLS_CODEPAGE_874 [expr $CONFIG_NLS_CODEPAGE_874|16]
set CONFIG_NLS_ISO8859_8 [expr $CONFIG_NLS_ISO8859_8|16]
set CONFIG_NLS_CODEPAGE_1251 [expr $CONFIG_NLS_CODEPAGE_1251|16]
set CONFIG_NLS_ISO8859_1 [expr $CONFIG_NLS_ISO8859_1|16]
set CONFIG_NLS_ISO8859_2 [expr $CONFIG_NLS_ISO8859_2|16]
set CONFIG_NLS_ISO8859_3 [expr $CONFIG_NLS_ISO8859_3|16]
set CONFIG_NLS_ISO8859_4 [expr $CONFIG_NLS_ISO8859_4|16]
set CONFIG_NLS_ISO8859_5 [expr $CONFIG_NLS_ISO8859_5|16]
set CONFIG_NLS_ISO8859_6 [expr $CONFIG_NLS_ISO8859_6|16]
set CONFIG_NLS_ISO8859_7 [expr $CONFIG_NLS_ISO8859_7|16]
set CONFIG_NLS_ISO8859_9 [expr $CONFIG_NLS_ISO8859_9|16]
set CONFIG_NLS_ISO8859_13 [expr $CONFIG_NLS_ISO8859_13|16]
set CONFIG_NLS_ISO8859_14 [expr $CONFIG_NLS_ISO8859_14|16]
set CONFIG_NLS_ISO8859_15 [expr $CONFIG_NLS_ISO8859_15|16]
set CONFIG_NLS_KOI8_R [expr $CONFIG_NLS_KOI8_R|16]
set CONFIG_NLS_KOI8_U [expr $CONFIG_NLS_KOI8_U|16]
set CONFIG_NLS_UTF8 [expr $CONFIG_NLS_UTF8|16]
	global CONFIG_NLS
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_437 == 2)} then {set CONFIG_NLS_CODEPAGE_437 1}; set CONFIG_NLS_CODEPAGE_437 [expr $CONFIG_NLS_CODEPAGE_437&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_737 == 2)} then {set CONFIG_NLS_CODEPAGE_737 1}; set CONFIG_NLS_CODEPAGE_737 [expr $CONFIG_NLS_CODEPAGE_737&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_775 == 2)} then {set CONFIG_NLS_CODEPAGE_775 1}; set CONFIG_NLS_CODEPAGE_775 [expr $CONFIG_NLS_CODEPAGE_775&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_850 == 2)} then {set CONFIG_NLS_CODEPAGE_850 1}; set CONFIG_NLS_CODEPAGE_850 [expr $CONFIG_NLS_CODEPAGE_850&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_852 == 2)} then {set CONFIG_NLS_CODEPAGE_852 1}; set CONFIG_NLS_CODEPAGE_852 [expr $CONFIG_NLS_CODEPAGE_852&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_855 == 2)} then {set CONFIG_NLS_CODEPAGE_855 1}; set CONFIG_NLS_CODEPAGE_855 [expr $CONFIG_NLS_CODEPAGE_855&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_857 == 2)} then {set CONFIG_NLS_CODEPAGE_857 1}; set CONFIG_NLS_CODEPAGE_857 [expr $CONFIG_NLS_CODEPAGE_857&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_860 == 2)} then {set CONFIG_NLS_CODEPAGE_860 1}; set CONFIG_NLS_CODEPAGE_860 [expr $CONFIG_NLS_CODEPAGE_860&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_861 == 2)} then {set CONFIG_NLS_CODEPAGE_861 1}; set CONFIG_NLS_CODEPAGE_861 [expr $CONFIG_NLS_CODEPAGE_861&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_862 == 2)} then {set CONFIG_NLS_CODEPAGE_862 1}; set CONFIG_NLS_CODEPAGE_862 [expr $CONFIG_NLS_CODEPAGE_862&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_863 == 2)} then {set CONFIG_NLS_CODEPAGE_863 1}; set CONFIG_NLS_CODEPAGE_863 [expr $CONFIG_NLS_CODEPAGE_863&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_864 == 2)} then {set CONFIG_NLS_CODEPAGE_864 1}; set CONFIG_NLS_CODEPAGE_864 [expr $CONFIG_NLS_CODEPAGE_864&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_865 == 2)} then {set CONFIG_NLS_CODEPAGE_865 1}; set CONFIG_NLS_CODEPAGE_865 [expr $CONFIG_NLS_CODEPAGE_865&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_866 == 2)} then {set CONFIG_NLS_CODEPAGE_866 1}; set CONFIG_NLS_CODEPAGE_866 [expr $CONFIG_NLS_CODEPAGE_866&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_869 == 2)} then {set CONFIG_NLS_CODEPAGE_869 1}; set CONFIG_NLS_CODEPAGE_869 [expr $CONFIG_NLS_CODEPAGE_869&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_936 == 2)} then {set CONFIG_NLS_CODEPAGE_936 1}; set CONFIG_NLS_CODEPAGE_936 [expr $CONFIG_NLS_CODEPAGE_936&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_950 == 2)} then {set CONFIG_NLS_CODEPAGE_950 1}; set CONFIG_NLS_CODEPAGE_950 [expr $CONFIG_NLS_CODEPAGE_950&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_932 == 2)} then {set CONFIG_NLS_CODEPAGE_932 1}; set CONFIG_NLS_CODEPAGE_932 [expr $CONFIG_NLS_CODEPAGE_932&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_949 == 2)} then {set CONFIG_NLS_CODEPAGE_949 1}; set CONFIG_NLS_CODEPAGE_949 [expr $CONFIG_NLS_CODEPAGE_949&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_874 == 2)} then {set CONFIG_NLS_CODEPAGE_874 1}; set CONFIG_NLS_CODEPAGE_874 [expr $CONFIG_NLS_CODEPAGE_874&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_ISO8859_8 == 2)} then {set CONFIG_NLS_ISO8859_8 1}; set CONFIG_NLS_ISO8859_8 [expr $CONFIG_NLS_ISO8859_8&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_CODEPAGE_1251 == 2)} then {set CONFIG_NLS_CODEPAGE_1251 1}; set CONFIG_NLS_CODEPAGE_1251 [expr $CONFIG_NLS_CODEPAGE_1251&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_ISO8859_1 == 2)} then {set CONFIG_NLS_ISO8859_1 1}; set CONFIG_NLS_ISO8859_1 [expr $CONFIG_NLS_ISO8859_1&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_ISO8859_2 == 2)} then {set CONFIG_NLS_ISO8859_2 1}; set CONFIG_NLS_ISO8859_2 [expr $CONFIG_NLS_ISO8859_2&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_ISO8859_3 == 2)} then {set CONFIG_NLS_ISO8859_3 1}; set CONFIG_NLS_ISO8859_3 [expr $CONFIG_NLS_ISO8859_3&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_ISO8859_4 == 2)} then {set CONFIG_NLS_ISO8859_4 1}; set CONFIG_NLS_ISO8859_4 [expr $CONFIG_NLS_ISO8859_4&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_ISO8859_5 == 2)} then {set CONFIG_NLS_ISO8859_5 1}; set CONFIG_NLS_ISO8859_5 [expr $CONFIG_NLS_ISO8859_5&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_ISO8859_6 == 2)} then {set CONFIG_NLS_ISO8859_6 1}; set CONFIG_NLS_ISO8859_6 [expr $CONFIG_NLS_ISO8859_6&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_ISO8859_7 == 2)} then {set CONFIG_NLS_ISO8859_7 1}; set CONFIG_NLS_ISO8859_7 [expr $CONFIG_NLS_ISO8859_7&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_ISO8859_9 == 2)} then {set CONFIG_NLS_ISO8859_9 1}; set CONFIG_NLS_ISO8859_9 [expr $CONFIG_NLS_ISO8859_9&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_ISO8859_13 == 2)} then {set CONFIG_NLS_ISO8859_13 1}; set CONFIG_NLS_ISO8859_13 [expr $CONFIG_NLS_ISO8859_13&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_ISO8859_14 == 2)} then {set CONFIG_NLS_ISO8859_14 1}; set CONFIG_NLS_ISO8859_14 [expr $CONFIG_NLS_ISO8859_14&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_ISO8859_15 == 2)} then {set CONFIG_NLS_ISO8859_15 1}; set CONFIG_NLS_ISO8859_15 [expr $CONFIG_NLS_ISO8859_15&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_KOI8_R == 2)} then {set CONFIG_NLS_KOI8_R 1}; set CONFIG_NLS_KOI8_R [expr $CONFIG_NLS_KOI8_R&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_KOI8_U == 2)} then {set CONFIG_NLS_KOI8_U 1}; set CONFIG_NLS_KOI8_U [expr $CONFIG_NLS_KOI8_U&15]}
	if {($CONFIG_NLS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_NLS_UTF8 == 2)} then {set CONFIG_NLS_UTF8 1}; set CONFIG_NLS_UTF8 [expr $CONFIG_NLS_UTF8&15]}
}


menu_option menu56 56 "Console drivers"
proc menu56 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 56}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 56]]
	message $w.m -width 400 -aspect 300 -text \
		"Console drivers"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Console drivers" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 56; break"
	set nextscript "catch {focus $oldFocus}; menu57 .menu57 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 56"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 56; menu55 .menu55 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 56; menu55 .menu55 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 56 0 "VGA text console" CONFIG_VGA_CONSOLE
	bool $w.config.f 56 1 "Video mode selection support" CONFIG_VIDEO_SELECT
	tristate $w.config.f 56 2 "MDA text console (dual-headed) (EXPERIMENTAL)" CONFIG_MDA_CONSOLE
	submenu $w.config.f 56 3 "Frame-buffer support" 57



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu56 {} {
	global CONFIG_VT
	global CONFIG_VGA_CONSOLE
	if {($CONFIG_VT == 1)} then {
	configure_entry .menu56.config.f.x0 normal {n l y}} else {configure_entry .menu56.config.f.x0 disabled {y n l}}
	global CONFIG_VIDEO_SELECT
	if {($CONFIG_VT == 1)} then {
	configure_entry .menu56.config.f.x1 normal {n l y}} else {configure_entry .menu56.config.f.x1 disabled {y n l}}
	global CONFIG_MODULES
	global CONFIG_EXPERIMENTAL
	global CONFIG_MDA_CONSOLE
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu56.config.f.x2 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu56.config.f.x2 normal {m}} else {configure_entry .menu56.config.f.x2 disabled {m}}; configure_entry .menu56.config.f.x2 normal {n l}} else {configure_entry .menu56.config.f.x2 disabled {y n m l}}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {configure_entry .menu56.config.f.x3 normal {m}} else {configure_entry .menu56.config.f.x3 disabled {m}}
}


proc update_define_menu56 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_MDA_CONSOLE
	global CONFIG_VGA_CONSOLE
set CONFIG_VGA_CONSOLE [expr $CONFIG_VGA_CONSOLE|16]
	global CONFIG_VIDEO_SELECT
set CONFIG_VIDEO_SELECT [expr $CONFIG_VIDEO_SELECT|16]
set CONFIG_MDA_CONSOLE [expr $CONFIG_MDA_CONSOLE|16]
	global CONFIG_VT
	if {($CONFIG_VT == 1)} then {
	set CONFIG_VGA_CONSOLE [expr $CONFIG_VGA_CONSOLE&15]}
	if {($CONFIG_VT == 1)} then {
	set CONFIG_VIDEO_SELECT [expr $CONFIG_VIDEO_SELECT&15]}
	global CONFIG_EXPERIMENTAL
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_MDA_CONSOLE == 2)} then {set CONFIG_MDA_CONSOLE 1}; set CONFIG_MDA_CONSOLE [expr $CONFIG_MDA_CONSOLE&15]}
}


proc menu57 {w title} {
	set oldFocus [focus]
	catch {focus .menu56}
	catch {destroy $w; unregister_active 57}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 57]]
	message $w.m -width 400 -aspect 300 -text \
		"Frame-buffer support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Frame-buffer support" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 57; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 57; catch {destroy .menu56}; unregister_active 56; menu58 .menu58 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 57"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 57; menu56 .menu56 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 57; menu56 .menu56 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 57 0 "Support for frame buffer devices (EXPERIMENTAL)" CONFIG_FB
	tristate $w.config.f 57 1 "  nVidia Riva support (EXPERIMENTAL)" CONFIG_FB_RIVA
	tristate $w.config.f 57 2 "  Cirrus Logic support (EXPERIMENTAL)" CONFIG_FB_CLGEN
	tristate $w.config.f 57 3 "  Permedia2 support (EXPERIMENTAL)" CONFIG_FB_PM2
	bool $w.config.f 57 4 "    enable FIFO disconnect feature" CONFIG_FB_PM2_FIFO_DISCONNECT
	bool $w.config.f 57 5 "    generic Permedia2 PCI board support" CONFIG_FB_PM2_PCI
	dep_bool $w.config.f 57 6 "  Acorn VIDC support" CONFIG_FB_ACORN
	dep_bool $w.config.f 57 7 "  CLPS711X LCD support" CONFIG_FB_CLPS711X
	dep_tristate $w.config.f 57 8 "  Cyber2000 support" CONFIG_FB_CYBER2000
	dep_bool $w.config.f 57 9 "  SA-1100 LCD support" CONFIG_FB_SA1100
	tristate $w.config.f 57 10 "  SGI Visual Workstation framebuffer support" CONFIG_FB_SGIVW
	tristate $w.config.f 57 11 "  Matrox acceleration (EXPERIMENTAL)" CONFIG_FB_MATROX
	bool $w.config.f 57 12 "    Millennium I/II support" CONFIG_FB_MATROX_MILLENIUM
	bool $w.config.f 57 13 "    Mystique support" CONFIG_FB_MATROX_MYSTIQUE
	bool $w.config.f 57 14 "    G100/G200/G400/G450 support" CONFIG_FB_MATROX_G100
	dep_tristate $w.config.f 57 15 "      Matrox I2C support" CONFIG_FB_MATROX_I2C
	dep_tristate $w.config.f 57 16 "      G400 second head support" CONFIG_FB_MATROX_MAVEN
	dep_tristate $w.config.f 57 17 "      G450 second head support" CONFIG_FB_MATROX_G450
	bool $w.config.f 57 18 "    Multihead support" CONFIG_FB_MATROX_MULTIHEAD
	tristate $w.config.f 57 19 "  ATI Mach64 display support (EXPERIMENTAL)" CONFIG_FB_ATY
	bool $w.config.f 57 20 "    Mach64 GX support (EXPERIMENTAL)" CONFIG_FB_ATY_GX
	bool $w.config.f 57 21 "    Mach64 CT/VT/GT/LT (incl. 3D RAGE) support" CONFIG_FB_ATY_CT
	tristate $w.config.f 57 22 "  ATI Radeon display support (EXPERIMENTAL)" CONFIG_FB_RADEON
	tristate $w.config.f 57 23 "  ATI Rage128 display support (EXPERIMENTAL)" CONFIG_FB_ATY128
	tristate $w.config.f 57 24 "  SIS acceleration (EXPERIMENTAL)" CONFIG_FB_SIS
	bool $w.config.f 57 25 "    SIS 630/540/730 support" CONFIG_FB_SIS_300
	bool $w.config.f 57 26 "    SIS 315H/315 support" CONFIG_FB_SIS_315
	tristate $w.config.f 57 27 "  3Dfx Banshee/Voodoo3 display support (EXPERIMENTAL)" CONFIG_FB_3DFX
	tristate $w.config.f 57 28 "  3Dfx Voodoo Graphics (sst1) support (EXPERIMENTAL)" CONFIG_FB_VOODOO1
	tristate $w.config.f 57 29 "  Virtual Frame Buffer support (ONLY FOR TESTING!)" CONFIG_FB_VIRTUAL
	bool $w.config.f 57 30 "  Advanced low level driver options" CONFIG_FBCON_ADVANCED
	tristate $w.config.f 57 31 "    Monochrome support" CONFIG_FBCON_MFB
	tristate $w.config.f 57 32 "    2 bpp packed pixels support" CONFIG_FBCON_CFB2
	tristate $w.config.f 57 33 "    4 bpp packed pixels support" CONFIG_FBCON_CFB4
	tristate $w.config.f 57 34 "    8 bpp packed pixels support" CONFIG_FBCON_CFB8
	tristate $w.config.f 57 35 "    16 bpp packed pixels support" CONFIG_FBCON_CFB16
	tristate $w.config.f 57 36 "    24 bpp packed pixels support" CONFIG_FBCON_CFB24
	tristate $w.config.f 57 37 "    32 bpp packed pixels support" CONFIG_FBCON_CFB32
	tristate $w.config.f 57 38 "    Amiga bitplanes support" CONFIG_FBCON_AFB
	tristate $w.config.f 57 39 "    Amiga interleaved bitplanes support" CONFIG_FBCON_ILBM
	tristate $w.config.f 57 40 "    Atari interleaved bitplanes (2 planes) support" CONFIG_FBCON_IPLAN2P2
	tristate $w.config.f 57 41 "    Atari interleaved bitplanes (4 planes) support" CONFIG_FBCON_IPLAN2P4
	tristate $w.config.f 57 42 "    Atari interleaved bitplanes (8 planes) support" CONFIG_FBCON_IPLAN2P8
	tristate $w.config.f 57 43 "    Mac variable bpp packed pixels support" CONFIG_FBCON_MAC
	tristate $w.config.f 57 44 "    VGA 16-color planar support" CONFIG_FBCON_VGA_PLANES
	tristate $w.config.f 57 45 "    VGA characters/attributes support" CONFIG_FBCON_VGA
	tristate $w.config.f 57 46 "    HGA monochrome support (EXPERIMENTAL)" CONFIG_FBCON_HGA
	bool $w.config.f 57 47 "  Support only 8 pixels wide fonts" CONFIG_FBCON_FONTWIDTH8_ONLY
	bool $w.config.f 57 48 "  Select compiled-in fonts" CONFIG_FBCON_FONTS
	bool $w.config.f 57 49 "    VGA 8x8 font" CONFIG_FONT_8x8
	bool $w.config.f 57 50 "    VGA 8x16 font" CONFIG_FONT_8x16
	bool $w.config.f 57 51 "    Sparc console 8x16 font" CONFIG_FONT_SUN8x16
	bool $w.config.f 57 52 "    Sparc console 12x22 font (not supported by all drivers)" CONFIG_FONT_SUN12x22
	bool $w.config.f 57 53 "    Mac console 6x11 font (not supported by all drivers)" CONFIG_FONT_6x11
	bool $w.config.f 57 54 "    Pearl (old m68k) console 8x8 font" CONFIG_FONT_PEARL_8x8
	bool $w.config.f 57 55 "    Acorn console 8x8 font" CONFIG_FONT_ACORN_8x8



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu56] == 0} then {menu56 .menu56 "Console drivers"}
	set winx [expr [winfo x .menu56]+30]; set winy [expr [winfo y .menu56]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu57 {} {
	global CONFIG_VT
	global CONFIG_EXPERIMENTAL
	global CONFIG_FB
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu57.config.f.x0 normal {n l y}} else {configure_entry .menu57.config.f.x0 disabled {y n l}}
	global CONFIG_MODULES
	global CONFIG_PCI
	global CONFIG_FB_RIVA
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu57.config.f.x1 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x1 normal {m}} else {configure_entry .menu57.config.f.x1 disabled {m}}; configure_entry .menu57.config.f.x1 normal {n l}} else {configure_entry .menu57.config.f.x1 disabled {y n m l}}
	global CONFIG_FB_CLGEN
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu57.config.f.x2 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x2 normal {m}} else {configure_entry .menu57.config.f.x2 disabled {m}}; configure_entry .menu57.config.f.x2 normal {n l}} else {configure_entry .menu57.config.f.x2 disabled {y n m l}}
	global CONFIG_FB_PM2
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu57.config.f.x3 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x3 normal {m}} else {configure_entry .menu57.config.f.x3 disabled {m}}; configure_entry .menu57.config.f.x3 normal {n l}} else {configure_entry .menu57.config.f.x3 disabled {y n m l}}
	global CONFIG_FB_PM2_FIFO_DISCONNECT
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB_PM2 == 1 || $CONFIG_FB_PM2 == 2) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu57.config.f.x4 normal {n l y}} else {configure_entry .menu57.config.f.x4 disabled {y n l}}
	global CONFIG_FB_PM2_PCI
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB_PM2 == 1 || $CONFIG_FB_PM2 == 2) && ($CONFIG_PCI == 1)} then {
	configure_entry .menu57.config.f.x5 normal {n l y}} else {configure_entry .menu57.config.f.x5 disabled {y n l}}
	global CONFIG_ARCH_ACORN
	global CONFIG_FB_ACORN
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_ARCH_ACORN == 1 || $CONFIG_ARCH_ACORN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCH_ACORN]];set CONFIG_FB_ACORN [sync_bool $CONFIG_FB_ACORN $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu57.config.f.x6 disabled {y};} else {configure_entry .menu57.config.f.x6 normal {y};}; configure_entry .menu57.config.f.x6 normal {n l}} else {configure_entry .menu57.config.f.x6 disabled {y n l}}
	global CONFIG_ARCH_CLPS711X
	global CONFIG_FB_CLPS711X
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_ARCH_CLPS711X == 1 || $CONFIG_ARCH_CLPS711X == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCH_CLPS711X]];set CONFIG_FB_CLPS711X [sync_bool $CONFIG_FB_CLPS711X $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu57.config.f.x7 disabled {y};} else {configure_entry .menu57.config.f.x7 normal {y};}; configure_entry .menu57.config.f.x7 normal {n l}} else {configure_entry .menu57.config.f.x7 disabled {y n l}}
	global CONFIG_FB_CYBER2000
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_FB_CYBER2000 [sync_tristate $CONFIG_FB_CYBER2000 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu57.config.f.x8 disabled {y}} else {configure_entry .menu57.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu57.config.f.x8 disabled {m}} else {configure_entry .menu57.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x8 normal {m}} else {configure_entry .menu57.config.f.x8 disabled {m}}; configure_entry .menu57.config.f.x8 normal {n l}} else {configure_entry .menu57.config.f.x8 disabled {y n m l}}
	global CONFIG_ARCH_SA1100
	global CONFIG_FB_SA1100
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_ARCH_SA1100 == 1 || $CONFIG_ARCH_SA1100 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCH_SA1100]];set CONFIG_FB_SA1100 [sync_bool $CONFIG_FB_SA1100 $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu57.config.f.x9 disabled {y};} else {configure_entry .menu57.config.f.x9 normal {y};}; configure_entry .menu57.config.f.x9 normal {n l}} else {configure_entry .menu57.config.f.x9 disabled {y n l}}
	global CONFIG_VISWS
	global CONFIG_FB_SGIVW
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_VISWS == 1)} then {
	configure_entry .menu57.config.f.x10 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x10 normal {m}} else {configure_entry .menu57.config.f.x10 disabled {m}}; configure_entry .menu57.config.f.x10 normal {n l}} else {configure_entry .menu57.config.f.x10 disabled {y n m l}}
	global CONFIG_FB_MATROX
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {
	configure_entry .menu57.config.f.x11 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x11 normal {m}} else {configure_entry .menu57.config.f.x11 disabled {m}}; configure_entry .menu57.config.f.x11 normal {n l}} else {configure_entry .menu57.config.f.x11 disabled {y n m l}}
	global CONFIG_FB_MATROX_MILLENIUM
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0)} then {
	configure_entry .menu57.config.f.x12 normal {n l y}} else {configure_entry .menu57.config.f.x12 disabled {y n l}}
	global CONFIG_FB_MATROX_MYSTIQUE
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0)} then {
	configure_entry .menu57.config.f.x13 normal {n l y}} else {configure_entry .menu57.config.f.x13 disabled {y n l}}
	global CONFIG_FB_MATROX_G100
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0)} then {
	configure_entry .menu57.config.f.x14 normal {n l y}} else {configure_entry .menu57.config.f.x14 disabled {y n l}}
	global CONFIG_I2C
	global CONFIG_I2C_ALGOBIT
	global CONFIG_FB_MATROX_I2C
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0) && ($CONFIG_I2C != 0) && ($CONFIG_FB_MATROX == 1 || $CONFIG_FB_MATROX == 2 || $CONFIG_FB_MATROX == 4) && ($CONFIG_I2C_ALGOBIT == 1 || $CONFIG_I2C_ALGOBIT == 2 || $CONFIG_I2C_ALGOBIT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FB_MATROX $CONFIG_I2C_ALGOBIT]];set CONFIG_FB_MATROX_I2C [sync_tristate $CONFIG_FB_MATROX_I2C $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu57.config.f.x15 disabled {y}} else {configure_entry .menu57.config.f.x15 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu57.config.f.x15 disabled {m}} else {configure_entry .menu57.config.f.x15 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x15 normal {m}} else {configure_entry .menu57.config.f.x15 disabled {m}}; configure_entry .menu57.config.f.x15 normal {n l}} else {configure_entry .menu57.config.f.x15 disabled {y n m l}}
	global CONFIG_FB_MATROX_MAVEN
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0) && ($CONFIG_I2C != 0) && ($CONFIG_FB_MATROX_G100 == 1) && ($CONFIG_FB_MATROX_I2C == 1 || $CONFIG_FB_MATROX_I2C == 2 || $CONFIG_FB_MATROX_I2C == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FB_MATROX_I2C]];set CONFIG_FB_MATROX_MAVEN [sync_tristate $CONFIG_FB_MATROX_MAVEN $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu57.config.f.x16 disabled {y}} else {configure_entry .menu57.config.f.x16 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu57.config.f.x16 disabled {m}} else {configure_entry .menu57.config.f.x16 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x16 normal {m}} else {configure_entry .menu57.config.f.x16 disabled {m}}; configure_entry .menu57.config.f.x16 normal {n l}} else {configure_entry .menu57.config.f.x16 disabled {y n m l}}
	global CONFIG_FB_MATROX_G450
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0) && ($CONFIG_FB_MATROX_G100 == 1 || $CONFIG_FB_MATROX_G100 == 2 || $CONFIG_FB_MATROX_G100 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FB_MATROX_G100]];set CONFIG_FB_MATROX_G450 [sync_tristate $CONFIG_FB_MATROX_G450 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu57.config.f.x17 disabled {y}} else {configure_entry .menu57.config.f.x17 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu57.config.f.x17 disabled {m}} else {configure_entry .menu57.config.f.x17 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x17 normal {m}} else {configure_entry .menu57.config.f.x17 disabled {m}}; configure_entry .menu57.config.f.x17 normal {n l}} else {configure_entry .menu57.config.f.x17 disabled {y n m l}}
	global CONFIG_FB_MATROX_MULTIHEAD
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0)} then {
	configure_entry .menu57.config.f.x18 normal {n l y}} else {configure_entry .menu57.config.f.x18 disabled {y n l}}
	global CONFIG_FB_ATY
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {
	configure_entry .menu57.config.f.x19 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x19 normal {m}} else {configure_entry .menu57.config.f.x19 disabled {m}}; configure_entry .menu57.config.f.x19 normal {n l}} else {configure_entry .menu57.config.f.x19 disabled {y n m l}}
	global CONFIG_FB_ATY_GX
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_ATY != 0)} then {
	configure_entry .menu57.config.f.x20 normal {n l y}} else {configure_entry .menu57.config.f.x20 disabled {y n l}}
	global CONFIG_FB_ATY_CT
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_ATY != 0)} then {
	configure_entry .menu57.config.f.x21 normal {n l y}} else {configure_entry .menu57.config.f.x21 disabled {y n l}}
	global CONFIG_FB_RADEON
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {
	configure_entry .menu57.config.f.x22 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x22 normal {m}} else {configure_entry .menu57.config.f.x22 disabled {m}}; configure_entry .menu57.config.f.x22 normal {n l}} else {configure_entry .menu57.config.f.x22 disabled {y n m l}}
	global CONFIG_FB_ATY128
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {
	configure_entry .menu57.config.f.x23 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x23 normal {m}} else {configure_entry .menu57.config.f.x23 disabled {m}}; configure_entry .menu57.config.f.x23 normal {n l}} else {configure_entry .menu57.config.f.x23 disabled {y n m l}}
	global CONFIG_FB_SIS
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {
	configure_entry .menu57.config.f.x24 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x24 normal {m}} else {configure_entry .menu57.config.f.x24 disabled {m}}; configure_entry .menu57.config.f.x24 normal {n l}} else {configure_entry .menu57.config.f.x24 disabled {y n m l}}
	global CONFIG_FB_SIS_300
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_SIS != 0)} then {
	configure_entry .menu57.config.f.x25 normal {n l y}} else {configure_entry .menu57.config.f.x25 disabled {y n l}}
	global CONFIG_FB_SIS_315
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_SIS != 0)} then {
	configure_entry .menu57.config.f.x26 normal {n l y}} else {configure_entry .menu57.config.f.x26 disabled {y n l}}
	global CONFIG_FB_3DFX
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {
	configure_entry .menu57.config.f.x27 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x27 normal {m}} else {configure_entry .menu57.config.f.x27 disabled {m}}; configure_entry .menu57.config.f.x27 normal {n l}} else {configure_entry .menu57.config.f.x27 disabled {y n m l}}
	global CONFIG_FB_VOODOO1
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {
	configure_entry .menu57.config.f.x28 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x28 normal {m}} else {configure_entry .menu57.config.f.x28 disabled {m}}; configure_entry .menu57.config.f.x28 normal {n l}} else {configure_entry .menu57.config.f.x28 disabled {y n m l}}
	global CONFIG_FB_VIRTUAL
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu57.config.f.x29 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x29 normal {m}} else {configure_entry .menu57.config.f.x29 disabled {m}}; configure_entry .menu57.config.f.x29 normal {n l}} else {configure_entry .menu57.config.f.x29 disabled {y n m l}}
	global CONFIG_FBCON_ADVANCED
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1)} then {
	configure_entry .menu57.config.f.x30 normal {n l y}} else {configure_entry .menu57.config.f.x30 disabled {y n l}}
	global CONFIG_FBCON_MFB
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {
	configure_entry .menu57.config.f.x31 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x31 normal {m}} else {configure_entry .menu57.config.f.x31 disabled {m}}; configure_entry .menu57.config.f.x31 normal {n l}} else {configure_entry .menu57.config.f.x31 disabled {y n m l}}
	global CONFIG_FBCON_CFB2
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {
	configure_entry .menu57.config.f.x32 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x32 normal {m}} else {configure_entry .menu57.config.f.x32 disabled {m}}; configure_entry .menu57.config.f.x32 normal {n l}} else {configure_entry .menu57.config.f.x32 disabled {y n m l}}
	global CONFIG_FBCON_CFB4
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {
	configure_entry .menu57.config.f.x33 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x33 normal {m}} else {configure_entry .menu57.config.f.x33 disabled {m}}; configure_entry .menu57.config.f.x33 normal {n l}} else {configure_entry .menu57.config.f.x33 disabled {y n m l}}
	global CONFIG_FBCON_CFB8
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {
	configure_entry .menu57.config.f.x34 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x34 normal {m}} else {configure_entry .menu57.config.f.x34 disabled {m}}; configure_entry .menu57.config.f.x34 normal {n l}} else {configure_entry .menu57.config.f.x34 disabled {y n m l}}
	global CONFIG_FBCON_CFB16
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {
	configure_entry .menu57.config.f.x35 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x35 normal {m}} else {configure_entry .menu57.config.f.x35 disabled {m}}; configure_entry .menu57.config.f.x35 normal {n l}} else {configure_entry .menu57.config.f.x35 disabled {y n m l}}
	global CONFIG_FBCON_CFB24
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {
	configure_entry .menu57.config.f.x36 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x36 normal {m}} else {configure_entry .menu57.config.f.x36 disabled {m}}; configure_entry .menu57.config.f.x36 normal {n l}} else {configure_entry .menu57.config.f.x36 disabled {y n m l}}
	global CONFIG_FBCON_CFB32
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {
	configure_entry .menu57.config.f.x37 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x37 normal {m}} else {configure_entry .menu57.config.f.x37 disabled {m}}; configure_entry .menu57.config.f.x37 normal {n l}} else {configure_entry .menu57.config.f.x37 disabled {y n m l}}
	global CONFIG_FBCON_AFB
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {
	configure_entry .menu57.config.f.x38 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x38 normal {m}} else {configure_entry .menu57.config.f.x38 disabled {m}}; configure_entry .menu57.config.f.x38 normal {n l}} else {configure_entry .menu57.config.f.x38 disabled {y n m l}}
	global CONFIG_FBCON_ILBM
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {
	configure_entry .menu57.config.f.x39 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x39 normal {m}} else {configure_entry .menu57.config.f.x39 disabled {m}}; configure_entry .menu57.config.f.x39 normal {n l}} else {configure_entry .menu57.config.f.x39 disabled {y n m l}}
	global CONFIG_FBCON_IPLAN2P2
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {
	configure_entry .menu57.config.f.x40 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x40 normal {m}} else {configure_entry .menu57.config.f.x40 disabled {m}}; configure_entry .menu57.config.f.x40 normal {n l}} else {configure_entry .menu57.config.f.x40 disabled {y n m l}}
	global CONFIG_FBCON_IPLAN2P4
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {
	configure_entry .menu57.config.f.x41 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x41 normal {m}} else {configure_entry .menu57.config.f.x41 disabled {m}}; configure_entry .menu57.config.f.x41 normal {n l}} else {configure_entry .menu57.config.f.x41 disabled {y n m l}}
	global CONFIG_FBCON_IPLAN2P8
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {
	configure_entry .menu57.config.f.x42 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x42 normal {m}} else {configure_entry .menu57.config.f.x42 disabled {m}}; configure_entry .menu57.config.f.x42 normal {n l}} else {configure_entry .menu57.config.f.x42 disabled {y n m l}}
	global CONFIG_FBCON_MAC
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {
	configure_entry .menu57.config.f.x43 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x43 normal {m}} else {configure_entry .menu57.config.f.x43 disabled {m}}; configure_entry .menu57.config.f.x43 normal {n l}} else {configure_entry .menu57.config.f.x43 disabled {y n m l}}
	global CONFIG_FBCON_VGA_PLANES
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {
	configure_entry .menu57.config.f.x44 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x44 normal {m}} else {configure_entry .menu57.config.f.x44 disabled {m}}; configure_entry .menu57.config.f.x44 normal {n l}} else {configure_entry .menu57.config.f.x44 disabled {y n m l}}
	global CONFIG_FBCON_VGA
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {
	configure_entry .menu57.config.f.x45 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x45 normal {m}} else {configure_entry .menu57.config.f.x45 disabled {m}}; configure_entry .menu57.config.f.x45 normal {n l}} else {configure_entry .menu57.config.f.x45 disabled {y n m l}}
	global CONFIG_FBCON_HGA
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {
	configure_entry .menu57.config.f.x46 normal {y}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu57.config.f.x46 normal {m}} else {configure_entry .menu57.config.f.x46 disabled {m}}; configure_entry .menu57.config.f.x46 normal {n l}} else {configure_entry .menu57.config.f.x46 disabled {y n m l}}
	global CONFIG_FBCON_FONTWIDTH8_ONLY
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1)} then {
	configure_entry .menu57.config.f.x47 normal {n l y}} else {configure_entry .menu57.config.f.x47 disabled {y n l}}
	global CONFIG_FBCON_FONTS
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1)} then {
	configure_entry .menu57.config.f.x48 normal {n l y}} else {configure_entry .menu57.config.f.x48 disabled {y n l}}
	global CONFIG_FONT_8x8
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1)} then {
	configure_entry .menu57.config.f.x49 normal {n l y}} else {configure_entry .menu57.config.f.x49 disabled {y n l}}
	global CONFIG_FONT_8x16
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1)} then {
	configure_entry .menu57.config.f.x50 normal {n l y}} else {configure_entry .menu57.config.f.x50 disabled {y n l}}
	global CONFIG_FONT_SUN8x16
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1)} then {
	configure_entry .menu57.config.f.x51 normal {n l y}} else {configure_entry .menu57.config.f.x51 disabled {y n l}}
	global CONFIG_FONT_SUN12x22
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1) && ($CONFIG_FBCON_FONTWIDTH8_ONLY == 0)} then {
	configure_entry .menu57.config.f.x52 normal {n l y}} else {configure_entry .menu57.config.f.x52 disabled {y n l}}
	global CONFIG_FONT_6x11
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1) && ($CONFIG_FBCON_FONTWIDTH8_ONLY == 0)} then {
	configure_entry .menu57.config.f.x53 normal {n l y}} else {configure_entry .menu57.config.f.x53 disabled {y n l}}
	global CONFIG_FONT_PEARL_8x8
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1)} then {
	configure_entry .menu57.config.f.x54 normal {n l y}} else {configure_entry .menu57.config.f.x54 disabled {y n l}}
	global CONFIG_FONT_ACORN_8x8
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1)} then {
	configure_entry .menu57.config.f.x55 normal {n l y}} else {configure_entry .menu57.config.f.x55 disabled {y n l}}
}


proc update_define_menu57 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_DUMMY_CONSOLE
	global CONFIG_FB_RIVA
	global CONFIG_FB_CLGEN
	global CONFIG_FB_PM2
	global CONFIG_FB_SGIVW
	global CONFIG_BUS_I2C
	global CONFIG_FB_MATROX
	global CONFIG_FB_ATY
	global CONFIG_FB_RADEON
	global CONFIG_FB_ATY128
	global CONFIG_FB_SIS
	global CONFIG_FB_3DFX
	global CONFIG_FB_VOODOO1
	global CONFIG_FB_VIRTUAL
	global CONFIG_FBCON_MFB
	global CONFIG_FBCON_CFB2
	global CONFIG_FBCON_CFB4
	global CONFIG_FBCON_CFB8
	global CONFIG_FBCON_CFB16
	global CONFIG_FBCON_CFB24
	global CONFIG_FBCON_CFB32
	global CONFIG_FBCON_AFB
	global CONFIG_FBCON_ILBM
	global CONFIG_FBCON_IPLAN2P2
	global CONFIG_FBCON_IPLAN2P4
	global CONFIG_FBCON_IPLAN2P8
	global CONFIG_FBCON_MAC
	global CONFIG_FBCON_VGA_PLANES
	global CONFIG_FBCON_VGA
	global CONFIG_FBCON_HGA
	global CONFIG_FBCON_STI
	global CONFIG_FONT_8x8
	global CONFIG_FONT_8x16
	global CONFIG_FB
set CONFIG_FB [expr $CONFIG_FB|16]
set CONFIG_FB_RIVA [expr $CONFIG_FB_RIVA|16]
set CONFIG_FB_CLGEN [expr $CONFIG_FB_CLGEN|16]
set CONFIG_FB_PM2 [expr $CONFIG_FB_PM2|16]
	global CONFIG_FB_PM2_FIFO_DISCONNECT
set CONFIG_FB_PM2_FIFO_DISCONNECT [expr $CONFIG_FB_PM2_FIFO_DISCONNECT|16]
	global CONFIG_FB_PM2_PCI
set CONFIG_FB_PM2_PCI [expr $CONFIG_FB_PM2_PCI|16]
set CONFIG_FB_SGIVW [expr $CONFIG_FB_SGIVW|16]
set CONFIG_FB_MATROX [expr $CONFIG_FB_MATROX|16]
	global CONFIG_FB_MATROX_MILLENIUM
set CONFIG_FB_MATROX_MILLENIUM [expr $CONFIG_FB_MATROX_MILLENIUM|16]
	global CONFIG_FB_MATROX_MYSTIQUE
set CONFIG_FB_MATROX_MYSTIQUE [expr $CONFIG_FB_MATROX_MYSTIQUE|16]
	global CONFIG_FB_MATROX_G100
set CONFIG_FB_MATROX_G100 [expr $CONFIG_FB_MATROX_G100|16]
	global CONFIG_FB_MATROX_MULTIHEAD
set CONFIG_FB_MATROX_MULTIHEAD [expr $CONFIG_FB_MATROX_MULTIHEAD|16]
set CONFIG_FB_ATY [expr $CONFIG_FB_ATY|16]
	global CONFIG_FB_ATY_GX
set CONFIG_FB_ATY_GX [expr $CONFIG_FB_ATY_GX|16]
	global CONFIG_FB_ATY_CT
set CONFIG_FB_ATY_CT [expr $CONFIG_FB_ATY_CT|16]
set CONFIG_FB_RADEON [expr $CONFIG_FB_RADEON|16]
set CONFIG_FB_ATY128 [expr $CONFIG_FB_ATY128|16]
set CONFIG_FB_SIS [expr $CONFIG_FB_SIS|16]
	global CONFIG_FB_SIS_300
set CONFIG_FB_SIS_300 [expr $CONFIG_FB_SIS_300|16]
	global CONFIG_FB_SIS_315
set CONFIG_FB_SIS_315 [expr $CONFIG_FB_SIS_315|16]
set CONFIG_FB_3DFX [expr $CONFIG_FB_3DFX|16]
set CONFIG_FB_VOODOO1 [expr $CONFIG_FB_VOODOO1|16]
set CONFIG_FB_VIRTUAL [expr $CONFIG_FB_VIRTUAL|16]
	global CONFIG_FBCON_ADVANCED
set CONFIG_FBCON_ADVANCED [expr $CONFIG_FBCON_ADVANCED|16]
set CONFIG_FBCON_MFB [expr $CONFIG_FBCON_MFB|16]
set CONFIG_FBCON_CFB2 [expr $CONFIG_FBCON_CFB2|16]
set CONFIG_FBCON_CFB4 [expr $CONFIG_FBCON_CFB4|16]
set CONFIG_FBCON_CFB8 [expr $CONFIG_FBCON_CFB8|16]
set CONFIG_FBCON_CFB16 [expr $CONFIG_FBCON_CFB16|16]
set CONFIG_FBCON_CFB24 [expr $CONFIG_FBCON_CFB24|16]
set CONFIG_FBCON_CFB32 [expr $CONFIG_FBCON_CFB32|16]
set CONFIG_FBCON_AFB [expr $CONFIG_FBCON_AFB|16]
set CONFIG_FBCON_ILBM [expr $CONFIG_FBCON_ILBM|16]
set CONFIG_FBCON_IPLAN2P2 [expr $CONFIG_FBCON_IPLAN2P2|16]
set CONFIG_FBCON_IPLAN2P4 [expr $CONFIG_FBCON_IPLAN2P4|16]
set CONFIG_FBCON_IPLAN2P8 [expr $CONFIG_FBCON_IPLAN2P8|16]
set CONFIG_FBCON_MAC [expr $CONFIG_FBCON_MAC|16]
set CONFIG_FBCON_VGA_PLANES [expr $CONFIG_FBCON_VGA_PLANES|16]
set CONFIG_FBCON_VGA [expr $CONFIG_FBCON_VGA|16]
set CONFIG_FBCON_HGA [expr $CONFIG_FBCON_HGA|16]
	global CONFIG_FBCON_FONTWIDTH8_ONLY
set CONFIG_FBCON_FONTWIDTH8_ONLY [expr $CONFIG_FBCON_FONTWIDTH8_ONLY|16]
	global CONFIG_FBCON_FONTS
set CONFIG_FBCON_FONTS [expr $CONFIG_FBCON_FONTS|16]
set CONFIG_FONT_8x8 [expr $CONFIG_FONT_8x8|16]
set CONFIG_FONT_8x16 [expr $CONFIG_FONT_8x16|16]
	global CONFIG_FONT_SUN8x16
set CONFIG_FONT_SUN8x16 [expr $CONFIG_FONT_SUN8x16|16]
	global CONFIG_FONT_SUN12x22
set CONFIG_FONT_SUN12x22 [expr $CONFIG_FONT_SUN12x22|16]
	global CONFIG_FONT_6x11
set CONFIG_FONT_6x11 [expr $CONFIG_FONT_6x11|16]
	global CONFIG_FONT_PEARL_8x8
set CONFIG_FONT_PEARL_8x8 [expr $CONFIG_FONT_PEARL_8x8|16]
	global CONFIG_FONT_ACORN_8x8
set CONFIG_FONT_ACORN_8x8 [expr $CONFIG_FONT_ACORN_8x8|16]
	global CONFIG_VT
	global CONFIG_EXPERIMENTAL
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_FB [expr $CONFIG_FB&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1)} then {	global CONSTANT_Y
set CONFIG_DUMMY_CONSOLE $CONSTANT_Y }
	global CONFIG_PCI
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FB_RIVA == 2)} then {set CONFIG_FB_RIVA 1}; set CONFIG_FB_RIVA [expr $CONFIG_FB_RIVA&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FB_CLGEN == 2)} then {set CONFIG_FB_CLGEN 1}; set CONFIG_FB_CLGEN [expr $CONFIG_FB_CLGEN&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FB_PM2 == 2)} then {set CONFIG_FB_PM2 1}; set CONFIG_FB_PM2 [expr $CONFIG_FB_PM2&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB_PM2 == 1 || $CONFIG_FB_PM2 == 2) && ($CONFIG_PCI == 1)} then {
	set CONFIG_FB_PM2_FIFO_DISCONNECT [expr $CONFIG_FB_PM2_FIFO_DISCONNECT&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB_PM2 == 1 || $CONFIG_FB_PM2 == 2) && ($CONFIG_PCI == 1)} then {
	set CONFIG_FB_PM2_PCI [expr $CONFIG_FB_PM2_PCI&15]}
	global CONFIG_ARCH_ACORN
	global CONFIG_FB_ACORN
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_ARCH_ACORN == 1 || $CONFIG_ARCH_ACORN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCH_ACORN]];set CONFIG_FB_ACORN [sync_bool $CONFIG_FB_ACORN $tmpvar_dep 0];set CONFIG_FB_ACORN [expr $CONFIG_FB_ACORN&15]}
	global CONFIG_ARCH_CLPS711X
	global CONFIG_FB_CLPS711X
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_ARCH_CLPS711X == 1 || $CONFIG_ARCH_CLPS711X == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCH_CLPS711X]];set CONFIG_FB_CLPS711X [sync_bool $CONFIG_FB_CLPS711X $tmpvar_dep 0];set CONFIG_FB_CLPS711X [expr $CONFIG_FB_CLPS711X&15]}
	global CONFIG_FB_CYBER2000
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_FB_CYBER2000 [sync_tristate $CONFIG_FB_CYBER2000 $tmpvar_dep]; set CONFIG_FB_CYBER2000 [expr $CONFIG_FB_CYBER2000&15]}
	global CONFIG_ARCH_SA1100
	global CONFIG_FB_SA1100
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_ARCH_SA1100 == 1 || $CONFIG_ARCH_SA1100 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_ARCH_SA1100]];set CONFIG_FB_SA1100 [sync_bool $CONFIG_FB_SA1100 $tmpvar_dep 0];set CONFIG_FB_SA1100 [expr $CONFIG_FB_SA1100&15]}
	global CONFIG_VISWS
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_VISWS == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FB_SGIVW == 2)} then {set CONFIG_FB_SGIVW 1}; set CONFIG_FB_SGIVW [expr $CONFIG_FB_SGIVW&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_VISWS == 1)} then {	global CONSTANT_Y
set CONFIG_BUS_I2C $CONSTANT_Y }
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FB_MATROX == 2)} then {set CONFIG_FB_MATROX 1}; set CONFIG_FB_MATROX [expr $CONFIG_FB_MATROX&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0)} then {
	set CONFIG_FB_MATROX_MILLENIUM [expr $CONFIG_FB_MATROX_MILLENIUM&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0)} then {
	set CONFIG_FB_MATROX_MYSTIQUE [expr $CONFIG_FB_MATROX_MYSTIQUE&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0)} then {
	set CONFIG_FB_MATROX_G100 [expr $CONFIG_FB_MATROX_G100&15]}
	global CONFIG_I2C
	global CONFIG_I2C_ALGOBIT
	global CONFIG_FB_MATROX_I2C
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0) && ($CONFIG_I2C != 0) && ($CONFIG_FB_MATROX == 1 || $CONFIG_FB_MATROX == 2 || $CONFIG_FB_MATROX == 4) && ($CONFIG_I2C_ALGOBIT == 1 || $CONFIG_I2C_ALGOBIT == 2 || $CONFIG_I2C_ALGOBIT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FB_MATROX $CONFIG_I2C_ALGOBIT]]; set CONFIG_FB_MATROX_I2C [sync_tristate $CONFIG_FB_MATROX_I2C $tmpvar_dep]; set CONFIG_FB_MATROX_I2C [expr $CONFIG_FB_MATROX_I2C&15]}
	global CONFIG_FB_MATROX_MAVEN
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0) && ($CONFIG_I2C != 0) && ($CONFIG_FB_MATROX_G100 == 1) && ($CONFIG_FB_MATROX_I2C == 1 || $CONFIG_FB_MATROX_I2C == 2 || $CONFIG_FB_MATROX_I2C == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FB_MATROX_I2C]]; set CONFIG_FB_MATROX_MAVEN [sync_tristate $CONFIG_FB_MATROX_MAVEN $tmpvar_dep]; set CONFIG_FB_MATROX_MAVEN [expr $CONFIG_FB_MATROX_MAVEN&15]}
	global CONFIG_FB_MATROX_G450
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0) && ($CONFIG_FB_MATROX_G100 == 1 || $CONFIG_FB_MATROX_G100 == 2 || $CONFIG_FB_MATROX_G100 == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_FB_MATROX_G100]]; set CONFIG_FB_MATROX_G450 [sync_tristate $CONFIG_FB_MATROX_G450 $tmpvar_dep]; set CONFIG_FB_MATROX_G450 [expr $CONFIG_FB_MATROX_G450&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0)} then {
	set CONFIG_FB_MATROX_MULTIHEAD [expr $CONFIG_FB_MATROX_MULTIHEAD&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FB_ATY == 2)} then {set CONFIG_FB_ATY 1}; set CONFIG_FB_ATY [expr $CONFIG_FB_ATY&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_ATY != 0)} then {
	set CONFIG_FB_ATY_GX [expr $CONFIG_FB_ATY_GX&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_ATY != 0)} then {
	set CONFIG_FB_ATY_CT [expr $CONFIG_FB_ATY_CT&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FB_RADEON == 2)} then {set CONFIG_FB_RADEON 1}; set CONFIG_FB_RADEON [expr $CONFIG_FB_RADEON&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FB_ATY128 == 2)} then {set CONFIG_FB_ATY128 1}; set CONFIG_FB_ATY128 [expr $CONFIG_FB_ATY128&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FB_SIS == 2)} then {set CONFIG_FB_SIS 1}; set CONFIG_FB_SIS [expr $CONFIG_FB_SIS&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_SIS != 0)} then {
	set CONFIG_FB_SIS_300 [expr $CONFIG_FB_SIS_300&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_SIS != 0)} then {
	set CONFIG_FB_SIS_315 [expr $CONFIG_FB_SIS_315&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FB_3DFX == 2)} then {set CONFIG_FB_3DFX 1}; set CONFIG_FB_3DFX [expr $CONFIG_FB_3DFX&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FB_VOODOO1 == 2)} then {set CONFIG_FB_VOODOO1 1}; set CONFIG_FB_VOODOO1 [expr $CONFIG_FB_VOODOO1&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FB_VIRTUAL == 2)} then {set CONFIG_FB_VIRTUAL 1}; set CONFIG_FB_VIRTUAL [expr $CONFIG_FB_VIRTUAL&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1)} then {
	set CONFIG_FBCON_ADVANCED [expr $CONFIG_FBCON_ADVANCED&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FBCON_MFB == 2)} then {set CONFIG_FBCON_MFB 1}; set CONFIG_FBCON_MFB [expr $CONFIG_FBCON_MFB&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FBCON_CFB2 == 2)} then {set CONFIG_FBCON_CFB2 1}; set CONFIG_FBCON_CFB2 [expr $CONFIG_FBCON_CFB2&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FBCON_CFB4 == 2)} then {set CONFIG_FBCON_CFB4 1}; set CONFIG_FBCON_CFB4 [expr $CONFIG_FBCON_CFB4&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FBCON_CFB8 == 2)} then {set CONFIG_FBCON_CFB8 1}; set CONFIG_FBCON_CFB8 [expr $CONFIG_FBCON_CFB8&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FBCON_CFB16 == 2)} then {set CONFIG_FBCON_CFB16 1}; set CONFIG_FBCON_CFB16 [expr $CONFIG_FBCON_CFB16&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FBCON_CFB24 == 2)} then {set CONFIG_FBCON_CFB24 1}; set CONFIG_FBCON_CFB24 [expr $CONFIG_FBCON_CFB24&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FBCON_CFB32 == 2)} then {set CONFIG_FBCON_CFB32 1}; set CONFIG_FBCON_CFB32 [expr $CONFIG_FBCON_CFB32&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FBCON_AFB == 2)} then {set CONFIG_FBCON_AFB 1}; set CONFIG_FBCON_AFB [expr $CONFIG_FBCON_AFB&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FBCON_ILBM == 2)} then {set CONFIG_FBCON_ILBM 1}; set CONFIG_FBCON_ILBM [expr $CONFIG_FBCON_ILBM&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FBCON_IPLAN2P2 == 2)} then {set CONFIG_FBCON_IPLAN2P2 1}; set CONFIG_FBCON_IPLAN2P2 [expr $CONFIG_FBCON_IPLAN2P2&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FBCON_IPLAN2P4 == 2)} then {set CONFIG_FBCON_IPLAN2P4 1}; set CONFIG_FBCON_IPLAN2P4 [expr $CONFIG_FBCON_IPLAN2P4&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FBCON_IPLAN2P8 == 2)} then {set CONFIG_FBCON_IPLAN2P8 1}; set CONFIG_FBCON_IPLAN2P8 [expr $CONFIG_FBCON_IPLAN2P8&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FBCON_MAC == 2)} then {set CONFIG_FBCON_MAC 1}; set CONFIG_FBCON_MAC [expr $CONFIG_FBCON_MAC&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FBCON_VGA_PLANES == 2)} then {set CONFIG_FBCON_VGA_PLANES 1}; set CONFIG_FBCON_VGA_PLANES [expr $CONFIG_FBCON_VGA_PLANES&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FBCON_VGA == 2)} then {set CONFIG_FBCON_VGA 1}; set CONFIG_FBCON_VGA [expr $CONFIG_FBCON_VGA&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {if {($CONFIG_MODULES == 0) && ($CONFIG_FBCON_HGA == 2)} then {set CONFIG_FBCON_HGA 1}; set CONFIG_FBCON_HGA [expr $CONFIG_FBCON_HGA&15]}
	global CONFIG_FB_AMIGA
	global CONFIG_FB_ATARI
	global CONFIG_FB_CYBER
	global CONFIG_FB_MAC
	global CONFIG_FB_RETINAZ3
	global CONFIG_FB_VIRGE
	global CONFIG_FB_BWTWO
	global CONFIG_FB_TX3912
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ACORN == 1 || $CONFIG_FB_AMIGA == 1 || $CONFIG_FB_ATARI == 1 || $CONFIG_FB_CYBER == 1 || $CONFIG_FB_MAC == 1 || $CONFIG_FB_RETINAZ3 == 1 || $CONFIG_FB_VIRGE == 1 || $CONFIG_FB_VIRTUAL == 1 || $CONFIG_FB_BWTWO == 1 || $CONFIG_FB_CLGEN == 1 || $CONFIG_FB_TX3912 == 1)} then {	global CONSTANT_Y
set CONFIG_FBCON_MFB $CONSTANT_Y }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ACORN != 1 && $CONFIG_FB_AMIGA != 1 && $CONFIG_FB_ATARI != 1 && $CONFIG_FB_CYBER != 1 && $CONFIG_FB_MAC != 1 && $CONFIG_FB_RETINAZ3 != 1 && $CONFIG_FB_VIRGE != 1 && $CONFIG_FB_VIRTUAL != 1 && $CONFIG_FB_BWTWO != 1 && $CONFIG_FB_CLGEN != 1 && $CONFIG_FB_TX3912 != 1) && ($CONFIG_FB_ACORN == 2 || $CONFIG_FB_AMIGA == 2 || $CONFIG_FB_ATARI == 2 || $CONFIG_FB_CYBER == 2 || $CONFIG_FB_MAC == 2 || $CONFIG_FB_RETINAZ3 == 2 || $CONFIG_FB_VIRGE == 2 || $CONFIG_FB_VIRTUAL == 2 || $CONFIG_FB_BWTWO == 2 || $CONFIG_FB_CLGEN == 2 || $CONFIG_FB_TX3912 == 2)} then {	global CONSTANT_M
set CONFIG_FBCON_MFB $CONSTANT_M }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ACORN == 1 || $CONFIG_FB_MAC == 1 || $CONFIG_FB_SA1100 == 1 || $CONFIG_FB_VIRTUAL == 1 || $CONFIG_FB_TX3912 == 1)} then {	global CONSTANT_Y
set CONFIG_FBCON_CFB2 $CONSTANT_Y }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ACORN == 1 || $CONFIG_FB_MAC == 1 || $CONFIG_FB_SA1100 == 1 || $CONFIG_FB_VIRTUAL == 1 || $CONFIG_FB_TX3912 == 1)} then {	global CONSTANT_Y
set CONFIG_FBCON_CFB4 $CONSTANT_Y }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ACORN != 1 && $CONFIG_FB_MAC != 1 && $CONFIG_FB_SA1100 != 1 && $CONFIG_FB_VIRTUAL != 1 && $CONFIG_FB_TX3912 != 1) && ($CONFIG_FB_ACORN == 2 || $CONFIG_FB_MAC == 2 || $CONFIG_FB_SA1100 == 2 || $CONFIG_FB_VIRTUAL == 2 || $CONFIG_FB_TX3912 == 2)} then {	global CONSTANT_M
set CONFIG_FBCON_CFB2 $CONSTANT_M }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ACORN != 1 && $CONFIG_FB_MAC != 1 && $CONFIG_FB_SA1100 != 1 && $CONFIG_FB_VIRTUAL != 1 && $CONFIG_FB_TX3912 != 1) && ($CONFIG_FB_ACORN == 2 || $CONFIG_FB_MAC == 2 || $CONFIG_FB_SA1100 == 2 || $CONFIG_FB_VIRTUAL == 2 || $CONFIG_FB_TX3912 == 2)} then {	global CONSTANT_M
set CONFIG_FBCON_CFB4 $CONSTANT_M }
	global CONFIG_FB_OF
	global CONFIG_FB_TGA
	global CONFIG_FB_VESA
	global CONFIG_FB_TCX
	global CONFIG_FB_CGTHREE
	global CONFIG_FB_CONTROL
	global CONFIG_FB_CGFOURTEEN
	global CONFIG_FB_G364
	global CONFIG_FB_VALKYRIE
	global CONFIG_FB_PLATINUM
	global CONFIG_FB_IGA
	global CONFIG_FB_CT65550
	global CONFIG_FB_P9100
	global CONFIG_FB_PMAG_BA
	global CONFIG_FB_PMAGB_B
	global CONFIG_FB_MAXINE
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ACORN == 1 || $CONFIG_FB_ATARI == 1 || $CONFIG_FB_ATY == 1 || $CONFIG_FB_MAC == 1 || $CONFIG_FB_OF == 1 || $CONFIG_FB_TGA == 1 || $CONFIG_FB_VESA == 1 || $CONFIG_FB_VIRTUAL == 1 || $CONFIG_FB_TCX == 1 || $CONFIG_FB_CGTHREE == 1 || $CONFIG_FB_CONTROL == 1 || $CONFIG_FB_CLGEN == 1 || $CONFIG_FB_CGFOURTEEN == 1 || $CONFIG_FB_G364 == 1 || $CONFIG_FB_VIRGE == 1 || $CONFIG_FB_CYBER == 1 || $CONFIG_FB_VALKYRIE == 1 || $CONFIG_FB_PLATINUM == 1 || $CONFIG_FB_IGA == 1 || $CONFIG_FB_MATROX == 1 || $CONFIG_FB_CT65550 == 1 || $CONFIG_FB_PM2 == 1 || $CONFIG_FB_P9100 == 1 || $CONFIG_FB_ATY128 == 1 || $CONFIG_FB_RIVA == 1 || $CONFIG_FB_RADEON == 1 || $CONFIG_FB_SGIVW == 1 || $CONFIG_FB_CYBER2000 == 1 || $CONFIG_FB_SA1100 == 1 || $CONFIG_FB_3DFX == 1 || $CONFIG_FB_PMAG_BA == 1 || $CONFIG_FB_PMAGB_B == 1 || $CONFIG_FB_MAXINE == 1 || $CONFIG_FB_TX3912 == 1 || $CONFIG_FB_SIS == 1)} then {	global CONSTANT_Y
set CONFIG_FBCON_CFB8 $CONSTANT_Y }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ACORN != 1 && $CONFIG_FB_ATARI != 1 && $CONFIG_FB_ATY != 1 && $CONFIG_FB_MAC != 1 && $CONFIG_FB_OF != 1 && $CONFIG_FB_TGA != 1 && $CONFIG_FB_VESA != 1 && $CONFIG_FB_VIRTUAL != 1 && $CONFIG_FB_TCX != 1 && $CONFIG_FB_CGTHREE != 1 && $CONFIG_FB_CONTROL != 1 && $CONFIG_FB_CLGEN != 1 && $CONFIG_FB_CGFOURTEEN != 1 && $CONFIG_FB_G364 != 1 && $CONFIG_FB_VIRGE != 1 && $CONFIG_FB_CYBER != 1 && $CONFIG_FB_VALKYRIE != 1 && $CONFIG_FB_PLATINUM != 1 && $CONFIG_FB_IGA != 1 && $CONFIG_FB_MATROX != 1 && $CONFIG_FB_CT65550 != 1 && $CONFIG_FB_PM2 != 1 && $CONFIG_FB_P9100 != 1 && $CONFIG_FB_ATY128 != 1 && $CONFIG_FB_RIVA != 1 && $CONFIG_FB_RADEON != 1 && $CONFIG_FB_SGIVW != 1 && $CONFIG_FB_CYBER2000 != 1 && $CONFIG_FB_SA1100 != 1 && $CONFIG_FB_3DFX != 1 && $CONFIG_FB_PMAG_BA != 1 && $CONFIG_FB_PMAGB_B != 1 && $CONFIG_FB_MAXINE != 1 && $CONFIG_FB_TX3912 != 1 && $CONFIG_FB_SIS != 1) && ($CONFIG_FB_ACORN == 2 || $CONFIG_FB_ATARI == 2 || $CONFIG_FB_ATY == 2 || $CONFIG_FB_MAC == 2 || $CONFIG_FB_OF == 2 || $CONFIG_FB_TGA == 2 || $CONFIG_FB_VESA == 2 || $CONFIG_FB_VIRTUAL == 2 || $CONFIG_FB_TCX == 2 || $CONFIG_FB_CGTHREE == 2 || $CONFIG_FB_CONTROL == 2 || $CONFIG_FB_CLGEN == 2 || $CONFIG_FB_CGFOURTEEN == 2 || $CONFIG_FB_G364 == 2 || $CONFIG_FB_VIRGE == 2 || $CONFIG_FB_CYBER == 2 || $CONFIG_FB_VALKYRIE == 2 || $CONFIG_FB_PLATINUM == 2 || $CONFIG_FB_IGA == 2 || $CONFIG_FB_MATROX == 2 || $CONFIG_FB_CT65550 == 2 || $CONFIG_FB_PM2 == 2 || $CONFIG_FB_P9100 == 2 || $CONFIG_FB_ATY128 == 2 || $CONFIG_FB_RIVA == 2 || $CONFIG_FB_3DFX == 2 || $CONFIG_FB_SGIVW == 2 || $CONFIG_FB_CYBER2000 == 2 || $CONFIG_FB_PMAG_BA == 2 || $CONFIG_FB_PMAGB_B == 2 || $CONFIG_FB_MAXINE == 2 || $CONFIG_FB_RADEON == 2 || $CONFIG_FB_SA1100 == 2 || $CONFIG_FB_SIS == 2 || $CONFIG_FB_TX3912 == 2)} then {	global CONSTANT_M
set CONFIG_FBCON_CFB8 $CONSTANT_M }
	global CONFIG_FB_TBOX
	global CONFIG_FB_Q40
	global CONFIG_FB_PVR2
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI == 1 || $CONFIG_FB_ATY == 1 || $CONFIG_FB_MAC == 1 || $CONFIG_FB_VESA == 1 || $CONFIG_FB_VIRTUAL == 1 || $CONFIG_FB_TBOX == 1 || $CONFIG_FB_Q40 == 1 || $CONFIG_FB_RADEON == 1 || $CONFIG_FB_CONTROL == 1 || $CONFIG_FB_CLGEN == 1 || $CONFIG_FB_VIRGE == 1 || $CONFIG_FB_CYBER == 1 || $CONFIG_FB_VALKYRIE == 1 || $CONFIG_FB_PLATINUM == 1 || $CONFIG_FB_CT65550 == 1 || $CONFIG_FB_MATROX == 1 || $CONFIG_FB_PM2 == 1 || $CONFIG_FB_SGIVW == 1 || $CONFIG_FB_RIVA == 1 || $CONFIG_FB_ATY128 == 1 || $CONFIG_FB_CYBER2000 == 1 || $CONFIG_FB_3DFX == 1 || $CONFIG_FB_SIS == 1 || $CONFIG_FB_SA1100 == 1 || $CONFIG_FB_PVR2 == 1 || $CONFIG_FB_VOODOO1 == 1)} then {	global CONSTANT_Y
set CONFIG_FBCON_CFB16 $CONSTANT_Y }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI != 1 && $CONFIG_FB_ATY != 1 && $CONFIG_FB_MAC != 1 && $CONFIG_FB_VESA != 1 && $CONFIG_FB_VIRTUAL != 1 && $CONFIG_FB_TBOX != 1 && $CONFIG_FB_Q40 != 1 && $CONFIG_FB_RADEON != 1 && $CONFIG_FB_CONTROL != 1 && $CONFIG_FB_CLGEN != 1 && $CONFIG_FB_VIRGE != 1 && $CONFIG_FB_CYBER != 1 && $CONFIG_FB_VALKYRIE != 1 && $CONFIG_FB_PLATINUM != 1 && $CONFIG_FB_CT65550 != 1 && $CONFIG_FB_MATROX != 1 && $CONFIG_FB_PM2 != 1 && $CONFIG_FB_SGIVW != 1 && $CONFIG_FB_RIVA != 1 && $CONFIG_FB_ATY128 != 1 && $CONFIG_FB_CYBER2000 != 1 && $CONFIG_FB_3DFX != 1 && $CONFIG_FB_SIS != 1 && $CONFIG_FB_SA1100 != 1 && $CONFIG_FB_PVR2 != 1 && $CONFIG_FB_VOODOO1 != 1) && ($CONFIG_FB_ATARI == 2 || $CONFIG_FB_ATY == 2 || $CONFIG_FB_MAC == 2 || $CONFIG_FB_VESA == 2 || $CONFIG_FB_VIRTUAL == 2 || $CONFIG_FB_TBOX == 2 || $CONFIG_FB_Q40 == 2 || $CONFIG_FB_3DFX == 2 || $CONFIG_FB_CONTROL == 2 || $CONFIG_FB_CLGEN == 2 || $CONFIG_FB_VIRGE == 2 || $CONFIG_FB_CYBER == 2 || $CONFIG_FB_VALKYRIE == 2 || $CONFIG_FB_PLATINUM == 2 || $CONFIG_FB_CT65550 == 2 || $CONFIG_FB_MATROX == 2 || $CONFIG_FB_PM2 == 2 || $CONFIG_FB_SGIVW == 2 || $CONFIG_FB_RIVA == 2 || $CONFIG_FB_ATY128 == 2 || $CONFIG_FB_CYBER2000 == 2 || $CONFIG_FB_SIS == 2 || $CONFIG_FB_SA1100 == 2 || $CONFIG_FB_RADEON == 2 || $CONFIG_FB_PVR2 == 2 || $CONFIG_FB_VOODOO1 == 2)} then {	global CONSTANT_M
set CONFIG_FBCON_CFB16 $CONSTANT_M }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATY == 1 || $CONFIG_FB_VIRTUAL == 1 || $CONFIG_FB_CLGEN == 1 || $CONFIG_FB_VESA == 1 || $CONFIG_FB_MATROX == 1 || $CONFIG_FB_PM2 == 1 || $CONFIG_FB_ATY128 == 1 || $CONFIG_FB_RADEON == 1 || $CONFIG_FB_CYBER2000 == 1 || $CONFIG_FB_PVR2 == 1 || $CONFIG_FB_VOODOO1 == 1)} then {	global CONSTANT_Y
set CONFIG_FBCON_CFB24 $CONSTANT_Y }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATY != 1 && $CONFIG_FB_VIRTUAL != 1 && $CONFIG_FB_CLGEN != 1 && $CONFIG_FB_VESA != 1 && $CONFIG_FB_MATROX != 1 && $CONFIG_FB_PM2 != 1 && $CONFIG_FB_ATY128 != 1 && $CONFIG_FB_RADEON != 1 && $CONFIG_FB_CYBER2000 != 1 && $CONFIG_FB_PVR2 != 1 && $CONFIG_FB_VOODOO1 != 1) && ($CONFIG_FB_ATY == 2 || $CONFIG_FB_VIRTUAL == 2 || $CONFIG_FB_CLGEN == 2 || $CONFIG_FB_VESA == 2 || $CONFIG_FB_MATROX == 2 || $CONFIG_FB_PM2 == 2 || $CONFIG_FB_ATY128 == 2 || $CONFIG_FB_RADEON == 2 || $CONFIG_FB_CYBER2000 == 2 || $CONFIG_FB_PVR2 == 2 || $CONFIG_FB_VOODOO1 == 2)} then {	global CONSTANT_M
set CONFIG_FBCON_CFB24 $CONSTANT_M }
	global CONFIG_FB_FM2
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI == 1 || $CONFIG_FB_ATY == 1 || $CONFIG_FB_VESA == 1 || $CONFIG_FB_VIRTUAL == 1 || $CONFIG_FB_CONTROL == 1 || $CONFIG_FB_CLGEN == 1 || $CONFIG_FB_TGA == 1 || $CONFIG_FB_PLATINUM == 1 || $CONFIG_FB_MATROX == 1 || $CONFIG_FB_PM2 == 1 || $CONFIG_FB_RIVA == 1 || $CONFIG_FB_ATY128 == 1 || $CONFIG_FB_FM2 == 1 || $CONFIG_FB_SGIVW == 1 || $CONFIG_FB_RADEON == 1 || $CONFIG_FB_PVR2 == 1 || $CONFIG_FB_3DFX == 1 || $CONFIG_FB_SIS == 1 || $CONFIG_FB_VOODOO1 == 1)} then {	global CONSTANT_Y
set CONFIG_FBCON_CFB32 $CONSTANT_Y }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI != 1 && $CONFIG_FB_ATY != 1 && $CONFIG_FB_VESA != 1 && $CONFIG_FB_VIRTUAL != 1 && $CONFIG_FB_CONTROL != 1 && $CONFIG_FB_CLGEN != 1 && $CONFIG_FB_TGA != 1 && $CONFIG_FB_PLATINUM != 1 && $CONFIG_FB_MATROX != 1 && $CONFIG_FB_PM2 != 1 && $CONFIG_FB_RIVA != 1 && $CONFIG_FB_ATY128 != 1 && $CONFIG_FB_FM2 != 1 && $CONFIG_FB_SGIVW != 1 && $CONFIG_FB_RADEON != 1 && $CONFIG_FB_PVR2 != 1 && $CONFIG_FB_3DFX != 1 && $CONFIG_FB_SIS != 1 && $CONFIG_FB_VOODOO1 != 1) && ($CONFIG_FB_ATARI == 2 || $CONFIG_FB_ATY == 2 || $CONFIG_FB_VESA == 2 || $CONFIG_FB_VIRTUAL == 2 || $CONFIG_FB_CONTROL == 2 || $CONFIG_FB_CLGEN == 2 || $CONFIG_FB_TGA == 2 || $CONFIG_FB_PLATINUM == 2 || $CONFIG_FB_MATROX == 2 || $CONFIG_FB_PM2 == 2 || $CONFIG_FB_RIVA == 2 || $CONFIG_FB_ATY128 == 2 || $CONFIG_FB_3DFX == 2 || $CONFIG_FB_RADEON == 2 || $CONFIG_FB_SGIVW == 2 || $CONFIG_FB_SIS == 2 || $CONFIG_FB_PVR2 == 2 || $CONFIG_FB_VOODOO1 == 2)} then {	global CONSTANT_M
set CONFIG_FBCON_CFB32 $CONSTANT_M }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_AMIGA == 1)} then {	global CONSTANT_Y
set CONFIG_FBCON_AFB $CONSTANT_Y }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_AMIGA == 1)} then {	global CONSTANT_Y
set CONFIG_FBCON_ILBM $CONSTANT_Y }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_AMIGA != 1) && ($CONFIG_FB_AMIGA == 2)} then {	global CONSTANT_M
set CONFIG_FBCON_AFB $CONSTANT_M }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_AMIGA != 1) && ($CONFIG_FB_AMIGA == 2)} then {	global CONSTANT_M
set CONFIG_FBCON_ILBM $CONSTANT_M }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI == 1)} then {	global CONSTANT_Y
set CONFIG_FBCON_IPLAN2P2 $CONSTANT_Y }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI == 1)} then {	global CONSTANT_Y
set CONFIG_FBCON_IPLAN2P4 $CONSTANT_Y }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI == 1)} then {	global CONSTANT_Y
set CONFIG_FBCON_IPLAN2P8 $CONSTANT_Y }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI != 1) && ($CONFIG_FB_ATARI == 2)} then {	global CONSTANT_M
set CONFIG_FBCON_IPLAN2P2 $CONSTANT_M }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI != 1) && ($CONFIG_FB_ATARI == 2)} then {	global CONSTANT_M
set CONFIG_FBCON_IPLAN2P4 $CONSTANT_M }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI != 1) && ($CONFIG_FB_ATARI == 2)} then {	global CONSTANT_M
set CONFIG_FBCON_IPLAN2P8 $CONSTANT_M }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_MAC == 1 || $CONFIG_FB_VIRTUAL == 1)} then {	global CONSTANT_Y
set CONFIG_FBCON_MAC $CONSTANT_Y }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_MAC != 1 && $CONFIG_FB_VIRTUAL != 1) && ($CONFIG_FB_MAC == 2 || $CONFIG_FB_VIRTUAL == 2)} then {	global CONSTANT_M
set CONFIG_FBCON_MAC $CONSTANT_M }
	global CONFIG_FB_VGA16
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_VGA16 == 1)} then {	global CONSTANT_Y
set CONFIG_FBCON_VGA_PLANES $CONSTANT_Y }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_VGA16 != 1) && ($CONFIG_FB_VGA16 == 2)} then {	global CONSTANT_M
set CONFIG_FBCON_VGA_PLANES $CONSTANT_M }
	global CONFIG_FB_HGA
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_HGA == 1)} then {	global CONSTANT_Y
set CONFIG_FBCON_HGA $CONSTANT_Y }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_HGA != 1) && ($CONFIG_FB_HGA == 2)} then {	global CONSTANT_M
set CONFIG_FBCON_HGA $CONSTANT_M }
	global CONFIG_FB_STI
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_STI == 1)} then {	global CONSTANT_Y
set CONFIG_FBCON_STI $CONSTANT_Y }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1)} then {
	set CONFIG_FBCON_FONTWIDTH8_ONLY [expr $CONFIG_FBCON_FONTWIDTH8_ONLY&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1)} then {
	set CONFIG_FBCON_FONTS [expr $CONFIG_FBCON_FONTS&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1)} then {
	set CONFIG_FONT_8x8 [expr $CONFIG_FONT_8x8&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1)} then {
	set CONFIG_FONT_8x16 [expr $CONFIG_FONT_8x16&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1)} then {
	set CONFIG_FONT_SUN8x16 [expr $CONFIG_FONT_SUN8x16&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1) && ($CONFIG_FBCON_FONTWIDTH8_ONLY == 0)} then {
	set CONFIG_FONT_SUN12x22 [expr $CONFIG_FONT_SUN12x22&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1) && ($CONFIG_FBCON_FONTWIDTH8_ONLY == 0)} then {
	set CONFIG_FONT_6x11 [expr $CONFIG_FONT_6x11&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1)} then {
	set CONFIG_FONT_PEARL_8x8 [expr $CONFIG_FONT_PEARL_8x8&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1)} then {
	set CONFIG_FONT_ACORN_8x8 [expr $CONFIG_FONT_ACORN_8x8&15]}
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS != 1)} then {	global CONSTANT_Y
set CONFIG_FONT_8x8 $CONSTANT_Y }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS != 1)} then {	global CONSTANT_Y
set CONFIG_FONT_8x16 $CONSTANT_Y }
}


menu_option menu58 58 "Sound"
proc menu58 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 58}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 58]]
	message $w.m -width 400 -aspect 300 -text \
		"Sound"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Sound" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 58; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 58; menu59 .menu59 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 58"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 58; menu57 .menu57 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 58; menu57 .menu57 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	tristate $w.config.f 58 0 "Sound card support" CONFIG_SOUND
	dep_tristate $w.config.f 58 1 "  BT878 audio dma" CONFIG_SOUND_BT878
	dep_tristate $w.config.f 58 2 "  C-Media PCI (CMI8338/8738)" CONFIG_SOUND_CMPCI
	bool $w.config.f 58 3 "    Enable legacy FM" CONFIG_SOUND_CMPCI_FM
	hex $w.config.f 58 4 "    FM I/O 388, 3C8, 3E0, 3E8" CONFIG_SOUND_CMPCI_FMIO
	bool $w.config.f 58 5 "    Enable legacy MPU-401" CONFIG_SOUND_CMPCI_MIDI
	hex $w.config.f 58 6 "    MPU-401 I/O 330, 320, 310, 300" CONFIG_SOUND_CMPCI_MPUIO
	bool $w.config.f 58 7 "    Enable joystick" CONFIG_SOUND_CMPCI_JOYSTICK
	bool $w.config.f 58 8 "    Support CMI8738 based audio cards" CONFIG_SOUND_CMPCI_CM8738
	bool $w.config.f 58 9 "      Inverse S/PDIF in for CMI8738" CONFIG_SOUND_CMPCI_SPDIFINVERSE
	bool $w.config.f 58 10 "      Enable S/PDIF loop for CMI8738" CONFIG_SOUND_CMPCI_SPDIFLOOP
	int $w.config.f 58 11 "      Number of speakers 2, 4, 5, 6" CONFIG_SOUND_CMPCI_SPEAKERS
	bool $w.config.f 58 12 "        Use Line-in as Read-out" CONFIG_SOUND_CMPCI_LINE_REAR
	bool $w.config.f 58 13 "        Use Line-in as Bass" CONFIG_SOUND_CMPCI_LINE_BASS
	dep_tristate $w.config.f 58 14 "  Creative SBLive! (EMU10K1)" CONFIG_SOUND_EMU10K1
	dep_bool $w.config.f 58 15 "    Creative SBLive! MIDI" CONFIG_MIDI_EMU10K1
	dep_tristate $w.config.f 58 16 "  Crystal SoundFusion (CS4280/461x)" CONFIG_SOUND_FUSION
	dep_tristate $w.config.f 58 17 "  Crystal Sound CS4281" CONFIG_SOUND_CS4281
	dep_tristate $w.config.f 58 18 "  Ensoniq AudioPCI (ES1370)" CONFIG_SOUND_ES1370
	dep_tristate $w.config.f 58 19 "  Creative Ensoniq AudioPCI 97 (ES1371)" CONFIG_SOUND_ES1371
	dep_tristate $w.config.f 58 20 "  ESS Technology Solo1" CONFIG_SOUND_ESSSOLO1
	dep_tristate $w.config.f 58 21 "  ESS Maestro, Maestro2, Maestro2E driver" CONFIG_SOUND_MAESTRO
	dep_tristate $w.config.f 58 22 "  ESS Maestro3/Allegro driver (EXPERIMENTAL)" CONFIG_SOUND_MAESTRO3
	dep_tristate $w.config.f 58 23 "  Intel ICH (i8xx) audio support" CONFIG_SOUND_ICH
	dep_tristate $w.config.f 58 24 "  RME Hammerfall (RME96XX) support" CONFIG_SOUND_RME96XX
	dep_tristate $w.config.f 58 25 "  S3 SonicVibes" CONFIG_SOUND_SONICVIBES
	dep_tristate $w.config.f 58 26 "  SGI Visual Workstation Sound" CONFIG_SOUND_VWSND
	dep_tristate $w.config.f 58 27 "  Trident 4DWave DX/NX, SiS 7018 or ALi 5451 PCI Audio Core" CONFIG_SOUND_TRIDENT
	dep_tristate $w.config.f 58 28 "  Support for Turtle Beach MultiSound Classic, Tahiti, Monterey" CONFIG_SOUND_MSNDCLAS
	comment $w.config.f 58 29 "  Compiled-in MSND Classic support requires firmware during compilation."
	istring $w.config.f 58 30 "Full pathname of MSNDINIT.BIN firmware file" CONFIG_MSNDCLAS_INIT_FILE
	istring $w.config.f 58 31 "Full pathname of MSNDPERM.BIN firmware file" CONFIG_MSNDCLAS_PERM_FILE
	int $w.config.f 58 32 "  MSND Classic IRQ 5, 7, 9, 10, 11, 12" CONFIG_MSNDCLAS_IRQ
	hex $w.config.f 58 33 "  MSND Classic memory B0000, C8000, D0000, D8000, E0000, E8000" CONFIG_MSNDCLAS_MEM
	hex $w.config.f 58 34 "  MSND Classic I/O 210, 220, 230, 240, 250, 260, 290, 3E0" CONFIG_MSNDCLAS_IO
	dep_tristate $w.config.f 58 35 "  Support for Turtle Beach MultiSound Pinnacle, Fiji" CONFIG_SOUND_MSNDPIN
	comment $w.config.f 58 36 "Compiled-in MSND Pinnacle support requires firmware during compilation."
	istring $w.config.f 58 37 "  Full pathname of PNDSPINI.BIN firmware file" CONFIG_MSNDPIN_INIT_FILE
	istring $w.config.f 58 38 "  Full pathname of PNDSPERM.BIN firmware file" CONFIG_MSNDPIN_PERM_FILE
	int $w.config.f 58 39 "    MSND Pinnacle IRQ 5, 7, 9, 10, 11, 12" CONFIG_MSNDPIN_IRQ
	hex $w.config.f 58 40 "    MSND Pinnacle memory B0000, C8000, D0000, D8000, E0000, E8000" CONFIG_MSNDPIN_MEM
	hex $w.config.f 58 41 "MSND Pinnacle I/O 210, 220, 230, 240, 250, 260, 290, 3E0" CONFIG_MSNDPIN_IO
	bool $w.config.f 58 42 "  MSND Pinnacle has S/PDIF I/O" CONFIG_MSNDPIN_DIGITAL
	bool $w.config.f 58 43 "  MSND Pinnacle non-PnP Mode" CONFIG_MSNDPIN_NONPNP
	comment $w.config.f 58 44 "MSND Pinnacle DSP section will be configured to above parameters."
	hex $w.config.f 58 45 "MSND Pinnacle config port 250,260,270" CONFIG_MSNDPIN_CFG
	comment $w.config.f 58 46 "Pinnacle-specific Device Configuration (0 disables)"
	hex $w.config.f 58 47 "MSND Pinnacle MPU I/O (e.g. 330)" CONFIG_MSNDPIN_MPU_IO
	int $w.config.f 58 48 "MSND Pinnacle MPU IRQ (e.g. 9)" CONFIG_MSNDPIN_MPU_IRQ
	hex $w.config.f 58 49 "MSND Pinnacle IDE I/O 0 (e.g. 170)" CONFIG_MSNDPIN_IDE_IO0
	hex $w.config.f 58 50 "MSND Pinnacle IDE I/O 1 (e.g. 376)" CONFIG_MSNDPIN_IDE_IO1
	int $w.config.f 58 51 "MSND Pinnacle IDE IRQ (e.g. 15)" CONFIG_MSNDPIN_IDE_IRQ
	hex $w.config.f 58 52 "MSND Pinnacle joystick I/O (e.g. 200)" CONFIG_MSNDPIN_JOYSTICK_IO
	int $w.config.f 58 53 "MSND buffer size (kB)" CONFIG_MSND_FIFOSIZE
	dep_tristate $w.config.f 58 54 "  VIA 82C686 Audio Codec" CONFIG_SOUND_VIA82CXXX
	dep_bool $w.config.f 58 55 "  VIA 82C686 MIDI" CONFIG_MIDI_VIA82CXXX
	dep_tristate $w.config.f 58 56 "  OSS sound modules" CONFIG_SOUND_OSS
	bool $w.config.f 58 57 "      Verbose initialisation" CONFIG_SOUND_TRACEINIT
	bool $w.config.f 58 58 "      Persistent DMA buffers" CONFIG_SOUND_DMAP
	dep_tristate $w.config.f 58 59 "    AD1816(A) based cards (EXPERIMENTAL)" CONFIG_SOUND_AD1816
	dep_tristate $w.config.f 58 60 "    Aztech Sound Galaxy (non-PnP) cards" CONFIG_SOUND_SGALAXY
	dep_tristate $w.config.f 58 61 "    Adlib Cards" CONFIG_SOUND_ADLIB
	dep_tristate $w.config.f 58 62 "    ACI mixer (miroSOUND PCM1-pro/PCM12/PCM20)" CONFIG_SOUND_ACI_MIXER
	dep_tristate $w.config.f 58 63 "    Crystal CS4232 based (PnP) cards" CONFIG_SOUND_CS4232
	dep_tristate $w.config.f 58 64 "    Ensoniq SoundScape support" CONFIG_SOUND_SSCAPE
	dep_tristate $w.config.f 58 65 "    Gravis Ultrasound support" CONFIG_SOUND_GUS
	bool $w.config.f 58 66 "      16 bit sampling option of GUS (_NOT_ GUS MAX)" CONFIG_SOUND_GUS16
	bool $w.config.f 58 67 "      GUS MAX support" CONFIG_SOUND_GUSMAX
	dep_tristate $w.config.f 58 68 "    Loopback MIDI device support" CONFIG_SOUND_VMIDI
	dep_tristate $w.config.f 58 69 "    MediaTrix AudioTrix Pro support" CONFIG_SOUND_TRIX
	bool $w.config.f 58 70 "      Have TRXPRO.HEX firmware file" CONFIG_TRIX_HAVE_BOOT
	istring $w.config.f 58 71 "  Full pathname of TRXPRO.HEX firmware file" CONFIG_TRIX_BOOT_FILE
	dep_tristate $w.config.f 58 72 "    Microsoft Sound System support" CONFIG_SOUND_MSS
	dep_tristate $w.config.f 58 73 "    MPU-401 support (NOT for SB16)" CONFIG_SOUND_MPU401
	dep_tristate $w.config.f 58 74 "    NM256AV/NM256ZX audio support" CONFIG_SOUND_NM256
	dep_tristate $w.config.f 58 75 "    OPTi MAD16 and/or Mozart based cards" CONFIG_SOUND_MAD16
	bool $w.config.f 58 76 "      Support MIDI in older MAD16 based cards (requires SB)" CONFIG_MAD16_OLDCARD
	dep_tristate $w.config.f 58 77 "    ProAudioSpectrum 16 support" CONFIG_SOUND_PAS
	dep_bool $w.config.f 58 78 "      Enable PAS16 joystick port" CONFIG_PAS_JOYSTICK
	dep_tristate $w.config.f 58 79 "    PSS (AD1848, ADSP-2115, ESC614) support" CONFIG_SOUND_PSS
	bool $w.config.f 58 80 "      Enable PSS mixer (Beethoven ADSP-16 and other compatibile)" CONFIG_PSS_MIXER
	bool $w.config.f 58 81 "      Have DSPxxx.LD firmware file" CONFIG_PSS_HAVE_BOOT
	istring $w.config.f 58 82 "        Full pathname of DSPxxx.LD firmware file" CONFIG_PSS_BOOT_FILE
	dep_tristate $w.config.f 58 83 "    100% Sound Blaster compatibles (SB16/32/64, ESS, Jazz16) support" CONFIG_SOUND_SB
	dep_tristate $w.config.f 58 84 "    AWE32 synth" CONFIG_SOUND_AWE32_SYNTH
	dep_tristate $w.config.f 58 85 "    Full support for Turtle Beach WaveFront (Tropez Plus, Tropez, Maui) synth/soundcards" CONFIG_SOUND_WAVEFRONT
	dep_tristate $w.config.f 58 86 "    Limited support for Turtle Beach Wave Front (Maui, Tropez) synthesizers" CONFIG_SOUND_MAUI
	bool $w.config.f 58 87 "      Have OSWF.MOT firmware file" CONFIG_MAUI_HAVE_BOOT
	istring $w.config.f 58 88 "  Full pathname of OSWF.MOT firmware file" CONFIG_MAUI_BOOT_FILE
	dep_tristate $w.config.f 58 89 "    Yamaha FM synthesizer (YM3812/OPL-3) support" CONFIG_SOUND_YM3812
	dep_tristate $w.config.f 58 90 "    Yamaha OPL3-SA1 audio controller" CONFIG_SOUND_OPL3SA1
	dep_tristate $w.config.f 58 91 "    Yamaha OPL3-SA2 and SA3 based PnP cards" CONFIG_SOUND_OPL3SA2
	dep_tristate $w.config.f 58 92 "    Yamaha YMF7xx PCI audio (native mode)" CONFIG_SOUND_YMFPCI
	dep_bool $w.config.f 58 93 "      Yamaha PCI legacy ports support" CONFIG_SOUND_YMFPCI_LEGACY
	dep_tristate $w.config.f 58 94 "    6850 UART support" CONFIG_SOUND_UART6850
	dep_tristate $w.config.f 58 95 "    Gallant Audio Cards (SC-6000 and SC-6600 based)" CONFIG_SOUND_AEDSP16
	bool $w.config.f 58 96 "      SC-6600 based audio cards (new Audio Excel DSP 16)" CONFIG_SC6600
	bool $w.config.f 58 97 "        Activate SC-6600 Joystick Interface" CONFIG_SC6600_JOY
	int $w.config.f 58 98 "        SC-6600 CDROM Interface (4=None, 3=IDE, 1=Panasonic, 0=?Sony?)" CONFIG_SC6600_CDROM
	hex $w.config.f 58 99 "        SC-6600 CDROM Interface I/O Address" CONFIG_SC6600_CDROMBASE
	bool $w.config.f 58 100 "      Audio Excel DSP 16 (SBPro emulation)" CONFIG_AEDSP16_SBPRO
	bool $w.config.f 58 101 "      Audio Excel DSP 16 (MSS emulation)" CONFIG_AEDSP16_MSS
	bool $w.config.f 58 102 "      Audio Excel DSP 16 (MPU401 emulation)" CONFIG_AEDSP16_MPU401
	dep_tristate $w.config.f 58 103 "  TV card (bt848) mixer support" CONFIG_SOUND_TVMIXER



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu58 {} {
	global CONFIG_SOUND
	global CONFIG_MODULES

	if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x0 normal {m}} else {configure_entry .menu58.config.f.x0 disabled {m}}
	global CONFIG_SOUND_BT878
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]];set CONFIG_SOUND_BT878 [sync_tristate $CONFIG_SOUND_BT878 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x1 disabled {y}} else {configure_entry .menu58.config.f.x1 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x1 disabled {m}} else {configure_entry .menu58.config.f.x1 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x1 normal {m}} else {configure_entry .menu58.config.f.x1 disabled {m}}; configure_entry .menu58.config.f.x1 normal {n l}} else {configure_entry .menu58.config.f.x1 disabled {y n m l}}
	global CONFIG_PCI
	global CONFIG_SOUND_CMPCI
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND $CONFIG_PCI]];set CONFIG_SOUND_CMPCI [sync_tristate $CONFIG_SOUND_CMPCI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x2 disabled {y}} else {configure_entry .menu58.config.f.x2 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x2 disabled {m}} else {configure_entry .menu58.config.f.x2 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x2 normal {m}} else {configure_entry .menu58.config.f.x2 disabled {m}}; configure_entry .menu58.config.f.x2 normal {n l}} else {configure_entry .menu58.config.f.x2 disabled {y n m l}}
	global CONFIG_SOUND_CMPCI_FM
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2)} then {
	configure_entry .menu58.config.f.x3 normal {n l y}} else {configure_entry .menu58.config.f.x3 disabled {y n l}}
	global CONFIG_SOUND_CMPCI_FMIO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_FM == 1)} then {.menu58.config.f.x4.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x4.l configure -state normal; } else {.menu58.config.f.x4.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x4.l configure -state disabled}
	global CONFIG_SOUND_CMPCI_MIDI
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2)} then {
	configure_entry .menu58.config.f.x5 normal {n l y}} else {configure_entry .menu58.config.f.x5 disabled {y n l}}
	global CONFIG_SOUND_CMPCI_MPUIO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_MIDI == 1)} then {.menu58.config.f.x6.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x6.l configure -state normal; } else {.menu58.config.f.x6.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x6.l configure -state disabled}
	global CONFIG_SOUND_CMPCI_JOYSTICK
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2)} then {
	configure_entry .menu58.config.f.x7 normal {n l y}} else {configure_entry .menu58.config.f.x7 disabled {y n l}}
	global CONFIG_SOUND_CMPCI_CM8738
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2)} then {
	configure_entry .menu58.config.f.x8 normal {n l y}} else {configure_entry .menu58.config.f.x8 disabled {y n l}}
	global CONFIG_SOUND_CMPCI_SPDIFINVERSE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_CM8738 == 1)} then {
	configure_entry .menu58.config.f.x9 normal {n l y}} else {configure_entry .menu58.config.f.x9 disabled {y n l}}
	global CONFIG_SOUND_CMPCI_SPDIFLOOP
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_CM8738 == 1)} then {
	configure_entry .menu58.config.f.x10 normal {n l y}} else {configure_entry .menu58.config.f.x10 disabled {y n l}}
	global CONFIG_SOUND_CMPCI_SPEAKERS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_CM8738 == 1)} then {.menu58.config.f.x11.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x11.l configure -state normal; } else {.menu58.config.f.x11.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x11.l configure -state disabled}
	global CONFIG_SOUND_CMPCI_LINE_REAR
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_CM8738 == 1) && ($CONFIG_SOUND_CMPCI_SPEAKERS != "2")} then {
	configure_entry .menu58.config.f.x12 normal {n l y}} else {configure_entry .menu58.config.f.x12 disabled {y n l}}
	global CONFIG_SOUND_CMPCI_LINE_BASS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_CM8738 == 1) && ($CONFIG_SOUND_CMPCI_SPEAKERS != "2")} then {
	configure_entry .menu58.config.f.x13 normal {n l y}} else {configure_entry .menu58.config.f.x13 disabled {y n l}}
	global CONFIG_SOUND_EMU10K1
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND $CONFIG_PCI]];set CONFIG_SOUND_EMU10K1 [sync_tristate $CONFIG_SOUND_EMU10K1 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x14 disabled {y}} else {configure_entry .menu58.config.f.x14 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x14 disabled {m}} else {configure_entry .menu58.config.f.x14 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x14 normal {m}} else {configure_entry .menu58.config.f.x14 disabled {m}}; configure_entry .menu58.config.f.x14 normal {n l}} else {configure_entry .menu58.config.f.x14 disabled {y n m l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_MIDI_EMU10K1
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_EMU10K1 == 1 || $CONFIG_SOUND_EMU10K1 == 2 || $CONFIG_SOUND_EMU10K1 == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_EMU10K1 $CONFIG_EXPERIMENTAL]];set CONFIG_MIDI_EMU10K1 [sync_bool $CONFIG_MIDI_EMU10K1 $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu58.config.f.x15 disabled {y};} else {configure_entry .menu58.config.f.x15 normal {y};}; configure_entry .menu58.config.f.x15 normal {n l}} else {configure_entry .menu58.config.f.x15 disabled {y n l}}
	global CONFIG_SOUND_FUSION
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]];set CONFIG_SOUND_FUSION [sync_tristate $CONFIG_SOUND_FUSION $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x16 disabled {y}} else {configure_entry .menu58.config.f.x16 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x16 disabled {m}} else {configure_entry .menu58.config.f.x16 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x16 normal {m}} else {configure_entry .menu58.config.f.x16 disabled {m}}; configure_entry .menu58.config.f.x16 normal {n l}} else {configure_entry .menu58.config.f.x16 disabled {y n m l}}
	global CONFIG_SOUND_CS4281
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]];set CONFIG_SOUND_CS4281 [sync_tristate $CONFIG_SOUND_CS4281 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x17 disabled {y}} else {configure_entry .menu58.config.f.x17 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x17 disabled {m}} else {configure_entry .menu58.config.f.x17 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x17 normal {m}} else {configure_entry .menu58.config.f.x17 disabled {m}}; configure_entry .menu58.config.f.x17 normal {n l}} else {configure_entry .menu58.config.f.x17 disabled {y n m l}}
	global CONFIG_SOUND_ES1370
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND $CONFIG_PCI]];set CONFIG_SOUND_ES1370 [sync_tristate $CONFIG_SOUND_ES1370 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x18 disabled {y}} else {configure_entry .menu58.config.f.x18 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x18 disabled {m}} else {configure_entry .menu58.config.f.x18 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x18 normal {m}} else {configure_entry .menu58.config.f.x18 disabled {m}}; configure_entry .menu58.config.f.x18 normal {n l}} else {configure_entry .menu58.config.f.x18 disabled {y n m l}}
	global CONFIG_SOUND_ES1371
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND $CONFIG_PCI]];set CONFIG_SOUND_ES1371 [sync_tristate $CONFIG_SOUND_ES1371 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x19 disabled {y}} else {configure_entry .menu58.config.f.x19 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x19 disabled {m}} else {configure_entry .menu58.config.f.x19 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x19 normal {m}} else {configure_entry .menu58.config.f.x19 disabled {m}}; configure_entry .menu58.config.f.x19 normal {n l}} else {configure_entry .menu58.config.f.x19 disabled {y n m l}}
	global CONFIG_SOUND_ESSSOLO1
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]];set CONFIG_SOUND_ESSSOLO1 [sync_tristate $CONFIG_SOUND_ESSSOLO1 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x20 disabled {y}} else {configure_entry .menu58.config.f.x20 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x20 disabled {m}} else {configure_entry .menu58.config.f.x20 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x20 normal {m}} else {configure_entry .menu58.config.f.x20 disabled {m}}; configure_entry .menu58.config.f.x20 normal {n l}} else {configure_entry .menu58.config.f.x20 disabled {y n m l}}
	global CONFIG_SOUND_MAESTRO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]];set CONFIG_SOUND_MAESTRO [sync_tristate $CONFIG_SOUND_MAESTRO $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x21 disabled {y}} else {configure_entry .menu58.config.f.x21 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x21 disabled {m}} else {configure_entry .menu58.config.f.x21 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x21 normal {m}} else {configure_entry .menu58.config.f.x21 disabled {m}}; configure_entry .menu58.config.f.x21 normal {n l}} else {configure_entry .menu58.config.f.x21 disabled {y n m l}}
	global CONFIG_SOUND_MAESTRO3
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND $CONFIG_PCI $CONFIG_EXPERIMENTAL]];set CONFIG_SOUND_MAESTRO3 [sync_tristate $CONFIG_SOUND_MAESTRO3 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x22 disabled {y}} else {configure_entry .menu58.config.f.x22 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x22 disabled {m}} else {configure_entry .menu58.config.f.x22 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x22 normal {m}} else {configure_entry .menu58.config.f.x22 disabled {m}}; configure_entry .menu58.config.f.x22 normal {n l}} else {configure_entry .menu58.config.f.x22 disabled {y n m l}}
	global CONFIG_SOUND_ICH
	if {($CONFIG_SOUND != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_SOUND_ICH [sync_tristate $CONFIG_SOUND_ICH $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x23 disabled {y}} else {configure_entry .menu58.config.f.x23 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x23 disabled {m}} else {configure_entry .menu58.config.f.x23 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x23 normal {m}} else {configure_entry .menu58.config.f.x23 disabled {m}}; configure_entry .menu58.config.f.x23 normal {n l}} else {configure_entry .menu58.config.f.x23 disabled {y n m l}}
	global CONFIG_SOUND_RME96XX
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND $CONFIG_PCI $CONFIG_EXPERIMENTAL]];set CONFIG_SOUND_RME96XX [sync_tristate $CONFIG_SOUND_RME96XX $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x24 disabled {y}} else {configure_entry .menu58.config.f.x24 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x24 disabled {m}} else {configure_entry .menu58.config.f.x24 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x24 normal {m}} else {configure_entry .menu58.config.f.x24 disabled {m}}; configure_entry .menu58.config.f.x24 normal {n l}} else {configure_entry .menu58.config.f.x24 disabled {y n m l}}
	global CONFIG_SOUND_SONICVIBES
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]];set CONFIG_SOUND_SONICVIBES [sync_tristate $CONFIG_SOUND_SONICVIBES $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x25 disabled {y}} else {configure_entry .menu58.config.f.x25 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x25 disabled {m}} else {configure_entry .menu58.config.f.x25 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x25 normal {m}} else {configure_entry .menu58.config.f.x25 disabled {m}}; configure_entry .menu58.config.f.x25 normal {n l}} else {configure_entry .menu58.config.f.x25 disabled {y n m l}}
	global CONFIG_VISWS
	global CONFIG_SOUND_VWSND
	if {($CONFIG_SOUND != 0) && ($CONFIG_VISWS == 1) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]];set CONFIG_SOUND_VWSND [sync_tristate $CONFIG_SOUND_VWSND $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x26 disabled {y}} else {configure_entry .menu58.config.f.x26 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x26 disabled {m}} else {configure_entry .menu58.config.f.x26 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x26 normal {m}} else {configure_entry .menu58.config.f.x26 disabled {m}}; configure_entry .menu58.config.f.x26 normal {n l}} else {configure_entry .menu58.config.f.x26 disabled {y n m l}}
	global CONFIG_SOUND_TRIDENT
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]];set CONFIG_SOUND_TRIDENT [sync_tristate $CONFIG_SOUND_TRIDENT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x27 disabled {y}} else {configure_entry .menu58.config.f.x27 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x27 disabled {m}} else {configure_entry .menu58.config.f.x27 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x27 normal {m}} else {configure_entry .menu58.config.f.x27 disabled {m}}; configure_entry .menu58.config.f.x27 normal {n l}} else {configure_entry .menu58.config.f.x27 disabled {y n m l}}
	global CONFIG_SOUND_MSNDCLAS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]];set CONFIG_SOUND_MSNDCLAS [sync_tristate $CONFIG_SOUND_MSNDCLAS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x28 disabled {y}} else {configure_entry .menu58.config.f.x28 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x28 disabled {m}} else {configure_entry .menu58.config.f.x28 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x28 normal {m}} else {configure_entry .menu58.config.f.x28 disabled {m}}; configure_entry .menu58.config.f.x28 normal {n l}} else {configure_entry .menu58.config.f.x28 disabled {y n m l}}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1 || $CONFIG_SOUND_MSNDCLAS == 2) && ($CONFIG_SOUND_MSNDCLAS == 1)} then {configure_entry .menu58.config.f.x29 normal {m}} else {configure_entry .menu58.config.f.x29 disabled {m}}
	global CONFIG_MSNDCLAS_INIT_FILE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1 || $CONFIG_SOUND_MSNDCLAS == 2)} then {.menu58.config.f.x30.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x30.l configure -state normal; } else {.menu58.config.f.x30.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x30.l configure -state disabled}
	global CONFIG_MSNDCLAS_PERM_FILE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1 || $CONFIG_SOUND_MSNDCLAS == 2)} then {.menu58.config.f.x31.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x31.l configure -state normal; } else {.menu58.config.f.x31.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x31.l configure -state disabled}
	global CONFIG_MSNDCLAS_IRQ
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1)} then {.menu58.config.f.x32.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x32.l configure -state normal; } else {.menu58.config.f.x32.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x32.l configure -state disabled}
	global CONFIG_MSNDCLAS_MEM
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1)} then {.menu58.config.f.x33.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x33.l configure -state normal; } else {.menu58.config.f.x33.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x33.l configure -state disabled}
	global CONFIG_MSNDCLAS_IO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1)} then {.menu58.config.f.x34.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x34.l configure -state normal; } else {.menu58.config.f.x34.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x34.l configure -state disabled}
	global CONFIG_SOUND_MSNDPIN
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]];set CONFIG_SOUND_MSNDPIN [sync_tristate $CONFIG_SOUND_MSNDPIN $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x35 disabled {y}} else {configure_entry .menu58.config.f.x35 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x35 disabled {m}} else {configure_entry .menu58.config.f.x35 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x35 normal {m}} else {configure_entry .menu58.config.f.x35 disabled {m}}; configure_entry .menu58.config.f.x35 normal {n l}} else {configure_entry .menu58.config.f.x35 disabled {y n m l}}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1 || $CONFIG_SOUND_MSNDPIN == 2) && ($CONFIG_SOUND_MSNDPIN == 1)} then {configure_entry .menu58.config.f.x36 normal {m}} else {configure_entry .menu58.config.f.x36 disabled {m}}
	global CONFIG_MSNDPIN_INIT_FILE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1 || $CONFIG_SOUND_MSNDPIN == 2)} then {.menu58.config.f.x37.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x37.l configure -state normal; } else {.menu58.config.f.x37.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x37.l configure -state disabled}
	global CONFIG_MSNDPIN_PERM_FILE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1 || $CONFIG_SOUND_MSNDPIN == 2)} then {.menu58.config.f.x38.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x38.l configure -state normal; } else {.menu58.config.f.x38.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x38.l configure -state disabled}
	global CONFIG_MSNDPIN_IRQ
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1)} then {.menu58.config.f.x39.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x39.l configure -state normal; } else {.menu58.config.f.x39.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x39.l configure -state disabled}
	global CONFIG_MSNDPIN_MEM
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1)} then {.menu58.config.f.x40.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x40.l configure -state normal; } else {.menu58.config.f.x40.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x40.l configure -state disabled}
	global CONFIG_MSNDPIN_IO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1)} then {.menu58.config.f.x41.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x41.l configure -state normal; } else {.menu58.config.f.x41.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x41.l configure -state disabled}
	global CONFIG_MSNDPIN_DIGITAL
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1)} then {
	configure_entry .menu58.config.f.x42 normal {n l y}} else {configure_entry .menu58.config.f.x42 disabled {y n l}}
	global CONFIG_MSNDPIN_NONPNP
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1)} then {
	configure_entry .menu58.config.f.x43 normal {n l y}} else {configure_entry .menu58.config.f.x43 disabled {y n l}}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {configure_entry .menu58.config.f.x44 normal {m}} else {configure_entry .menu58.config.f.x44 disabled {m}}
	global CONFIG_MSNDPIN_CFG
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {.menu58.config.f.x45.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x45.l configure -state normal; } else {.menu58.config.f.x45.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x45.l configure -state disabled}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {configure_entry .menu58.config.f.x46 normal {m}} else {configure_entry .menu58.config.f.x46 disabled {m}}
	global CONFIG_MSNDPIN_MPU_IO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {.menu58.config.f.x47.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x47.l configure -state normal; } else {.menu58.config.f.x47.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x47.l configure -state disabled}
	global CONFIG_MSNDPIN_MPU_IRQ
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {.menu58.config.f.x48.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x48.l configure -state normal; } else {.menu58.config.f.x48.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x48.l configure -state disabled}
	global CONFIG_MSNDPIN_IDE_IO0
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {.menu58.config.f.x49.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x49.l configure -state normal; } else {.menu58.config.f.x49.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x49.l configure -state disabled}
	global CONFIG_MSNDPIN_IDE_IO1
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {.menu58.config.f.x50.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x50.l configure -state normal; } else {.menu58.config.f.x50.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x50.l configure -state disabled}
	global CONFIG_MSNDPIN_IDE_IRQ
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {.menu58.config.f.x51.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x51.l configure -state normal; } else {.menu58.config.f.x51.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x51.l configure -state disabled}
	global CONFIG_MSNDPIN_JOYSTICK_IO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {.menu58.config.f.x52.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x52.l configure -state normal; } else {.menu58.config.f.x52.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x52.l configure -state disabled}
	global CONFIG_MSND_FIFOSIZE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1 || $CONFIG_SOUND_MSNDCLAS == 1)} then {.menu58.config.f.x53.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x53.l configure -state normal; } else {.menu58.config.f.x53.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x53.l configure -state disabled}
	global CONFIG_SOUND_VIA82CXXX
	if {($CONFIG_SOUND != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_SOUND_VIA82CXXX [sync_tristate $CONFIG_SOUND_VIA82CXXX $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x54 disabled {y}} else {configure_entry .menu58.config.f.x54 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x54 disabled {m}} else {configure_entry .menu58.config.f.x54 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x54 normal {m}} else {configure_entry .menu58.config.f.x54 disabled {m}}; configure_entry .menu58.config.f.x54 normal {n l}} else {configure_entry .menu58.config.f.x54 disabled {y n m l}}
	global CONFIG_MIDI_VIA82CXXX
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_VIA82CXXX == 1 || $CONFIG_SOUND_VIA82CXXX == 2 || $CONFIG_SOUND_VIA82CXXX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_VIA82CXXX]];set CONFIG_MIDI_VIA82CXXX [sync_bool $CONFIG_MIDI_VIA82CXXX $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu58.config.f.x55 disabled {y};} else {configure_entry .menu58.config.f.x55 normal {y};}; configure_entry .menu58.config.f.x55 normal {n l}} else {configure_entry .menu58.config.f.x55 disabled {y n l}}
	global CONFIG_SOUND_OSS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]];set CONFIG_SOUND_OSS [sync_tristate $CONFIG_SOUND_OSS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x56 disabled {y}} else {configure_entry .menu58.config.f.x56 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x56 disabled {m}} else {configure_entry .menu58.config.f.x56 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x56 normal {m}} else {configure_entry .menu58.config.f.x56 disabled {m}}; configure_entry .menu58.config.f.x56 normal {n l}} else {configure_entry .menu58.config.f.x56 disabled {y n m l}}
	global CONFIG_SOUND_TRACEINIT
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2)} then {
	configure_entry .menu58.config.f.x57 normal {n l y}} else {configure_entry .menu58.config.f.x57 disabled {y n l}}
	global CONFIG_SOUND_DMAP
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2)} then {
	configure_entry .menu58.config.f.x58 normal {n l y}} else {configure_entry .menu58.config.f.x58 disabled {y n l}}
	global CONFIG_SOUND_AD1816
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_AD1816 [sync_tristate $CONFIG_SOUND_AD1816 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x59 disabled {y}} else {configure_entry .menu58.config.f.x59 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x59 disabled {m}} else {configure_entry .menu58.config.f.x59 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x59 normal {m}} else {configure_entry .menu58.config.f.x59 disabled {m}}; configure_entry .menu58.config.f.x59 normal {n l}} else {configure_entry .menu58.config.f.x59 disabled {y n m l}}
	global CONFIG_SOUND_SGALAXY
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_SGALAXY [sync_tristate $CONFIG_SOUND_SGALAXY $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x60 disabled {y}} else {configure_entry .menu58.config.f.x60 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x60 disabled {m}} else {configure_entry .menu58.config.f.x60 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x60 normal {m}} else {configure_entry .menu58.config.f.x60 disabled {m}}; configure_entry .menu58.config.f.x60 normal {n l}} else {configure_entry .menu58.config.f.x60 disabled {y n m l}}
	global CONFIG_SOUND_ADLIB
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_ADLIB [sync_tristate $CONFIG_SOUND_ADLIB $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x61 disabled {y}} else {configure_entry .menu58.config.f.x61 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x61 disabled {m}} else {configure_entry .menu58.config.f.x61 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x61 normal {m}} else {configure_entry .menu58.config.f.x61 disabled {m}}; configure_entry .menu58.config.f.x61 normal {n l}} else {configure_entry .menu58.config.f.x61 disabled {y n m l}}
	global CONFIG_SOUND_ACI_MIXER
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_ACI_MIXER [sync_tristate $CONFIG_SOUND_ACI_MIXER $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x62 disabled {y}} else {configure_entry .menu58.config.f.x62 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x62 disabled {m}} else {configure_entry .menu58.config.f.x62 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x62 normal {m}} else {configure_entry .menu58.config.f.x62 disabled {m}}; configure_entry .menu58.config.f.x62 normal {n l}} else {configure_entry .menu58.config.f.x62 disabled {y n m l}}
	global CONFIG_SOUND_CS4232
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_CS4232 [sync_tristate $CONFIG_SOUND_CS4232 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x63 disabled {y}} else {configure_entry .menu58.config.f.x63 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x63 disabled {m}} else {configure_entry .menu58.config.f.x63 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x63 normal {m}} else {configure_entry .menu58.config.f.x63 disabled {m}}; configure_entry .menu58.config.f.x63 normal {n l}} else {configure_entry .menu58.config.f.x63 disabled {y n m l}}
	global CONFIG_SOUND_SSCAPE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_SSCAPE [sync_tristate $CONFIG_SOUND_SSCAPE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x64 disabled {y}} else {configure_entry .menu58.config.f.x64 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x64 disabled {m}} else {configure_entry .menu58.config.f.x64 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x64 normal {m}} else {configure_entry .menu58.config.f.x64 disabled {m}}; configure_entry .menu58.config.f.x64 normal {n l}} else {configure_entry .menu58.config.f.x64 disabled {y n m l}}
	global CONFIG_SOUND_GUS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_GUS [sync_tristate $CONFIG_SOUND_GUS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x65 disabled {y}} else {configure_entry .menu58.config.f.x65 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x65 disabled {m}} else {configure_entry .menu58.config.f.x65 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x65 normal {m}} else {configure_entry .menu58.config.f.x65 disabled {m}}; configure_entry .menu58.config.f.x65 normal {n l}} else {configure_entry .menu58.config.f.x65 disabled {y n m l}}
	global CONFIG_SOUND_GUS16
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_GUS != 0)} then {
	configure_entry .menu58.config.f.x66 normal {n l y}} else {configure_entry .menu58.config.f.x66 disabled {y n l}}
	global CONFIG_SOUND_GUSMAX
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_GUS != 0)} then {
	configure_entry .menu58.config.f.x67 normal {n l y}} else {configure_entry .menu58.config.f.x67 disabled {y n l}}
	global CONFIG_SOUND_VMIDI
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_VMIDI [sync_tristate $CONFIG_SOUND_VMIDI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x68 disabled {y}} else {configure_entry .menu58.config.f.x68 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x68 disabled {m}} else {configure_entry .menu58.config.f.x68 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x68 normal {m}} else {configure_entry .menu58.config.f.x68 disabled {m}}; configure_entry .menu58.config.f.x68 normal {n l}} else {configure_entry .menu58.config.f.x68 disabled {y n m l}}
	global CONFIG_SOUND_TRIX
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_TRIX [sync_tristate $CONFIG_SOUND_TRIX $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x69 disabled {y}} else {configure_entry .menu58.config.f.x69 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x69 disabled {m}} else {configure_entry .menu58.config.f.x69 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x69 normal {m}} else {configure_entry .menu58.config.f.x69 disabled {m}}; configure_entry .menu58.config.f.x69 normal {n l}} else {configure_entry .menu58.config.f.x69 disabled {y n m l}}
	global CONFIG_TRIX_HAVE_BOOT
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_TRIX == 1)} then {
	configure_entry .menu58.config.f.x70 normal {n l y}} else {configure_entry .menu58.config.f.x70 disabled {y n l}}
	global CONFIG_TRIX_BOOT_FILE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_TRIX == 1) && ($CONFIG_TRIX_HAVE_BOOT == 1)} then {.menu58.config.f.x71.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x71.l configure -state normal; } else {.menu58.config.f.x71.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x71.l configure -state disabled}
	global CONFIG_SOUND_MSS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_MSS [sync_tristate $CONFIG_SOUND_MSS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x72 disabled {y}} else {configure_entry .menu58.config.f.x72 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x72 disabled {m}} else {configure_entry .menu58.config.f.x72 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x72 normal {m}} else {configure_entry .menu58.config.f.x72 disabled {m}}; configure_entry .menu58.config.f.x72 normal {n l}} else {configure_entry .menu58.config.f.x72 disabled {y n m l}}
	global CONFIG_SOUND_MPU401
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_MPU401 [sync_tristate $CONFIG_SOUND_MPU401 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x73 disabled {y}} else {configure_entry .menu58.config.f.x73 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x73 disabled {m}} else {configure_entry .menu58.config.f.x73 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x73 normal {m}} else {configure_entry .menu58.config.f.x73 disabled {m}}; configure_entry .menu58.config.f.x73 normal {n l}} else {configure_entry .menu58.config.f.x73 disabled {y n m l}}
	global CONFIG_SOUND_NM256
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_NM256 [sync_tristate $CONFIG_SOUND_NM256 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x74 disabled {y}} else {configure_entry .menu58.config.f.x74 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x74 disabled {m}} else {configure_entry .menu58.config.f.x74 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x74 normal {m}} else {configure_entry .menu58.config.f.x74 disabled {m}}; configure_entry .menu58.config.f.x74 normal {n l}} else {configure_entry .menu58.config.f.x74 disabled {y n m l}}
	global CONFIG_SOUND_MAD16
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_MAD16 [sync_tristate $CONFIG_SOUND_MAD16 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x75 disabled {y}} else {configure_entry .menu58.config.f.x75 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x75 disabled {m}} else {configure_entry .menu58.config.f.x75 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x75 normal {m}} else {configure_entry .menu58.config.f.x75 disabled {m}}; configure_entry .menu58.config.f.x75 normal {n l}} else {configure_entry .menu58.config.f.x75 disabled {y n m l}}
	global CONFIG_MAD16_OLDCARD
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_MAD16 == 1 || $CONFIG_SOUND_MAD16 == 2)} then {
	configure_entry .menu58.config.f.x76 normal {n l y}} else {configure_entry .menu58.config.f.x76 disabled {y n l}}
	global CONFIG_SOUND_PAS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_PAS [sync_tristate $CONFIG_SOUND_PAS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x77 disabled {y}} else {configure_entry .menu58.config.f.x77 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x77 disabled {m}} else {configure_entry .menu58.config.f.x77 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x77 normal {m}} else {configure_entry .menu58.config.f.x77 disabled {m}}; configure_entry .menu58.config.f.x77 normal {n l}} else {configure_entry .menu58.config.f.x77 disabled {y n m l}}
	global CONFIG_PAS_JOYSTICK
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_PAS == 1 || $CONFIG_SOUND_PAS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_PAS]];set CONFIG_PAS_JOYSTICK [sync_bool $CONFIG_PAS_JOYSTICK $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x78 disabled {y};} else {configure_entry .menu58.config.f.x78 normal {y};}; configure_entry .menu58.config.f.x78 normal {n l}} else {configure_entry .menu58.config.f.x78 disabled {y n l}}
	global CONFIG_SOUND_PSS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_PSS [sync_tristate $CONFIG_SOUND_PSS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x79 disabled {y}} else {configure_entry .menu58.config.f.x79 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x79 disabled {m}} else {configure_entry .menu58.config.f.x79 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x79 normal {m}} else {configure_entry .menu58.config.f.x79 disabled {m}}; configure_entry .menu58.config.f.x79 normal {n l}} else {configure_entry .menu58.config.f.x79 disabled {y n m l}}
	global CONFIG_PSS_MIXER
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_PSS == 1 || $CONFIG_SOUND_PSS == 2)} then {
	configure_entry .menu58.config.f.x80 normal {n l y}} else {configure_entry .menu58.config.f.x80 disabled {y n l}}
	global CONFIG_PSS_HAVE_BOOT
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_PSS == 1 || $CONFIG_SOUND_PSS == 2)} then {
	configure_entry .menu58.config.f.x81 normal {n l y}} else {configure_entry .menu58.config.f.x81 disabled {y n l}}
	global CONFIG_PSS_BOOT_FILE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_PSS == 1 || $CONFIG_SOUND_PSS == 2) && ($CONFIG_PSS_HAVE_BOOT == 1)} then {.menu58.config.f.x82.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x82.l configure -state normal; } else {.menu58.config.f.x82.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x82.l configure -state disabled}
	global CONFIG_SOUND_SB
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_SB [sync_tristate $CONFIG_SOUND_SB $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x83 disabled {y}} else {configure_entry .menu58.config.f.x83 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x83 disabled {m}} else {configure_entry .menu58.config.f.x83 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x83 normal {m}} else {configure_entry .menu58.config.f.x83 disabled {m}}; configure_entry .menu58.config.f.x83 normal {n l}} else {configure_entry .menu58.config.f.x83 disabled {y n m l}}
	global CONFIG_SOUND_AWE32_SYNTH
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_AWE32_SYNTH [sync_tristate $CONFIG_SOUND_AWE32_SYNTH $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x84 disabled {y}} else {configure_entry .menu58.config.f.x84 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x84 disabled {m}} else {configure_entry .menu58.config.f.x84 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x84 normal {m}} else {configure_entry .menu58.config.f.x84 disabled {m}}; configure_entry .menu58.config.f.x84 normal {n l}} else {configure_entry .menu58.config.f.x84 disabled {y n m l}}
	global CONFIG_SOUND_WAVEFRONT
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS $CONSTANT_M]];set CONFIG_SOUND_WAVEFRONT [sync_tristate $CONFIG_SOUND_WAVEFRONT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x85 disabled {y}} else {configure_entry .menu58.config.f.x85 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x85 disabled {m}} else {configure_entry .menu58.config.f.x85 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x85 normal {m}} else {configure_entry .menu58.config.f.x85 disabled {m}}; configure_entry .menu58.config.f.x85 normal {n l}} else {configure_entry .menu58.config.f.x85 disabled {y n m l}}
	global CONFIG_SOUND_MAUI
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_MAUI [sync_tristate $CONFIG_SOUND_MAUI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x86 disabled {y}} else {configure_entry .menu58.config.f.x86 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x86 disabled {m}} else {configure_entry .menu58.config.f.x86 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x86 normal {m}} else {configure_entry .menu58.config.f.x86 disabled {m}}; configure_entry .menu58.config.f.x86 normal {n l}} else {configure_entry .menu58.config.f.x86 disabled {y n m l}}
	global CONFIG_MAUI_HAVE_BOOT
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_MAUI == 1)} then {
	configure_entry .menu58.config.f.x87 normal {n l y}} else {configure_entry .menu58.config.f.x87 disabled {y n l}}
	global CONFIG_MAUI_BOOT_FILE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_MAUI == 1) && ($CONFIG_MAUI_HAVE_BOOT == 1)} then {.menu58.config.f.x88.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x88.l configure -state normal; } else {.menu58.config.f.x88.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x88.l configure -state disabled}
	global CONFIG_SOUND_YM3812
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_YM3812 [sync_tristate $CONFIG_SOUND_YM3812 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x89 disabled {y}} else {configure_entry .menu58.config.f.x89 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x89 disabled {m}} else {configure_entry .menu58.config.f.x89 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x89 normal {m}} else {configure_entry .menu58.config.f.x89 disabled {m}}; configure_entry .menu58.config.f.x89 normal {n l}} else {configure_entry .menu58.config.f.x89 disabled {y n m l}}
	global CONFIG_SOUND_OPL3SA1
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_OPL3SA1 [sync_tristate $CONFIG_SOUND_OPL3SA1 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x90 disabled {y}} else {configure_entry .menu58.config.f.x90 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x90 disabled {m}} else {configure_entry .menu58.config.f.x90 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x90 normal {m}} else {configure_entry .menu58.config.f.x90 disabled {m}}; configure_entry .menu58.config.f.x90 normal {n l}} else {configure_entry .menu58.config.f.x90 disabled {y n m l}}
	global CONFIG_SOUND_OPL3SA2
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_OPL3SA2 [sync_tristate $CONFIG_SOUND_OPL3SA2 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x91 disabled {y}} else {configure_entry .menu58.config.f.x91 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x91 disabled {m}} else {configure_entry .menu58.config.f.x91 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x91 normal {m}} else {configure_entry .menu58.config.f.x91 disabled {m}}; configure_entry .menu58.config.f.x91 normal {n l}} else {configure_entry .menu58.config.f.x91 disabled {y n m l}}
	global CONFIG_SOUND_YMFPCI
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS $CONFIG_PCI]];set CONFIG_SOUND_YMFPCI [sync_tristate $CONFIG_SOUND_YMFPCI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x92 disabled {y}} else {configure_entry .menu58.config.f.x92 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x92 disabled {m}} else {configure_entry .menu58.config.f.x92 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x92 normal {m}} else {configure_entry .menu58.config.f.x92 disabled {m}}; configure_entry .menu58.config.f.x92 normal {n l}} else {configure_entry .menu58.config.f.x92 disabled {y n m l}}
	global CONFIG_SOUND_YMFPCI_LEGACY
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_YMFPCI == 1 || $CONFIG_SOUND_YMFPCI == 2 || $CONFIG_SOUND_YMFPCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_YMFPCI]];set CONFIG_SOUND_YMFPCI_LEGACY [sync_bool $CONFIG_SOUND_YMFPCI_LEGACY $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu58.config.f.x93 disabled {y};} else {configure_entry .menu58.config.f.x93 normal {y};}; configure_entry .menu58.config.f.x93 normal {n l}} else {configure_entry .menu58.config.f.x93 disabled {y n l}}
	global CONFIG_SOUND_UART6850
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_UART6850 [sync_tristate $CONFIG_SOUND_UART6850 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x94 disabled {y}} else {configure_entry .menu58.config.f.x94 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x94 disabled {m}} else {configure_entry .menu58.config.f.x94 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x94 normal {m}} else {configure_entry .menu58.config.f.x94 disabled {m}}; configure_entry .menu58.config.f.x94 normal {n l}} else {configure_entry .menu58.config.f.x94 disabled {y n m l}}
	global CONFIG_SOUND_AEDSP16
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]];set CONFIG_SOUND_AEDSP16 [sync_tristate $CONFIG_SOUND_AEDSP16 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x95 disabled {y}} else {configure_entry .menu58.config.f.x95 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x95 disabled {m}} else {configure_entry .menu58.config.f.x95 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x95 normal {m}} else {configure_entry .menu58.config.f.x95 disabled {m}}; configure_entry .menu58.config.f.x95 normal {n l}} else {configure_entry .menu58.config.f.x95 disabled {y n m l}}
	global CONFIG_SC6600
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2)} then {
	configure_entry .menu58.config.f.x96 normal {n l y}} else {configure_entry .menu58.config.f.x96 disabled {y n l}}
	global CONFIG_SC6600_JOY
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2) && ($CONFIG_SC6600 == 1)} then {
	configure_entry .menu58.config.f.x97 normal {n l y}} else {configure_entry .menu58.config.f.x97 disabled {y n l}}
	global CONFIG_SC6600_CDROM
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2) && ($CONFIG_SC6600 == 1)} then {.menu58.config.f.x98.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x98.l configure -state normal; } else {.menu58.config.f.x98.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x98.l configure -state disabled}
	global CONFIG_SC6600_CDROMBASE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2) && ($CONFIG_SC6600 == 1)} then {.menu58.config.f.x99.x configure -state normal -foreground [ cget .ref -foreground ]; .menu58.config.f.x99.l configure -state normal; } else {.menu58.config.f.x99.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu58.config.f.x99.l configure -state disabled}
	global CONFIG_AEDSP16_MSS
	global CONFIG_AEDSP16_SBPRO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2) && ($CONFIG_SOUND_SB == 1 || $CONFIG_SOUND_SB == 2) && ($CONFIG_AEDSP16_MSS != 1)} then {
	configure_entry .menu58.config.f.x100 normal {n l y}} else {configure_entry .menu58.config.f.x100 disabled {y n l}}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2) && ($CONFIG_SOUND_MSS == 1 || $CONFIG_SOUND_MSS == 2) && ($CONFIG_AEDSP16_SBPRO != 1)} then {
	configure_entry .menu58.config.f.x101 normal {n l y}} else {configure_entry .menu58.config.f.x101 disabled {y n l}}
	global CONFIG_AEDSP16_MPU401
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2) && ($CONFIG_SOUND_MPU401 == 1 || $CONFIG_SOUND_MPU401 == 2)} then {
	configure_entry .menu58.config.f.x102 normal {n l y}} else {configure_entry .menu58.config.f.x102 disabled {y n l}}
	global CONFIG_I2C
	global CONFIG_SOUND_TVMIXER
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_I2C == 1 || $CONFIG_I2C == 2 || $CONFIG_I2C == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND $CONFIG_I2C]];set CONFIG_SOUND_TVMIXER [sync_tristate $CONFIG_SOUND_TVMIXER $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu58.config.f.x103 disabled {y}} else {configure_entry .menu58.config.f.x103 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu58.config.f.x103 disabled {m}} else {configure_entry .menu58.config.f.x103 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu58.config.f.x103 normal {m}} else {configure_entry .menu58.config.f.x103 disabled {m}}; configure_entry .menu58.config.f.x103 normal {n l}} else {configure_entry .menu58.config.f.x103 disabled {y n m l}}
}


proc update_define_menu58 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_SOUND
	global CONFIG_SOUND_CMPCI_FMIO
	global CONFIG_MSNDCLAS_HAVE_BOOT
	global CONFIG_MSNDPIN_HAVE_BOOT
	global CONFIG_INPUT_GAMEPORT
	global CONFIG_SOUND_CMPCI_FM
set CONFIG_SOUND_CMPCI_FM [expr $CONFIG_SOUND_CMPCI_FM|16]
	global CONFIG_SOUND_CMPCI_MIDI
set CONFIG_SOUND_CMPCI_MIDI [expr $CONFIG_SOUND_CMPCI_MIDI|16]
	global CONFIG_SOUND_CMPCI_JOYSTICK
set CONFIG_SOUND_CMPCI_JOYSTICK [expr $CONFIG_SOUND_CMPCI_JOYSTICK|16]
	global CONFIG_SOUND_CMPCI_CM8738
set CONFIG_SOUND_CMPCI_CM8738 [expr $CONFIG_SOUND_CMPCI_CM8738|16]
	global CONFIG_SOUND_CMPCI_SPDIFINVERSE
set CONFIG_SOUND_CMPCI_SPDIFINVERSE [expr $CONFIG_SOUND_CMPCI_SPDIFINVERSE|16]
	global CONFIG_SOUND_CMPCI_SPDIFLOOP
set CONFIG_SOUND_CMPCI_SPDIFLOOP [expr $CONFIG_SOUND_CMPCI_SPDIFLOOP|16]
	global CONFIG_SOUND_CMPCI_LINE_REAR
set CONFIG_SOUND_CMPCI_LINE_REAR [expr $CONFIG_SOUND_CMPCI_LINE_REAR|16]
	global CONFIG_SOUND_CMPCI_LINE_BASS
set CONFIG_SOUND_CMPCI_LINE_BASS [expr $CONFIG_SOUND_CMPCI_LINE_BASS|16]
	global CONFIG_MSNDPIN_DIGITAL
set CONFIG_MSNDPIN_DIGITAL [expr $CONFIG_MSNDPIN_DIGITAL|16]
	global CONFIG_MSNDPIN_NONPNP
set CONFIG_MSNDPIN_NONPNP [expr $CONFIG_MSNDPIN_NONPNP|16]
	global CONFIG_SOUND_TRACEINIT
set CONFIG_SOUND_TRACEINIT [expr $CONFIG_SOUND_TRACEINIT|16]
	global CONFIG_SOUND_DMAP
set CONFIG_SOUND_DMAP [expr $CONFIG_SOUND_DMAP|16]
	global CONFIG_SOUND_GUS16
set CONFIG_SOUND_GUS16 [expr $CONFIG_SOUND_GUS16|16]
	global CONFIG_SOUND_GUSMAX
set CONFIG_SOUND_GUSMAX [expr $CONFIG_SOUND_GUSMAX|16]
	global CONFIG_TRIX_HAVE_BOOT
set CONFIG_TRIX_HAVE_BOOT [expr $CONFIG_TRIX_HAVE_BOOT|16]
	global CONFIG_MAD16_OLDCARD
set CONFIG_MAD16_OLDCARD [expr $CONFIG_MAD16_OLDCARD|16]
	global CONFIG_PSS_MIXER
set CONFIG_PSS_MIXER [expr $CONFIG_PSS_MIXER|16]
	global CONFIG_PSS_HAVE_BOOT
set CONFIG_PSS_HAVE_BOOT [expr $CONFIG_PSS_HAVE_BOOT|16]
	global CONFIG_MAUI_HAVE_BOOT
set CONFIG_MAUI_HAVE_BOOT [expr $CONFIG_MAUI_HAVE_BOOT|16]
	global CONFIG_SC6600
set CONFIG_SC6600 [expr $CONFIG_SC6600|16]
	global CONFIG_SC6600_JOY
set CONFIG_SC6600_JOY [expr $CONFIG_SC6600_JOY|16]
	global CONFIG_AEDSP16_SBPRO
set CONFIG_AEDSP16_SBPRO [expr $CONFIG_AEDSP16_SBPRO|16]
	global CONFIG_AEDSP16_MSS
set CONFIG_AEDSP16_MSS [expr $CONFIG_AEDSP16_MSS|16]
	global CONFIG_AEDSP16_MPU401
set CONFIG_AEDSP16_MPU401 [expr $CONFIG_AEDSP16_MPU401|16]

	if {($CONFIG_MODULES == 0)} then {if {($CONFIG_SOUND == 2)} then {set CONFIG_SOUND 1}}
	global CONFIG_SOUND_BT878
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]]; set CONFIG_SOUND_BT878 [sync_tristate $CONFIG_SOUND_BT878 $tmpvar_dep]; set CONFIG_SOUND_BT878 [expr $CONFIG_SOUND_BT878&15]}
	global CONFIG_PCI
	global CONFIG_SOUND_CMPCI
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND $CONFIG_PCI]]; set CONFIG_SOUND_CMPCI [sync_tristate $CONFIG_SOUND_CMPCI $tmpvar_dep]; set CONFIG_SOUND_CMPCI [expr $CONFIG_SOUND_CMPCI&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2)} then {
	set CONFIG_SOUND_CMPCI_FM [expr $CONFIG_SOUND_CMPCI_FM&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_FM == 1)} then {set CONFIG_SOUND_CMPCI_FMIO 388 }
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_FM == 1)} then {validate_hex CONFIG_SOUND_CMPCI_FMIO "$CONFIG_SOUND_CMPCI_FMIO" 388}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2)} then {
	set CONFIG_SOUND_CMPCI_MIDI [expr $CONFIG_SOUND_CMPCI_MIDI&15]}
	global CONFIG_SOUND_CMPCI_MPUIO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_MIDI == 1)} then {validate_hex CONFIG_SOUND_CMPCI_MPUIO "$CONFIG_SOUND_CMPCI_MPUIO" 330}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2)} then {
	set CONFIG_SOUND_CMPCI_JOYSTICK [expr $CONFIG_SOUND_CMPCI_JOYSTICK&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2)} then {
	set CONFIG_SOUND_CMPCI_CM8738 [expr $CONFIG_SOUND_CMPCI_CM8738&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_CM8738 == 1)} then {
	set CONFIG_SOUND_CMPCI_SPDIFINVERSE [expr $CONFIG_SOUND_CMPCI_SPDIFINVERSE&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_CM8738 == 1)} then {
	set CONFIG_SOUND_CMPCI_SPDIFLOOP [expr $CONFIG_SOUND_CMPCI_SPDIFLOOP&15]}
	global CONFIG_SOUND_CMPCI_SPEAKERS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_CM8738 == 1)} then {validate_int CONFIG_SOUND_CMPCI_SPEAKERS "$CONFIG_SOUND_CMPCI_SPEAKERS" 2}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_CM8738 == 1) && ($CONFIG_SOUND_CMPCI_SPEAKERS != "2")} then {
	set CONFIG_SOUND_CMPCI_LINE_REAR [expr $CONFIG_SOUND_CMPCI_LINE_REAR&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_CM8738 == 1) && ($CONFIG_SOUND_CMPCI_SPEAKERS != "2")} then {
	set CONFIG_SOUND_CMPCI_LINE_BASS [expr $CONFIG_SOUND_CMPCI_LINE_BASS&15]}
	global CONFIG_SOUND_EMU10K1
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND $CONFIG_PCI]]; set CONFIG_SOUND_EMU10K1 [sync_tristate $CONFIG_SOUND_EMU10K1 $tmpvar_dep]; set CONFIG_SOUND_EMU10K1 [expr $CONFIG_SOUND_EMU10K1&15]}
	global CONFIG_EXPERIMENTAL
	global CONFIG_MIDI_EMU10K1
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_EMU10K1 == 1 || $CONFIG_SOUND_EMU10K1 == 2 || $CONFIG_SOUND_EMU10K1 == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_EMU10K1 $CONFIG_EXPERIMENTAL]];set CONFIG_MIDI_EMU10K1 [sync_bool $CONFIG_MIDI_EMU10K1 $tmpvar_dep 1];set CONFIG_MIDI_EMU10K1 [expr $CONFIG_MIDI_EMU10K1&15]}
	global CONFIG_SOUND_FUSION
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]]; set CONFIG_SOUND_FUSION [sync_tristate $CONFIG_SOUND_FUSION $tmpvar_dep]; set CONFIG_SOUND_FUSION [expr $CONFIG_SOUND_FUSION&15]}
	global CONFIG_SOUND_CS4281
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]]; set CONFIG_SOUND_CS4281 [sync_tristate $CONFIG_SOUND_CS4281 $tmpvar_dep]; set CONFIG_SOUND_CS4281 [expr $CONFIG_SOUND_CS4281&15]}
	global CONFIG_SOUND_ES1370
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND $CONFIG_PCI]]; set CONFIG_SOUND_ES1370 [sync_tristate $CONFIG_SOUND_ES1370 $tmpvar_dep]; set CONFIG_SOUND_ES1370 [expr $CONFIG_SOUND_ES1370&15]}
	global CONFIG_SOUND_ES1371
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND $CONFIG_PCI]]; set CONFIG_SOUND_ES1371 [sync_tristate $CONFIG_SOUND_ES1371 $tmpvar_dep]; set CONFIG_SOUND_ES1371 [expr $CONFIG_SOUND_ES1371&15]}
	global CONFIG_SOUND_ESSSOLO1
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]]; set CONFIG_SOUND_ESSSOLO1 [sync_tristate $CONFIG_SOUND_ESSSOLO1 $tmpvar_dep]; set CONFIG_SOUND_ESSSOLO1 [expr $CONFIG_SOUND_ESSSOLO1&15]}
	global CONFIG_SOUND_MAESTRO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]]; set CONFIG_SOUND_MAESTRO [sync_tristate $CONFIG_SOUND_MAESTRO $tmpvar_dep]; set CONFIG_SOUND_MAESTRO [expr $CONFIG_SOUND_MAESTRO&15]}
	global CONFIG_SOUND_MAESTRO3
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND $CONFIG_PCI $CONFIG_EXPERIMENTAL]]; set CONFIG_SOUND_MAESTRO3 [sync_tristate $CONFIG_SOUND_MAESTRO3 $tmpvar_dep]; set CONFIG_SOUND_MAESTRO3 [expr $CONFIG_SOUND_MAESTRO3&15]}
	global CONFIG_SOUND_ICH
	if {($CONFIG_SOUND != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_SOUND_ICH [sync_tristate $CONFIG_SOUND_ICH $tmpvar_dep]; set CONFIG_SOUND_ICH [expr $CONFIG_SOUND_ICH&15]}
	global CONFIG_SOUND_RME96XX
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND $CONFIG_PCI $CONFIG_EXPERIMENTAL]]; set CONFIG_SOUND_RME96XX [sync_tristate $CONFIG_SOUND_RME96XX $tmpvar_dep]; set CONFIG_SOUND_RME96XX [expr $CONFIG_SOUND_RME96XX&15]}
	global CONFIG_SOUND_SONICVIBES
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]]; set CONFIG_SOUND_SONICVIBES [sync_tristate $CONFIG_SOUND_SONICVIBES $tmpvar_dep]; set CONFIG_SOUND_SONICVIBES [expr $CONFIG_SOUND_SONICVIBES&15]}
	global CONFIG_VISWS
	global CONFIG_SOUND_VWSND
	if {($CONFIG_SOUND != 0) && ($CONFIG_VISWS == 1) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]]; set CONFIG_SOUND_VWSND [sync_tristate $CONFIG_SOUND_VWSND $tmpvar_dep]; set CONFIG_SOUND_VWSND [expr $CONFIG_SOUND_VWSND&15]}
	global CONFIG_SOUND_TRIDENT
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]]; set CONFIG_SOUND_TRIDENT [sync_tristate $CONFIG_SOUND_TRIDENT $tmpvar_dep]; set CONFIG_SOUND_TRIDENT [expr $CONFIG_SOUND_TRIDENT&15]}
	global CONFIG_SOUND_MSNDCLAS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]]; set CONFIG_SOUND_MSNDCLAS [sync_tristate $CONFIG_SOUND_MSNDCLAS $tmpvar_dep]; set CONFIG_SOUND_MSNDCLAS [expr $CONFIG_SOUND_MSNDCLAS&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1 || $CONFIG_SOUND_MSNDCLAS == 2) && ($CONFIG_SOUND_MSNDCLAS == 1)} then {	global CONSTANT_Y
set CONFIG_MSNDCLAS_HAVE_BOOT $CONSTANT_Y }
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1 || $CONFIG_SOUND_MSNDCLAS == 2) && ($CONFIG_SOUND_MSNDCLAS != 1)} then {	global CONSTANT_N
set CONFIG_MSNDCLAS_HAVE_BOOT $CONSTANT_N }
	global CONFIG_MSNDCLAS_IRQ
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1)} then {validate_int CONFIG_MSNDCLAS_IRQ "$CONFIG_MSNDCLAS_IRQ" 5}
	global CONFIG_MSNDCLAS_MEM
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1)} then {validate_hex CONFIG_MSNDCLAS_MEM "$CONFIG_MSNDCLAS_MEM" D0000}
	global CONFIG_MSNDCLAS_IO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1)} then {validate_hex CONFIG_MSNDCLAS_IO "$CONFIG_MSNDCLAS_IO" 290}
	global CONFIG_SOUND_MSNDPIN
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]]; set CONFIG_SOUND_MSNDPIN [sync_tristate $CONFIG_SOUND_MSNDPIN $tmpvar_dep]; set CONFIG_SOUND_MSNDPIN [expr $CONFIG_SOUND_MSNDPIN&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1 || $CONFIG_SOUND_MSNDPIN == 2) && ($CONFIG_SOUND_MSNDPIN == 1)} then {	global CONSTANT_Y
set CONFIG_MSNDPIN_HAVE_BOOT $CONSTANT_Y }
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1 || $CONFIG_SOUND_MSNDPIN == 2) && ($CONFIG_SOUND_MSNDPIN != 1)} then {	global CONSTANT_N
set CONFIG_MSNDPIN_HAVE_BOOT $CONSTANT_N }
	global CONFIG_MSNDPIN_IRQ
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1)} then {validate_int CONFIG_MSNDPIN_IRQ "$CONFIG_MSNDPIN_IRQ" 5}
	global CONFIG_MSNDPIN_MEM
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1)} then {validate_hex CONFIG_MSNDPIN_MEM "$CONFIG_MSNDPIN_MEM" D0000}
	global CONFIG_MSNDPIN_IO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1)} then {validate_hex CONFIG_MSNDPIN_IO "$CONFIG_MSNDPIN_IO" 290}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1)} then {
	set CONFIG_MSNDPIN_DIGITAL [expr $CONFIG_MSNDPIN_DIGITAL&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1)} then {
	set CONFIG_MSNDPIN_NONPNP [expr $CONFIG_MSNDPIN_NONPNP&15]}
	global CONFIG_MSNDPIN_CFG
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {validate_hex CONFIG_MSNDPIN_CFG "$CONFIG_MSNDPIN_CFG" 250}
	global CONFIG_MSNDPIN_MPU_IO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {validate_hex CONFIG_MSNDPIN_MPU_IO "$CONFIG_MSNDPIN_MPU_IO" 0}
	global CONFIG_MSNDPIN_MPU_IRQ
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {validate_int CONFIG_MSNDPIN_MPU_IRQ "$CONFIG_MSNDPIN_MPU_IRQ" 0}
	global CONFIG_MSNDPIN_IDE_IO0
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {validate_hex CONFIG_MSNDPIN_IDE_IO0 "$CONFIG_MSNDPIN_IDE_IO0" 0}
	global CONFIG_MSNDPIN_IDE_IO1
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {validate_hex CONFIG_MSNDPIN_IDE_IO1 "$CONFIG_MSNDPIN_IDE_IO1" 0}
	global CONFIG_MSNDPIN_IDE_IRQ
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {validate_int CONFIG_MSNDPIN_IDE_IRQ "$CONFIG_MSNDPIN_IDE_IRQ" 0}
	global CONFIG_MSNDPIN_JOYSTICK_IO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {validate_hex CONFIG_MSNDPIN_JOYSTICK_IO "$CONFIG_MSNDPIN_JOYSTICK_IO" 0}
	global CONFIG_MSND_FIFOSIZE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1 || $CONFIG_SOUND_MSNDCLAS == 1)} then {validate_int CONFIG_MSND_FIFOSIZE "$CONFIG_MSND_FIFOSIZE" 128}
	global CONFIG_SOUND_VIA82CXXX
	if {($CONFIG_SOUND != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_SOUND_VIA82CXXX [sync_tristate $CONFIG_SOUND_VIA82CXXX $tmpvar_dep]; set CONFIG_SOUND_VIA82CXXX [expr $CONFIG_SOUND_VIA82CXXX&15]}
	global CONFIG_MIDI_VIA82CXXX
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_VIA82CXXX == 1 || $CONFIG_SOUND_VIA82CXXX == 2 || $CONFIG_SOUND_VIA82CXXX == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_VIA82CXXX]];set CONFIG_MIDI_VIA82CXXX [sync_bool $CONFIG_MIDI_VIA82CXXX $tmpvar_dep 1];set CONFIG_MIDI_VIA82CXXX [expr $CONFIG_MIDI_VIA82CXXX&15]}
	global CONFIG_SOUND_OSS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND]]; set CONFIG_SOUND_OSS [sync_tristate $CONFIG_SOUND_OSS $tmpvar_dep]; set CONFIG_SOUND_OSS [expr $CONFIG_SOUND_OSS&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2)} then {
	set CONFIG_SOUND_TRACEINIT [expr $CONFIG_SOUND_TRACEINIT&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2)} then {
	set CONFIG_SOUND_DMAP [expr $CONFIG_SOUND_DMAP&15]}
	global CONFIG_SOUND_AD1816
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_AD1816 [sync_tristate $CONFIG_SOUND_AD1816 $tmpvar_dep]; set CONFIG_SOUND_AD1816 [expr $CONFIG_SOUND_AD1816&15]}
	global CONFIG_SOUND_SGALAXY
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_SGALAXY [sync_tristate $CONFIG_SOUND_SGALAXY $tmpvar_dep]; set CONFIG_SOUND_SGALAXY [expr $CONFIG_SOUND_SGALAXY&15]}
	global CONFIG_SOUND_ADLIB
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_ADLIB [sync_tristate $CONFIG_SOUND_ADLIB $tmpvar_dep]; set CONFIG_SOUND_ADLIB [expr $CONFIG_SOUND_ADLIB&15]}
	global CONFIG_SOUND_ACI_MIXER
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_ACI_MIXER [sync_tristate $CONFIG_SOUND_ACI_MIXER $tmpvar_dep]; set CONFIG_SOUND_ACI_MIXER [expr $CONFIG_SOUND_ACI_MIXER&15]}
	global CONFIG_SOUND_CS4232
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_CS4232 [sync_tristate $CONFIG_SOUND_CS4232 $tmpvar_dep]; set CONFIG_SOUND_CS4232 [expr $CONFIG_SOUND_CS4232&15]}
	global CONFIG_SOUND_SSCAPE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_SSCAPE [sync_tristate $CONFIG_SOUND_SSCAPE $tmpvar_dep]; set CONFIG_SOUND_SSCAPE [expr $CONFIG_SOUND_SSCAPE&15]}
	global CONFIG_SOUND_GUS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_GUS [sync_tristate $CONFIG_SOUND_GUS $tmpvar_dep]; set CONFIG_SOUND_GUS [expr $CONFIG_SOUND_GUS&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_GUS != 0)} then {
	set CONFIG_SOUND_GUS16 [expr $CONFIG_SOUND_GUS16&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_GUS != 0)} then {
	set CONFIG_SOUND_GUSMAX [expr $CONFIG_SOUND_GUSMAX&15]}
	global CONFIG_SOUND_VMIDI
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_VMIDI [sync_tristate $CONFIG_SOUND_VMIDI $tmpvar_dep]; set CONFIG_SOUND_VMIDI [expr $CONFIG_SOUND_VMIDI&15]}
	global CONFIG_SOUND_TRIX
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_TRIX [sync_tristate $CONFIG_SOUND_TRIX $tmpvar_dep]; set CONFIG_SOUND_TRIX [expr $CONFIG_SOUND_TRIX&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_TRIX == 1)} then {
	set CONFIG_TRIX_HAVE_BOOT [expr $CONFIG_TRIX_HAVE_BOOT&15]}
	global CONFIG_SOUND_MSS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_MSS [sync_tristate $CONFIG_SOUND_MSS $tmpvar_dep]; set CONFIG_SOUND_MSS [expr $CONFIG_SOUND_MSS&15]}
	global CONFIG_SOUND_MPU401
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_MPU401 [sync_tristate $CONFIG_SOUND_MPU401 $tmpvar_dep]; set CONFIG_SOUND_MPU401 [expr $CONFIG_SOUND_MPU401&15]}
	global CONFIG_SOUND_NM256
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_NM256 [sync_tristate $CONFIG_SOUND_NM256 $tmpvar_dep]; set CONFIG_SOUND_NM256 [expr $CONFIG_SOUND_NM256&15]}
	global CONFIG_SOUND_MAD16
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_MAD16 [sync_tristate $CONFIG_SOUND_MAD16 $tmpvar_dep]; set CONFIG_SOUND_MAD16 [expr $CONFIG_SOUND_MAD16&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_MAD16 == 1 || $CONFIG_SOUND_MAD16 == 2)} then {
	set CONFIG_MAD16_OLDCARD [expr $CONFIG_MAD16_OLDCARD&15]}
	global CONFIG_SOUND_PAS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_PAS [sync_tristate $CONFIG_SOUND_PAS $tmpvar_dep]; set CONFIG_SOUND_PAS [expr $CONFIG_SOUND_PAS&15]}
	global CONFIG_PAS_JOYSTICK
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_PAS == 1 || $CONFIG_SOUND_PAS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_PAS]];set CONFIG_PAS_JOYSTICK [sync_bool $CONFIG_PAS_JOYSTICK $tmpvar_dep 0];set CONFIG_PAS_JOYSTICK [expr $CONFIG_PAS_JOYSTICK&15]}
	global CONFIG_SOUND_PSS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_PSS [sync_tristate $CONFIG_SOUND_PSS $tmpvar_dep]; set CONFIG_SOUND_PSS [expr $CONFIG_SOUND_PSS&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_PSS == 1 || $CONFIG_SOUND_PSS == 2)} then {
	set CONFIG_PSS_MIXER [expr $CONFIG_PSS_MIXER&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_PSS == 1 || $CONFIG_SOUND_PSS == 2)} then {
	set CONFIG_PSS_HAVE_BOOT [expr $CONFIG_PSS_HAVE_BOOT&15]}
	global CONFIG_SOUND_SB
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_SB [sync_tristate $CONFIG_SOUND_SB $tmpvar_dep]; set CONFIG_SOUND_SB [expr $CONFIG_SOUND_SB&15]}
	global CONFIG_SOUND_AWE32_SYNTH
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_AWE32_SYNTH [sync_tristate $CONFIG_SOUND_AWE32_SYNTH $tmpvar_dep]; set CONFIG_SOUND_AWE32_SYNTH [expr $CONFIG_SOUND_AWE32_SYNTH&15]}
	global CONFIG_SOUND_WAVEFRONT
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	global CONSTANT_M
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS $CONSTANT_M]]; set CONFIG_SOUND_WAVEFRONT [sync_tristate $CONFIG_SOUND_WAVEFRONT $tmpvar_dep]; set CONFIG_SOUND_WAVEFRONT [expr $CONFIG_SOUND_WAVEFRONT&15]}
	global CONFIG_SOUND_MAUI
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_MAUI [sync_tristate $CONFIG_SOUND_MAUI $tmpvar_dep]; set CONFIG_SOUND_MAUI [expr $CONFIG_SOUND_MAUI&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_MAUI == 1)} then {
	set CONFIG_MAUI_HAVE_BOOT [expr $CONFIG_MAUI_HAVE_BOOT&15]}
	global CONFIG_SOUND_YM3812
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_YM3812 [sync_tristate $CONFIG_SOUND_YM3812 $tmpvar_dep]; set CONFIG_SOUND_YM3812 [expr $CONFIG_SOUND_YM3812&15]}
	global CONFIG_SOUND_OPL3SA1
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_OPL3SA1 [sync_tristate $CONFIG_SOUND_OPL3SA1 $tmpvar_dep]; set CONFIG_SOUND_OPL3SA1 [expr $CONFIG_SOUND_OPL3SA1&15]}
	global CONFIG_SOUND_OPL3SA2
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_OPL3SA2 [sync_tristate $CONFIG_SOUND_OPL3SA2 $tmpvar_dep]; set CONFIG_SOUND_OPL3SA2 [expr $CONFIG_SOUND_OPL3SA2&15]}
	global CONFIG_SOUND_YMFPCI
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS $CONFIG_PCI]]; set CONFIG_SOUND_YMFPCI [sync_tristate $CONFIG_SOUND_YMFPCI $tmpvar_dep]; set CONFIG_SOUND_YMFPCI [expr $CONFIG_SOUND_YMFPCI&15]}
	global CONFIG_SOUND_YMFPCI_LEGACY
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_YMFPCI == 1 || $CONFIG_SOUND_YMFPCI == 2 || $CONFIG_SOUND_YMFPCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_YMFPCI]];set CONFIG_SOUND_YMFPCI_LEGACY [sync_bool $CONFIG_SOUND_YMFPCI_LEGACY $tmpvar_dep 1];set CONFIG_SOUND_YMFPCI_LEGACY [expr $CONFIG_SOUND_YMFPCI_LEGACY&15]}
	global CONFIG_SOUND_UART6850
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_UART6850 [sync_tristate $CONFIG_SOUND_UART6850 $tmpvar_dep]; set CONFIG_SOUND_UART6850 [expr $CONFIG_SOUND_UART6850&15]}
	global CONFIG_SOUND_AEDSP16
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND_OSS]]; set CONFIG_SOUND_AEDSP16 [sync_tristate $CONFIG_SOUND_AEDSP16 $tmpvar_dep]; set CONFIG_SOUND_AEDSP16 [expr $CONFIG_SOUND_AEDSP16&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2)} then {
	set CONFIG_SC6600 [expr $CONFIG_SC6600&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2) && ($CONFIG_SC6600 == 1)} then {
	set CONFIG_SC6600_JOY [expr $CONFIG_SC6600_JOY&15]}
	global CONFIG_SC6600_CDROM
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2) && ($CONFIG_SC6600 == 1)} then {validate_int CONFIG_SC6600_CDROM "$CONFIG_SC6600_CDROM" 4}
	global CONFIG_SC6600_CDROMBASE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2) && ($CONFIG_SC6600 == 1)} then {validate_hex CONFIG_SC6600_CDROMBASE "$CONFIG_SC6600_CDROMBASE" 0}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2) && ($CONFIG_SOUND_SB == 1 || $CONFIG_SOUND_SB == 2) && ($CONFIG_AEDSP16_MSS != 1)} then {
	set CONFIG_AEDSP16_SBPRO [expr $CONFIG_AEDSP16_SBPRO&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2) && ($CONFIG_SOUND_MSS == 1 || $CONFIG_SOUND_MSS == 2) && ($CONFIG_AEDSP16_SBPRO != 1)} then {
	set CONFIG_AEDSP16_MSS [expr $CONFIG_AEDSP16_MSS&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2) && ($CONFIG_SOUND_MPU401 == 1 || $CONFIG_SOUND_MPU401 == 2)} then {
	set CONFIG_AEDSP16_MPU401 [expr $CONFIG_AEDSP16_MPU401&15]}
	global CONFIG_I2C
	global CONFIG_SOUND_TVMIXER
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_I2C == 1 || $CONFIG_I2C == 2 || $CONFIG_I2C == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_SOUND $CONFIG_I2C]]; set CONFIG_SOUND_TVMIXER [sync_tristate $CONFIG_SOUND_TVMIXER $tmpvar_dep]; set CONFIG_SOUND_TVMIXER [expr $CONFIG_SOUND_TVMIXER&15]}
	if {($CONFIG_SOUND != 0) && ($CONFIG_INPUT_GAMEPORT != 0) && ($CONFIG_SOUND_ESSSOLO1 == 1 || $CONFIG_SOUND_ES1370 == 1 || $CONFIG_SOUND_ES1371 == 1 || $CONFIG_SOUND_SONICVIBES == 1)} then {	global CONSTANT_Y
set CONFIG_INPUT_GAMEPORT $CONSTANT_Y }
}


menu_option menu59 59 "USB support"
proc menu59 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 59}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 59]]
	message $w.m -width 400 -aspect 300 -text \
		"USB support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "USB support" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 59; break"
	set nextscript "catch {focus $oldFocus}; menu60 .menu60 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 59"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 59; menu58 .menu58 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 59; menu58 .menu58 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 59 0 "Support for USB" CONFIG_USB
	bool $w.config.f 59 1 "  USB verbose debug messages" CONFIG_USB_DEBUG
	comment $w.config.f 59 2 "Miscellaneous USB options"
	bool $w.config.f 59 3 "  Preliminary USB device filesystem" CONFIG_USB_DEVICEFS
	bool $w.config.f 59 4 "  Enforce USB bandwidth allocation (EXPERIMENTAL)" CONFIG_USB_BANDWIDTH
	bool $w.config.f 59 5 "  Long timeout for slow-responding devices (some MGE Ellipse UPSes)" CONFIG_USB_LONG_TIMEOUT
	comment $w.config.f 59 6 "USB Controllers"
	dep_tristate $w.config.f 59 7 "  UHCI (Intel PIIX4, VIA, ...) support" CONFIG_USB_UHCI
	dep_tristate $w.config.f 59 8 "  UHCI Alternate Driver (JE) support" CONFIG_USB_UHCI_ALT
	dep_tristate $w.config.f 59 9 "  OHCI (Compaq, iMacs, OPTi, SiS, ALi, ...) support" CONFIG_USB_OHCI
	comment $w.config.f 59 10 "USB Device Class drivers"
	dep_tristate $w.config.f 59 11 "  USB Audio support" CONFIG_USB_AUDIO
	dep_tristate $w.config.f 59 12 "  USB Bluetooth support (EXPERIMENTAL)" CONFIG_USB_BLUETOOTH
	dep_tristate $w.config.f 59 13 "  USB Mass Storage support" CONFIG_USB_STORAGE
	dep_bool $w.config.f 59 14 "    USB Mass Storage verbose debug" CONFIG_USB_STORAGE_DEBUG
	dep_bool $w.config.f 59 15 "    Datafab MDCFE-B Compact Flash Reader support" CONFIG_USB_STORAGE_DATAFAB
	dep_bool $w.config.f 59 16 "    Freecom USB/ATAPI Bridge support" CONFIG_USB_STORAGE_FREECOM
	dep_bool $w.config.f 59 17 "    ISD-200 USB/ATA Bridge support" CONFIG_USB_STORAGE_ISD200
	dep_bool $w.config.f 59 18 "    Microtech CompactFlash/SmartMedia support" CONFIG_USB_STORAGE_DPCM
	dep_bool $w.config.f 59 19 "    HP CD-Writer 82xx support" CONFIG_USB_STORAGE_HP8200e
	dep_bool $w.config.f 59 20 "    SanDisk SDDR-09 (and other SmartMedia) support" CONFIG_USB_STORAGE_SDDR09
	dep_bool $w.config.f 59 21 "    Lexar Jumpshot Compact Flash Reader" CONFIG_USB_STORAGE_JUMPSHOT
	dep_tristate $w.config.f 59 22 "  USB Modem (CDC ACM) support" CONFIG_USB_ACM
	dep_tristate $w.config.f 59 23 "  USB Printer support" CONFIG_USB_PRINTER
	comment $w.config.f 59 24 "USB Human Interface Devices (HID)"
	dep_tristate $w.config.f 59 25 "  USB Human Interface Device (full HID) support" CONFIG_USB_HID
	dep_bool $w.config.f 59 26 "    /dev/hiddev raw HID device support (EXPERIMENTAL)" CONFIG_USB_HIDDEV
	dep_tristate $w.config.f 59 27 "  USB HIDBP Keyboard (basic) support" CONFIG_USB_KBD
	dep_tristate $w.config.f 59 28 "  USB HIDBP Mouse (basic) support" CONFIG_USB_MOUSE
	dep_tristate $w.config.f 59 29 "  Wacom Intuos/Graphire tablet support" CONFIG_USB_WACOM
	comment $w.config.f 59 30 "USB Imaging devices"
	dep_tristate $w.config.f 59 31 "  USB Kodak DC-2xx Camera support" CONFIG_USB_DC2XX
	dep_tristate $w.config.f 59 32 "  USB Mustek MDC800 Digital Camera support (EXPERIMENTAL)" CONFIG_USB_MDC800
	dep_tristate $w.config.f 59 33 "  USB Scanner support" CONFIG_USB_SCANNER
	dep_tristate $w.config.f 59 34 "  Microtek X6USB scanner support" CONFIG_USB_MICROTEK
	dep_tristate $w.config.f 59 35 "  HP53xx USB scanner support (EXPERIMENTAL)" CONFIG_USB_HPUSBSCSI
	comment $w.config.f 59 36 "USB Multimedia devices"
	dep_tristate $w.config.f 59 37 "  USB IBM (Xirlink) C-it Camera support" CONFIG_USB_IBMCAM
	dep_tristate $w.config.f 59 38 "  USB OV511 Camera support" CONFIG_USB_OV511
	dep_tristate $w.config.f 59 39 "  USB Philips Cameras" CONFIG_USB_PWC
	dep_tristate $w.config.f 59 40 "  USB SE401 Camera support" CONFIG_USB_SE401
	dep_tristate $w.config.f 59 41 "  D-Link USB FM radio support (EXPERIMENTAL)" CONFIG_USB_DSBR
	dep_tristate $w.config.f 59 42 "  DABUSB driver" CONFIG_USB_DABUSB
	comment $w.config.f 59 43 "USB Network adaptors"
	comment $w.config.f 59 44 "  Networking support is needed for USB Networking device support"
	dep_tristate $w.config.f 59 45 "  USB ADMtek Pegasus-based ethernet device support (EXPERIMENTAL)" CONFIG_USB_PEGASUS
	dep_tristate $w.config.f 59 46 "  USB KLSI KL5USB101-based ethernet device support (EXPERIMENTAL)" CONFIG_USB_KAWETH
	dep_tristate $w.config.f 59 47 "  USB CATC NetMate-based Ethernet device support (EXPERIMENTAL)" CONFIG_USB_CATC
	dep_tristate $w.config.f 59 48 "  USB Communication Class Ethernet device support (EXPERIMENTAL)" CONFIG_USB_CDCETHER
	dep_tristate $w.config.f 59 49 "  USB-to-USB Networking cable device support (EXPERIMENTAL)" CONFIG_USB_USBNET
	comment $w.config.f 59 50 "USB port drivers"
	dep_tristate $w.config.f 59 51 "  USS720 parport driver" CONFIG_USB_USS720
	submenu $w.config.f 59 52 "USB Serial Converter support" 60
	comment $w.config.f 59 53 "USB Miscellaneous drivers"
	dep_tristate $w.config.f 59 54 "  USB Diamond Rio500 support (EXPERIMENTAL)" CONFIG_USB_RIO500



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu59 {} {
	global CONFIG_MODULES
	global CONFIG_PCI
	global CONFIG_USB
	if {($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]];set CONFIG_USB [sync_tristate $CONFIG_USB $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x0 disabled {y}} else {configure_entry .menu59.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x0 disabled {m}} else {configure_entry .menu59.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x0 normal {m}} else {configure_entry .menu59.config.f.x0 disabled {m}}; configure_entry .menu59.config.f.x0 normal {n l}} else {configure_entry .menu59.config.f.x0 disabled {y n m l}}
	global CONFIG_USB_DEBUG
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2)} then {
	configure_entry .menu59.config.f.x1 normal {n l y}} else {configure_entry .menu59.config.f.x1 disabled {y n l}}
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2)} then {configure_entry .menu59.config.f.x2 normal {m}} else {configure_entry .menu59.config.f.x2 disabled {m}}
	global CONFIG_USB_DEVICEFS
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2)} then {
	configure_entry .menu59.config.f.x3 normal {n l y}} else {configure_entry .menu59.config.f.x3 disabled {y n l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_USB_BANDWIDTH
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2) && ($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu59.config.f.x4 normal {n l y}} else {configure_entry .menu59.config.f.x4 disabled {y n l}}
	global CONFIG_USB_LONG_TIMEOUT
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2)} then {
	configure_entry .menu59.config.f.x5 normal {n l y}} else {configure_entry .menu59.config.f.x5 disabled {y n l}}
	global CONFIG_USB_UHCI_ALT
	global CONFIG_USB_UHCI
	if {($CONFIG_USB_UHCI_ALT != 1) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB]];set CONFIG_USB_UHCI [sync_tristate $CONFIG_USB_UHCI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x7 disabled {y}} else {configure_entry .menu59.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x7 disabled {m}} else {configure_entry .menu59.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x7 normal {m}} else {configure_entry .menu59.config.f.x7 disabled {m}}; configure_entry .menu59.config.f.x7 normal {n l}} else {configure_entry .menu59.config.f.x7 disabled {y n m l}}
	if {($CONFIG_USB_UHCI != 1) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB]];set CONFIG_USB_UHCI_ALT [sync_tristate $CONFIG_USB_UHCI_ALT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x8 disabled {y}} else {configure_entry .menu59.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x8 disabled {m}} else {configure_entry .menu59.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x8 normal {m}} else {configure_entry .menu59.config.f.x8 disabled {m}}; configure_entry .menu59.config.f.x8 normal {n l}} else {configure_entry .menu59.config.f.x8 disabled {y n m l}}
	global CONFIG_USB_OHCI
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB]];set CONFIG_USB_OHCI [sync_tristate $CONFIG_USB_OHCI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x9 disabled {y}} else {configure_entry .menu59.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x9 disabled {m}} else {configure_entry .menu59.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x9 normal {m}} else {configure_entry .menu59.config.f.x9 disabled {m}}; configure_entry .menu59.config.f.x9 normal {n l}} else {configure_entry .menu59.config.f.x9 disabled {y n m l}}
	global CONFIG_SOUND
	global CONFIG_USB_AUDIO
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_SOUND]];set CONFIG_USB_AUDIO [sync_tristate $CONFIG_USB_AUDIO $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x11 disabled {y}} else {configure_entry .menu59.config.f.x11 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x11 disabled {m}} else {configure_entry .menu59.config.f.x11 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x11 normal {m}} else {configure_entry .menu59.config.f.x11 disabled {m}}; configure_entry .menu59.config.f.x11 normal {n l}} else {configure_entry .menu59.config.f.x11 disabled {y n m l}}
	global CONFIG_USB_BLUETOOTH
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_EXPERIMENTAL]];set CONFIG_USB_BLUETOOTH [sync_tristate $CONFIG_USB_BLUETOOTH $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x12 disabled {y}} else {configure_entry .menu59.config.f.x12 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x12 disabled {m}} else {configure_entry .menu59.config.f.x12 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x12 normal {m}} else {configure_entry .menu59.config.f.x12 disabled {m}}; configure_entry .menu59.config.f.x12 normal {n l}} else {configure_entry .menu59.config.f.x12 disabled {y n m l}}
	global CONFIG_SCSI
	global CONFIG_USB_STORAGE
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_SCSI]];set CONFIG_USB_STORAGE [sync_tristate $CONFIG_USB_STORAGE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x13 disabled {y}} else {configure_entry .menu59.config.f.x13 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x13 disabled {m}} else {configure_entry .menu59.config.f.x13 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x13 normal {m}} else {configure_entry .menu59.config.f.x13 disabled {m}}; configure_entry .menu59.config.f.x13 normal {n l}} else {configure_entry .menu59.config.f.x13 disabled {y n m l}}
	global CONFIG_USB_STORAGE_DEBUG
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_STORAGE]];set CONFIG_USB_STORAGE_DEBUG [sync_bool $CONFIG_USB_STORAGE_DEBUG $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu59.config.f.x14 disabled {y};} else {configure_entry .menu59.config.f.x14 normal {y};}; configure_entry .menu59.config.f.x14 normal {n l}} else {configure_entry .menu59.config.f.x14 disabled {y n l}}
	global CONFIG_USB_STORAGE_DATAFAB
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_STORAGE $CONFIG_EXPERIMENTAL]];set CONFIG_USB_STORAGE_DATAFAB [sync_bool $CONFIG_USB_STORAGE_DATAFAB $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu59.config.f.x15 disabled {y};} else {configure_entry .menu59.config.f.x15 normal {y};}; configure_entry .menu59.config.f.x15 normal {n l}} else {configure_entry .menu59.config.f.x15 disabled {y n l}}
	global CONFIG_USB_STORAGE_FREECOM
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_STORAGE]];set CONFIG_USB_STORAGE_FREECOM [sync_bool $CONFIG_USB_STORAGE_FREECOM $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu59.config.f.x16 disabled {y};} else {configure_entry .menu59.config.f.x16 normal {y};}; configure_entry .menu59.config.f.x16 normal {n l}} else {configure_entry .menu59.config.f.x16 disabled {y n l}}
	global CONFIG_USB_STORAGE_ISD200
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_STORAGE]];set CONFIG_USB_STORAGE_ISD200 [sync_bool $CONFIG_USB_STORAGE_ISD200 $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu59.config.f.x17 disabled {y};} else {configure_entry .menu59.config.f.x17 normal {y};}; configure_entry .menu59.config.f.x17 normal {n l}} else {configure_entry .menu59.config.f.x17 disabled {y n l}}
	global CONFIG_USB_STORAGE_DPCM
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_STORAGE]];set CONFIG_USB_STORAGE_DPCM [sync_bool $CONFIG_USB_STORAGE_DPCM $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu59.config.f.x18 disabled {y};} else {configure_entry .menu59.config.f.x18 normal {y};}; configure_entry .menu59.config.f.x18 normal {n l}} else {configure_entry .menu59.config.f.x18 disabled {y n l}}
	global CONFIG_USB_STORAGE_HP8200e
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_STORAGE $CONFIG_EXPERIMENTAL]];set CONFIG_USB_STORAGE_HP8200e [sync_bool $CONFIG_USB_STORAGE_HP8200e $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu59.config.f.x19 disabled {y};} else {configure_entry .menu59.config.f.x19 normal {y};}; configure_entry .menu59.config.f.x19 normal {n l}} else {configure_entry .menu59.config.f.x19 disabled {y n l}}
	global CONFIG_USB_STORAGE_SDDR09
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_STORAGE $CONFIG_EXPERIMENTAL]];set CONFIG_USB_STORAGE_SDDR09 [sync_bool $CONFIG_USB_STORAGE_SDDR09 $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu59.config.f.x20 disabled {y};} else {configure_entry .menu59.config.f.x20 normal {y};}; configure_entry .menu59.config.f.x20 normal {n l}} else {configure_entry .menu59.config.f.x20 disabled {y n l}}
	global CONFIG_USB_STORAGE_JUMPSHOT
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_STORAGE $CONFIG_EXPERIMENTAL]];set CONFIG_USB_STORAGE_JUMPSHOT [sync_bool $CONFIG_USB_STORAGE_JUMPSHOT $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu59.config.f.x21 disabled {y};} else {configure_entry .menu59.config.f.x21 normal {y};}; configure_entry .menu59.config.f.x21 normal {n l}} else {configure_entry .menu59.config.f.x21 disabled {y n l}}
	global CONFIG_USB_ACM
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB]];set CONFIG_USB_ACM [sync_tristate $CONFIG_USB_ACM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x22 disabled {y}} else {configure_entry .menu59.config.f.x22 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x22 disabled {m}} else {configure_entry .menu59.config.f.x22 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x22 normal {m}} else {configure_entry .menu59.config.f.x22 disabled {m}}; configure_entry .menu59.config.f.x22 normal {n l}} else {configure_entry .menu59.config.f.x22 disabled {y n m l}}
	global CONFIG_USB_PRINTER
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB]];set CONFIG_USB_PRINTER [sync_tristate $CONFIG_USB_PRINTER $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x23 disabled {y}} else {configure_entry .menu59.config.f.x23 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x23 disabled {m}} else {configure_entry .menu59.config.f.x23 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x23 normal {m}} else {configure_entry .menu59.config.f.x23 disabled {m}}; configure_entry .menu59.config.f.x23 normal {n l}} else {configure_entry .menu59.config.f.x23 disabled {y n m l}}
	global CONFIG_INPUT
	global CONFIG_USB_HID
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_INPUT]];set CONFIG_USB_HID [sync_tristate $CONFIG_USB_HID $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x25 disabled {y}} else {configure_entry .menu59.config.f.x25 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x25 disabled {m}} else {configure_entry .menu59.config.f.x25 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x25 normal {m}} else {configure_entry .menu59.config.f.x25 disabled {m}}; configure_entry .menu59.config.f.x25 normal {n l}} else {configure_entry .menu59.config.f.x25 disabled {y n m l}}
	global CONFIG_USB_HIDDEV
	if {($CONFIG_USB_HID == 1 || $CONFIG_USB_HID == 2 || $CONFIG_USB_HID == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_HID]];set CONFIG_USB_HIDDEV [sync_bool $CONFIG_USB_HIDDEV $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu59.config.f.x26 disabled {y};} else {configure_entry .menu59.config.f.x26 normal {y};}; configure_entry .menu59.config.f.x26 normal {n l}} else {configure_entry .menu59.config.f.x26 disabled {y n l}}
	global CONFIG_USB_KBD
	if {($CONFIG_USB_HID != 1) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_INPUT]];set CONFIG_USB_KBD [sync_tristate $CONFIG_USB_KBD $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x27 disabled {y}} else {configure_entry .menu59.config.f.x27 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x27 disabled {m}} else {configure_entry .menu59.config.f.x27 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x27 normal {m}} else {configure_entry .menu59.config.f.x27 disabled {m}}; configure_entry .menu59.config.f.x27 normal {n l}} else {configure_entry .menu59.config.f.x27 disabled {y n m l}}
	global CONFIG_USB_MOUSE
	if {($CONFIG_USB_HID != 1) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_INPUT]];set CONFIG_USB_MOUSE [sync_tristate $CONFIG_USB_MOUSE $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x28 disabled {y}} else {configure_entry .menu59.config.f.x28 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x28 disabled {m}} else {configure_entry .menu59.config.f.x28 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x28 normal {m}} else {configure_entry .menu59.config.f.x28 disabled {m}}; configure_entry .menu59.config.f.x28 normal {n l}} else {configure_entry .menu59.config.f.x28 disabled {y n m l}}
	global CONFIG_USB_WACOM
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_INPUT]];set CONFIG_USB_WACOM [sync_tristate $CONFIG_USB_WACOM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x29 disabled {y}} else {configure_entry .menu59.config.f.x29 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x29 disabled {m}} else {configure_entry .menu59.config.f.x29 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x29 normal {m}} else {configure_entry .menu59.config.f.x29 disabled {m}}; configure_entry .menu59.config.f.x29 normal {n l}} else {configure_entry .menu59.config.f.x29 disabled {y n m l}}
	global CONFIG_USB_DC2XX
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB]];set CONFIG_USB_DC2XX [sync_tristate $CONFIG_USB_DC2XX $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x31 disabled {y}} else {configure_entry .menu59.config.f.x31 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x31 disabled {m}} else {configure_entry .menu59.config.f.x31 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x31 normal {m}} else {configure_entry .menu59.config.f.x31 disabled {m}}; configure_entry .menu59.config.f.x31 normal {n l}} else {configure_entry .menu59.config.f.x31 disabled {y n m l}}
	global CONFIG_USB_MDC800
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_EXPERIMENTAL]];set CONFIG_USB_MDC800 [sync_tristate $CONFIG_USB_MDC800 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x32 disabled {y}} else {configure_entry .menu59.config.f.x32 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x32 disabled {m}} else {configure_entry .menu59.config.f.x32 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x32 normal {m}} else {configure_entry .menu59.config.f.x32 disabled {m}}; configure_entry .menu59.config.f.x32 normal {n l}} else {configure_entry .menu59.config.f.x32 disabled {y n m l}}
	global CONFIG_USB_SCANNER
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB]];set CONFIG_USB_SCANNER [sync_tristate $CONFIG_USB_SCANNER $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x33 disabled {y}} else {configure_entry .menu59.config.f.x33 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x33 disabled {m}} else {configure_entry .menu59.config.f.x33 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x33 normal {m}} else {configure_entry .menu59.config.f.x33 disabled {m}}; configure_entry .menu59.config.f.x33 normal {n l}} else {configure_entry .menu59.config.f.x33 disabled {y n m l}}
	global CONFIG_USB_MICROTEK
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_SCSI]];set CONFIG_USB_MICROTEK [sync_tristate $CONFIG_USB_MICROTEK $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x34 disabled {y}} else {configure_entry .menu59.config.f.x34 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x34 disabled {m}} else {configure_entry .menu59.config.f.x34 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x34 normal {m}} else {configure_entry .menu59.config.f.x34 disabled {m}}; configure_entry .menu59.config.f.x34 normal {n l}} else {configure_entry .menu59.config.f.x34 disabled {y n m l}}
	global CONFIG_USB_HPUSBSCSI
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_SCSI $CONFIG_EXPERIMENTAL]];set CONFIG_USB_HPUSBSCSI [sync_tristate $CONFIG_USB_HPUSBSCSI $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x35 disabled {y}} else {configure_entry .menu59.config.f.x35 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x35 disabled {m}} else {configure_entry .menu59.config.f.x35 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x35 normal {m}} else {configure_entry .menu59.config.f.x35 disabled {m}}; configure_entry .menu59.config.f.x35 normal {n l}} else {configure_entry .menu59.config.f.x35 disabled {y n m l}}
	global CONFIG_VIDEO_DEV
	global CONFIG_USB_IBMCAM
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_VIDEO_DEV == 1 || $CONFIG_VIDEO_DEV == 2 || $CONFIG_VIDEO_DEV == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_VIDEO_DEV]];set CONFIG_USB_IBMCAM [sync_tristate $CONFIG_USB_IBMCAM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x37 disabled {y}} else {configure_entry .menu59.config.f.x37 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x37 disabled {m}} else {configure_entry .menu59.config.f.x37 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x37 normal {m}} else {configure_entry .menu59.config.f.x37 disabled {m}}; configure_entry .menu59.config.f.x37 normal {n l}} else {configure_entry .menu59.config.f.x37 disabled {y n m l}}
	global CONFIG_USB_OV511
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_VIDEO_DEV == 1 || $CONFIG_VIDEO_DEV == 2 || $CONFIG_VIDEO_DEV == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_VIDEO_DEV]];set CONFIG_USB_OV511 [sync_tristate $CONFIG_USB_OV511 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x38 disabled {y}} else {configure_entry .menu59.config.f.x38 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x38 disabled {m}} else {configure_entry .menu59.config.f.x38 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x38 normal {m}} else {configure_entry .menu59.config.f.x38 disabled {m}}; configure_entry .menu59.config.f.x38 normal {n l}} else {configure_entry .menu59.config.f.x38 disabled {y n m l}}
	global CONFIG_USB_PWC
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_VIDEO_DEV == 1 || $CONFIG_VIDEO_DEV == 2 || $CONFIG_VIDEO_DEV == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_VIDEO_DEV]];set CONFIG_USB_PWC [sync_tristate $CONFIG_USB_PWC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x39 disabled {y}} else {configure_entry .menu59.config.f.x39 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x39 disabled {m}} else {configure_entry .menu59.config.f.x39 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x39 normal {m}} else {configure_entry .menu59.config.f.x39 disabled {m}}; configure_entry .menu59.config.f.x39 normal {n l}} else {configure_entry .menu59.config.f.x39 disabled {y n m l}}
	global CONFIG_USB_SE401
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_VIDEO_DEV == 1 || $CONFIG_VIDEO_DEV == 2 || $CONFIG_VIDEO_DEV == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_VIDEO_DEV]];set CONFIG_USB_SE401 [sync_tristate $CONFIG_USB_SE401 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x40 disabled {y}} else {configure_entry .menu59.config.f.x40 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x40 disabled {m}} else {configure_entry .menu59.config.f.x40 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x40 normal {m}} else {configure_entry .menu59.config.f.x40 disabled {m}}; configure_entry .menu59.config.f.x40 normal {n l}} else {configure_entry .menu59.config.f.x40 disabled {y n m l}}
	global CONFIG_USB_DSBR
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_VIDEO_DEV == 1 || $CONFIG_VIDEO_DEV == 2 || $CONFIG_VIDEO_DEV == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_VIDEO_DEV $CONFIG_EXPERIMENTAL]];set CONFIG_USB_DSBR [sync_tristate $CONFIG_USB_DSBR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x41 disabled {y}} else {configure_entry .menu59.config.f.x41 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x41 disabled {m}} else {configure_entry .menu59.config.f.x41 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x41 normal {m}} else {configure_entry .menu59.config.f.x41 disabled {m}}; configure_entry .menu59.config.f.x41 normal {n l}} else {configure_entry .menu59.config.f.x41 disabled {y n m l}}
	global CONFIG_USB_DABUSB
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB]];set CONFIG_USB_DABUSB [sync_tristate $CONFIG_USB_DABUSB $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x42 disabled {y}} else {configure_entry .menu59.config.f.x42 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x42 disabled {m}} else {configure_entry .menu59.config.f.x42 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x42 normal {m}} else {configure_entry .menu59.config.f.x42 disabled {m}}; configure_entry .menu59.config.f.x42 normal {n l}} else {configure_entry .menu59.config.f.x42 disabled {y n m l}}
	global CONFIG_NET
	if {($CONFIG_NET == 0)} then {configure_entry .menu59.config.f.x44 normal {m}} else {configure_entry .menu59.config.f.x44 disabled {m}}
	global CONFIG_USB_PEGASUS
	if {($CONFIG_NET != 0) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_NET $CONFIG_EXPERIMENTAL]];set CONFIG_USB_PEGASUS [sync_tristate $CONFIG_USB_PEGASUS $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x45 disabled {y}} else {configure_entry .menu59.config.f.x45 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x45 disabled {m}} else {configure_entry .menu59.config.f.x45 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x45 normal {m}} else {configure_entry .menu59.config.f.x45 disabled {m}}; configure_entry .menu59.config.f.x45 normal {n l}} else {configure_entry .menu59.config.f.x45 disabled {y n m l}}
	global CONFIG_USB_KAWETH
	if {($CONFIG_NET != 0) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_NET $CONFIG_EXPERIMENTAL]];set CONFIG_USB_KAWETH [sync_tristate $CONFIG_USB_KAWETH $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x46 disabled {y}} else {configure_entry .menu59.config.f.x46 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x46 disabled {m}} else {configure_entry .menu59.config.f.x46 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x46 normal {m}} else {configure_entry .menu59.config.f.x46 disabled {m}}; configure_entry .menu59.config.f.x46 normal {n l}} else {configure_entry .menu59.config.f.x46 disabled {y n m l}}
	global CONFIG_USB_CATC
	if {($CONFIG_NET != 0) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_NET $CONFIG_EXPERIMENTAL]];set CONFIG_USB_CATC [sync_tristate $CONFIG_USB_CATC $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x47 disabled {y}} else {configure_entry .menu59.config.f.x47 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x47 disabled {m}} else {configure_entry .menu59.config.f.x47 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x47 normal {m}} else {configure_entry .menu59.config.f.x47 disabled {m}}; configure_entry .menu59.config.f.x47 normal {n l}} else {configure_entry .menu59.config.f.x47 disabled {y n m l}}
	global CONFIG_USB_CDCETHER
	if {($CONFIG_NET != 0) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_NET $CONFIG_EXPERIMENTAL]];set CONFIG_USB_CDCETHER [sync_tristate $CONFIG_USB_CDCETHER $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x48 disabled {y}} else {configure_entry .menu59.config.f.x48 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x48 disabled {m}} else {configure_entry .menu59.config.f.x48 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x48 normal {m}} else {configure_entry .menu59.config.f.x48 disabled {m}}; configure_entry .menu59.config.f.x48 normal {n l}} else {configure_entry .menu59.config.f.x48 disabled {y n m l}}
	global CONFIG_USB_USBNET
	if {($CONFIG_NET != 0) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_NET $CONFIG_EXPERIMENTAL]];set CONFIG_USB_USBNET [sync_tristate $CONFIG_USB_USBNET $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x49 disabled {y}} else {configure_entry .menu59.config.f.x49 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x49 disabled {m}} else {configure_entry .menu59.config.f.x49 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x49 normal {m}} else {configure_entry .menu59.config.f.x49 disabled {m}}; configure_entry .menu59.config.f.x49 normal {n l}} else {configure_entry .menu59.config.f.x49 disabled {y n m l}}
	global CONFIG_PARPORT
	global CONFIG_USB_USS720
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_PARPORT]];set CONFIG_USB_USS720 [sync_tristate $CONFIG_USB_USS720 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x51 disabled {y}} else {configure_entry .menu59.config.f.x51 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x51 disabled {m}} else {configure_entry .menu59.config.f.x51 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x51 normal {m}} else {configure_entry .menu59.config.f.x51 disabled {m}}; configure_entry .menu59.config.f.x51 normal {n l}} else {configure_entry .menu59.config.f.x51 disabled {y n m l}}
	global CONFIG_USB_RIO500
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_EXPERIMENTAL]];set CONFIG_USB_RIO500 [sync_tristate $CONFIG_USB_RIO500 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu59.config.f.x54 disabled {y}} else {configure_entry .menu59.config.f.x54 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu59.config.f.x54 disabled {m}} else {configure_entry .menu59.config.f.x54 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu59.config.f.x54 normal {m}} else {configure_entry .menu59.config.f.x54 disabled {m}}; configure_entry .menu59.config.f.x54 normal {n l}} else {configure_entry .menu59.config.f.x54 disabled {y n m l}}
}


proc update_define_menu59 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_USB_BANDWIDTH
	global CONFIG_USB_UHCI_ALT
	global CONFIG_USB_DEBUG
set CONFIG_USB_DEBUG [expr $CONFIG_USB_DEBUG|16]
	global CONFIG_USB_DEVICEFS
set CONFIG_USB_DEVICEFS [expr $CONFIG_USB_DEVICEFS|16]
set CONFIG_USB_BANDWIDTH [expr $CONFIG_USB_BANDWIDTH|16]
	global CONFIG_USB_LONG_TIMEOUT
set CONFIG_USB_LONG_TIMEOUT [expr $CONFIG_USB_LONG_TIMEOUT|16]
	global CONFIG_PCI
	global CONFIG_USB
	if {($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_PCI]]; set CONFIG_USB [sync_tristate $CONFIG_USB $tmpvar_dep]; set CONFIG_USB [expr $CONFIG_USB&15]}
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2)} then {
	set CONFIG_USB_DEBUG [expr $CONFIG_USB_DEBUG&15]}
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2)} then {
	set CONFIG_USB_DEVICEFS [expr $CONFIG_USB_DEVICEFS&15]}
	global CONFIG_EXPERIMENTAL
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2) && ($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_USB_BANDWIDTH [expr $CONFIG_USB_BANDWIDTH&15]}
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2) && ($CONFIG_EXPERIMENTAL != 1)} then {	global CONSTANT_N
set CONFIG_USB_BANDWIDTH $CONSTANT_N }
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2)} then {
	set CONFIG_USB_LONG_TIMEOUT [expr $CONFIG_USB_LONG_TIMEOUT&15]}
	global CONFIG_USB_UHCI
	if {($CONFIG_USB_UHCI_ALT != 1) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB]]; set CONFIG_USB_UHCI [sync_tristate $CONFIG_USB_UHCI $tmpvar_dep]; set CONFIG_USB_UHCI [expr $CONFIG_USB_UHCI&15]}
	if {($CONFIG_USB_UHCI != 1) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB]]; set CONFIG_USB_UHCI_ALT [sync_tristate $CONFIG_USB_UHCI_ALT $tmpvar_dep]; set CONFIG_USB_UHCI_ALT [expr $CONFIG_USB_UHCI_ALT&15]}
	if {($CONFIG_USB_UHCI == 1)} then {	global CONSTANT_N
set CONFIG_USB_UHCI_ALT $CONSTANT_N }
	global CONFIG_USB_OHCI
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB]]; set CONFIG_USB_OHCI [sync_tristate $CONFIG_USB_OHCI $tmpvar_dep]; set CONFIG_USB_OHCI [expr $CONFIG_USB_OHCI&15]}
	global CONFIG_SOUND
	global CONFIG_USB_AUDIO
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_SOUND]]; set CONFIG_USB_AUDIO [sync_tristate $CONFIG_USB_AUDIO $tmpvar_dep]; set CONFIG_USB_AUDIO [expr $CONFIG_USB_AUDIO&15]}
	global CONFIG_USB_BLUETOOTH
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_BLUETOOTH [sync_tristate $CONFIG_USB_BLUETOOTH $tmpvar_dep]; set CONFIG_USB_BLUETOOTH [expr $CONFIG_USB_BLUETOOTH&15]}
	global CONFIG_SCSI
	global CONFIG_USB_STORAGE
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_SCSI]]; set CONFIG_USB_STORAGE [sync_tristate $CONFIG_USB_STORAGE $tmpvar_dep]; set CONFIG_USB_STORAGE [expr $CONFIG_USB_STORAGE&15]}
	global CONFIG_USB_STORAGE_DEBUG
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_STORAGE]];set CONFIG_USB_STORAGE_DEBUG [sync_bool $CONFIG_USB_STORAGE_DEBUG $tmpvar_dep 1];set CONFIG_USB_STORAGE_DEBUG [expr $CONFIG_USB_STORAGE_DEBUG&15]}
	global CONFIG_USB_STORAGE_DATAFAB
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_STORAGE $CONFIG_EXPERIMENTAL]];set CONFIG_USB_STORAGE_DATAFAB [sync_bool $CONFIG_USB_STORAGE_DATAFAB $tmpvar_dep 1];set CONFIG_USB_STORAGE_DATAFAB [expr $CONFIG_USB_STORAGE_DATAFAB&15]}
	global CONFIG_USB_STORAGE_FREECOM
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_STORAGE]];set CONFIG_USB_STORAGE_FREECOM [sync_bool $CONFIG_USB_STORAGE_FREECOM $tmpvar_dep 1];set CONFIG_USB_STORAGE_FREECOM [expr $CONFIG_USB_STORAGE_FREECOM&15]}
	global CONFIG_USB_STORAGE_ISD200
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_STORAGE]];set CONFIG_USB_STORAGE_ISD200 [sync_bool $CONFIG_USB_STORAGE_ISD200 $tmpvar_dep 1];set CONFIG_USB_STORAGE_ISD200 [expr $CONFIG_USB_STORAGE_ISD200&15]}
	global CONFIG_USB_STORAGE_DPCM
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_STORAGE]];set CONFIG_USB_STORAGE_DPCM [sync_bool $CONFIG_USB_STORAGE_DPCM $tmpvar_dep 1];set CONFIG_USB_STORAGE_DPCM [expr $CONFIG_USB_STORAGE_DPCM&15]}
	global CONFIG_USB_STORAGE_HP8200e
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_STORAGE $CONFIG_EXPERIMENTAL]];set CONFIG_USB_STORAGE_HP8200e [sync_bool $CONFIG_USB_STORAGE_HP8200e $tmpvar_dep 1];set CONFIG_USB_STORAGE_HP8200e [expr $CONFIG_USB_STORAGE_HP8200e&15]}
	global CONFIG_USB_STORAGE_SDDR09
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_STORAGE $CONFIG_EXPERIMENTAL]];set CONFIG_USB_STORAGE_SDDR09 [sync_bool $CONFIG_USB_STORAGE_SDDR09 $tmpvar_dep 1];set CONFIG_USB_STORAGE_SDDR09 [expr $CONFIG_USB_STORAGE_SDDR09&15]}
	global CONFIG_USB_STORAGE_JUMPSHOT
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_STORAGE $CONFIG_EXPERIMENTAL]];set CONFIG_USB_STORAGE_JUMPSHOT [sync_bool $CONFIG_USB_STORAGE_JUMPSHOT $tmpvar_dep 1];set CONFIG_USB_STORAGE_JUMPSHOT [expr $CONFIG_USB_STORAGE_JUMPSHOT&15]}
	global CONFIG_USB_ACM
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB]]; set CONFIG_USB_ACM [sync_tristate $CONFIG_USB_ACM $tmpvar_dep]; set CONFIG_USB_ACM [expr $CONFIG_USB_ACM&15]}
	global CONFIG_USB_PRINTER
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB]]; set CONFIG_USB_PRINTER [sync_tristate $CONFIG_USB_PRINTER $tmpvar_dep]; set CONFIG_USB_PRINTER [expr $CONFIG_USB_PRINTER&15]}
	global CONFIG_INPUT
	global CONFIG_USB_HID
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_INPUT]]; set CONFIG_USB_HID [sync_tristate $CONFIG_USB_HID $tmpvar_dep]; set CONFIG_USB_HID [expr $CONFIG_USB_HID&15]}
	global CONFIG_USB_HIDDEV
	if {($CONFIG_USB_HID == 1 || $CONFIG_USB_HID == 2 || $CONFIG_USB_HID == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_HID]];set CONFIG_USB_HIDDEV [sync_bool $CONFIG_USB_HIDDEV $tmpvar_dep 1];set CONFIG_USB_HIDDEV [expr $CONFIG_USB_HIDDEV&15]}
	global CONFIG_USB_KBD
	if {($CONFIG_USB_HID != 1) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_INPUT]]; set CONFIG_USB_KBD [sync_tristate $CONFIG_USB_KBD $tmpvar_dep]; set CONFIG_USB_KBD [expr $CONFIG_USB_KBD&15]}
	global CONFIG_USB_MOUSE
	if {($CONFIG_USB_HID != 1) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_INPUT]]; set CONFIG_USB_MOUSE [sync_tristate $CONFIG_USB_MOUSE $tmpvar_dep]; set CONFIG_USB_MOUSE [expr $CONFIG_USB_MOUSE&15]}
	global CONFIG_USB_WACOM
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_INPUT]]; set CONFIG_USB_WACOM [sync_tristate $CONFIG_USB_WACOM $tmpvar_dep]; set CONFIG_USB_WACOM [expr $CONFIG_USB_WACOM&15]}
	global CONFIG_USB_DC2XX
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB]]; set CONFIG_USB_DC2XX [sync_tristate $CONFIG_USB_DC2XX $tmpvar_dep]; set CONFIG_USB_DC2XX [expr $CONFIG_USB_DC2XX&15]}
	global CONFIG_USB_MDC800
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_MDC800 [sync_tristate $CONFIG_USB_MDC800 $tmpvar_dep]; set CONFIG_USB_MDC800 [expr $CONFIG_USB_MDC800&15]}
	global CONFIG_USB_SCANNER
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB]]; set CONFIG_USB_SCANNER [sync_tristate $CONFIG_USB_SCANNER $tmpvar_dep]; set CONFIG_USB_SCANNER [expr $CONFIG_USB_SCANNER&15]}
	global CONFIG_USB_MICROTEK
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_SCSI]]; set CONFIG_USB_MICROTEK [sync_tristate $CONFIG_USB_MICROTEK $tmpvar_dep]; set CONFIG_USB_MICROTEK [expr $CONFIG_USB_MICROTEK&15]}
	global CONFIG_USB_HPUSBSCSI
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_SCSI $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_HPUSBSCSI [sync_tristate $CONFIG_USB_HPUSBSCSI $tmpvar_dep]; set CONFIG_USB_HPUSBSCSI [expr $CONFIG_USB_HPUSBSCSI&15]}
	global CONFIG_VIDEO_DEV
	global CONFIG_USB_IBMCAM
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_VIDEO_DEV == 1 || $CONFIG_VIDEO_DEV == 2 || $CONFIG_VIDEO_DEV == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_VIDEO_DEV]]; set CONFIG_USB_IBMCAM [sync_tristate $CONFIG_USB_IBMCAM $tmpvar_dep]; set CONFIG_USB_IBMCAM [expr $CONFIG_USB_IBMCAM&15]}
	global CONFIG_USB_OV511
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_VIDEO_DEV == 1 || $CONFIG_VIDEO_DEV == 2 || $CONFIG_VIDEO_DEV == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_VIDEO_DEV]]; set CONFIG_USB_OV511 [sync_tristate $CONFIG_USB_OV511 $tmpvar_dep]; set CONFIG_USB_OV511 [expr $CONFIG_USB_OV511&15]}
	global CONFIG_USB_PWC
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_VIDEO_DEV == 1 || $CONFIG_VIDEO_DEV == 2 || $CONFIG_VIDEO_DEV == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_VIDEO_DEV]]; set CONFIG_USB_PWC [sync_tristate $CONFIG_USB_PWC $tmpvar_dep]; set CONFIG_USB_PWC [expr $CONFIG_USB_PWC&15]}
	global CONFIG_USB_SE401
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_VIDEO_DEV == 1 || $CONFIG_VIDEO_DEV == 2 || $CONFIG_VIDEO_DEV == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_VIDEO_DEV]]; set CONFIG_USB_SE401 [sync_tristate $CONFIG_USB_SE401 $tmpvar_dep]; set CONFIG_USB_SE401 [expr $CONFIG_USB_SE401&15]}
	global CONFIG_USB_DSBR
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_VIDEO_DEV == 1 || $CONFIG_VIDEO_DEV == 2 || $CONFIG_VIDEO_DEV == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_VIDEO_DEV $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_DSBR [sync_tristate $CONFIG_USB_DSBR $tmpvar_dep]; set CONFIG_USB_DSBR [expr $CONFIG_USB_DSBR&15]}
	global CONFIG_USB_DABUSB
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB]]; set CONFIG_USB_DABUSB [sync_tristate $CONFIG_USB_DABUSB $tmpvar_dep]; set CONFIG_USB_DABUSB [expr $CONFIG_USB_DABUSB&15]}
	global CONFIG_NET
	global CONFIG_USB_PEGASUS
	if {($CONFIG_NET != 0) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_NET $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_PEGASUS [sync_tristate $CONFIG_USB_PEGASUS $tmpvar_dep]; set CONFIG_USB_PEGASUS [expr $CONFIG_USB_PEGASUS&15]}
	global CONFIG_USB_KAWETH
	if {($CONFIG_NET != 0) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_NET $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_KAWETH [sync_tristate $CONFIG_USB_KAWETH $tmpvar_dep]; set CONFIG_USB_KAWETH [expr $CONFIG_USB_KAWETH&15]}
	global CONFIG_USB_CATC
	if {($CONFIG_NET != 0) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_NET $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_CATC [sync_tristate $CONFIG_USB_CATC $tmpvar_dep]; set CONFIG_USB_CATC [expr $CONFIG_USB_CATC&15]}
	global CONFIG_USB_CDCETHER
	if {($CONFIG_NET != 0) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_NET $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_CDCETHER [sync_tristate $CONFIG_USB_CDCETHER $tmpvar_dep]; set CONFIG_USB_CDCETHER [expr $CONFIG_USB_CDCETHER&15]}
	global CONFIG_USB_USBNET
	if {($CONFIG_NET != 0) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_NET $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_USBNET [sync_tristate $CONFIG_USB_USBNET $tmpvar_dep]; set CONFIG_USB_USBNET [expr $CONFIG_USB_USBNET&15]}
	global CONFIG_PARPORT
	global CONFIG_USB_USS720
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_PARPORT]]; set CONFIG_USB_USS720 [sync_tristate $CONFIG_USB_USS720 $tmpvar_dep]; set CONFIG_USB_USS720 [expr $CONFIG_USB_USS720&15]}
	global CONFIG_USB_RIO500
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_RIO500 [sync_tristate $CONFIG_USB_RIO500 $tmpvar_dep]; set CONFIG_USB_RIO500 [expr $CONFIG_USB_RIO500&15]}
}


proc menu60 {w title} {
	set oldFocus [focus]
	catch {focus .menu59}
	catch {destroy $w; unregister_active 60}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 60]]
	message $w.m -width 400 -aspect 300 -text \
		"USB Serial Converter support"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "USB Serial Converter support" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 60; break"
	set nextscript "catch {focus $oldFocus}; destroy $w; unregister_active 60; catch {destroy .menu59}; unregister_active 59; menu61 .menu61 \"$title\""
	frame $w.f
	button $w.f.back -text "OK" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 60"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	bind all <Alt-n> $nextscript
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 60; menu59 .menu59 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 60; menu59 .menu59 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	dep_tristate $w.config.f 60 0 "USB Serial Converter support" CONFIG_USB_SERIAL
	dep_bool $w.config.f 60 1 "  USB Serial Converter verbose debug" CONFIG_USB_SERIAL_DEBUG
	dep_bool $w.config.f 60 2 "  USB Generic Serial Driver" CONFIG_USB_SERIAL_GENERIC
	dep_tristate $w.config.f 60 3 "  USB Belkin and Peracom Single Port Serial Driver (EXPERIMENTAL)" CONFIG_USB_SERIAL_BELKIN
	dep_tristate $w.config.f 60 4 "  USB ConnectTech WhiteHEAT Serial Driver (EXPERIMENTAL)" CONFIG_USB_SERIAL_WHITEHEAT
	dep_tristate $w.config.f 60 5 "  USB Digi International AccelePort USB Serial Driver" CONFIG_USB_SERIAL_DIGI_ACCELEPORT
	dep_tristate $w.config.f 60 6 "  USB Empeg empeg-car Mark I/II Driver (EXPERIMENTAL)" CONFIG_USB_SERIAL_EMPEG
	dep_tristate $w.config.f 60 7 "  USB FTDI Single Port Serial Driver (EXPERIMENTAL)" CONFIG_USB_SERIAL_FTDI_SIO
	dep_tristate $w.config.f 60 8 "  USB Handspring Visor / Palm m50x / Sony Clie Driver" CONFIG_USB_SERIAL_VISOR
	dep_tristate $w.config.f 60 9 "  USB IR Dongle Serial Driver (EXPERIMENTAL)" CONFIG_USB_SERIAL_IR
	dep_tristate $w.config.f 60 10 "  USB Inside Out Edgeport Serial Driver (EXPERIMENTAL)" CONFIG_USB_SERIAL_EDGEPORT
	dep_tristate $w.config.f 60 11 "  USB Keyspan PDA Single Port Serial Driver (EXPERIMENTAL)" CONFIG_USB_SERIAL_KEYSPAN_PDA
	dep_tristate $w.config.f 60 12 "  USB Keyspan USA-xxx Serial Driver (EXPERIMENTAL)" CONFIG_USB_SERIAL_KEYSPAN
	dep_bool $w.config.f 60 13 "    USB Keyspan USA-28 Firmware" CONFIG_USB_SERIAL_KEYSPAN_USA28
	dep_bool $w.config.f 60 14 "    USB Keyspan USA-28X Firmware" CONFIG_USB_SERIAL_KEYSPAN_USA28X
	dep_bool $w.config.f 60 15 "    USB Keyspan USA-28XA Firmware" CONFIG_USB_SERIAL_KEYSPAN_USA28XA
	dep_bool $w.config.f 60 16 "    USB Keyspan USA-28XB Firmware" CONFIG_USB_SERIAL_KEYSPAN_USA28XB
	dep_bool $w.config.f 60 17 "    USB Keyspan USA-19 Firmware" CONFIG_USB_SERIAL_KEYSPAN_USA19
	dep_bool $w.config.f 60 18 "    USB Keyspan USA-18X Firmware" CONFIG_USB_SERIAL_KEYSPAN_USA18X
	dep_bool $w.config.f 60 19 "    USB Keyspan USA-19W Firmware" CONFIG_USB_SERIAL_KEYSPAN_USA19W
	dep_bool $w.config.f 60 20 "    USB Keyspan USA-49W Firmware" CONFIG_USB_SERIAL_KEYSPAN_USA49W
	dep_tristate $w.config.f 60 21 "  USB MCT Single Port Serial Driver (EXPERIMENTAL)" CONFIG_USB_SERIAL_MCT_U232
	dep_tristate $w.config.f 60 22 "  USB Prolific 2303 Single Port Serial Driver (EXPERIMENTAL)" CONFIG_USB_SERIAL_PL2303
	dep_tristate $w.config.f 60 23 "  USB REINER SCT cyberJack pinpad/e-com chipcard reader (EXPERIMENTAL)" CONFIG_USB_SERIAL_CYBERJACK
	dep_tristate $w.config.f 60 24 "  USB Xircom / Entregra Single Port Serial Driver (EXPERIMENTAL)" CONFIG_USB_SERIAL_XIRCOM
	dep_tristate $w.config.f 60 25 "  USB ZyXEL omni.net LCD Plus Driver (EXPERIMENTAL)" CONFIG_USB_SERIAL_OMNINET



	focus $w
	update_active
	global winx; global winy
	if {[winfo exists .menu59] == 0} then {menu59 .menu59 "USB support"}
	set winx [expr [winfo x .menu59]+30]; set winy [expr [winfo y .menu59]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu60 {} {
	global CONFIG_MODULES
	global CONFIG_USB
	global CONFIG_USB_SERIAL
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB]];set CONFIG_USB_SERIAL [sync_tristate $CONFIG_USB_SERIAL $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu60.config.f.x0 disabled {y}} else {configure_entry .menu60.config.f.x0 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu60.config.f.x0 disabled {m}} else {configure_entry .menu60.config.f.x0 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu60.config.f.x0 normal {m}} else {configure_entry .menu60.config.f.x0 disabled {m}}; configure_entry .menu60.config.f.x0 normal {n l}} else {configure_entry .menu60.config.f.x0 disabled {y n m l}}
	global CONFIG_USB_SERIAL_DEBUG
	if {($CONFIG_USB_SERIAL == 1) && ($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL]];set CONFIG_USB_SERIAL_DEBUG [sync_bool $CONFIG_USB_SERIAL_DEBUG $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu60.config.f.x1 disabled {y};} else {configure_entry .menu60.config.f.x1 normal {y};}; configure_entry .menu60.config.f.x1 normal {n l}} else {configure_entry .menu60.config.f.x1 disabled {y n l}}
	global CONFIG_USB_SERIAL_GENERIC
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL]];set CONFIG_USB_SERIAL_GENERIC [sync_bool $CONFIG_USB_SERIAL_GENERIC $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu60.config.f.x2 disabled {y};} else {configure_entry .menu60.config.f.x2 normal {y};}; configure_entry .menu60.config.f.x2 normal {n l}} else {configure_entry .menu60.config.f.x2 disabled {y n l}}
	global CONFIG_EXPERIMENTAL
	global CONFIG_USB_SERIAL_BELKIN
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]];set CONFIG_USB_SERIAL_BELKIN [sync_tristate $CONFIG_USB_SERIAL_BELKIN $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu60.config.f.x3 disabled {y}} else {configure_entry .menu60.config.f.x3 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu60.config.f.x3 disabled {m}} else {configure_entry .menu60.config.f.x3 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu60.config.f.x3 normal {m}} else {configure_entry .menu60.config.f.x3 disabled {m}}; configure_entry .menu60.config.f.x3 normal {n l}} else {configure_entry .menu60.config.f.x3 disabled {y n m l}}
	global CONFIG_USB_SERIAL_WHITEHEAT
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]];set CONFIG_USB_SERIAL_WHITEHEAT [sync_tristate $CONFIG_USB_SERIAL_WHITEHEAT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu60.config.f.x4 disabled {y}} else {configure_entry .menu60.config.f.x4 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu60.config.f.x4 disabled {m}} else {configure_entry .menu60.config.f.x4 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu60.config.f.x4 normal {m}} else {configure_entry .menu60.config.f.x4 disabled {m}}; configure_entry .menu60.config.f.x4 normal {n l}} else {configure_entry .menu60.config.f.x4 disabled {y n m l}}
	global CONFIG_USB_SERIAL_DIGI_ACCELEPORT
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL]];set CONFIG_USB_SERIAL_DIGI_ACCELEPORT [sync_tristate $CONFIG_USB_SERIAL_DIGI_ACCELEPORT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu60.config.f.x5 disabled {y}} else {configure_entry .menu60.config.f.x5 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu60.config.f.x5 disabled {m}} else {configure_entry .menu60.config.f.x5 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu60.config.f.x5 normal {m}} else {configure_entry .menu60.config.f.x5 disabled {m}}; configure_entry .menu60.config.f.x5 normal {n l}} else {configure_entry .menu60.config.f.x5 disabled {y n m l}}
	global CONFIG_USB_SERIAL_EMPEG
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]];set CONFIG_USB_SERIAL_EMPEG [sync_tristate $CONFIG_USB_SERIAL_EMPEG $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu60.config.f.x6 disabled {y}} else {configure_entry .menu60.config.f.x6 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu60.config.f.x6 disabled {m}} else {configure_entry .menu60.config.f.x6 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu60.config.f.x6 normal {m}} else {configure_entry .menu60.config.f.x6 disabled {m}}; configure_entry .menu60.config.f.x6 normal {n l}} else {configure_entry .menu60.config.f.x6 disabled {y n m l}}
	global CONFIG_USB_SERIAL_FTDI_SIO
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]];set CONFIG_USB_SERIAL_FTDI_SIO [sync_tristate $CONFIG_USB_SERIAL_FTDI_SIO $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu60.config.f.x7 disabled {y}} else {configure_entry .menu60.config.f.x7 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu60.config.f.x7 disabled {m}} else {configure_entry .menu60.config.f.x7 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu60.config.f.x7 normal {m}} else {configure_entry .menu60.config.f.x7 disabled {m}}; configure_entry .menu60.config.f.x7 normal {n l}} else {configure_entry .menu60.config.f.x7 disabled {y n m l}}
	global CONFIG_USB_SERIAL_VISOR
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL]];set CONFIG_USB_SERIAL_VISOR [sync_tristate $CONFIG_USB_SERIAL_VISOR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu60.config.f.x8 disabled {y}} else {configure_entry .menu60.config.f.x8 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu60.config.f.x8 disabled {m}} else {configure_entry .menu60.config.f.x8 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu60.config.f.x8 normal {m}} else {configure_entry .menu60.config.f.x8 disabled {m}}; configure_entry .menu60.config.f.x8 normal {n l}} else {configure_entry .menu60.config.f.x8 disabled {y n m l}}
	global CONFIG_USB_SERIAL_IR
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]];set CONFIG_USB_SERIAL_IR [sync_tristate $CONFIG_USB_SERIAL_IR $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu60.config.f.x9 disabled {y}} else {configure_entry .menu60.config.f.x9 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu60.config.f.x9 disabled {m}} else {configure_entry .menu60.config.f.x9 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu60.config.f.x9 normal {m}} else {configure_entry .menu60.config.f.x9 disabled {m}}; configure_entry .menu60.config.f.x9 normal {n l}} else {configure_entry .menu60.config.f.x9 disabled {y n m l}}
	global CONFIG_USB_SERIAL_EDGEPORT
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]];set CONFIG_USB_SERIAL_EDGEPORT [sync_tristate $CONFIG_USB_SERIAL_EDGEPORT $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu60.config.f.x10 disabled {y}} else {configure_entry .menu60.config.f.x10 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu60.config.f.x10 disabled {m}} else {configure_entry .menu60.config.f.x10 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu60.config.f.x10 normal {m}} else {configure_entry .menu60.config.f.x10 disabled {m}}; configure_entry .menu60.config.f.x10 normal {n l}} else {configure_entry .menu60.config.f.x10 disabled {y n m l}}
	global CONFIG_USB_SERIAL_KEYSPAN_PDA
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]];set CONFIG_USB_SERIAL_KEYSPAN_PDA [sync_tristate $CONFIG_USB_SERIAL_KEYSPAN_PDA $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu60.config.f.x11 disabled {y}} else {configure_entry .menu60.config.f.x11 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu60.config.f.x11 disabled {m}} else {configure_entry .menu60.config.f.x11 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu60.config.f.x11 normal {m}} else {configure_entry .menu60.config.f.x11 disabled {m}}; configure_entry .menu60.config.f.x11 normal {n l}} else {configure_entry .menu60.config.f.x11 disabled {y n m l}}
	global CONFIG_USB_SERIAL_KEYSPAN
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]];set CONFIG_USB_SERIAL_KEYSPAN [sync_tristate $CONFIG_USB_SERIAL_KEYSPAN $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu60.config.f.x12 disabled {y}} else {configure_entry .menu60.config.f.x12 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu60.config.f.x12 disabled {m}} else {configure_entry .menu60.config.f.x12 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu60.config.f.x12 normal {m}} else {configure_entry .menu60.config.f.x12 disabled {m}}; configure_entry .menu60.config.f.x12 normal {n l}} else {configure_entry .menu60.config.f.x12 disabled {y n m l}}
	global CONFIG_USB_SERIAL_KEYSPAN_USA28
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL_KEYSPAN]];set CONFIG_USB_SERIAL_KEYSPAN_USA28 [sync_bool $CONFIG_USB_SERIAL_KEYSPAN_USA28 $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu60.config.f.x13 disabled {y};} else {configure_entry .menu60.config.f.x13 normal {y};}; configure_entry .menu60.config.f.x13 normal {n l}} else {configure_entry .menu60.config.f.x13 disabled {y n l}}
	global CONFIG_USB_SERIAL_KEYSPAN_USA28X
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL_KEYSPAN]];set CONFIG_USB_SERIAL_KEYSPAN_USA28X [sync_bool $CONFIG_USB_SERIAL_KEYSPAN_USA28X $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu60.config.f.x14 disabled {y};} else {configure_entry .menu60.config.f.x14 normal {y};}; configure_entry .menu60.config.f.x14 normal {n l}} else {configure_entry .menu60.config.f.x14 disabled {y n l}}
	global CONFIG_USB_SERIAL_KEYSPAN_USA28XA
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL_KEYSPAN]];set CONFIG_USB_SERIAL_KEYSPAN_USA28XA [sync_bool $CONFIG_USB_SERIAL_KEYSPAN_USA28XA $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu60.config.f.x15 disabled {y};} else {configure_entry .menu60.config.f.x15 normal {y};}; configure_entry .menu60.config.f.x15 normal {n l}} else {configure_entry .menu60.config.f.x15 disabled {y n l}}
	global CONFIG_USB_SERIAL_KEYSPAN_USA28XB
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL_KEYSPAN]];set CONFIG_USB_SERIAL_KEYSPAN_USA28XB [sync_bool $CONFIG_USB_SERIAL_KEYSPAN_USA28XB $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu60.config.f.x16 disabled {y};} else {configure_entry .menu60.config.f.x16 normal {y};}; configure_entry .menu60.config.f.x16 normal {n l}} else {configure_entry .menu60.config.f.x16 disabled {y n l}}
	global CONFIG_USB_SERIAL_KEYSPAN_USA19
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL_KEYSPAN]];set CONFIG_USB_SERIAL_KEYSPAN_USA19 [sync_bool $CONFIG_USB_SERIAL_KEYSPAN_USA19 $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu60.config.f.x17 disabled {y};} else {configure_entry .menu60.config.f.x17 normal {y};}; configure_entry .menu60.config.f.x17 normal {n l}} else {configure_entry .menu60.config.f.x17 disabled {y n l}}
	global CONFIG_USB_SERIAL_KEYSPAN_USA18X
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL_KEYSPAN]];set CONFIG_USB_SERIAL_KEYSPAN_USA18X [sync_bool $CONFIG_USB_SERIAL_KEYSPAN_USA18X $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu60.config.f.x18 disabled {y};} else {configure_entry .menu60.config.f.x18 normal {y};}; configure_entry .menu60.config.f.x18 normal {n l}} else {configure_entry .menu60.config.f.x18 disabled {y n l}}
	global CONFIG_USB_SERIAL_KEYSPAN_USA19W
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL_KEYSPAN]];set CONFIG_USB_SERIAL_KEYSPAN_USA19W [sync_bool $CONFIG_USB_SERIAL_KEYSPAN_USA19W $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu60.config.f.x19 disabled {y};} else {configure_entry .menu60.config.f.x19 normal {y};}; configure_entry .menu60.config.f.x19 normal {n l}} else {configure_entry .menu60.config.f.x19 disabled {y n l}}
	global CONFIG_USB_SERIAL_KEYSPAN_USA49W
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL_KEYSPAN]];set CONFIG_USB_SERIAL_KEYSPAN_USA49W [sync_bool $CONFIG_USB_SERIAL_KEYSPAN_USA49W $tmpvar_dep 1];if {$tmpvar_dep != 1 && $tmpvar_dep != 2} then {configure_entry .menu60.config.f.x20 disabled {y};} else {configure_entry .menu60.config.f.x20 normal {y};}; configure_entry .menu60.config.f.x20 normal {n l}} else {configure_entry .menu60.config.f.x20 disabled {y n l}}
	global CONFIG_USB_SERIAL_MCT_U232
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]];set CONFIG_USB_SERIAL_MCT_U232 [sync_tristate $CONFIG_USB_SERIAL_MCT_U232 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu60.config.f.x21 disabled {y}} else {configure_entry .menu60.config.f.x21 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu60.config.f.x21 disabled {m}} else {configure_entry .menu60.config.f.x21 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu60.config.f.x21 normal {m}} else {configure_entry .menu60.config.f.x21 disabled {m}}; configure_entry .menu60.config.f.x21 normal {n l}} else {configure_entry .menu60.config.f.x21 disabled {y n m l}}
	global CONFIG_USB_SERIAL_PL2303
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]];set CONFIG_USB_SERIAL_PL2303 [sync_tristate $CONFIG_USB_SERIAL_PL2303 $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu60.config.f.x22 disabled {y}} else {configure_entry .menu60.config.f.x22 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu60.config.f.x22 disabled {m}} else {configure_entry .menu60.config.f.x22 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu60.config.f.x22 normal {m}} else {configure_entry .menu60.config.f.x22 disabled {m}}; configure_entry .menu60.config.f.x22 normal {n l}} else {configure_entry .menu60.config.f.x22 disabled {y n m l}}
	global CONFIG_USB_SERIAL_CYBERJACK
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]];set CONFIG_USB_SERIAL_CYBERJACK [sync_tristate $CONFIG_USB_SERIAL_CYBERJACK $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu60.config.f.x23 disabled {y}} else {configure_entry .menu60.config.f.x23 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu60.config.f.x23 disabled {m}} else {configure_entry .menu60.config.f.x23 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu60.config.f.x23 normal {m}} else {configure_entry .menu60.config.f.x23 disabled {m}}; configure_entry .menu60.config.f.x23 normal {n l}} else {configure_entry .menu60.config.f.x23 disabled {y n m l}}
	global CONFIG_USB_SERIAL_XIRCOM
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]];set CONFIG_USB_SERIAL_XIRCOM [sync_tristate $CONFIG_USB_SERIAL_XIRCOM $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu60.config.f.x24 disabled {y}} else {configure_entry .menu60.config.f.x24 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu60.config.f.x24 disabled {m}} else {configure_entry .menu60.config.f.x24 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu60.config.f.x24 normal {m}} else {configure_entry .menu60.config.f.x24 disabled {m}}; configure_entry .menu60.config.f.x24 normal {n l}} else {configure_entry .menu60.config.f.x24 disabled {y n m l}}
	global CONFIG_USB_SERIAL_OMNINET
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]];set CONFIG_USB_SERIAL_OMNINET [sync_tristate $CONFIG_USB_SERIAL_OMNINET $tmpvar_dep];	if {$tmpvar_dep != 1} then {configure_entry .menu60.config.f.x25 disabled {y}} else {configure_entry .menu60.config.f.x25 normal {y}}; if {$tmpvar_dep == 0} then {configure_entry .menu60.config.f.x25 disabled {m}} else {configure_entry .menu60.config.f.x25 normal {m}}; if {($CONFIG_MODULES == 1)} then {configure_entry .menu60.config.f.x25 normal {m}} else {configure_entry .menu60.config.f.x25 disabled {m}}; configure_entry .menu60.config.f.x25 normal {n l}} else {configure_entry .menu60.config.f.x25 disabled {y n m l}}
}


proc update_define_menu60 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_USB
	global CONFIG_USB_SERIAL
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB]]; set CONFIG_USB_SERIAL [sync_tristate $CONFIG_USB_SERIAL $tmpvar_dep]; set CONFIG_USB_SERIAL [expr $CONFIG_USB_SERIAL&15]}
	global CONFIG_USB_SERIAL_DEBUG
	if {($CONFIG_USB_SERIAL == 1) && ($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL]];set CONFIG_USB_SERIAL_DEBUG [sync_bool $CONFIG_USB_SERIAL_DEBUG $tmpvar_dep 1];set CONFIG_USB_SERIAL_DEBUG [expr $CONFIG_USB_SERIAL_DEBUG&15]}
	global CONFIG_USB_SERIAL_GENERIC
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL]];set CONFIG_USB_SERIAL_GENERIC [sync_bool $CONFIG_USB_SERIAL_GENERIC $tmpvar_dep 1];set CONFIG_USB_SERIAL_GENERIC [expr $CONFIG_USB_SERIAL_GENERIC&15]}
	global CONFIG_EXPERIMENTAL
	global CONFIG_USB_SERIAL_BELKIN
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_SERIAL_BELKIN [sync_tristate $CONFIG_USB_SERIAL_BELKIN $tmpvar_dep]; set CONFIG_USB_SERIAL_BELKIN [expr $CONFIG_USB_SERIAL_BELKIN&15]}
	global CONFIG_USB_SERIAL_WHITEHEAT
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_SERIAL_WHITEHEAT [sync_tristate $CONFIG_USB_SERIAL_WHITEHEAT $tmpvar_dep]; set CONFIG_USB_SERIAL_WHITEHEAT [expr $CONFIG_USB_SERIAL_WHITEHEAT&15]}
	global CONFIG_USB_SERIAL_DIGI_ACCELEPORT
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL]]; set CONFIG_USB_SERIAL_DIGI_ACCELEPORT [sync_tristate $CONFIG_USB_SERIAL_DIGI_ACCELEPORT $tmpvar_dep]; set CONFIG_USB_SERIAL_DIGI_ACCELEPORT [expr $CONFIG_USB_SERIAL_DIGI_ACCELEPORT&15]}
	global CONFIG_USB_SERIAL_EMPEG
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_SERIAL_EMPEG [sync_tristate $CONFIG_USB_SERIAL_EMPEG $tmpvar_dep]; set CONFIG_USB_SERIAL_EMPEG [expr $CONFIG_USB_SERIAL_EMPEG&15]}
	global CONFIG_USB_SERIAL_FTDI_SIO
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_SERIAL_FTDI_SIO [sync_tristate $CONFIG_USB_SERIAL_FTDI_SIO $tmpvar_dep]; set CONFIG_USB_SERIAL_FTDI_SIO [expr $CONFIG_USB_SERIAL_FTDI_SIO&15]}
	global CONFIG_USB_SERIAL_VISOR
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL]]; set CONFIG_USB_SERIAL_VISOR [sync_tristate $CONFIG_USB_SERIAL_VISOR $tmpvar_dep]; set CONFIG_USB_SERIAL_VISOR [expr $CONFIG_USB_SERIAL_VISOR&15]}
	global CONFIG_USB_SERIAL_IR
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_SERIAL_IR [sync_tristate $CONFIG_USB_SERIAL_IR $tmpvar_dep]; set CONFIG_USB_SERIAL_IR [expr $CONFIG_USB_SERIAL_IR&15]}
	global CONFIG_USB_SERIAL_EDGEPORT
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_SERIAL_EDGEPORT [sync_tristate $CONFIG_USB_SERIAL_EDGEPORT $tmpvar_dep]; set CONFIG_USB_SERIAL_EDGEPORT [expr $CONFIG_USB_SERIAL_EDGEPORT&15]}
	global CONFIG_USB_SERIAL_KEYSPAN_PDA
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_SERIAL_KEYSPAN_PDA [sync_tristate $CONFIG_USB_SERIAL_KEYSPAN_PDA $tmpvar_dep]; set CONFIG_USB_SERIAL_KEYSPAN_PDA [expr $CONFIG_USB_SERIAL_KEYSPAN_PDA&15]}
	global CONFIG_USB_SERIAL_KEYSPAN
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_SERIAL_KEYSPAN [sync_tristate $CONFIG_USB_SERIAL_KEYSPAN $tmpvar_dep]; set CONFIG_USB_SERIAL_KEYSPAN [expr $CONFIG_USB_SERIAL_KEYSPAN&15]}
	global CONFIG_USB_SERIAL_KEYSPAN_USA28
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL_KEYSPAN]];set CONFIG_USB_SERIAL_KEYSPAN_USA28 [sync_bool $CONFIG_USB_SERIAL_KEYSPAN_USA28 $tmpvar_dep 1];set CONFIG_USB_SERIAL_KEYSPAN_USA28 [expr $CONFIG_USB_SERIAL_KEYSPAN_USA28&15]}
	global CONFIG_USB_SERIAL_KEYSPAN_USA28X
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL_KEYSPAN]];set CONFIG_USB_SERIAL_KEYSPAN_USA28X [sync_bool $CONFIG_USB_SERIAL_KEYSPAN_USA28X $tmpvar_dep 1];set CONFIG_USB_SERIAL_KEYSPAN_USA28X [expr $CONFIG_USB_SERIAL_KEYSPAN_USA28X&15]}
	global CONFIG_USB_SERIAL_KEYSPAN_USA28XA
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL_KEYSPAN]];set CONFIG_USB_SERIAL_KEYSPAN_USA28XA [sync_bool $CONFIG_USB_SERIAL_KEYSPAN_USA28XA $tmpvar_dep 1];set CONFIG_USB_SERIAL_KEYSPAN_USA28XA [expr $CONFIG_USB_SERIAL_KEYSPAN_USA28XA&15]}
	global CONFIG_USB_SERIAL_KEYSPAN_USA28XB
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL_KEYSPAN]];set CONFIG_USB_SERIAL_KEYSPAN_USA28XB [sync_bool $CONFIG_USB_SERIAL_KEYSPAN_USA28XB $tmpvar_dep 1];set CONFIG_USB_SERIAL_KEYSPAN_USA28XB [expr $CONFIG_USB_SERIAL_KEYSPAN_USA28XB&15]}
	global CONFIG_USB_SERIAL_KEYSPAN_USA19
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL_KEYSPAN]];set CONFIG_USB_SERIAL_KEYSPAN_USA19 [sync_bool $CONFIG_USB_SERIAL_KEYSPAN_USA19 $tmpvar_dep 1];set CONFIG_USB_SERIAL_KEYSPAN_USA19 [expr $CONFIG_USB_SERIAL_KEYSPAN_USA19&15]}
	global CONFIG_USB_SERIAL_KEYSPAN_USA18X
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL_KEYSPAN]];set CONFIG_USB_SERIAL_KEYSPAN_USA18X [sync_bool $CONFIG_USB_SERIAL_KEYSPAN_USA18X $tmpvar_dep 1];set CONFIG_USB_SERIAL_KEYSPAN_USA18X [expr $CONFIG_USB_SERIAL_KEYSPAN_USA18X&15]}
	global CONFIG_USB_SERIAL_KEYSPAN_USA19W
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL_KEYSPAN]];set CONFIG_USB_SERIAL_KEYSPAN_USA19W [sync_bool $CONFIG_USB_SERIAL_KEYSPAN_USA19W $tmpvar_dep 1];set CONFIG_USB_SERIAL_KEYSPAN_USA19W [expr $CONFIG_USB_SERIAL_KEYSPAN_USA19W&15]}
	global CONFIG_USB_SERIAL_KEYSPAN_USA49W
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL_KEYSPAN]];set CONFIG_USB_SERIAL_KEYSPAN_USA49W [sync_bool $CONFIG_USB_SERIAL_KEYSPAN_USA49W $tmpvar_dep 1];set CONFIG_USB_SERIAL_KEYSPAN_USA49W [expr $CONFIG_USB_SERIAL_KEYSPAN_USA49W&15]}
	global CONFIG_USB_SERIAL_MCT_U232
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_SERIAL_MCT_U232 [sync_tristate $CONFIG_USB_SERIAL_MCT_U232 $tmpvar_dep]; set CONFIG_USB_SERIAL_MCT_U232 [expr $CONFIG_USB_SERIAL_MCT_U232&15]}
	global CONFIG_USB_SERIAL_PL2303
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_SERIAL_PL2303 [sync_tristate $CONFIG_USB_SERIAL_PL2303 $tmpvar_dep]; set CONFIG_USB_SERIAL_PL2303 [expr $CONFIG_USB_SERIAL_PL2303&15]}
	global CONFIG_USB_SERIAL_CYBERJACK
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_SERIAL_CYBERJACK [sync_tristate $CONFIG_USB_SERIAL_CYBERJACK $tmpvar_dep]; set CONFIG_USB_SERIAL_CYBERJACK [expr $CONFIG_USB_SERIAL_CYBERJACK&15]}
	global CONFIG_USB_SERIAL_XIRCOM
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_SERIAL_XIRCOM [sync_tristate $CONFIG_USB_SERIAL_XIRCOM $tmpvar_dep]; set CONFIG_USB_SERIAL_XIRCOM [expr $CONFIG_USB_SERIAL_XIRCOM&15]}
	global CONFIG_USB_SERIAL_OMNINET
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL]]; set CONFIG_USB_SERIAL_OMNINET [sync_tristate $CONFIG_USB_SERIAL_OMNINET $tmpvar_dep]; set CONFIG_USB_SERIAL_OMNINET [expr $CONFIG_USB_SERIAL_OMNINET&15]}
}


menu_option menu61 61 "Kernel hacking"
proc menu61 {w title} {
	set oldFocus [focus]
	catch {destroy $w; unregister_active 61}
	toplevel $w -class Dialog
	wm withdraw $w
	global active_menus
	set active_menus [lsort -integer [linsert $active_menus end 61]]
	message $w.m -width 400 -aspect 300 -text \
		"Kernel hacking"  -relief raised
	pack $w.m -pady 10 -side top -padx 10
	wm title $w "Kernel hacking" 

	bind $w <Escape> "catch {focus $oldFocus}; destroy $w; unregister_active 61; break"
	set nextscript "catch {focus $oldFocus}; menu62 .menu62 \"$title\""
	frame $w.f
	button $w.f.back -text "Main Menu" \
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 61"
	button $w.f.next -text "Next" -underline 0\
		-width 15 -command $nextscript
	$w.f.next configure -state disabled
	bind all <Alt-n> "puts \"no more menus\" "
	button $w.f.prev -text "Prev" -underline 0\
		-width 15 -command "catch {focus $oldFocus}; destroy $w; unregister_active 61; menu60 .menu60 \"$title\""
	bind $w <Alt-p> "catch {focus $oldFocus}; destroy $w; unregister_active 61; menu60 .menu60 \"$title\";break"
	pack $w.f.back $w.f.next $w.f.prev -side left -expand on
	pack $w.f -pady 10 -side bottom -anchor w -fill x
	frame $w.topline -relief ridge -borderwidth 2 -height 2
	pack $w.topline -side top -fill x

	frame $w.botline -relief ridge -borderwidth 2 -height 2
	pack $w.botline -side bottom -fill x

	frame $w.config
	pack $w.config -fill y -expand on

	scrollbar $w.config.vscroll -command "$w.config.canvas yview"
	pack $w.config.vscroll -side right -fill y

	canvas $w.config.canvas -height 1\
		-relief flat -borderwidth 0 -yscrollcommand "$w.config.vscroll set" \
		-width [expr [winfo screenwidth .] * 1 / 2] 
	frame $w.config.f
	bind $w <Key-Down> "$w.config.canvas yview scroll  1 unit;break;"
	bind $w <Key-Up> "$w.config.canvas yview scroll  -1 unit;break;"
	bind $w <Key-Next> "$w.config.canvas yview scroll  1 page;break;"
	bind $w <Key-Prior> "$w.config.canvas yview scroll  -1 page;break;"
	bind $w <Key-Home> "$w.config.canvas yview moveto 0;break;"
	bind $w <Key-End> "$w.config.canvas yview moveto 1 ;break;"
	pack $w.config.canvas -side right -fill y


	bool $w.config.f 61 0 "Full Symbolic/Source Debugging support" CONFIG_FULLDEBUG
	bool $w.config.f 61 1 "Magic SysRq key" CONFIG_MAGIC_SYSRQ
	bool $w.config.f 61 2 "Non power-of-2 kernel allocator (EXPERIMENTAL)" CONFIG_CONTIGUOUS_PAGE_ALLOC
	dep_bool $w.config.f 61 3 "  include /proc/mem_map" CONFIG_MEM_MAP
	bool $w.config.f 61 4 "Kernel profiling support" CONFIG_PROFILE
	int $w.config.f 61 5 " Profile shift count" CONFIG_PROFILE_SHIFT
	bool $w.config.f 61 6 "Use fast second timer for profiling" CONFIG_HIGHPROFILE
	bool $w.config.f 61 7 "Panic/Dump to FLASH" CONFIG_DUMPTOFLASH
	bool $w.config.f 61 8 "Suppress Kernel BUG Messages" CONFIG_NO_KERNEL_MSG
	bool $w.config.f 61 9 "Reduce kernel task size to 1 page" CONFIG_SMALL_TASKS
	bool $w.config.f 61 10 "Disable BDM signals" CONFIG_BDM_DISABLE



	focus $w
	update_active
	global winx; global winy
	set winx [expr [winfo x .]+30]; set winy [expr [winfo y .]+30]
	if {[winfo exists $w]} then {wm geometry $w +$winx+$winy}
	update idletasks
	if {[winfo exists $w]} then  {$w.config.canvas create window 0 0 -anchor nw -window $w.config.f

	$w.config.canvas configure \
		-width [expr [winfo reqwidth $w.config.f] + 1]\
		-scrollregion "-1 -1 [expr [winfo reqwidth $w.config.f] + 1] \
			 [expr [winfo reqheight $w.config.f] + 1]"

	set winy [expr [winfo reqh $w] - [winfo reqh $w.config.canvas]]
	set scry [expr [winfo screenh $w] / 2]
	set maxy [expr [winfo screenh $w] * 3 / 4]
	set canvtotal [expr [winfo reqh $w.config.f] + 2]
	if [expr $winy + $canvtotal < $maxy] {
		$w.config.canvas configure -height $canvtotal
	} else {
		$w.config.canvas configure -height [expr $scry - $winy]
		}
	}
	update idletasks
	if {[winfo exists $w]} then {
	wm maxsize $w [winfo width $w] [winfo screenheight $w]
	wm minsize $w [winfo width $w] 100

	wm deiconify $w
}
}

proc update_menu61 {} {
	global CONFIG_EXPERIMENTAL
	global CONFIG_CONTIGUOUS_PAGE_ALLOC
	if {($CONFIG_EXPERIMENTAL == 1)} then {
	configure_entry .menu61.config.f.x2 normal {n l y}} else {configure_entry .menu61.config.f.x2 disabled {y n l}}
	global CONFIG_MEM_MAP
	if {($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_CONTIGUOUS_PAGE_ALLOC == 1 || $CONFIG_CONTIGUOUS_PAGE_ALLOC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_CONTIGUOUS_PAGE_ALLOC]];set CONFIG_MEM_MAP [sync_bool $CONFIG_MEM_MAP $tmpvar_dep 0];if {$tmpvar_dep != 1} then {configure_entry .menu61.config.f.x3 disabled {y};} else {configure_entry .menu61.config.f.x3 normal {y};}; configure_entry .menu61.config.f.x3 normal {n l}} else {configure_entry .menu61.config.f.x3 disabled {y n l}}
	global CONFIG_PROFILE
	global CONFIG_PROFILE_SHIFT
	if {($CONFIG_PROFILE == 1)} then {.menu61.config.f.x5.x configure -state normal -foreground [ cget .ref -foreground ]; .menu61.config.f.x5.l configure -state normal; } else {.menu61.config.f.x5.x configure -state disabled -foreground [ cget .ref -disabledforeground ]; .menu61.config.f.x5.l configure -state disabled}
	global CONFIG_HIGHPROFILE
	if {($CONFIG_PROFILE == 1)} then {
	configure_entry .menu61.config.f.x6 normal {n l y}} else {configure_entry .menu61.config.f.x6 disabled {y n l}}
	global CONFIG_COLDFIRE
	global CONFIG_DUMPTOFLASH
	if {($CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu61.config.f.x7 normal {n l y}} else {configure_entry .menu61.config.f.x7 disabled {y n l}}
	global CONFIG_BDM_DISABLE
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_COLDFIRE == 1)} then {
	configure_entry .menu61.config.f.x10 normal {n l y}} else {configure_entry .menu61.config.f.x10 disabled {y n l}}
}


proc update_define_menu61 {} {
	update_define_mainmenu
	global CONFIG_MODULES
	global CONFIG_CONTIGUOUS_PAGE_ALLOC
set CONFIG_CONTIGUOUS_PAGE_ALLOC [expr $CONFIG_CONTIGUOUS_PAGE_ALLOC|16]
	global CONFIG_HIGHPROFILE
set CONFIG_HIGHPROFILE [expr $CONFIG_HIGHPROFILE|16]
	global CONFIG_DUMPTOFLASH
set CONFIG_DUMPTOFLASH [expr $CONFIG_DUMPTOFLASH|16]
	global CONFIG_BDM_DISABLE
set CONFIG_BDM_DISABLE [expr $CONFIG_BDM_DISABLE|16]
	global CONFIG_EXPERIMENTAL
	if {($CONFIG_EXPERIMENTAL == 1)} then {
	set CONFIG_CONTIGUOUS_PAGE_ALLOC [expr $CONFIG_CONTIGUOUS_PAGE_ALLOC&15]}
	global CONFIG_MEM_MAP
	if {($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_CONTIGUOUS_PAGE_ALLOC == 1 || $CONFIG_CONTIGUOUS_PAGE_ALLOC == 4)} then {
	set tmpvar_dep [effective_dep [list $CONFIG_CONTIGUOUS_PAGE_ALLOC]];set CONFIG_MEM_MAP [sync_bool $CONFIG_MEM_MAP $tmpvar_dep 0];set CONFIG_MEM_MAP [expr $CONFIG_MEM_MAP&15]}
	global CONFIG_PROFILE
	global CONFIG_PROFILE_SHIFT
	if {($CONFIG_PROFILE == 1)} then {validate_int CONFIG_PROFILE_SHIFT "$CONFIG_PROFILE_SHIFT" 2}
	if {($CONFIG_PROFILE == 1)} then {
	set CONFIG_HIGHPROFILE [expr $CONFIG_HIGHPROFILE&15]}
	global CONFIG_COLDFIRE
	if {($CONFIG_COLDFIRE == 1)} then {
	set CONFIG_DUMPTOFLASH [expr $CONFIG_DUMPTOFLASH&15]}
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_COLDFIRE == 1)} then {
	set CONFIG_BDM_DISABLE [expr $CONFIG_BDM_DISABLE&15]}
}


proc update_mainmenu {}  {
	global CONFIG_NET
	if {($CONFIG_NET == 1)} then {.f0.x14 configure -state normal } else { .f0.x14 configure -state disabled }
	global CONFIG_PCI
	global CONFIG_EXPERIMENTAL
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1)} then {.f0.x24 configure -state normal } else { .f0.x24 configure -state disabled }
	if {($CONFIG_NET == 1)} then {.f0.x26 configure -state normal } else { .f0.x26 configure -state disabled }
	if {($CONFIG_NET != 0)} then {.f0.x38 configure -state normal } else { .f0.x38 configure -state disabled }
	global CONFIG_VT
	if {($CONFIG_VT == 1)} then {.f0.x56 configure -state normal } else { .f0.x56 configure -state disabled }
}


set CONFIG_EXPERIMENTAL 0
set CONFIG_MODULES 0
set CONFIG_MODVERSIONS 0
set CONFIG_KMOD 0
set tmpvar_0 "(not set)"
set CONFIG_M68000 0
set CONFIG_M68EN302 0
set CONFIG_M68328 0
set CONFIG_M68EZ328 0
set CONFIG_M68VZ328 0
set CONFIG_M68332 0
set CONFIG_M68360 0
set CONFIG_M5204 0
set CONFIG_M5206 0
set CONFIG_M5206e 0
set CONFIG_M5272 0
set CONFIG_M5307 0
set CONFIG_M5407 0
set CONFIG_PILOT 0
set CONFIG_XCOPILOT_BUGS 0
set CONFIG_KERNEL_ELF 0
set CONFIG_PILOT_MEMORY_DISPLAY 0
set CONFIG_PILOT_CONSOLE 0
set CONFIG_M68EZ328ADS 0
set CONFIG_ALMA_ANS 0
set CONFIG_UCSIMM 0
set CONFIG_UCDIMM 0
set CONFIG_DRAGEN2 0
set CONFIG_HWADDR_FROMEEPROM 0
set CONFIG_HWADDR_OFFSET 2
set CONFIG_APLIO 0
set CONFIG_APLIO_PRO 0
set CONFIG_APLIO_ENTRECOTE 0
set CONFIG_SHGLCORE 0
set CONFIG_SHGLCORE_2MEG 0
set CONFIG_ARNEWSH 0
set CONFIG_CADRE3 0
set CONFIG_ELITE 0
set CONFIG_SMALL 0
set CONFIG_NETtel 0
set CONFIG_TELOS 0
set CONFIG_CFV240 0
set CONFIG_MOTOROLA 0
set CONFIG_RESETSWITCH 0
set CONFIG_MARCONINAP 0
set CONFIG_ROMFS_FROM_ROM 0
set CONFIG_eLIA 0
set CONFIG_DISKtel 0
set CONFIG_SNAPGEAR 0
set CONFIG_SECUREEDGEMP3 0
set CONFIG_CLEOPATRA 0
set CONFIG_OLDMASK 0
set CONFIG_UCQUICC 0
set CONFIG_M68360_SMC_UART 0
set CONFIG_M68360_SCC_UART 0
set CONFIG_INIT_LCD 0
set CONFIG_MEMORY_RESERVE 0
set tmpvar_1 "(not set)"
set CONFIG_CLOCK_AUTO 0
set CONFIG_CLOCK_16MHz 0
set CONFIG_CLOCK_20MHz 0
set CONFIG_CLOCK_25MHz 0
set CONFIG_CLOCK_33MHz 0
set CONFIG_CLOCK_40MHz 0
set CONFIG_CLOCK_45MHz 0
set CONFIG_CLOCK_50MHz 0
set CONFIG_CLOCK_54MHz 0
set CONFIG_CLOCK_60MHz 0
set CONFIG_CLOCK_66MHz 0
set tmpvar_2 "(not set)"
set CONFIG_RAMAUTO 0
set CONFIG_RAM4MB 0
set CONFIG_RAM8MB 0
set CONFIG_RAM16MB 0
set CONFIG_RAM32MB 0
set tmpvar_3 "(not set)"
set CONFIG_AUTOBIT 0
set CONFIG_RAM8BIT 0
set CONFIG_RAM16BIT 0
set CONFIG_RAM32bit 0
set tmpvar_4 "(not set)"
set CONFIG_NOFLASH 0
set CONFIG_AMDFLASH 0
set CONFIG_INTELFLASH 0
set tmpvar_5 "(not set)"
set CONFIG_FLASHAUTO 0
set CONFIG_FLASH128KB 0
set CONFIG_FLASH1MB 0
set CONFIG_FLASH2MB 0
set CONFIG_FLASH4MB 0
set CONFIG_FLASH6MB 0
set CONFIG_FLASH8MB 0
set CONFIG_FLASH16MB 0
set tmpvar_6 "(not set)"
set CONFIG_FLASHAUTOBIT 0
set CONFIG_FLASH8BIT 0
set CONFIG_FLASH16BIT 0
set CONFIG_FLASH32bit 0
set CONFIG_EXTRA_FLASH1MB 0
set tmpvar_7 "(not set)"
set CONFIG_RAMKERNEL 0
set CONFIG_ROMKERNEL 0
set CONFIG_HIMEMKERNEL 0
set CONFIG_NET 0
set CONFIG_VISWS 0
set CONFIG_PCI 0
set tmpvar_8 "(not set)"
set CONFIG_PCI_GOBIOS 0
set CONFIG_PCI_GODIRECT 0
set CONFIG_PCI_GOANY 0
set CONFIG_PCI_NAMES 0
set CONFIG_MCA 0
set CONFIG_HOTPLUG 0
set CONFIG_PCMCIA 0
set CONFIG_CARDBUS 0
set CONFIG_I82092 0
set CONFIG_I82365 0
set CONFIG_TCIC 0
set CONFIG_PCMCIA_CLPS6700 0
set CONFIG_PCMCIA_SA1100 0
set CONFIG_SYSVIPC 0
set CONFIG_BSD_PROCESS_ACCT 0
set CONFIG_SYSCTL 0
set tmpvar_9 "(not set)"
set CONFIG_KCORE_ELF 0
set CONFIG_KCORE_AOUT 0
set CONFIG_BINFMT_FLAT 0
set CONFIG_BINFMT_ZFLAT 0
set CONFIG_BINFMT_AOUT 0
set CONFIG_BINFMT_ELF 0
set CONFIG_BINFMT_MISC 0
set CONFIG_PM 0
set CONFIG_ACPI 0
set CONFIG_ACPI_INTERPRETER 0
set CONFIG_ACPI_S1_SLEEP 0
set CONFIG_APM 0
set CONFIG_APM_IGNORE_USER_SUSPEND 0
set CONFIG_APM_DO_ENABLE 0
set CONFIG_APM_CPU_IDLE 0
set CONFIG_APM_DISPLAY_BLANK 0
set CONFIG_APM_RTC_IS_GMT 0
set CONFIG_APM_ALLOW_INTS 0
set CONFIG_APM_REAL_MODE_POWER_OFF 0
set CONFIG_MTD 0
set CONFIG_MTD_DEBUG 0
set CONFIG_MTD_DEBUG_VERBOSE 0
set CONFIG_MTD_PARTITIONS 0
set CONFIG_MTD_REDBOOT_PARTS 0
set CONFIG_MTD_CHAR 0
set CONFIG_MTD_BLOCK 0
set CONFIG_MTD_BLOCK_RO 0
set CONFIG_FTL 0
set CONFIG_NFTL 0
set CONFIG_NFTL_RW 0
set CONFIG_MTD_CFI 0
set CONFIG_MTD_JEDECPROBE 0
set CONFIG_MTD_CFI_ADV_OPTIONS 0
set tmpvar_10 "(not set)"
set CONFIG_MTD_CFI_NOSWAP 0
set CONFIG_MTD_CFI_BE_BYTE_SWAP 0
set CONFIG_MTD_CFI_LE_BYTE_SWAP 0
set CONFIG_MTD_CFI_GEOMETRY 0
set CONFIG_MTD_CFI_B1 0
set CONFIG_MTD_CFI_B2 0
set CONFIG_MTD_CFI_B4 0
set CONFIG_MTD_CFI_I1 0
set CONFIG_MTD_CFI_I2 0
set CONFIG_MTD_CFI_I4 0
set CONFIG_MTD_CFI_INTELEXT 0
set CONFIG_MTD_CFI_AMDSTD 0
set CONFIG_MTD_RAM 0
set CONFIG_MTD_ROM 0
set CONFIG_MTD_ABSENT 0
set CONFIG_MTD_OBSOLETE_CHIPS 0
set CONFIG_MTD_AMDSTD 0
set CONFIG_MTD_SHARP 0
set CONFIG_MTD_JEDEC 0
set CONFIG_MTD_PHYSMAP 0
set CONFIG_MTD_PHYSMAP_START 0x8000000
set CONFIG_MTD_PHYSMAP_LEN 0x4000000
set CONFIG_MTD_PHYSMAP_BUSWIDTH 2
set CONFIG_MTD_NETtel 0
set CONFIG_MTD_NETteluC 0
set CONFIG_MTD_KeyTechnology 0
set CONFIG_MTD_KEYWEST 0
set CONFIG_MTD_PMC551 0
set CONFIG_MTD_PMC551_BUGFIX 0
set CONFIG_MTD_PMC551_DEBUG 0
set CONFIG_MTD_SLRAM 0
set CONFIG_MTD_MTDRAM 0
set CONFIG_MTDRAM_TOTAL_SIZE 4096
set CONFIG_MTDRAM_ERASE_SIZE 128
set CONFIG_MTDRAM_ABS_POS 0
set CONFIG_MTD_BLKMTD 0
set CONFIG_MTD_DOC1000 0
set CONFIG_MTD_DOC2000 0
set CONFIG_MTD_DOC2001 0
set CONFIG_MTD_DOCPROBE_ADVANCED 0
set CONFIG_MTD_DOCPROBE_ADDRESS 0x0000
set CONFIG_MTD_DOCPROBE_HIGH 0
set CONFIG_MTD_DOCPROBE_55AA 0
set CONFIG_MTD_NAND 0
set CONFIG_MTD_NAND_ECC 0
set CONFIG_MTD_NAND_VERIFY_WRITE 0
set CONFIG_PARPORT 0
set CONFIG_PARPORT_PC 0
set CONFIG_PARPORT_SERIAL 0
set CONFIG_PARPORT_PC_FIFO 0
set CONFIG_PARPORT_PC_SUPERIO 0
set CONFIG_PARPORT_PC_PCMCIA 0
set CONFIG_PARPORT_OTHER 0
set CONFIG_PARPORT_1284 0
set CONFIG_PARPORT_HD64465 0
set CONFIG_PNP 0
set CONFIG_ISAPNP 0
set CONFIG_BLK_DEV_FD 0
set CONFIG_BLK_DEV_PS2 0
set CONFIG_BLK_DEV_XD 0
set CONFIG_PARIDE 0
set CONFIG_PARIDE_PD 0
set CONFIG_PARIDE_PCD 0
set CONFIG_PARIDE_PF 0
set CONFIG_PARIDE_PT 0
set CONFIG_PARIDE_PG 0
set CONFIG_PARIDE_ATEN 0
set CONFIG_PARIDE_BPCK 0
set CONFIG_PARIDE_BPCK6 0
set CONFIG_PARIDE_COMM 0
set CONFIG_PARIDE_DSTR 0
set CONFIG_PARIDE_FIT2 0
set CONFIG_PARIDE_FIT3 0
set CONFIG_PARIDE_EPAT 0
set CONFIG_PARIDE_EPATC8 0
set CONFIG_PARIDE_EPIA 0
set CONFIG_PARIDE_FRIQ 0
set CONFIG_PARIDE_FRPW 0
set CONFIG_PARIDE_KBIC 0
set CONFIG_PARIDE_KTTI 0
set CONFIG_PARIDE_ON20 0
set CONFIG_PARIDE_ON26 0
set CONFIG_BLK_CPQ_DA 0
set CONFIG_BLK_CPQ_CISS_DA 0
set CONFIG_BLK_DEV_DAC960 0
set CONFIG_BLK_DEV_LOOP 0
set CONFIG_BLK_DEV_NBD 0
set CONFIG_BLK_DEV_RAM 0
set CONFIG_BLK_DEV_RAM_SIZE 4096
set CONFIG_BLK_DEV_INITRD 0
set CONFIG_BLK_DEV_BLKMEM 0
set CONFIG_PACKET 0
set CONFIG_PACKET_MMAP 0
set CONFIG_NETLINK_DEV 0
set CONFIG_NETFILTER 0
set CONFIG_NETFILTER_DEBUG 0
set CONFIG_FILTER 0
set CONFIG_UNIX 0
set CONFIG_INET 0
set CONFIG_IP_MULTICAST 0
set CONFIG_IP_ADVANCED_ROUTER 0
set CONFIG_IP_MULTIPLE_TABLES 0
set CONFIG_IP_ROUTE_FWMARK 0
set CONFIG_IP_ROUTE_NAT 0
set CONFIG_IP_ROUTE_MULTIPATH 0
set CONFIG_IP_ROUTE_TOS 0
set CONFIG_IP_ROUTE_VERBOSE 0
set CONFIG_IP_ROUTE_LARGE_TABLES 0
set CONFIG_IP_PNP 0
set CONFIG_IP_PNP_DHCP 0
set CONFIG_IP_PNP_BOOTP 0
set CONFIG_IP_PNP_RARP 0
set CONFIG_NET_IPIP 0
set CONFIG_NET_IPGRE 0
set CONFIG_NET_IPGRE_BROADCAST 0
set CONFIG_IP_MROUTE 0
set CONFIG_IP_PIMSM_V1 0
set CONFIG_IP_PIMSM_V2 0
set CONFIG_ARPD 0
set CONFIG_INET_ECN 0
set CONFIG_SYN_COOKIES 0
set CONFIG_IP_NF_CONNTRACK 0
set CONFIG_IP_NF_FTP 0
set CONFIG_IP_NF_PPTP 0
set CONFIG_IP_NF_PPTP_DEBUG 0
set CONFIG_IP_NF_IRC 0
set CONFIG_IP_NF_QUEUE 0
set CONFIG_IP_NF_IPTABLES 0
set CONFIG_IP_NF_MATCH_LIMIT 0
set CONFIG_IP_NF_MATCH_MAC 0
set CONFIG_IP_NF_MATCH_MARK 0
set CONFIG_IP_NF_MATCH_MULTIPORT 0
set CONFIG_IP_NF_MATCH_TOS 0
set CONFIG_IP_NF_MATCH_LENGTH 0
set CONFIG_IP_NF_MATCH_TTL 0
set CONFIG_IP_NF_MATCH_TCPMSS 0
set CONFIG_IP_NF_MATCH_STATE 0
set CONFIG_IP_NF_MATCH_UNCLEAN 0
set CONFIG_IP_NF_MATCH_OWNER 0
set CONFIG_IP_NF_FILTER 0
set CONFIG_IP_NF_TARGET_REJECT 0
set CONFIG_IP_NF_TARGET_MIRROR 0
set CONFIG_IP_NF_NAT 0
set CONFIG_IP_NF_TARGET_MASQUERADE 0
set CONFIG_IP_NF_TARGET_REDIRECT 0
set CONFIG_IP_NF_NAT_SNMP_BASIC 0
set CONFIG_IP_NF_MANGLE 0
set CONFIG_IP_NF_TARGET_TOS 0
set CONFIG_IP_NF_TARGET_MARK 0
set CONFIG_IP_NF_TARGET_LOG 0
set CONFIG_IP_NF_TARGET_TCPMSS 0
set CONFIG_IP_NF_COMPAT_IPCHAINS 0
set CONFIG_IP_NF_COMPAT_IPFWADM 0
set CONFIG_IPV6 0
set CONFIG_IP6_NF_IPTABLES 0
set CONFIG_IP6_NF_MATCH_LIMIT 0
set CONFIG_IP6_NF_MATCH_MAC 0
set CONFIG_IP6_NF_MATCH_MULTIPORT 0
set CONFIG_IP6_NF_MATCH_OWNER 0
set CONFIG_IP6_NF_MATCH_MARK 0
set CONFIG_IP6_NF_FILTER 0
set CONFIG_IP6_NF_TARGET_LOG 0
set CONFIG_IP6_NF_MANGLE 0
set CONFIG_IP6_NF_TARGET_MARK 0
set CONFIG_KHTTPD 0
set CONFIG_ATM 0
set CONFIG_ATM_CLIP 0
set CONFIG_ATM_CLIP_NO_ICMP 0
set CONFIG_ATM_LANE 0
set CONFIG_ATM_MPOA 0
set CONFIG_VLAN_8021Q 0
set CONFIG_IPX 0
set CONFIG_IPX_INTERN 0
set CONFIG_ATALK 0
set CONFIG_DECNET 0
set CONFIG_DECNET_SIOCGIFCONF 0
set CONFIG_DECNET_ROUTER 0
set CONFIG_DECNET_ROUTE_FWMARK 0
set CONFIG_BRIDGE 0
set CONFIG_X25 0
set CONFIG_LAPB 0
set CONFIG_LLC 0
set CONFIG_NET_DIVERT 0
set CONFIG_ECONET 0
set CONFIG_ECONET_AUNUDP 0
set CONFIG_ECONET_NATIVE 0
set CONFIG_WAN_ROUTER 0
set CONFIG_NET_FASTROUTE 0
set CONFIG_NET_HW_FLOWCONTROL 0
set CONFIG_NET_SCHED 0
set CONFIG_NET_SCH_CBQ 0
set CONFIG_NET_SCH_CSZ 0
set CONFIG_NET_SCH_ATM 0
set CONFIG_NET_SCH_PRIO 0
set CONFIG_NET_SCH_RED 0
set CONFIG_NET_SCH_SFQ 0
set CONFIG_NET_SCH_TEQL 0
set CONFIG_NET_SCH_TBF 0
set CONFIG_NET_SCH_GRED 0
set CONFIG_NET_SCH_DSMARK 0
set CONFIG_NET_SCH_INGRESS 0
set CONFIG_NET_QOS 0
set CONFIG_NET_ESTIMATOR 0
set CONFIG_NET_CLS 0
set CONFIG_NET_CLS_TCINDEX 0
set CONFIG_NET_CLS_ROUTE4 0
set CONFIG_NET_CLS_FW 0
set CONFIG_NET_CLS_U32 0
set CONFIG_NET_CLS_RSVP 0
set CONFIG_NET_CLS_RSVP6 0
set CONFIG_NET_CLS_POLICE 0
set CONFIG_IPSEC 0
set CONFIG_IPSEC_IPIP 0
set CONFIG_IPSEC_AH 0
set CONFIG_IPSEC_AUTH_HMAC_MD5 0
set CONFIG_IPSEC_AUTH_HMAC_SHA1 0
set CONFIG_IPSEC_ESP 0
set CONFIG_IPSEC_ENC_DES 0
set CONFIG_IPSEC_ENC_3DES 0
set CONFIG_IPSEC_IPCOMP 0
set CONFIG_IPSEC_DEBUG 0
set CONFIG_PHONE 0
set CONFIG_PHONE_IXJ 0
set CONFIG_PHONE_IXJ_PCMCIA 0
set CONFIG_IDE 0
set CONFIG_BLK_DEV_IDE 0
set CONFIG_BLK_DEV_HD_IDE 0
set CONFIG_BLK_DEV_IDEDISK 0
set CONFIG_IDEDISK_MULTI_MODE 0
set CONFIG_BLK_DEV_IDEDISK_FUJITSU 0
set CONFIG_BLK_DEV_IDEDISK_IBM 0
set CONFIG_BLK_DEV_IDEDISK_MAXTOR 0
set CONFIG_BLK_DEV_IDEDISK_QUANTUM 0
set CONFIG_BLK_DEV_IDEDISK_SEAGATE 0
set CONFIG_BLK_DEV_IDEDISK_WD 0
set CONFIG_BLK_DEV_TIVO 0
set CONFIG_BLK_DEV_IDECS 0
set CONFIG_BLK_DEV_IDECD 0
set CONFIG_BLK_DEV_IDETAPE 0
set CONFIG_BLK_DEV_IDEFLOPPY 0
set CONFIG_BLK_DEV_IDESCSI 0
set CONFIG_BLK_DEV_CMD640 0
set CONFIG_BLK_DEV_CMD640_ENHANCED 0
set CONFIG_BLK_DEV_ISAPNP 0
set CONFIG_BLK_DEV_RZ1000 0
set CONFIG_BLK_DEV_IDEPCI 0
set CONFIG_IDEPCI_SHARE_IRQ 0
set CONFIG_BLK_DEV_IDEDMA_PCI 0
set CONFIG_BLK_DEV_OFFBOARD 0
set CONFIG_IDEDMA_PCI_AUTO 0
set CONFIG_IDEDMA_PCI_WIP 0
set CONFIG_IDEDMA_NEW_DRIVE_LISTINGS 0
set CONFIG_BLK_DEV_AEC62XX 0
set CONFIG_AEC62XX_TUNING 0
set CONFIG_BLK_DEV_ALI15X3 0
set CONFIG_WDC_ALI15X3 0
set CONFIG_BLK_DEV_AMD74XX 0
set CONFIG_AMD74XX_OVERRIDE 0
set CONFIG_BLK_DEV_CMD64X 0
set CONFIG_BLK_DEV_CY82C693 0
set CONFIG_BLK_DEV_CS5530 0
set CONFIG_BLK_DEV_HPT34X 0
set CONFIG_HPT34X_AUTODMA 0
set CONFIG_BLK_DEV_HPT366 0
set CONFIG_BLK_DEV_NS87415 0
set CONFIG_BLK_DEV_OPTI621 0
set CONFIG_BLK_DEV_PDC202XX 0
set CONFIG_PDC202XX_BURST 0
set CONFIG_PDC202XX_FORCE 0
set CONFIG_BLK_DEV_SVWKS 0
set CONFIG_BLK_DEV_SIS5513 0
set CONFIG_BLK_DEV_SLC90E66 0
set CONFIG_BLK_DEV_TRM290 0
set CONFIG_BLK_DEV_VIA82CXXX 0
set tmpvar_11 "(not set)"
set CONFIG_IDE_8xx_PCCARD 0
set CONFIG_IDE_8xx_DIRECT 0
set CONFIG_IDE_EXT_DIRECT 0
set CONFIG_IDE_CHIPSETS 0
set CONFIG_BLK_DEV_4DRIVES 0
set CONFIG_BLK_DEV_ALI14XX 0
set CONFIG_BLK_DEV_DTC2278 0
set CONFIG_BLK_DEV_HT6560B 0
set CONFIG_BLK_DEV_PDC4030 0
set CONFIG_BLK_DEV_QD65XX 0
set CONFIG_BLK_DEV_UMC8672 0
set CONFIG_BLK_DEV_HD_ONLY 0
set CONFIG_IDEDMA_IVB 0
set CONFIG_BLK_DEV_ATARAID 0
set CONFIG_BLK_DEV_ATARAID_PDC 0
set CONFIG_BLK_DEV_ATARAID_HPT 0
set CONFIG_SCSI 0
set CONFIG_BLK_DEV_SD 0
set CONFIG_SD_EXTRA_DEVS 40
set CONFIG_CHR_DEV_ST 0
set CONFIG_CHR_DEV_OSST 0
set CONFIG_BLK_DEV_SR 0
set CONFIG_BLK_DEV_SR_VENDOR 0
set CONFIG_SR_EXTRA_DEVS 2
set CONFIG_CHR_DEV_SG 0
set CONFIG_SCSI_DEBUG_QUEUES 0
set CONFIG_SCSI_MULTI_LUN 0
set CONFIG_SCSI_CONSTANTS 0
set CONFIG_SCSI_LOGGING 0
set CONFIG_BLK_DEV_3W_XXXX_RAID 0
set CONFIG_SCSI_7000FASST 0
set CONFIG_SCSI_ACARD 0
set CONFIG_SCSI_AHA152X 0
set CONFIG_SCSI_AHA1542 0
set CONFIG_SCSI_AHA1740 0
set CONFIG_SCSI_AACRAID 0
set CONFIG_SCSI_AIC7XXX 0
set CONFIG_AIC7XXX_CMDS_PER_DEVICE 253
set CONFIG_AIC7XXX_RESET_DELAY_MS 15000
set CONFIG_AIC7XXX_BUILD_FIRMWARE 0
set CONFIG_SCSI_AIC7XXX_OLD 0
set CONFIG_AIC7XXX_OLD_TCQ_ON_BY_DEFAULT 0
set CONFIG_AIC7XXX_OLD_CMDS_PER_DEVICE 8
set CONFIG_AIC7XXX_OLD_PROC_STATS 0
set CONFIG_SCSI_DPT_I2O 0
set CONFIG_SCSI_ADVANSYS 0
set CONFIG_SCSI_IN2000 0
set CONFIG_SCSI_AM53C974 0
set CONFIG_SCSI_MEGARAID 0
set CONFIG_SCSI_BUSLOGIC 0
set CONFIG_SCSI_OMIT_FLASHPOINT 0
set CONFIG_SCSI_CPQFCTS 0
set CONFIG_SCSI_DMX3191D 0
set CONFIG_SCSI_DTC3280 0
set CONFIG_SCSI_EATA 0
set CONFIG_SCSI_EATA_TAGGED_QUEUE 0
set CONFIG_SCSI_EATA_LINKED_COMMANDS 0
set CONFIG_SCSI_EATA_MAX_TAGS 16
set CONFIG_SCSI_EATA_DMA 0
set CONFIG_SCSI_EATA_PIO 0
set CONFIG_SCSI_FUTURE_DOMAIN 0
set CONFIG_SCSI_FD_MCS 0
set CONFIG_SCSI_GDTH 0
set CONFIG_SCSI_GENERIC_NCR5380 0
set CONFIG_SCSI_GENERIC_NCR53C400 0
set tmpvar_12 "(not set)"
set CONFIG_SCSI_G_NCR5380_PORT 0
set CONFIG_SCSI_G_NCR5380_MEM 0
set CONFIG_SCSI_IBMMCA 0
set CONFIG_IBMMCA_SCSI_ORDER_STANDARD 0
set CONFIG_IBMMCA_SCSI_DEV_RESET 0
set CONFIG_SCSI_INITIO 0
set CONFIG_SCSI_INIA100 0
set CONFIG_SCSI_PPA 0
set CONFIG_SCSI_IMM 0
set CONFIG_SCSI_IZIP_EPP16 0
set CONFIG_SCSI_IZIP_SLOW_CTR 0
set CONFIG_SCSI_NCR53C406A 0
set CONFIG_SCSI_NCR_D700 0
set CONFIG_SCSI_NCR53C7xx 0
set CONFIG_SCSI_NCR53C7xx_sync 0
set CONFIG_SCSI_NCR53C7xx_FAST 0
set CONFIG_SCSI_NCR53C7xx_DISCONNECT 0
set CONFIG_SCSI_SYM53C8XX_2 0
set CONFIG_SCSI_SYM53C8XX_DMA_ADDRESSING_MODE 1
set CONFIG_SCSI_SYM53C8XX_DEFAULT_TAGS 16
set CONFIG_SCSI_SYM53C8XX_MAX_TAGS 64
set CONFIG_SCSI_SYM53C8XX_IOMAPPED 0
set CONFIG_SCSI_NCR53C8XX 0
set CONFIG_SCSI_SYM53C8XX 0
set CONFIG_SCSI_NCR53C8XX_DEFAULT_TAGS 8
set CONFIG_SCSI_NCR53C8XX_MAX_TAGS 32
set CONFIG_SCSI_NCR53C8XX_SYNC 20
set CONFIG_SCSI_NCR53C8XX_PROFILE 0
set CONFIG_SCSI_NCR53C8XX_IOMAPPED 0
set CONFIG_SCSI_NCR53C8XX_PQS_PDS 0
set CONFIG_SCSI_NCR53C8XX_NO_DISCONNECT 0
set CONFIG_SCSI_NCR53C8XX_SYMBIOS_COMPAT 0
set CONFIG_SCSI_MCA_53C9X 0
set CONFIG_SCSI_PAS16 0
set CONFIG_SCSI_PCI2000 0
set CONFIG_SCSI_PCI2220I 0
set CONFIG_SCSI_PSI240I 0
set CONFIG_SCSI_QLOGIC_FAS 0
set CONFIG_SCSI_QLOGIC_ISP 0
set CONFIG_SCSI_QLOGIC_FC 0
set CONFIG_SCSI_QLOGIC_FC_FIRMWARE 0
set CONFIG_SCSI_QLOGIC_1280 0
set CONFIG_SCSI_SIM710 0
set CONFIG_SCSI_SYM53C416 0
set CONFIG_SCSI_DC390T 0
set CONFIG_SCSI_DC390T_NOGENSUPP 0
set CONFIG_SCSI_T128 0
set CONFIG_SCSI_U14_34F 0
set CONFIG_SCSI_U14_34F_LINKED_COMMANDS 0
set CONFIG_SCSI_U14_34F_MAX_TAGS 8
set CONFIG_SCSI_DEBUG 0
set CONFIG_SCSI_PCMCIA 0
set CONFIG_PCMCIA_AHA152X 0
set CONFIG_PCMCIA_FDOMAIN 0
set CONFIG_PCMCIA_NINJA_SCSI 0
set CONFIG_PCMCIA_QLOGIC 0
set CONFIG_IEEE1394 0
set CONFIG_IEEE1394_PCILYNX 0
set CONFIG_IEEE1394_PCILYNX_LOCALRAM 0
set CONFIG_IEEE1394_PCILYNX_PORTS 0
set CONFIG_IEEE1394_OHCI1394 0
set CONFIG_IEEE1394_VIDEO1394 0
set CONFIG_IEEE1394_SBP2 0
set CONFIG_IEEE1394_RAWIO 0
set CONFIG_IEEE1394_VERBOSEDEBUG 0
set CONFIG_I2O 0
set CONFIG_I2O_PCI 0
set CONFIG_I2O_BLOCK 0
set CONFIG_I2O_LAN 0
set CONFIG_I2O_SCSI 0
set CONFIG_I2O_PROC 0
set CONFIG_NETDEVICES 0
set CONFIG_ARCNET 0
set CONFIG_ARCNET_1201 0
set CONFIG_ARCNET_1051 0
set CONFIG_ARCNET_RAW 0
set CONFIG_ARCNET_COM90xx 0
set CONFIG_ARCNET_COM90xxIO 0
set CONFIG_ARCNET_RIM_I 0
set CONFIG_ARCNET_COM20020 0
set CONFIG_ARCNET_COM20020_ISA 0
set CONFIG_ARCNET_COM20020_PCI 0
set CONFIG_APPLETALK 0
set CONFIG_LTPC 0
set CONFIG_COPS 0
set CONFIG_COPS_DAYNA 0
set CONFIG_COPS_TANGENT 0
set CONFIG_IPDDP 0
set CONFIG_IPDDP_ENCAP 0
set CONFIG_IPDDP_DECAP 0
set CONFIG_DUMMY 0
set CONFIG_BONDING 0
set CONFIG_EQUALIZER 0
set CONFIG_TUN 0
set CONFIG_ETHERTAP 0
set CONFIG_NET_SB1000 0
set CONFIG_NET_ETHERNET 0
set CONFIG_SUNLANCE 0
set CONFIG_HAPPYMEAL 0
set CONFIG_SUNBMAC 0
set CONFIG_SUNQE 0
set CONFIG_SUNGEM 0
set CONFIG_NET_VENDOR_3COM 0
set CONFIG_EL1 0
set CONFIG_EL2 0
set CONFIG_ELPLUS 0
set CONFIG_EL16 0
set CONFIG_EL3 0
set CONFIG_ELMC 0
set CONFIG_ELMC_II 0
set CONFIG_VORTEX 0
set CONFIG_LANCE 0
set CONFIG_NET_VENDOR_SMC 0
set CONFIG_WD80x3 0
set CONFIG_ULTRAMCA 0
set CONFIG_ULTRA 0
set CONFIG_ULTRA32 0
set CONFIG_SMC9194 0
set CONFIG_NET_VENDOR_RACAL 0
set CONFIG_NI5010 0
set CONFIG_NI52 0
set CONFIG_NI65 0
set CONFIG_AT1700 0
set CONFIG_DEPCA 0
set CONFIG_HP100 0
set CONFIG_NET_ISA 0
set CONFIG_E2100 0
set CONFIG_EWRK3 0
set CONFIG_EEXPRESS 0
set CONFIG_EEXPRESS_PRO 0
set CONFIG_HPLAN_PLUS 0
set CONFIG_HPLAN 0
set CONFIG_LP486E 0
set CONFIG_ETH16I 0
set CONFIG_NE2000 0
set CONFIG_SKMC 0
set CONFIG_NE2_MCA 0
set CONFIG_IBMLANA 0
set CONFIG_NET_PCI 0
set CONFIG_PCNET32 0
set CONFIG_ADAPTEC_STARFIRE 0
set CONFIG_APRICOT 0
set CONFIG_CS89x0 0
set CONFIG_TULIP 0
set CONFIG_TULIP_MWI 0
set CONFIG_TULIP_MMIO 0
set CONFIG_DE4X5 0
set CONFIG_DGRS 0
set CONFIG_DM9102 0
set CONFIG_EEPRO100 0
set CONFIG_LNE390 0
set CONFIG_FEALNX 0
set CONFIG_NATSEMI 0
set CONFIG_NE2K_PCI 0
set CONFIG_NE3210 0
set CONFIG_ES3210 0
set CONFIG_8139CP 0
set CONFIG_8139TOO 0
set CONFIG_8139TOO_PIO 0
set CONFIG_8139TOO_TUNE_TWISTER 0
set CONFIG_8139TOO_8129 0
set CONFIG_RTL8139 0
set CONFIG_SIS900 0
set CONFIG_EPIC100 0
set CONFIG_SUNDANCE 0
set CONFIG_TLAN 0
set CONFIG_VIA_RHINE 0
set CONFIG_VIA_RHINE_MMIO 0
set CONFIG_WINBOND_840 0
set CONFIG_LAN_SAA9730 0
set CONFIG_NET_POCKET 0
set CONFIG_DE600 0
set CONFIG_DE620 0
set CONFIG_FEC 0
set CONFIG_UCCS89x0_HW_SWAP 0
set CONFIG_ACENIC 0
set CONFIG_ACENIC_OMIT_TIGON_I 0
set CONFIG_DL2K 0
set CONFIG_MYRI_SBUS 0
set CONFIG_NS83820 0
set CONFIG_HAMACHI 0
set CONFIG_YELLOWFIN 0
set CONFIG_SK98LIN 0
set CONFIG_FDDI 0
set CONFIG_DEFXX 0
set CONFIG_SKFP 0
set CONFIG_HIPPI 0
set CONFIG_ROADRUNNER 0
set CONFIG_ROADRUNNER_LARGE_RINGS 0
set CONFIG_PLIP 0
set CONFIG_PPP 0
set CONFIG_PPP_MULTILINK 0
set CONFIG_PPP_FILTER 0
set CONFIG_PPP_ASYNC 0
set CONFIG_PPP_SYNC_TTY 0
set CONFIG_PPP_DEFLATE 0
set CONFIG_PPP_BSDCOMP 0
set CONFIG_PPPOE 0
set CONFIG_PPPOATM 0
set CONFIG_SLIP 0
set CONFIG_SLIP_COMPRESSED 0
set CONFIG_SLIP_SMART 0
set CONFIG_SLIP_MODE_SLIP6 0
set CONFIG_NET_RADIO 0
set CONFIG_STRIP 0
set CONFIG_WAVELAN 0
set CONFIG_ARLAN 0
set CONFIG_AIRONET4500 0
set CONFIG_AIRONET4500_NONCS 0
set CONFIG_AIRONET4500_PNP 0
set CONFIG_AIRONET4500_PCI 0
set CONFIG_AIRONET4500_ISA 0
set CONFIG_AIRONET4500_I365 0
set CONFIG_AIRONET4500_PROC 0
set CONFIG_AIRO 0
set CONFIG_HERMES 0
set CONFIG_PLX_HERMES 0
set CONFIG_PCMCIA_HERMES 0
set CONFIG_AIRO_CS 0
set CONFIG_TR 0
set CONFIG_IBMTR 0
set CONFIG_IBMOL 0
set CONFIG_IBMLS 0
set CONFIG_TMS380TR 0
set CONFIG_TMSPCI 0
set CONFIG_TMSISA 0
set CONFIG_ABYSS 0
set CONFIG_MADGEMC 0
set CONFIG_SMCTR 0
set CONFIG_NET_FC 0
set CONFIG_IPHASE5526 0
set CONFIG_RCPCI 0
set CONFIG_SHAPER 0
set CONFIG_WAN 0
set CONFIG_HOSTESS_SV11 0
set CONFIG_COSA 0
set CONFIG_COMX 0
set CONFIG_COMX_HW_COMX 0
set CONFIG_COMX_HW_LOCOMX 0
set CONFIG_COMX_HW_MIXCOM 0
set CONFIG_COMX_PROTO_PPP 0
set CONFIG_COMX_PROTO_LAPB 0
set CONFIG_COMX_PROTO_FR 0
set CONFIG_DSCC4 0
set CONFIG_FARSYNC 0
set CONFIG_LANMEDIA 0
set CONFIG_SEALEVEL_4021 0
set CONFIG_SYNCLINK_SYNCPPP 0
set CONFIG_HDLC 0
set CONFIG_HDLC_PPP 0
set CONFIG_HDLC_X25 0
set CONFIG_N2 0
set CONFIG_C101 0
set CONFIG_DLCI 0
set CONFIG_DLCI_COUNT 24
set CONFIG_DLCI_MAX 8
set CONFIG_SDLA 0
set CONFIG_WAN_ROUTER_DRIVERS 0
set CONFIG_VENDOR_SANGOMA 0
set CONFIG_WANPIPE_CHDLC 0
set CONFIG_WANPIPE_FR 0
set CONFIG_WANPIPE_X25 0
set CONFIG_WANPIPE_PPP 0
set CONFIG_WANPIPE_MULTPPP 0
set CONFIG_CYCLADES_SYNC 0
set CONFIG_CYCLOMX_X25 0
set CONFIG_LAPBETHER 0
set CONFIG_X25_ASY 0
set CONFIG_NET_PCMCIA 0
set CONFIG_PCMCIA_3C589 0
set CONFIG_PCMCIA_3C574 0
set CONFIG_PCMCIA_FMVJ18X 0
set CONFIG_PCMCIA_PCNET 0
set CONFIG_PCMCIA_AXNET 0
set CONFIG_PCMCIA_NMCLAN 0
set CONFIG_PCMCIA_SMC91C92 0
set CONFIG_PCMCIA_XIRC2PS 0
set CONFIG_ARCNET_COM20020_CS 0
set CONFIG_PCMCIA_IBMTR 0
set CONFIG_PCMCIA_XIRCOM 0
set CONFIG_PCMCIA_XIRTULIP 0
set CONFIG_NET_PCMCIA_RADIO 0
set CONFIG_PCMCIA_RAYCS 0
set CONFIG_PCMCIA_NETWAVE 0
set CONFIG_PCMCIA_WAVELAN 0
set CONFIG_AIRONET4500_CS 0
set CONFIG_ATM_TCP 0
set CONFIG_ATM_LANAI 0
set CONFIG_ATM_ENI 0
set CONFIG_ATM_ENI_DEBUG 0
set CONFIG_ATM_ENI_TUNE_BURST 0
set CONFIG_ATM_ENI_BURST_TX_16W 0
set CONFIG_ATM_ENI_BURST_TX_8W 0
set CONFIG_ATM_ENI_BURST_TX_4W 0
set CONFIG_ATM_ENI_BURST_TX_2W 0
set CONFIG_ATM_ENI_BURST_RX_16W 0
set CONFIG_ATM_ENI_BURST_RX_8W 0
set CONFIG_ATM_ENI_BURST_RX_4W 0
set CONFIG_ATM_ENI_BURST_RX_2W 0
set CONFIG_ATM_FIRESTREAM 0
set CONFIG_ATM_ZATM 0
set CONFIG_ATM_ZATM_DEBUG 0
set CONFIG_ATM_NICSTAR 0
set CONFIG_ATM_NICSTAR_USE_SUNI 0
set CONFIG_ATM_NICSTAR_USE_IDT77105 0
set CONFIG_ATM_IDT77252 0
set CONFIG_ATM_IDT77252_DEBUG 0
set CONFIG_ATM_IDT77252_RCV_ALL 0
set CONFIG_ATM_AMBASSADOR 0
set CONFIG_ATM_AMBASSADOR_DEBUG 0
set CONFIG_ATM_HORIZON 0
set CONFIG_ATM_HORIZON_DEBUG 0
set CONFIG_ATM_IA 0
set CONFIG_ATM_IA_DEBUG 0
set CONFIG_ATM_FORE200E_MAYBE 0
set CONFIG_ATM_FORE200E_PCA 0
set CONFIG_ATM_FORE200E_PCA_DEFAULT_FW 0
set CONFIG_ATM_FORE200E_PCA_FW ""
set CONFIG_ATM_FORE200E_TX_RETRY 16
set CONFIG_ATM_FORE200E_DEBUG 0
set CONFIG_HAMRADIO 0
set CONFIG_AX25 0
set CONFIG_AX25_DAMA_SLAVE 0
set CONFIG_NETROM 0
set CONFIG_ROSE 0
set CONFIG_MKISS 0
set CONFIG_6PACK 0
set CONFIG_BPQETHER 0
set CONFIG_DMASCC 0
set CONFIG_SCC 0
set CONFIG_SCC_DELAY 0
set CONFIG_SCC_TRXECHO 0
set CONFIG_BAYCOM_SER_FDX 0
set CONFIG_BAYCOM_SER_HDX 0
set CONFIG_BAYCOM_PAR 0
set CONFIG_BAYCOM_EPP 0
set CONFIG_SOUNDMODEM 0
set CONFIG_SOUNDMODEM_SBC 0
set CONFIG_SOUNDMODEM_WSS 0
set CONFIG_SOUNDMODEM_AFSK1200 0
set CONFIG_SOUNDMODEM_AFSK2400_7 0
set CONFIG_SOUNDMODEM_AFSK2400_8 0
set CONFIG_SOUNDMODEM_AFSK2666 0
set CONFIG_SOUNDMODEM_HAPN4800 0
set CONFIG_SOUNDMODEM_PSK4800 0
set CONFIG_SOUNDMODEM_FSK9600 0
set CONFIG_YAM 0
set CONFIG_IRDA 0
set CONFIG_IRLAN 0
set CONFIG_IRNET 0
set CONFIG_IRCOMM 0
set CONFIG_IRDA_ULTRA 0
set CONFIG_IRDA_OPTIONS 0
set CONFIG_IRDA_CACHE_LAST_LSAP 0
set CONFIG_IRDA_FAST_RR 0
set CONFIG_IRDA_DEBUG 0
set CONFIG_IRTTY_SIR 0
set CONFIG_IRPORT_SIR 0
set CONFIG_DONGLE 0
set CONFIG_ESI_DONGLE 0
set CONFIG_ACTISYS_DONGLE 0
set CONFIG_TEKRAM_DONGLE 0
set CONFIG_GIRBIL_DONGLE 0
set CONFIG_LITELINK_DONGLE 0
set CONFIG_OLD_BELKIN_DONGLE 0
set CONFIG_USB_IRDA 0
set CONFIG_NSC_FIR 0
set CONFIG_WINBOND_FIR 0
set CONFIG_TOSHIBA_FIR 0
set CONFIG_SMC_IRCC_FIR 0
set CONFIG_ALI_FIR 0
set CONFIG_VLSI_FIR 0
set CONFIG_ISDN 0
set CONFIG_ISDN_PPP 0
set CONFIG_ISDN_PPP_VJ 0
set CONFIG_ISDN_MPP 0
set CONFIG_ISDN_PPP_BSDCOMP 0
set CONFIG_ISDN_AUDIO 0
set CONFIG_ISDN_TTY_FAX 0
set CONFIG_ISDN_X25 0
set CONFIG_ISDN_DRV_LOOP 0
set CONFIG_ISDN_DIVERSION 0
set CONFIG_ISDN_DRV_HISAX 0
set CONFIG_HISAX_EURO 0
set CONFIG_DE_AOC 0
set CONFIG_HISAX_NO_SENDCOMPLETE 0
set CONFIG_HISAX_NO_LLC 0
set CONFIG_HISAX_NO_KEYPAD 0
set CONFIG_HISAX_1TR6 0
set CONFIG_HISAX_NI1 0
set CONFIG_HISAX_MAX_CARDS 8
set CONFIG_HISAX_16_0 0
set CONFIG_HISAX_16_3 0
set CONFIG_HISAX_TELESPCI 0
set CONFIG_HISAX_S0BOX 0
set CONFIG_HISAX_AVM_A1 0
set CONFIG_HISAX_FRITZPCI 0
set CONFIG_HISAX_AVM_A1_PCMCIA 0
set CONFIG_HISAX_ELSA 0
set CONFIG_HISAX_IX1MICROR2 0
set CONFIG_HISAX_DIEHLDIVA 0
set CONFIG_HISAX_ASUSCOM 0
set CONFIG_HISAX_TELEINT 0
set CONFIG_HISAX_HFCS 0
set CONFIG_HISAX_SEDLBAUER 0
set CONFIG_HISAX_SPORTSTER 0
set CONFIG_HISAX_MIC 0
set CONFIG_HISAX_NETJET 0
set CONFIG_HISAX_NETJET_U 0
set CONFIG_HISAX_NICCY 0
set CONFIG_HISAX_ISURF 0
set CONFIG_HISAX_HSTSAPHIR 0
set CONFIG_HISAX_BKM_A4T 0
set CONFIG_HISAX_SCT_QUADRO 0
set CONFIG_HISAX_GAZEL 0
set CONFIG_HISAX_HFC_PCI 0
set CONFIG_HISAX_W6692 0
set CONFIG_HISAX_HFC_SX 0
set CONFIG_HISAX_DEBUG 0
set CONFIG_HISAX_SEDLBAUER_CS 0
set CONFIG_HISAX_ELSA_CS 0
set CONFIG_HISAX_ST5481 0
set CONFIG_HISAX_FRITZ_PCIPNP 0
set CONFIG_ISDN_DRV_ICN 0
set CONFIG_ISDN_DRV_PCBIT 0
set CONFIG_ISDN_DRV_SC 0
set CONFIG_ISDN_DRV_ACT2000 0
set CONFIG_ISDN_DRV_EICON 0
set CONFIG_ISDN_DRV_EICON_DIVAS 0
set CONFIG_ISDN_DRV_EICON_OLD 0
set CONFIG_ISDN_DRV_EICON_PCI 0
set CONFIG_ISDN_DRV_EICON_ISA 0
set CONFIG_ISDN_DRV_TPAM 0
set CONFIG_ISDN_CAPI 0
set CONFIG_ISDN_DRV_AVMB1_VERBOSE_REASON 0
set CONFIG_ISDN_CAPI_MIDDLEWARE 0
set CONFIG_ISDN_CAPI_CAPI20 0
set CONFIG_ISDN_CAPI_CAPIFS_BOOL 0
set CONFIG_ISDN_CAPI_CAPIDRV 0
set CONFIG_ISDN_DRV_AVMB1_B1ISA 0
set CONFIG_ISDN_DRV_AVMB1_B1PCI 0
set CONFIG_ISDN_DRV_AVMB1_B1PCIV4 0
set CONFIG_ISDN_DRV_AVMB1_T1ISA 0
set CONFIG_ISDN_DRV_AVMB1_B1PCMCIA 0
set CONFIG_ISDN_DRV_AVMB1_AVM_CS 0
set CONFIG_ISDN_DRV_AVMB1_T1PCI 0
set CONFIG_ISDN_DRV_AVMB1_C4 0
set CONFIG_HYSDN 0
set CONFIG_HYSDN_CAPI 0
set CONFIG_CD_NO_IDESCSI 0
set CONFIG_AZTCD 0
set CONFIG_GSCD 0
set CONFIG_SBPCD 0
set CONFIG_SBPCD2 0
set CONFIG_SBPCD3 0
set CONFIG_SBPCD4 0
set CONFIG_MCD 0
set CONFIG_MCD_IRQ 11
set CONFIG_MCD_BASE 300
set CONFIG_MCDX 0
set CONFIG_OPTCD 0
set CONFIG_CM206 0
set CONFIG_SJCD 0
set CONFIG_ISP16_CDI 0
set CONFIG_CDU31A 0
set CONFIG_CDU535 0
set CONFIG_68328_SERIAL 0
set CONFIG_68328_SERIAL_RTS_CTS 0
set CONFIG_68328_DIGI 0
set CONFIG_68681_SERIAL 0
set CONFIG_68332_SERIAL 0
set CONFIG_68302_SERIAL 0
set CONFIG_SERIAL_CONSOLE 0
set tmpvar_13 "(not set)"
set CONFIG_CONSOLE_9600 0
set CONFIG_CONSOLE_19200 0
set CONFIG_CONSOLE_115200 0
set CONFIG_COLDFIRE_SERIAL 0
set CONFIG_MCF_MBUS 0
set CONFIG_LCDTXT 0
set CONFIG_LCDDMA 0
set CONFIG_DAC0800 0
set CONFIG_DACI2S 0
set CONFIG_T6963 0
set CONFIG_T6963_PIO 0
set CONFIG_LEDMAN 0
set CONFIG_VT 0
set CONFIG_VT_CONSOLE 0
set CONFIG_SERIAL 0
set CONFIG_SERIAL_ACPI 0
set CONFIG_SERIAL_EXTENDED 0
set CONFIG_SERIAL_MANY_PORTS 0
set CONFIG_SERIAL_SHARE_IRQ 0
set CONFIG_SERIAL_DETECT_IRQ 0
set CONFIG_SERIAL_MULTIPORT 0
set CONFIG_HUB6 0
set CONFIG_SERIAL_NONSTANDARD 0
set CONFIG_COMPUTONE 0
set CONFIG_ROCKETPORT 0
set CONFIG_CYCLADES 0
set CONFIG_CYZ_INTR 0
set CONFIG_DIGIEPCA 0
set CONFIG_DIGI 0
set CONFIG_ESPSERIAL 0
set CONFIG_MOXA_INTELLIO 0
set CONFIG_MOXA_SMARTIO 0
set CONFIG_ISI 0
set CONFIG_SYNCLINK 0
set CONFIG_N_HDLC 0
set CONFIG_RISCOM8 0
set CONFIG_SPECIALIX 0
set CONFIG_SPECIALIX_RTSCTS 0
set CONFIG_SX 0
set CONFIG_RIO 0
set CONFIG_RIO_OLDPCI 0
set CONFIG_STALDRV 0
set CONFIG_STALLION 0
set CONFIG_ISTALLION 0
set CONFIG_A2232 0
set CONFIG_UNIX98_PTYS 0
set CONFIG_UNIX98_PTY_COUNT 256
set CONFIG_PRINTER 0
set CONFIG_LP_CONSOLE 0
set CONFIG_PPDEV 0
set CONFIG_I2C 0
set CONFIG_I2C_ALGOBIT 0
set CONFIG_I2C_PHILIPSPAR 0
set CONFIG_I2C_ELV 0
set CONFIG_I2C_VELLEMAN 0
set CONFIG_I2C_ALGOPCF 0
set CONFIG_I2C_ELEKTOR 0
set CONFIG_I2C_CHARDEV 0
set CONFIG_I2C_PROC 0
set CONFIG_BUSMOUSE 0
set CONFIG_ATIXL_BUSMOUSE 0
set CONFIG_LOGIBUSMOUSE 0
set CONFIG_MS_BUSMOUSE 0
set CONFIG_MOUSE 0
set CONFIG_PSMOUSE 0
set CONFIG_82C710_MOUSE 0
set CONFIG_PC110_PAD 0
set CONFIG_INPUT_GAMEPORT 0
set CONFIG_INPUT_NS558 0
set CONFIG_INPUT_LIGHTNING 0
set CONFIG_INPUT_PCIGAME 0
set CONFIG_INPUT_CS461X 0
set CONFIG_INPUT_EMU10K1 0
set CONFIG_INPUT_SERIO 0
set CONFIG_INPUT_SERPORT 0
set CONFIG_INPUT_ANALOG 0
set CONFIG_INPUT_A3D 0
set CONFIG_INPUT_ADI 0
set CONFIG_INPUT_COBRA 0
set CONFIG_INPUT_GF2K 0
set CONFIG_INPUT_GRIP 0
set CONFIG_INPUT_INTERACT 0
set CONFIG_INPUT_TMDC 0
set CONFIG_INPUT_SIDEWINDER 0
set CONFIG_INPUT_IFORCE_USB 0
set CONFIG_INPUT_IFORCE_232 0
set CONFIG_INPUT_WARRIOR 0
set CONFIG_INPUT_MAGELLAN 0
set CONFIG_INPUT_SPACEORB 0
set CONFIG_INPUT_SPACEBALL 0
set CONFIG_INPUT_STINGER 0
set CONFIG_INPUT_DB9 0
set CONFIG_INPUT_GAMECON 0
set CONFIG_INPUT_TURBOGRAFX 0
set CONFIG_QIC02_TAPE 0
set CONFIG_QIC02_DYNCONF 0
set CONFIG_WATCHDOG 0
set CONFIG_WATCHDOG_NOWAYOUT 0
set CONFIG_SOFT_WATCHDOG 0
set CONFIG_WDT 0
set CONFIG_WDTPCI 0
set CONFIG_WDT_501 0
set CONFIG_WDT_501_FAN 0
set CONFIG_PCWATCHDOG 0
set CONFIG_ACQUIRE_WDT 0
set CONFIG_ADVANTECH_WDT 0
set CONFIG_EUROTECH_WDT 0
set CONFIG_IB700_WDT 0
set CONFIG_I810_TCO 0
set CONFIG_MIXCOMWD 0
set CONFIG_60XX_WDT 0
set CONFIG_W83877F_WDT 0
set CONFIG_MACHZ_WDT 0
set CONFIG_INTEL_RNG 0
set CONFIG_NVRAM 0
set CONFIG_RTC 0
set CONFIG_DTLK 0
set CONFIG_R3964 0
set CONFIG_APPLICOM 0
set CONFIG_SONYPI 0
set CONFIG_FTAPE 0
set CONFIG_ZFTAPE 0
set CONFIG_ZFT_DFLT_BLK_SZ 10240
set CONFIG_FT_NR_BUFFERS 3
set CONFIG_FT_PROC_FS 0
set tmpvar_14 "(not set)"
set CONFIG_FT_NORMAL_DEBUG 0
set CONFIG_FT_FULL_DEBUG 0
set CONFIG_FT_NO_TRACE 0
set CONFIG_FT_NO_TRACE_AT_ALL 0
set tmpvar_15 "(not set)"
set CONFIG_FT_STD_FDC 0
set CONFIG_FT_MACH2 0
set CONFIG_FT_PROBE_FC10 0
set CONFIG_FT_ALT_FDC 0
set CONFIG_FT_FDC_BASE 0
set CONFIG_FT_FDC_IRQ 0
set CONFIG_FT_FDC_DMA 0
set CONFIG_FT_FDC_THR 8
set CONFIG_FT_FDC_MAX_RATE 2000
set CONFIG_AGP 0
set CONFIG_AGP_INTEL 0
set CONFIG_AGP_I810 0
set CONFIG_AGP_VIA 0
set CONFIG_AGP_AMD 0
set CONFIG_AGP_SIS 0
set CONFIG_AGP_ALI 0
set CONFIG_AGP_SWORKS 0
set CONFIG_DRM 0
set CONFIG_DRM_TDFX 0
set CONFIG_DRM_GAMMA 0
set CONFIG_DRM_R128 0
set CONFIG_DRM_RADEON 0
set CONFIG_DRM_I810 0
set CONFIG_DRM_MGA 0
set CONFIG_DRM_SIS 0
set CONFIG_PCMCIA_SERIAL_CS 0
set CONFIG_QUOTA 0
set CONFIG_AUTOFS_FS 0
set CONFIG_AUTOFS4_FS 0
set CONFIG_REISERFS_FS 0
set CONFIG_REISERFS_CHECK 0
set CONFIG_REISERFS_PROC_INFO 0
set CONFIG_ADFS_FS 0
set CONFIG_ADFS_FS_RW 0
set CONFIG_AFFS_FS 0
set CONFIG_HFS_FS 0
set CONFIG_BFS_FS 0
set CONFIG_EXT3_FS 0
set CONFIG_JBD_DEBUG 0
set CONFIG_FAT_FS 0
set CONFIG_MSDOS_FS 0
set CONFIG_UMSDOS_FS 0
set CONFIG_VFAT_FS 0
set CONFIG_EFS_FS 0
set CONFIG_JFFS_FS 0
set CONFIG_JFFS_FS_VERBOSE 0
set CONFIG_JFFS_PROC_FS 0
set CONFIG_JFFS2_FS 0
set CONFIG_JFFS2_FS_DEBUG 0
set CONFIG_CRAMFS 0
set CONFIG_TMPFS 0
set CONFIG_RAMFS 0
set CONFIG_ISO9660_FS 0
set CONFIG_JOLIET 0
set CONFIG_ZISOFS 0
set CONFIG_MINIX_FS 0
set CONFIG_VXFS_FS 0
set CONFIG_NTFS_FS 0
set CONFIG_NTFS_RW 0
set CONFIG_HPFS_FS 0
set CONFIG_PROC_FS 0
set CONFIG_DEVFS_FS 0
set CONFIG_DEVFS_MOUNT 0
set CONFIG_DEVFS_DEBUG 0
set CONFIG_DEVPTS_FS 0
set CONFIG_QNX4FS_FS 0
set CONFIG_QNX4FS_RW 0
set CONFIG_ROMFS_FS 0
set CONFIG_EXT2_FS 0
set CONFIG_SYSV_FS 0
set CONFIG_UDF_FS 0
set CONFIG_UDF_RW 0
set CONFIG_UFS_FS 0
set CONFIG_UFS_FS_WRITE 0
set CONFIG_CODA_FS 0
set CONFIG_INTERMEZZO_FS 0
set CONFIG_NFS_FS 0
set CONFIG_NFS_V3 0
set CONFIG_ROOT_NFS 0
set CONFIG_NFSD 0
set CONFIG_NFSD_V3 0
set CONFIG_SMB_FS 0
set CONFIG_SMB_NLS_DEFAULT 0
set CONFIG_SMB_NLS_REMOTE "cp437"
set CONFIG_NCP_FS 0
set CONFIG_NCPFS_PACKET_SIGNING 0
set CONFIG_NCPFS_IOCTL_LOCKING 0
set CONFIG_NCPFS_STRONG 0
set CONFIG_NCPFS_NFS_NS 0
set CONFIG_NCPFS_OS2_NS 0
set CONFIG_NCPFS_SMALLDOS 0
set CONFIG_NCPFS_NLS 0
set CONFIG_NCPFS_EXTRAS 0
set CONFIG_PARTITION_ADVANCED 0
set CONFIG_ACORN_PARTITION 0
set CONFIG_ACORN_PARTITION_ICS 0
set CONFIG_ACORN_PARTITION_ADFS 0
set CONFIG_ACORN_PARTITION_POWERTEC 0
set CONFIG_ACORN_PARTITION_RISCIX 0
set CONFIG_OSF_PARTITION 0
set CONFIG_AMIGA_PARTITION 0
set CONFIG_ATARI_PARTITION 0
set CONFIG_MAC_PARTITION 0
set CONFIG_MSDOS_PARTITION 0
set CONFIG_BSD_DISKLABEL 0
set CONFIG_MINIX_SUBPARTITION 0
set CONFIG_SOLARIS_X86_PARTITION 0
set CONFIG_UNIXWARE_DISKLABEL 0
set CONFIG_LDM_PARTITION 0
set CONFIG_LDM_DEBUG 0
set CONFIG_SGI_PARTITION 0
set CONFIG_ULTRIX_PARTITION 0
set CONFIG_SUN_PARTITION 0
set CONFIG_NLS_DEFAULT "iso8859-1"
set CONFIG_NLS_CODEPAGE_437 0
set CONFIG_NLS_CODEPAGE_737 0
set CONFIG_NLS_CODEPAGE_775 0
set CONFIG_NLS_CODEPAGE_850 0
set CONFIG_NLS_CODEPAGE_852 0
set CONFIG_NLS_CODEPAGE_855 0
set CONFIG_NLS_CODEPAGE_857 0
set CONFIG_NLS_CODEPAGE_860 0
set CONFIG_NLS_CODEPAGE_861 0
set CONFIG_NLS_CODEPAGE_862 0
set CONFIG_NLS_CODEPAGE_863 0
set CONFIG_NLS_CODEPAGE_864 0
set CONFIG_NLS_CODEPAGE_865 0
set CONFIG_NLS_CODEPAGE_866 0
set CONFIG_NLS_CODEPAGE_869 0
set CONFIG_NLS_CODEPAGE_936 0
set CONFIG_NLS_CODEPAGE_950 0
set CONFIG_NLS_CODEPAGE_932 0
set CONFIG_NLS_CODEPAGE_949 0
set CONFIG_NLS_CODEPAGE_874 0
set CONFIG_NLS_ISO8859_8 0
set CONFIG_NLS_CODEPAGE_1251 0
set CONFIG_NLS_ISO8859_1 0
set CONFIG_NLS_ISO8859_2 0
set CONFIG_NLS_ISO8859_3 0
set CONFIG_NLS_ISO8859_4 0
set CONFIG_NLS_ISO8859_5 0
set CONFIG_NLS_ISO8859_6 0
set CONFIG_NLS_ISO8859_7 0
set CONFIG_NLS_ISO8859_9 0
set CONFIG_NLS_ISO8859_13 0
set CONFIG_NLS_ISO8859_14 0
set CONFIG_NLS_ISO8859_15 0
set CONFIG_NLS_KOI8_R 0
set CONFIG_NLS_KOI8_U 0
set CONFIG_NLS_UTF8 0
set CONFIG_VGA_CONSOLE 0
set CONFIG_VIDEO_SELECT 0
set CONFIG_MDA_CONSOLE 0
set CONFIG_FB 0
set CONFIG_FB_RIVA 0
set CONFIG_FB_CLGEN 0
set CONFIG_FB_PM2 0
set CONFIG_FB_PM2_FIFO_DISCONNECT 0
set CONFIG_FB_PM2_PCI 0
set CONFIG_FB_ACORN 0
set CONFIG_FB_CLPS711X 0
set CONFIG_FB_CYBER2000 0
set CONFIG_FB_SA1100 0
set CONFIG_FB_SGIVW 0
set CONFIG_FB_MATROX 0
set CONFIG_FB_MATROX_MILLENIUM 0
set CONFIG_FB_MATROX_MYSTIQUE 0
set CONFIG_FB_MATROX_G100 0
set CONFIG_FB_MATROX_I2C 0
set CONFIG_FB_MATROX_MAVEN 0
set CONFIG_FB_MATROX_G450 0
set CONFIG_FB_MATROX_MULTIHEAD 0
set CONFIG_FB_ATY 0
set CONFIG_FB_ATY_GX 0
set CONFIG_FB_ATY_CT 0
set CONFIG_FB_RADEON 0
set CONFIG_FB_ATY128 0
set CONFIG_FB_SIS 0
set CONFIG_FB_SIS_300 0
set CONFIG_FB_SIS_315 0
set CONFIG_FB_3DFX 0
set CONFIG_FB_VOODOO1 0
set CONFIG_FB_VIRTUAL 0
set CONFIG_FBCON_ADVANCED 0
set CONFIG_FBCON_MFB 0
set CONFIG_FBCON_CFB2 0
set CONFIG_FBCON_CFB4 0
set CONFIG_FBCON_CFB8 0
set CONFIG_FBCON_CFB16 0
set CONFIG_FBCON_CFB24 0
set CONFIG_FBCON_CFB32 0
set CONFIG_FBCON_AFB 0
set CONFIG_FBCON_ILBM 0
set CONFIG_FBCON_IPLAN2P2 0
set CONFIG_FBCON_IPLAN2P4 0
set CONFIG_FBCON_IPLAN2P8 0
set CONFIG_FBCON_MAC 0
set CONFIG_FBCON_VGA_PLANES 0
set CONFIG_FBCON_VGA 0
set CONFIG_FBCON_HGA 0
set CONFIG_FBCON_FONTWIDTH8_ONLY 0
set CONFIG_FBCON_FONTS 0
set CONFIG_FONT_8x8 0
set CONFIG_FONT_8x16 0
set CONFIG_FONT_SUN8x16 0
set CONFIG_FONT_SUN12x22 0
set CONFIG_FONT_6x11 0
set CONFIG_FONT_PEARL_8x8 0
set CONFIG_FONT_ACORN_8x8 0
set CONFIG_SOUND 0
set CONFIG_SOUND_BT878 0
set CONFIG_SOUND_CMPCI 0
set CONFIG_SOUND_CMPCI_FM 0
set CONFIG_SOUND_CMPCI_FMIO 388
set CONFIG_SOUND_CMPCI_MIDI 0
set CONFIG_SOUND_CMPCI_MPUIO 330
set CONFIG_SOUND_CMPCI_JOYSTICK 0
set CONFIG_SOUND_CMPCI_CM8738 0
set CONFIG_SOUND_CMPCI_SPDIFINVERSE 0
set CONFIG_SOUND_CMPCI_SPDIFLOOP 0
set CONFIG_SOUND_CMPCI_SPEAKERS 2
set CONFIG_SOUND_CMPCI_LINE_REAR 0
set CONFIG_SOUND_CMPCI_LINE_BASS 0
set CONFIG_SOUND_EMU10K1 0
set CONFIG_MIDI_EMU10K1 0
set CONFIG_SOUND_FUSION 0
set CONFIG_SOUND_CS4281 0
set CONFIG_SOUND_ES1370 0
set CONFIG_SOUND_ES1371 0
set CONFIG_SOUND_ESSSOLO1 0
set CONFIG_SOUND_MAESTRO 0
set CONFIG_SOUND_MAESTRO3 0
set CONFIG_SOUND_ICH 0
set CONFIG_SOUND_RME96XX 0
set CONFIG_SOUND_SONICVIBES 0
set CONFIG_SOUND_VWSND 0
set CONFIG_SOUND_TRIDENT 0
set CONFIG_SOUND_MSNDCLAS 0
set CONFIG_MSNDCLAS_INIT_FILE "/etc/sound/msndinit.bin"
set CONFIG_MSNDCLAS_PERM_FILE "/etc/sound/msndperm.bin"
set CONFIG_MSNDCLAS_IRQ 5
set CONFIG_MSNDCLAS_MEM D0000
set CONFIG_MSNDCLAS_IO 290
set CONFIG_SOUND_MSNDPIN 0
set CONFIG_MSNDPIN_INIT_FILE "/etc/sound/pndspini.bin"
set CONFIG_MSNDPIN_PERM_FILE "/etc/sound/pndsperm.bin"
set CONFIG_MSNDPIN_IRQ 5
set CONFIG_MSNDPIN_MEM D0000
set CONFIG_MSNDPIN_IO 290
set CONFIG_MSNDPIN_DIGITAL 0
set CONFIG_MSNDPIN_NONPNP 0
set CONFIG_MSNDPIN_CFG 250
set CONFIG_MSNDPIN_MPU_IO 0
set CONFIG_MSNDPIN_MPU_IRQ 0
set CONFIG_MSNDPIN_IDE_IO0 0
set CONFIG_MSNDPIN_IDE_IO1 0
set CONFIG_MSNDPIN_IDE_IRQ 0
set CONFIG_MSNDPIN_JOYSTICK_IO 0
set CONFIG_MSND_FIFOSIZE 128
set CONFIG_SOUND_VIA82CXXX 0
set CONFIG_MIDI_VIA82CXXX 0
set CONFIG_SOUND_OSS 0
set CONFIG_SOUND_TRACEINIT 0
set CONFIG_SOUND_DMAP 0
set CONFIG_SOUND_AD1816 0
set CONFIG_SOUND_SGALAXY 0
set CONFIG_SOUND_ADLIB 0
set CONFIG_SOUND_ACI_MIXER 0
set CONFIG_SOUND_CS4232 0
set CONFIG_SOUND_SSCAPE 0
set CONFIG_SOUND_GUS 0
set CONFIG_SOUND_GUS16 0
set CONFIG_SOUND_GUSMAX 0
set CONFIG_SOUND_VMIDI 0
set CONFIG_SOUND_TRIX 0
set CONFIG_TRIX_HAVE_BOOT 0
set CONFIG_TRIX_BOOT_FILE "/etc/sound/trxpro.hex"
set CONFIG_SOUND_MSS 0
set CONFIG_SOUND_MPU401 0
set CONFIG_SOUND_NM256 0
set CONFIG_SOUND_MAD16 0
set CONFIG_MAD16_OLDCARD 0
set CONFIG_SOUND_PAS 0
set CONFIG_PAS_JOYSTICK 0
set CONFIG_SOUND_PSS 0
set CONFIG_PSS_MIXER 0
set CONFIG_PSS_HAVE_BOOT 0
set CONFIG_PSS_BOOT_FILE "/etc/sound/dsp001.ld"
set CONFIG_SOUND_SB 0
set CONFIG_SOUND_AWE32_SYNTH 0
set CONFIG_SOUND_WAVEFRONT 0
set CONFIG_SOUND_MAUI 0
set CONFIG_MAUI_HAVE_BOOT 0
set CONFIG_MAUI_BOOT_FILE "/etc/sound/oswf.mot"
set CONFIG_SOUND_YM3812 0
set CONFIG_SOUND_OPL3SA1 0
set CONFIG_SOUND_OPL3SA2 0
set CONFIG_SOUND_YMFPCI 0
set CONFIG_SOUND_YMFPCI_LEGACY 0
set CONFIG_SOUND_UART6850 0
set CONFIG_SOUND_AEDSP16 0
set CONFIG_SC6600 0
set CONFIG_SC6600_JOY 0
set CONFIG_SC6600_CDROM 4
set CONFIG_SC6600_CDROMBASE 0
set CONFIG_AEDSP16_SBPRO 0
set CONFIG_AEDSP16_MSS 0
set CONFIG_AEDSP16_MPU401 0
set CONFIG_SOUND_TVMIXER 0
set CONFIG_USB 0
set CONFIG_USB_DEBUG 0
set CONFIG_USB_DEVICEFS 0
set CONFIG_USB_BANDWIDTH 0
set CONFIG_USB_LONG_TIMEOUT 0
set CONFIG_USB_UHCI 0
set CONFIG_USB_UHCI_ALT 0
set CONFIG_USB_OHCI 0
set CONFIG_USB_AUDIO 0
set CONFIG_USB_BLUETOOTH 0
set CONFIG_USB_STORAGE 0
set CONFIG_USB_STORAGE_DEBUG 0
set CONFIG_USB_STORAGE_DATAFAB 0
set CONFIG_USB_STORAGE_FREECOM 0
set CONFIG_USB_STORAGE_ISD200 0
set CONFIG_USB_STORAGE_DPCM 0
set CONFIG_USB_STORAGE_HP8200e 0
set CONFIG_USB_STORAGE_SDDR09 0
set CONFIG_USB_STORAGE_JUMPSHOT 0
set CONFIG_USB_ACM 0
set CONFIG_USB_PRINTER 0
set CONFIG_USB_HID 0
set CONFIG_USB_HIDDEV 0
set CONFIG_USB_KBD 0
set CONFIG_USB_MOUSE 0
set CONFIG_USB_WACOM 0
set CONFIG_USB_DC2XX 0
set CONFIG_USB_MDC800 0
set CONFIG_USB_SCANNER 0
set CONFIG_USB_MICROTEK 0
set CONFIG_USB_HPUSBSCSI 0
set CONFIG_USB_IBMCAM 0
set CONFIG_USB_OV511 0
set CONFIG_USB_PWC 0
set CONFIG_USB_SE401 0
set CONFIG_USB_DSBR 0
set CONFIG_USB_DABUSB 0
set CONFIG_USB_PEGASUS 0
set CONFIG_USB_KAWETH 0
set CONFIG_USB_CATC 0
set CONFIG_USB_CDCETHER 0
set CONFIG_USB_USBNET 0
set CONFIG_USB_USS720 0
set CONFIG_USB_SERIAL 0
set CONFIG_USB_SERIAL_DEBUG 0
set CONFIG_USB_SERIAL_GENERIC 0
set CONFIG_USB_SERIAL_BELKIN 0
set CONFIG_USB_SERIAL_WHITEHEAT 0
set CONFIG_USB_SERIAL_DIGI_ACCELEPORT 0
set CONFIG_USB_SERIAL_EMPEG 0
set CONFIG_USB_SERIAL_FTDI_SIO 0
set CONFIG_USB_SERIAL_VISOR 0
set CONFIG_USB_SERIAL_IR 0
set CONFIG_USB_SERIAL_EDGEPORT 0
set CONFIG_USB_SERIAL_KEYSPAN_PDA 0
set CONFIG_USB_SERIAL_KEYSPAN 0
set CONFIG_USB_SERIAL_KEYSPAN_USA28 0
set CONFIG_USB_SERIAL_KEYSPAN_USA28X 0
set CONFIG_USB_SERIAL_KEYSPAN_USA28XA 0
set CONFIG_USB_SERIAL_KEYSPAN_USA28XB 0
set CONFIG_USB_SERIAL_KEYSPAN_USA19 0
set CONFIG_USB_SERIAL_KEYSPAN_USA18X 0
set CONFIG_USB_SERIAL_KEYSPAN_USA19W 0
set CONFIG_USB_SERIAL_KEYSPAN_USA49W 0
set CONFIG_USB_SERIAL_MCT_U232 0
set CONFIG_USB_SERIAL_PL2303 0
set CONFIG_USB_SERIAL_CYBERJACK 0
set CONFIG_USB_SERIAL_XIRCOM 0
set CONFIG_USB_SERIAL_OMNINET 0
set CONFIG_USB_RIO500 0
set CONFIG_FULLDEBUG 0
set CONFIG_MAGIC_SYSRQ 0
set CONFIG_CONTIGUOUS_PAGE_ALLOC 0
set CONFIG_MEM_MAP 0
set CONFIG_PROFILE 0
set CONFIG_PROFILE_SHIFT 2
set CONFIG_HIGHPROFILE 0
set CONFIG_DUMPTOFLASH 0
set CONFIG_NO_KERNEL_MSG 0
set CONFIG_SMALL_TASKS 0
set CONFIG_BDM_DISABLE 0
set CONFIG_UCLINUX 4
set CONFIG_UID16 4
set CONFIG_RWSEM_GENERIC_SPINLOCK 4
set CONFIG_RWSEM_XCHGADD_ALGORITHM 4
set CONFIG_COLDFIRE 4
set CONFIG_360QUICC 4
set CONFIG_M68360_UART 4
set CONFIG_X86_VISWS_APIC 4
set CONFIG_X86_LOCAL_APIC 4
set CONFIG_SMP 4
set CONFIG_X86_IO_APIC 4
set CONFIG_PCI_BIOS 4
set CONFIG_PCI_DIRECT 4
set CONFIG_HD64465 4
set CONFIG_HD64465_PCMCIA 4
set CONFIG_ARCH_CLPS711X 4
set CONFIG_ARCH_SA1100 4
set CONFIG_ARM 4
set CONFIG_MTD_BOOTLDR_PARTS 4
set CONFIG_MTD_AFS_PARTS 4
set CONFIG_MTD_INTELPROBE 4
set CONFIG_MTD_GEN_PROBE 4
set CONFIG_SPARC 4
set CONFIG_SPARC64 4
set CONFIG_MTD_SUN_UFLASH 4
set CONFIG_X86 4
set CONFIG_MTD_PNC2000 4
set CONFIG_MTD_SC520CDP 4
set CONFIG_MTD_NETSC520 4
set CONFIG_MTD_SBC_GXX 4
set CONFIG_MTD_ELAN_104NC 4
set CONFIG_MTD_MIXMEM 4
set CONFIG_MTD_OCTAGON 4
set CONFIG_MTD_VMAX 4
set CONFIG_MTD_L440GX 4
set CONFIG_I386 4
set CONFIG_PPC 4
set CONFIG_MTD_TQM8XXL 4
set CONFIG_TQM8xxL 4
set CONFIG_MTD_RPXLITE 4
set CONFIG_MTD_DBOX2 4
set CONFIG_MTD_CFI_INTELSTD 4
set CONFIG_MTD_CFI_FLAGADM 4
set CONFIG_MIPS 4
set CONFIG_MTD_CSTM_MIPS_IXX 4
set CONFIG_MTD_CSTM_MIPS_IXX_START 4
set CONFIG_MTD_CSTM_MIPS_IXX_LEN 4
set CONFIG_MTD_CSTM_MIPS_IXX_BUSWIDTH 4
set CONFIG_MTD_OCELOT 4
set CONFIG_MOMENCO_OCELOT 4
set CONFIG_SH 4
set CONFIG_MTD_SOLUTIONENGINE 4
set CONFIG_SH_KEYWEST 4
set CONFIG_MTD_NORA 4
set CONFIG_MTD_ARM_INTEGRATOR 4
set CONFIG_MTD_CDB89712 4
set CONFIG_ARCH_CDB89712 4
set CONFIG_MTD_SA1100 4
set CONFIG_MTD_DC21285 4
set CONFIG_ARCH_FOOTBRIDGE 4
set CONFIG_MTD_IQ80310 4
set CONFIG_ARCH_IQ80310 4
set CONFIG_SA1100_LART 4
set CONFIG_MTD_LART 4
set CONFIG_MTD_DOCPROBE 4
set CONFIG_ARCH_P720T 4
set CONFIG_MTD_NAND_SPIA 4
set CONFIG_PARPORT_PC_CML1 4
set CONFIG_PARPORT_ARC 4
set CONFIG_AMIGA 4
set CONFIG_PARPORT_AMIGA 4
set CONFIG_ZORRO 4
set CONFIG_PARPORT_MFC3 4
set CONFIG_ATARI 4
set CONFIG_PARPORT_ATARI 4
set CONFIG_GSC_LASI 4
set CONFIG_PARPORT_GSC 4
set CONFIG_SBUS 4
set CONFIG_PARPORT_SUNBPP 4
set CONFIG_SH_HD64465 4
set CONFIG_AMIGA_FLOPPY 4
set CONFIG_ATARI_FLOPPY 4
set CONFIG_MAC 4
set CONFIG_BLK_DEV_SWIM_IOP 4
set CONFIG_AMIGA_Z2RAM 4
set CONFIG_ATARI_ACSI 4
set CONFIG_ACSI_MULTI_LUN 4
set CONFIG_ATARI_SLM 4
set CONFIG_ISA 4
set CONFIG_PARIDE_PARPORT 4
set CONFIG_IP_NF_NAT_NEEDED 4
set CONFIG_IP_NF_NAT_IRC 4
set CONFIG_IP_NF_NAT_FTP 4
set CONFIG_IP_NF_NAT_PPTP 4
set CONFIG_NET_CLS_ROUTE 4
set CONFIG_BLK_DEV_HD 4
set CONFIG_BLK_DEV_IDEDISK_VENDOR 4
set CONFIG_BLK_DEV_COMMERIAL 4
set CONFIG_BLK_DEV_ADMA 4
set CONFIG_BLK_DEV_IDEDMA 4
set CONFIG_IA64 4
set CONFIG_BLK_DEV_PIIX 4
set CONFIG_PIIX_TUNING 4
set CONFIG_MIPS_ITE8172 4
set CONFIG_MIPS_IVR 4
set CONFIG_BLK_DEV_IT8172 4
set CONFIG_IT8172_TUNING 4
set CONFIG_BLK_DEV_SL82C105 4
set CONFIG_ALL_PPC 4
set CONFIG_BLK_DEV_IDE_PMAC 4
set CONFIG_BLK_DEV_IDEDMA_PMAC 4
set CONFIG_BLK_DEV_IDEDMA_PMAC_AUTO 4
set CONFIG_ARCH_ACORN 4
set CONFIG_BLK_DEV_IDE_ICSIDE 4
set CONFIG_BLK_DEV_IDEDMA_ICS 4
set CONFIG_IDEDMA_ICS_AUTO 4
set CONFIG_BLK_DEV_IDE_RAPIDE 4
set CONFIG_BLK_DEV_GAYLE 4
set CONFIG_BLK_DEV_IDEDOUBLER 4
set CONFIG_BLK_DEV_BUDDHA 4
set CONFIG_BLK_DEV_FALCON_IDE 4
set CONFIG_BLK_DEV_MAC_IDE 4
set CONFIG_Q40 4
set CONFIG_BLK_DEV_Q40IDE 4
set CONFIG_8xx 4
set CONFIG_BLK_DEV_MPC8xx_IDE 4
set CONFIG_IDEDMA_AUTO 4
set CONFIG_DMA_NONPCI 4
set CONFIG_BLK_DEV_IDE_MODES 4
set CONFIG_SGI_IP22 4
set CONFIG_SGIWD93_SCSI 4
set CONFIG_DECSTATION 4
set CONFIG_TC 4
set CONFIG_SCSI_DECNCR 4
set CONFIG_SCSI_DECSII 4
set CONFIG_SCSI_IPS 4
set CONFIG_53C700_IO_MAPPED 4
set CONFIG_PARISC 4
set CONFIG_SCSI_LASI700 4
set CONFIG_53C700_MEM_MAPPED 4
set CONFIG_53C700_LE_ON_BE 4
set CONFIG_53C700_USE_CONSISTENT 4
set CONFIG_SCSI_SEAGATE 4
set CONFIG_SCSI_ULTRASTOR 4
set CONFIG_SCSI_MESH 4
set CONFIG_SCSI_MESH_SYNC_RATE 4
set CONFIG_SCSI_MAC53C94 4
set CONFIG_SCSI_ACORNSCSI_3 4
set CONFIG_SCSI_ACORNSCSI_TAGGED_QUEUE 4
set CONFIG_SCSI_ACORNSCSI_SYNC 4
set CONFIG_SCSI_ARXESCSI 4
set CONFIG_SCSI_CUMANA_2 4
set CONFIG_SCSI_EESOXSCSI 4
set CONFIG_SCSI_POWERTECSCSI 4
set CONFIG_SCSI_CUMANA_1 4
set CONFIG_ARCH_ARC 4
set CONFIG_ARCH_A5K 4
set CONFIG_SCSI_ECOSCSI 4
set CONFIG_SCSI_OAK1 4
set CONFIG_MIPS_JAZZ 4
set CONFIG_JAZZ_ESP 4
set CONFIG_A3000_SCSI 4
set CONFIG_A4000T_SCSI 4
set CONFIG_A2091_SCSI 4
set CONFIG_GVP11_SCSI 4
set CONFIG_CYBERSTORM_SCSI 4
set CONFIG_CYBERSTORMII_SCSI 4
set CONFIG_BLZ2060_SCSI 4
set CONFIG_BLZ1230_SCSI 4
set CONFIG_FASTLANE_SCSI 4
set CONFIG_A4091_SCSI 4
set CONFIG_WARPENGINE_SCSI 4
set CONFIG_BLZ603EPLUS_SCSI 4
set CONFIG_OKTAGON_SCSI 4
set CONFIG_PCMCIA_SCSICARD 4
set CONFIG_DEV_APPLETALK 4
set CONFIG_ARM_AM79C961A 4
set CONFIG_ARCH_EBSA110 4
set CONFIG_ARM_ETHER1 4
set CONFIG_ARM_ETHER3 4
set CONFIG_ARM_ETHERH 4
set CONFIG_MACE 4
set CONFIG_MACE_AAUI_PORT 4
set CONFIG_BMAC 4
set CONFIG_GMAC 4
set CONFIG_OAKNET 4
set CONFIG_ARIADNE 4
set CONFIG_NE2K_ZORRO 4
set CONFIG_A2065 4
set CONFIG_HYDRA 4
set CONFIG_LASI_82596 4
set CONFIG_MIPS_JAZZ_SONIC 4
set CONFIG_MIPS_GT96100 4
set CONFIG_MIPS_GT96100ETH 4
set CONFIG_MIPS_AU1000 4
set CONFIG_MIPS_AU1000_ENET 4
set CONFIG_SGI_IP27 4
set CONFIG_SGI_IOC3_ETH 4
set CONFIG_IA64_SGI_SN1 4
set CONFIG_SUPERH 4
set CONFIG_STNIC 4
set CONFIG_EISA 4
set CONFIG_3C515 4
set CONFIG_OBSOLETE 4
set CONFIG_FMV18X 4
set CONFIG_SEEQ8005 4
set CONFIG_SK_G16 4
set CONFIG_AC3200 4
set CONFIG_ZNET 4
set CONFIG_ATP 4
set CONFIG_SGISEEQ 4
set CONFIG_DECLANCE 4
set CONFIG_BAGET_MIPS 4
set CONFIG_BAGETLANCE 4
set CONFIG_PPC_ISERIES 4
set CONFIG_VETH 4
set CONFIG_APPLE_AIRPORT 4
set CONFIG_NET_WIRELESS 4
set CONFIG_SBNI 4
set CONFIG_SBNI_MULTILINE 4
set CONFIG_ATM_ZATM_EXACT_TS 4
set CONFIG_ATM_IDT77252_USE_SUNI 4
set CONFIG_ATM_FORE200E_SBA 4
set CONFIG_ATM_FORE200E_SBA_DEFAULT_FW 4
set CONFIG_ATM_FORE200E_SBA_FW 4
set CONFIG_ATM_FORE200E 4
set CONFIG_ARCH_EP7211 4
set CONFIG_EP7211_IR 4
set CONFIG_SA1100_FIR 4
set ARCH 4
set CONFIG_HISAX_AMD7930 4
set CONFIG_HISAX 4
set CONFIG_ISDN_CAPI_CAPIFS 4
set CONFIG_T6963_DMA 4
set CONFIG_ATOMWIDE_SERIAL 4
set CONFIG_DUALSP_SERIAL 4
set CONFIG_SERIAL_TX3912 4
set CONFIG_SERIAL_TX3912_CONSOLE 4
set CONFIG_AU1000_UART 4
set CONFIG_AU1000_SERIAL_CONSOLE 4
set CONFIG_IT8712 4
set CONFIG_QTRONIX_KEYBOARD 4
set CONFIG_IT8172_CIR 4
set CONFIG_PC_KEYB 4
set CONFIG_IT8172_SCR0 4
set CONFIG_IT8172_SCR1 4
set CONFIG_FOOTBRIDGE 4
set CONFIG_SERIAL_21285 4
set CONFIG_SERIAL_21285_OLD 4
set CONFIG_SERIAL_21285_CONSOLE 4
set CONFIG_SERIAL_SA1100 4
set CONFIG_SERIAL_SA1100_CONSOLE 4
set CONFIG_SA1100_DEFAULT_BAUDRATE 4
set CONFIG_ARCH_INTEGRATOR 4
set CONFIG_SERIAL_AMBA 4
set CONFIG_SERIAL_INTEGRATOR 4
set CONFIG_SERIAL_AMBA_CONSOLE 4
set CONFIG_SERIAL_CLPS711X 4
set CONFIG_SERIAL_CLPS711X_CONSOLE 4
set CONFIG_ARCH_DSC21 4
set CONFIG_SERIAL_DSC21 4
set CONFIG_SERIAL_DSC21_CONSOLE 4
set CONFIG_SERIAL_CORE 4
set CONFIG_SERIAL_CORE_CONSOLE 4
set CONFIG_ITE_I2C_ALGO 4
set CONFIG_ITE_I2C_ADAP 4
set CONFIG_I2C_ALGO8XX 4
set CONFIG_RPXLITE 4
set CONFIG_RPXCLASSIC 4
set CONFIG_I2C_RPXLITE 4
set CONFIG_405 4
set CONFIG_I2C_PPC405_ALGO 4
set CONFIG_I2C_PPC405_ADAP 4
set CONFIG_ADB 4
set CONFIG_ADB_KEYBOARD 4
set CONFIG_ADBMOUSE 4
set CONFIG_INPUT 4
set CONFIG_INPUT_AMIJOY 4
set CONFIG_21285_WATCHDOG 4
set CONFIG_ARCH_NETWINDER 4
set CONFIG_977_WATCHDOG 4
set CONFIG_DS1620 4
set CONFIG_NWBUTTON 4
set CONFIG_NWBUTTON_REBOOT 4
set CONFIG_NWFLASH 4
set CONFIG_EFI_RTC 4
set CONFIG_ALPHA_BOOK1 4
set CONFIG_H8 4
set CONFIG_ZFT_COMPRESSOR 4
set CONFIG_FT_ALPHA_CLOCK 4
set CONFIG_DRM_AGP 4
set CONFIG_PCMCIA_CHRDEV 4
set CONFIG_MWAVE 4
set CONFIG_JBD 4
set CONFIG_SUNRPC 4
set CONFIG_LOCKD 4
set CONFIG_LOCKD_V4 4
set CONFIG_ZISOFS_FS 4
set CONFIG_ZLIB_FS_INFLATE 4
set CONFIG_ARCH_S390 4
set CONFIG_IBM_PARTITION 4
set CONFIG_SMB_NLS 4
set CONFIG_NLS 4
set CONFIG_FB_MQ200 4
set CONFIG_DUMMY_CONSOLE 4
set CONFIG_FB_PM2_CVPPC 4
set CONFIG_APOLLO 4
set CONFIG_FB_APOLLO 4
set CONFIG_FB_Q40 4
set CONFIG_FB_AMIGA 4
set CONFIG_FB_AMIGA_OCS 4
set CONFIG_FB_AMIGA_ECS 4
set CONFIG_FB_AMIGA_AGA 4
set CONFIG_FB_CYBER 4
set CONFIG_FB_VIRGE 4
set CONFIG_FB_RETINAZ3 4
set CONFIG_FB_FM2 4
set CONFIG_FB_ATARI 4
set CONFIG_FB_OF 4
set CONFIG_FB_CONTROL 4
set CONFIG_FB_PLATINUM 4
set CONFIG_FB_VALKYRIE 4
set CONFIG_FB_CT65550 4
set CONFIG_FB_IMSTT 4
set CONFIG_FB_S3TRIO 4
set CONFIG_FB_VGA16 4
set CONFIG_FB_STI 4
set CONFIG_FB_MAC 4
set CONFIG_HP300 4
set CONFIG_FB_HP300 4
set CONFIG_FB_TGA 4
set CONFIG_FB_VESA 4
set CONFIG_FB_HGA 4
set CONFIG_BUS_I2C 4
set CONFIG_SUN3 4
set CONFIG_SUN3X 4
set CONFIG_FB_SUN3 4
set CONFIG_FB_BWTWO 4
set CONFIG_FB_CGSIX 4
set CONFIG_SH_DREAMCAST 4
set CONFIG_FB_PVR2 4
set CONFIG_FB_PVR2_DEBUG 4
set CONFIG_FB_E1355 4
set CONFIG_E1355_REG_BASE 4
set CONFIG_E1355_FB_BASE 4
set CONFIG_FB_SBUS 4
set CONFIG_FB_CREATOR 4
set CONFIG_FB_CGTHREE 4
set CONFIG_FB_TCX 4
set CONFIG_FB_CGFOURTEEN 4
set CONFIG_FB_P9100 4
set CONFIG_FB_LEO 4
set CONFIG_FB_PCI 4
set CONFIG_FB_IGA 4
set CONFIG_HD64461 4
set CONFIG_FB_HIT 4
set CONFIG_FB_PMAG_BA 4
set CONFIG_FB_PMAGB_B 4
set CONFIG_FB_MAXINE 4
set CONFIG_NINO 4
set CONFIG_FB_TX3912 4
set CONFIG_FB_G364 4
set CONFIG_FB_TBOX 4
set CONFIG_FBCON_STI 4
set CONFIG_SOUND_IT8172 4
set CONFIG_DDB5477 4
set CONFIG_SOUND_VRC5477 4
set CONFIG_MSNDCLAS_HAVE_BOOT 4
set CONFIG_MSNDPIN_HAVE_BOOT 4
set CONFIG_ARCH_CLPS7500 4
set CONFIG_SOUND_VIDC 4
set CONFIG_SOUND_WAVEARTIST 4
set CONFIG_VIDEO_DEV 4
proc writeconfig {file1 file2} {
	set cfg [open $file1 w]
	set autocfg [open $file2 w]
	set notmod 1
	set notset 0
	puts $cfg "#"
	puts $cfg "# Automatically generated make config: don't edit"
	puts $cfg "#"
	puts $autocfg "/*"
	puts $autocfg " * Automatically generated C config: don't edit"
	puts $autocfg " */"
	puts $autocfg "#define AUTOCONF_INCLUDED"
	global CONFIG_UCLINUX
	global CONSTANT_Y
	write_tristate $cfg $autocfg CONFIG_UCLINUX $CONFIG_UCLINUX [list $notmod] 2
	global CONFIG_UID16
	write_tristate $cfg $autocfg CONFIG_UID16 $CONFIG_UID16 [list $notmod] 2
	global CONFIG_RWSEM_GENERIC_SPINLOCK
	write_tristate $cfg $autocfg CONFIG_RWSEM_GENERIC_SPINLOCK $CONFIG_RWSEM_GENERIC_SPINLOCK [list $notmod] 2
	global CONFIG_RWSEM_XCHGADD_ALGORITHM
	global CONSTANT_N
	write_tristate $cfg $autocfg CONFIG_RWSEM_XCHGADD_ALGORITHM $CONFIG_RWSEM_XCHGADD_ALGORITHM [list $notmod] 2
	write_comment $cfg $autocfg "Code maturity level options"
	global CONFIG_EXPERIMENTAL
	write_tristate $cfg $autocfg CONFIG_EXPERIMENTAL $CONFIG_EXPERIMENTAL [list $notmod] 2
	write_comment $cfg $autocfg "Loadable module support"
	global CONFIG_MODULES
	write_tristate $cfg $autocfg CONFIG_MODULES $CONFIG_MODULES [list $notmod] 2
	global CONFIG_MODVERSIONS
	if {($CONFIG_MODULES == 1)} then {write_tristate $cfg $autocfg CONFIG_MODVERSIONS $CONFIG_MODVERSIONS [list $notmod] 2 }
	global CONFIG_KMOD
	if {($CONFIG_MODULES == 1)} then {write_tristate $cfg $autocfg CONFIG_KMOD $CONFIG_KMOD [list $notmod] 2 }
	write_comment $cfg $autocfg "Processor type and features"
	global tmpvar_0
	
	if { $tmpvar_0 == "MC68000" } then { write_tristate $cfg $autocfg CONFIG_M68000 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M68000 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MC68EN302" } then { write_tristate $cfg $autocfg CONFIG_M68EN302 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M68EN302 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MC68328" } then { write_tristate $cfg $autocfg CONFIG_M68328 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M68328 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MC68EZ328" } then { write_tristate $cfg $autocfg CONFIG_M68EZ328 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M68EZ328 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MC68VZ328" } then { write_tristate $cfg $autocfg CONFIG_M68VZ328 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M68VZ328 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MC68332" } then { write_tristate $cfg $autocfg CONFIG_M68332 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M68332 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MC68360" } then { write_tristate $cfg $autocfg CONFIG_M68360 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M68360 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MCF5204" } then { write_tristate $cfg $autocfg CONFIG_M5204 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M5204 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MCF5206" } then { write_tristate $cfg $autocfg CONFIG_M5206 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M5206 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MCF5206e" } then { write_tristate $cfg $autocfg CONFIG_M5206e 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M5206e 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MCF5272" } then { write_tristate $cfg $autocfg CONFIG_M5272 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M5272 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MCF5307" } then { write_tristate $cfg $autocfg CONFIG_M5307 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M5307 0 [list $notmod] 2 }
	if { $tmpvar_0 == "MCF5407" } then { write_tristate $cfg $autocfg CONFIG_M5407 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_M5407 0 [list $notmod] 2 }
	write_comment $cfg $autocfg "Platform"
	global CONFIG_PILOT
	global CONFIG_M68328
	if {($CONFIG_M68328 == 1)} then {write_tristate $cfg $autocfg CONFIG_PILOT $CONFIG_PILOT [list $notmod] 2 }
	global CONFIG_XCOPILOT_BUGS
	if {($CONFIG_M68328 == 1) && ($CONFIG_PILOT == 1)} then {write_tristate $cfg $autocfg CONFIG_XCOPILOT_BUGS $CONFIG_XCOPILOT_BUGS [list $notmod] 2 }
	global CONFIG_KERNEL_ELF
	if {($CONFIG_M68328 == 1) && ($CONFIG_PILOT == 1)} then {write_tristate $cfg $autocfg CONFIG_KERNEL_ELF $CONFIG_KERNEL_ELF [list $notmod] 2 }
	global CONFIG_PILOT_MEMORY_DISPLAY
	if {($CONFIG_M68328 == 1) && ($CONFIG_PILOT == 1)} then {write_tristate $cfg $autocfg CONFIG_PILOT_MEMORY_DISPLAY $CONFIG_PILOT_MEMORY_DISPLAY [list $notmod] 2 }
	global CONFIG_PILOT_CONSOLE
	if {($CONFIG_M68328 == 1) && ($CONFIG_PILOT == 1)} then {write_tristate $cfg $autocfg CONFIG_PILOT_CONSOLE $CONFIG_PILOT_CONSOLE [list $notmod] 2 }
	global CONFIG_M68EZ328ADS
	global CONFIG_M68EZ328
	if {($CONFIG_M68EZ328 == 1)} then {write_tristate $cfg $autocfg CONFIG_M68EZ328ADS $CONFIG_M68EZ328ADS [list $notmod] 2 }
	global CONFIG_ALMA_ANS
	if {($CONFIG_M68EZ328 == 1)} then {write_tristate $cfg $autocfg CONFIG_ALMA_ANS $CONFIG_ALMA_ANS [list $notmod] 2 }
	global CONFIG_UCSIMM
	if {($CONFIG_M68EZ328 == 1)} then {write_tristate $cfg $autocfg CONFIG_UCSIMM $CONFIG_UCSIMM [list $notmod] 2 }
	if {($CONFIG_M68EZ328 == 1)} then {write_tristate $cfg $autocfg CONFIG_PILOT $CONFIG_PILOT [list $notmod] 2 }
	global CONFIG_UCDIMM
	global CONFIG_M68VZ328
	if {($CONFIG_M68VZ328 == 1)} then {write_tristate $cfg $autocfg CONFIG_UCDIMM $CONFIG_UCDIMM [list $notmod] 2 }
	global CONFIG_DRAGEN2
	if {($CONFIG_M68VZ328 == 1)} then {write_tristate $cfg $autocfg CONFIG_DRAGEN2 $CONFIG_DRAGEN2 [list $notmod] 2 }
	global CONFIG_HWADDR_FROMEEPROM
	if {($CONFIG_M68VZ328 == 1) && ($CONFIG_DRAGEN2 == 1)} then {write_tristate $cfg $autocfg CONFIG_HWADDR_FROMEEPROM $CONFIG_HWADDR_FROMEEPROM [list $notmod] 2 }
	global CONFIG_HWADDR_OFFSET
	if {($CONFIG_M68VZ328 == 1) && ($CONFIG_DRAGEN2 == 1) && ($CONFIG_HWADDR_FROMEEPROM == 1)} then {write_int $cfg $autocfg CONFIG_HWADDR_OFFSET $CONFIG_HWADDR_OFFSET $notmod }
	global CONFIG_APLIO
	global CONFIG_M68EN302
	if {($CONFIG_M68EN302 == 1)} then {write_tristate $cfg $autocfg CONFIG_APLIO $CONFIG_APLIO [list $notmod] 2 }
	global CONFIG_APLIO_PRO
	if {($CONFIG_M68EN302 == 1) && ($CONFIG_APLIO == 1)} then {write_tristate $cfg $autocfg CONFIG_APLIO_PRO $CONFIG_APLIO_PRO [list $notmod] 2 }
	global CONFIG_APLIO_ENTRECOTE
	if {($CONFIG_M68EN302 == 1) && ($CONFIG_APLIO == 1)} then {write_tristate $cfg $autocfg CONFIG_APLIO_ENTRECOTE $CONFIG_APLIO_ENTRECOTE [list $notmod] 2 }
	global CONFIG_SHGLCORE
	global CONFIG_M68332
	if {($CONFIG_M68332 == 1)} then {write_tristate $cfg $autocfg CONFIG_SHGLCORE $CONFIG_SHGLCORE [list $notmod] 2 }
	global CONFIG_SHGLCORE_2MEG
	if {($CONFIG_M68332 == 1) && ($CONFIG_SHGLCORE == 1)} then {write_tristate $cfg $autocfg CONFIG_SHGLCORE_2MEG $CONFIG_SHGLCORE_2MEG [list $notmod] 2 }
	global CONFIG_COLDFIRE
	global CONFIG_M5204
	if {($CONFIG_M5204 == 1)} then {write_tristate $cfg $autocfg CONFIG_COLDFIRE $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_M5206
	if {($CONFIG_M5206 == 1)} then {write_tristate $cfg $autocfg CONFIG_COLDFIRE $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_ARNEWSH
	if {($CONFIG_M5206 == 1)} then {write_tristate $cfg $autocfg CONFIG_ARNEWSH $CONFIG_ARNEWSH [list $notmod] 2 }
	global CONFIG_M5206e
	if {($CONFIG_M5206e == 1)} then {write_tristate $cfg $autocfg CONFIG_COLDFIRE $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_CADRE3
	if {($CONFIG_M5206e == 1)} then {write_tristate $cfg $autocfg CONFIG_CADRE3 $CONFIG_CADRE3 [list $notmod] 2 }
	global CONFIG_ELITE
	if {($CONFIG_M5206e == 1)} then {write_tristate $cfg $autocfg CONFIG_ELITE $CONFIG_ELITE [list $notmod] 2 }
	global CONFIG_SMALL
	if {($CONFIG_M5206e == 1) && ($CONFIG_ELITE == 1)} then {write_tristate $cfg $autocfg CONFIG_SMALL $CONFIG_SMALL [list $notmod] 2 }
	global CONFIG_NETtel
	if {($CONFIG_M5206e == 1)} then {write_tristate $cfg $autocfg CONFIG_NETtel $CONFIG_NETtel [list $notmod] 2 }
	global CONFIG_TELOS
	if {($CONFIG_M5206e == 1)} then {write_tristate $cfg $autocfg CONFIG_TELOS $CONFIG_TELOS [list $notmod] 2 }
	global CONFIG_CFV240
	if {($CONFIG_M5206e == 1)} then {write_tristate $cfg $autocfg CONFIG_CFV240 $CONFIG_CFV240 [list $notmod] 2 }
	global CONFIG_M5272
	if {($CONFIG_M5272 == 1)} then {write_tristate $cfg $autocfg CONFIG_COLDFIRE $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_MOTOROLA
	if {($CONFIG_M5272 == 1)} then {write_tristate $cfg $autocfg CONFIG_MOTOROLA $CONFIG_MOTOROLA [list $notmod] 2 }
	if {($CONFIG_M5272 == 1)} then {write_tristate $cfg $autocfg CONFIG_NETtel $CONFIG_NETtel [list $notmod] 2 }
	global CONFIG_RESETSWITCH
	if {($CONFIG_M5272 == 1) && ($CONFIG_NETtel == 1 || $CONFIG_NETtel == 4)} then {write_tristate $cfg $autocfg CONFIG_RESETSWITCH $CONFIG_RESETSWITCH [list $CONFIG_NETtel] 2 }
	global CONFIG_MARCONINAP
	if {($CONFIG_M5272 == 1)} then {write_tristate $cfg $autocfg CONFIG_MARCONINAP $CONFIG_MARCONINAP [list $notmod] 2 }
	global CONFIG_ROMFS_FROM_ROM
	if {($CONFIG_M5272 == 1)} then {write_tristate $cfg $autocfg CONFIG_ROMFS_FROM_ROM $CONFIG_ROMFS_FROM_ROM [list $notmod] 2 }
	global CONFIG_M5307
	if {($CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_COLDFIRE $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_ARNEWSH $CONFIG_ARNEWSH [list $notmod] 2 }
	if {($CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_NETtel $CONFIG_NETtel [list $notmod] 2 }
	global CONFIG_eLIA
	if {($CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_eLIA $CONFIG_eLIA [list $notmod] 2 }
	global CONFIG_DISKtel
	if {($CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_DISKtel $CONFIG_DISKtel [list $notmod] 2 }
	global CONFIG_SNAPGEAR
	if {($CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_SNAPGEAR $CONFIG_SNAPGEAR [list $notmod] 2 }
	global CONFIG_SECUREEDGEMP3
	if {($CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_SECUREEDGEMP3 $CONFIG_SECUREEDGEMP3 [list $notmod] 2 }
	if {($CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_CADRE3 $CONFIG_CADRE3 [list $notmod] 2 }
	global CONFIG_CLEOPATRA
	if {($CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_CLEOPATRA $CONFIG_CLEOPATRA [list $notmod] 2 }
	global CONFIG_OLDMASK
	if {($CONFIG_M5307 == 1)} then {write_tristate $cfg $autocfg CONFIG_OLDMASK $CONFIG_OLDMASK [list $notmod] 2 }
	global CONFIG_M5407
	if {($CONFIG_M5407 == 1)} then {write_tristate $cfg $autocfg CONFIG_COLDFIRE $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_M5407 == 1)} then {write_tristate $cfg $autocfg CONFIG_MOTOROLA $CONFIG_MOTOROLA [list $notmod] 2 }
	if {($CONFIG_M5407 == 1)} then {write_tristate $cfg $autocfg CONFIG_CLEOPATRA $CONFIG_CLEOPATRA [list $notmod] 2 }
	global CONFIG_360QUICC
	global CONFIG_M68360
	if {($CONFIG_M68360 == 1)} then {write_tristate $cfg $autocfg CONFIG_360QUICC $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_UCQUICC
	if {($CONFIG_M68360 == 1)} then {write_tristate $cfg $autocfg CONFIG_UCQUICC $CONFIG_UCQUICC [list $notmod] 2 }
	global CONFIG_M68360_SMC_UART
	if {($CONFIG_360QUICC == 1)} then {write_tristate $cfg $autocfg CONFIG_M68360_SMC_UART $CONFIG_M68360_SMC_UART [list $notmod] 2 }
	global CONFIG_M68360_SCC_UART
	if {($CONFIG_360QUICC == 1)} then {write_tristate $cfg $autocfg CONFIG_M68360_SCC_UART $CONFIG_M68360_SCC_UART [list $notmod] 2 }
	global CONFIG_M68360_UART
	if {($CONFIG_360QUICC == 1) && ($CONFIG_M68360_SMC_UART == 1 || $CONFIG_M68360_SCC_UART == 1)} then {write_tristate $cfg $autocfg CONFIG_M68360_UART $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_INIT_LCD
	if {($CONFIG_UCSIMM == 1 || $CONFIG_UCDIMM == 1 || $CONFIG_DRAGEN2 == 1)} then {write_tristate $cfg $autocfg CONFIG_INIT_LCD $CONFIG_INIT_LCD [list $notmod] 2 }
	global CONFIG_MEMORY_RESERVE
	if {($CONFIG_UCSIMM == 1 || $CONFIG_UCDIMM == 1 || $CONFIG_DRAGEN2 == 1)} then {write_int $cfg $autocfg CONFIG_MEMORY_RESERVE $CONFIG_MEMORY_RESERVE $notmod }
	global tmpvar_1
	
	if { $tmpvar_1 == "AUTO" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_AUTO 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_AUTO 0 [list $notmod] 2 }
	if { $tmpvar_1 == "16MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_16MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_16MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "20MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_20MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_20MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "25MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_25MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_25MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "33MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_33MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_33MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "40MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_40MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_40MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "45MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_45MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_45MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "50MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_50MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_50MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "54MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_54MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_54MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "60MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_60MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_60MHz 0 [list $notmod] 2 }
	if { $tmpvar_1 == "66MHz" } then { write_tristate $cfg $autocfg CONFIG_CLOCK_66MHz 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CLOCK_66MHz 0 [list $notmod] 2 }
	global tmpvar_2
	
	if { $tmpvar_2 == "AUTO" } then { write_tristate $cfg $autocfg CONFIG_RAMAUTO 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAMAUTO 0 [list $notmod] 2 }
	if { $tmpvar_2 == "4MB" } then { write_tristate $cfg $autocfg CONFIG_RAM4MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAM4MB 0 [list $notmod] 2 }
	if { $tmpvar_2 == "8MB" } then { write_tristate $cfg $autocfg CONFIG_RAM8MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAM8MB 0 [list $notmod] 2 }
	if { $tmpvar_2 == "16MB" } then { write_tristate $cfg $autocfg CONFIG_RAM16MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAM16MB 0 [list $notmod] 2 }
	if { $tmpvar_2 == "32MB" } then { write_tristate $cfg $autocfg CONFIG_RAM32MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAM32MB 0 [list $notmod] 2 }
	global tmpvar_3
	
	if { $tmpvar_3 == "AUTO" } then { write_tristate $cfg $autocfg CONFIG_AUTOBIT 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_AUTOBIT 0 [list $notmod] 2 }
	if { $tmpvar_3 == "8bit" } then { write_tristate $cfg $autocfg CONFIG_RAM8BIT 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAM8BIT 0 [list $notmod] 2 }
	if { $tmpvar_3 == "16bit" } then { write_tristate $cfg $autocfg CONFIG_RAM16BIT 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAM16BIT 0 [list $notmod] 2 }
	if { $tmpvar_3 == "32bit" } then { write_tristate $cfg $autocfg CONFIG_RAM32bit 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAM32bit 0 [list $notmod] 2 }
	global tmpvar_4
	
	if { $tmpvar_4 == "NONE" } then { write_tristate $cfg $autocfg CONFIG_NOFLASH 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_NOFLASH 0 [list $notmod] 2 }
	if { $tmpvar_4 == "AMD" } then { write_tristate $cfg $autocfg CONFIG_AMDFLASH 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_AMDFLASH 0 [list $notmod] 2 }
	if { $tmpvar_4 == "INTEL" } then { write_tristate $cfg $autocfg CONFIG_INTELFLASH 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_INTELFLASH 0 [list $notmod] 2 }
	global tmpvar_5
	global CONFIG_AMDFLASH
	global CONFIG_INTELFLASH
	if {($CONFIG_AMDFLASH == 1 || $CONFIG_INTELFLASH == 1)} then {
	if { $tmpvar_5 == "AUTO" } then { write_tristate $cfg $autocfg CONFIG_FLASHAUTO 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASHAUTO 0 [list $notmod] 2 }
	if { $tmpvar_5 == "128KB" } then { write_tristate $cfg $autocfg CONFIG_FLASH128KB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH128KB 0 [list $notmod] 2 }
	if { $tmpvar_5 == "1MB" } then { write_tristate $cfg $autocfg CONFIG_FLASH1MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH1MB 0 [list $notmod] 2 }
	if { $tmpvar_5 == "2MB" } then { write_tristate $cfg $autocfg CONFIG_FLASH2MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH2MB 0 [list $notmod] 2 }
	if { $tmpvar_5 == "4MB" } then { write_tristate $cfg $autocfg CONFIG_FLASH4MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH4MB 0 [list $notmod] 2 }
	if { $tmpvar_5 == "6MB" } then { write_tristate $cfg $autocfg CONFIG_FLASH6MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH6MB 0 [list $notmod] 2 }
	if { $tmpvar_5 == "8MB" } then { write_tristate $cfg $autocfg CONFIG_FLASH8MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH8MB 0 [list $notmod] 2 }
	if { $tmpvar_5 == "16MB" } then { write_tristate $cfg $autocfg CONFIG_FLASH16MB 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH16MB 0 [list $notmod] 2 }}
	global tmpvar_6
	if {($CONFIG_AMDFLASH == 1 || $CONFIG_INTELFLASH == 1)} then {
	if { $tmpvar_6 == "AUTO" } then { write_tristate $cfg $autocfg CONFIG_FLASHAUTOBIT 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASHAUTOBIT 0 [list $notmod] 2 }
	if { $tmpvar_6 == "8bit" } then { write_tristate $cfg $autocfg CONFIG_FLASH8BIT 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH8BIT 0 [list $notmod] 2 }
	if { $tmpvar_6 == "16bit" } then { write_tristate $cfg $autocfg CONFIG_FLASH16BIT 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH16BIT 0 [list $notmod] 2 }
	if { $tmpvar_6 == "32bit" } then { write_tristate $cfg $autocfg CONFIG_FLASH32bit 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FLASH32bit 0 [list $notmod] 2 }}
	global CONFIG_EXTRA_FLASH1MB
	global CONFIG_FLASH1MB
	if {($CONFIG_AMDFLASH == 1 || $CONFIG_INTELFLASH == 1) && ($CONFIG_FLASH1MB == 1)} then {write_tristate $cfg $autocfg CONFIG_EXTRA_FLASH1MB $CONFIG_EXTRA_FLASH1MB [list $notmod] 2 }
	global tmpvar_7
	
	if { $tmpvar_7 == "RAM" } then { write_tristate $cfg $autocfg CONFIG_RAMKERNEL 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_RAMKERNEL 0 [list $notmod] 2 }
	if { $tmpvar_7 == "ROM" } then { write_tristate $cfg $autocfg CONFIG_ROMKERNEL 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_ROMKERNEL 0 [list $notmod] 2 }
	if { $tmpvar_7 == "HIMEM" } then { write_tristate $cfg $autocfg CONFIG_HIMEMKERNEL 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_HIMEMKERNEL 0 [list $notmod] 2 }
	write_comment $cfg $autocfg "General setup"
	global CONFIG_NET
	write_tristate $cfg $autocfg CONFIG_NET $CONFIG_NET [list $notmod] 2
	global CONFIG_VISWS
	write_tristate $cfg $autocfg CONFIG_VISWS $CONFIG_VISWS [list $notmod] 2
	global CONFIG_X86_VISWS_APIC
	if {($CONFIG_VISWS == 1)} then {write_tristate $cfg $autocfg CONFIG_X86_VISWS_APIC $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_X86_LOCAL_APIC
	if {($CONFIG_VISWS == 1)} then {write_tristate $cfg $autocfg CONFIG_X86_LOCAL_APIC $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_PCI
	if {($CONFIG_VISWS == 1)} then {write_tristate $cfg $autocfg CONFIG_PCI $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_VISWS != 1)} then {write_tristate $cfg $autocfg CONFIG_PCI $CONFIG_PCI [list $notmod] 2 }
	global tmpvar_8
	if {($CONFIG_VISWS != 1) && ($CONFIG_PCI == 1)} then {
	if { $tmpvar_8 == "BIOS" } then { write_tristate $cfg $autocfg CONFIG_PCI_GOBIOS 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_PCI_GOBIOS 0 [list $notmod] 2 }
	if { $tmpvar_8 == "Direct" } then { write_tristate $cfg $autocfg CONFIG_PCI_GODIRECT 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_PCI_GODIRECT 0 [list $notmod] 2 }
	if { $tmpvar_8 == "Any" } then { write_tristate $cfg $autocfg CONFIG_PCI_GOANY 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_PCI_GOANY 0 [list $notmod] 2 }}
	global CONFIG_PCI_BIOS
	global CONFIG_PCI_GOBIOS
	global CONFIG_PCI_GOANY
	if {($CONFIG_VISWS != 1) && ($CONFIG_PCI == 1) && ($CONFIG_PCI_GOBIOS == 1 || $CONFIG_PCI_GOANY == 1)} then {write_tristate $cfg $autocfg CONFIG_PCI_BIOS $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_PCI_DIRECT
	global CONFIG_PCI_GODIRECT
	if {($CONFIG_VISWS != 1) && ($CONFIG_PCI == 1) && ($CONFIG_PCI_GODIRECT == 1 || $CONFIG_PCI_GOANY == 1)} then {write_tristate $cfg $autocfg CONFIG_PCI_DIRECT $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_PCI_NAMES
	if {($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_PCI_NAMES $CONFIG_PCI_NAMES [list $notmod] 2 }
	global CONFIG_MCA
	if {($CONFIG_VISWS != 1)} then {write_tristate $cfg $autocfg CONFIG_MCA $CONFIG_MCA [list $notmod] 2 }
	global CONFIG_HOTPLUG
	write_tristate $cfg $autocfg CONFIG_HOTPLUG $CONFIG_HOTPLUG [list $notmod] 2
	if {($CONFIG_HOTPLUG == 1)} then {write_comment $cfg $autocfg "PCMCIA/CardBus support"}
	global CONFIG_PCMCIA
	if {($CONFIG_HOTPLUG == 1)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA $CONFIG_PCMCIA [list $notmod] 2 }
	global CONFIG_CARDBUS
	if {($CONFIG_HOTPLUG == 1) && ($CONFIG_PCMCIA != 0) && ($CONFIG_PCI != 0)} then {write_tristate $cfg $autocfg CONFIG_CARDBUS $CONFIG_CARDBUS [list $notmod] 2 }
	global CONFIG_I82092
	if {($CONFIG_HOTPLUG == 1) && ($CONFIG_PCMCIA != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_I82092 $CONFIG_I82092 [list $CONFIG_PCI] 2 }
	global CONFIG_I82365
	if {($CONFIG_HOTPLUG == 1) && ($CONFIG_PCMCIA != 0)} then {write_tristate $cfg $autocfg CONFIG_I82365 $CONFIG_I82365 [list $notmod] 2 }
	global CONFIG_TCIC
	if {($CONFIG_HOTPLUG == 1) && ($CONFIG_PCMCIA != 0)} then {write_tristate $cfg $autocfg CONFIG_TCIC $CONFIG_TCIC [list $notmod] 2 }
	global CONFIG_PCMCIA_CLPS6700
	global CONFIG_ARCH_CLPS711X
	if {($CONFIG_HOTPLUG == 1) && ($CONFIG_ARCH_CLPS711X == 1 || $CONFIG_ARCH_CLPS711X == 2 || $CONFIG_ARCH_CLPS711X == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_CLPS6700 $CONFIG_PCMCIA_CLPS6700 [list $CONFIG_ARCH_CLPS711X $CONFIG_PCMCIA] 2 }
	global CONFIG_PCMCIA_SA1100
	global CONFIG_ARCH_SA1100
	if {($CONFIG_HOTPLUG == 1) && ($CONFIG_ARCH_SA1100 == 1 || $CONFIG_ARCH_SA1100 == 2 || $CONFIG_ARCH_SA1100 == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_SA1100 $CONFIG_PCMCIA_SA1100 [list $CONFIG_ARCH_SA1100 $CONFIG_PCMCIA] 2 }
	if {($CONFIG_HOTPLUG != 1)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA $CONSTANT_N [list $notmod] 2 }
	global CONFIG_SYSVIPC
	write_tristate $cfg $autocfg CONFIG_SYSVIPC $CONFIG_SYSVIPC [list $notmod] 2
	global CONFIG_BSD_PROCESS_ACCT
	write_tristate $cfg $autocfg CONFIG_BSD_PROCESS_ACCT $CONFIG_BSD_PROCESS_ACCT [list $notmod] 2
	global CONFIG_SYSCTL
	write_tristate $cfg $autocfg CONFIG_SYSCTL $CONFIG_SYSCTL [list $notmod] 2
	global tmpvar_9
	global CONFIG_PROC_FS
	if {($CONFIG_PROC_FS == 1)} then {
	if { $tmpvar_9 == "ELF" } then { write_tristate $cfg $autocfg CONFIG_KCORE_ELF 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_KCORE_ELF 0 [list $notmod] 2 }
	if { $tmpvar_9 == "A.OUT" } then { write_tristate $cfg $autocfg CONFIG_KCORE_AOUT 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_KCORE_AOUT 0 [list $notmod] 2 }}
	global CONFIG_BINFMT_FLAT
	write_tristate $cfg $autocfg CONFIG_BINFMT_FLAT $CONFIG_BINFMT_FLAT [list $notmod] 2
	global CONFIG_BINFMT_ZFLAT
	if {($CONFIG_BINFMT_FLAT != 0)} then {write_tristate $cfg $autocfg CONFIG_BINFMT_ZFLAT $CONFIG_BINFMT_ZFLAT [list $notmod] 2 }
	global CONFIG_BINFMT_AOUT
	write_tristate $cfg $autocfg CONFIG_BINFMT_AOUT $CONFIG_BINFMT_AOUT [list $notmod] 2
	global CONFIG_BINFMT_ELF
	write_tristate $cfg $autocfg CONFIG_BINFMT_ELF $CONFIG_BINFMT_ELF [list $notmod] 2
	global CONFIG_BINFMT_MISC
	write_tristate $cfg $autocfg CONFIG_BINFMT_MISC $CONFIG_BINFMT_MISC [list $notmod] 2
	global CONFIG_PM
	write_tristate $cfg $autocfg CONFIG_PM $CONFIG_PM [list $notmod] 2
	global CONFIG_ACPI
	if {($CONFIG_PM == 1 || $CONFIG_PM == 4)} then {write_tristate $cfg $autocfg CONFIG_ACPI $CONFIG_ACPI [list $CONFIG_PM] 2 }
	global CONFIG_ACPI_INTERPRETER
	if {($CONFIG_ACPI != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_ACPI_INTERPRETER $CONFIG_ACPI_INTERPRETER [list $notmod] 2 }
	global CONFIG_ACPI_S1_SLEEP
	if {($CONFIG_ACPI != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_ACPI_S1_SLEEP $CONFIG_ACPI_S1_SLEEP [list $notmod] 2 }
	global CONFIG_APM
	if {($CONFIG_PM == 1 || $CONFIG_PM == 2 || $CONFIG_PM == 4)} then {write_tristate $cfg $autocfg CONFIG_APM $CONFIG_APM [list $CONFIG_PM] 2 }
	global CONFIG_APM_IGNORE_USER_SUSPEND
	if {($CONFIG_APM != 0)} then {write_tristate $cfg $autocfg CONFIG_APM_IGNORE_USER_SUSPEND $CONFIG_APM_IGNORE_USER_SUSPEND [list $notmod] 2 }
	global CONFIG_APM_DO_ENABLE
	if {($CONFIG_APM != 0)} then {write_tristate $cfg $autocfg CONFIG_APM_DO_ENABLE $CONFIG_APM_DO_ENABLE [list $notmod] 2 }
	global CONFIG_APM_CPU_IDLE
	if {($CONFIG_APM != 0)} then {write_tristate $cfg $autocfg CONFIG_APM_CPU_IDLE $CONFIG_APM_CPU_IDLE [list $notmod] 2 }
	global CONFIG_APM_DISPLAY_BLANK
	if {($CONFIG_APM != 0)} then {write_tristate $cfg $autocfg CONFIG_APM_DISPLAY_BLANK $CONFIG_APM_DISPLAY_BLANK [list $notmod] 2 }
	global CONFIG_APM_RTC_IS_GMT
	if {($CONFIG_APM != 0)} then {write_tristate $cfg $autocfg CONFIG_APM_RTC_IS_GMT $CONFIG_APM_RTC_IS_GMT [list $notmod] 2 }
	global CONFIG_APM_ALLOW_INTS
	if {($CONFIG_APM != 0)} then {write_tristate $cfg $autocfg CONFIG_APM_ALLOW_INTS $CONFIG_APM_ALLOW_INTS [list $notmod] 2 }
	global CONFIG_APM_REAL_MODE_POWER_OFF
	if {($CONFIG_APM != 0)} then {write_tristate $cfg $autocfg CONFIG_APM_REAL_MODE_POWER_OFF $CONFIG_APM_REAL_MODE_POWER_OFF [list $notmod] 2 }
	write_comment $cfg $autocfg "Memory Technology Devices (MTD)"
	global CONFIG_MTD
	write_tristate $cfg $autocfg CONFIG_MTD $CONFIG_MTD [list $notmod] 2
	global CONFIG_MTD_DEBUG
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2)} then {write_tristate $cfg $autocfg CONFIG_MTD_DEBUG $CONFIG_MTD_DEBUG [list $notmod] 2 }
	global CONFIG_MTD_DEBUG_VERBOSE
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DEBUG == 1)} then {write_int $cfg $autocfg CONFIG_MTD_DEBUG_VERBOSE $CONFIG_MTD_DEBUG_VERBOSE $notmod }
	global CONFIG_MTD_PARTITIONS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_PARTITIONS $CONFIG_MTD_PARTITIONS [list $CONFIG_MTD] 2 }
	global CONFIG_MTD_REDBOOT_PARTS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_PARTITIONS == 1 || $CONFIG_MTD_PARTITIONS == 2 || $CONFIG_MTD_PARTITIONS == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_REDBOOT_PARTS $CONFIG_MTD_REDBOOT_PARTS [list $CONFIG_MTD_PARTITIONS] 2 }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2)} then {write_comment $cfg $autocfg "User Modules And Translation Layers"}
	global CONFIG_MTD_CHAR
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_CHAR $CONFIG_MTD_CHAR [list $CONFIG_MTD] 2 }
	global CONFIG_MTD_BLOCK
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_BLOCK $CONFIG_MTD_BLOCK [list $CONFIG_MTD] 2 }
	global CONFIG_MTD_BLOCK_RO
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_BLOCK == 0 || $CONFIG_MTD_BLOCK == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_BLOCK_RO $CONFIG_MTD_BLOCK_RO [list $CONFIG_MTD] 2 }
	global CONFIG_FTL
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_FTL $CONFIG_FTL [list $CONFIG_MTD] 2 }
	global CONFIG_NFTL
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_NFTL $CONFIG_NFTL [list $CONFIG_MTD] 2 }
	global CONFIG_NFTL_RW
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_NFTL == 1 || $CONFIG_NFTL == 2)} then {write_tristate $cfg $autocfg CONFIG_NFTL_RW $CONFIG_NFTL_RW [list $notmod] 2 }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2)} then {write_comment $cfg $autocfg "RAM/ROM/Flash chip drivers"}
	global CONFIG_MTD_CFI
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_CFI $CONFIG_MTD_CFI [list $CONFIG_MTD] 2 }
	global CONFIG_MTD_JEDECPROBE
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_JEDECPROBE $CONFIG_MTD_JEDECPROBE [list $CONFIG_MTD] 2 }
	global CONFIG_MTD_GEN_PROBE
	global CONFIG_MTD_INTELPROBE
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_CFI == 1 || $CONFIG_MTD_INTELPROBE == 1 || $CONFIG_MTD_JEDECPROBE == 1)} then {write_tristate $cfg $autocfg CONFIG_MTD_GEN_PROBE $CONSTANT_Y [list $notmod] 2 }
	global CONSTANT_M
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_CFI != 1 && $CONFIG_MTD_INTELPROBE != 1 && $CONFIG_MTD_JEDECPROBE != 1) && ($CONFIG_MTD_CFI == 2 || $CONFIG_MTD_INTELPROBE == 2 || $CONFIG_MTD_JEDECPROBE == 2)} then {write_tristate $cfg $autocfg CONFIG_MTD_GEN_PROBE $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_CFI != 1 && $CONFIG_MTD_INTELPROBE != 1 && $CONFIG_MTD_JEDECPROBE != 1) && ($CONFIG_MTD_CFI != 2 && $CONFIG_MTD_INTELPROBE != 2 && $CONFIG_MTD_JEDECPROBE != 2)} then {write_tristate $cfg $autocfg CONFIG_MTD_GEN_PROBE $CONSTANT_N [list $notmod] 2 }
	global CONFIG_MTD_CFI_ADV_OPTIONS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2)} then {write_tristate $cfg $autocfg CONFIG_MTD_CFI_ADV_OPTIONS $CONFIG_MTD_CFI_ADV_OPTIONS [list $notmod] 2 }
	global tmpvar_10
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1)} then {
	if { $tmpvar_10 == "NO" } then { write_tristate $cfg $autocfg CONFIG_MTD_CFI_NOSWAP 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_MTD_CFI_NOSWAP 0 [list $notmod] 2 }
	if { $tmpvar_10 == "BIG_ENDIAN_BYTE" } then { write_tristate $cfg $autocfg CONFIG_MTD_CFI_BE_BYTE_SWAP 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_MTD_CFI_BE_BYTE_SWAP 0 [list $notmod] 2 }
	if { $tmpvar_10 == "LITTLE_ENDIAN_BYTE" } then { write_tristate $cfg $autocfg CONFIG_MTD_CFI_LE_BYTE_SWAP 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_MTD_CFI_LE_BYTE_SWAP 0 [list $notmod] 2 }}
	global CONFIG_MTD_CFI_GEOMETRY
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1)} then {write_tristate $cfg $autocfg CONFIG_MTD_CFI_GEOMETRY $CONFIG_MTD_CFI_GEOMETRY [list $notmod] 2 }
	global CONFIG_MTD_CFI_B1
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1)} then {write_tristate $cfg $autocfg CONFIG_MTD_CFI_B1 $CONFIG_MTD_CFI_B1 [list $notmod] 2 }
	global CONFIG_MTD_CFI_B2
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1)} then {write_tristate $cfg $autocfg CONFIG_MTD_CFI_B2 $CONFIG_MTD_CFI_B2 [list $notmod] 2 }
	global CONFIG_MTD_CFI_B4
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1)} then {write_tristate $cfg $autocfg CONFIG_MTD_CFI_B4 $CONFIG_MTD_CFI_B4 [list $notmod] 2 }
	global CONFIG_MTD_CFI_I1
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1) && ($CONFIG_MTD_CFI_B1 == 1)} then {write_tristate $cfg $autocfg CONFIG_MTD_CFI_I1 $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1) && ($CONFIG_MTD_CFI_B1 != 1)} then {write_tristate $cfg $autocfg CONFIG_MTD_CFI_I1 $CONFIG_MTD_CFI_I1 [list $notmod] 2 }
	global CONFIG_MTD_CFI_I2
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1)} then {write_tristate $cfg $autocfg CONFIG_MTD_CFI_I2 $CONFIG_MTD_CFI_I2 [list $notmod] 2 }
	global CONFIG_MTD_CFI_I4
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2) && ($CONFIG_MTD_CFI_ADV_OPTIONS == 1) && ($CONFIG_MTD_CFI_GEOMETRY == 1)} then {write_tristate $cfg $autocfg CONFIG_MTD_CFI_I4 $CONFIG_MTD_CFI_I4 [list $notmod] 2 }
	global CONFIG_MTD_CFI_INTELEXT
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2 || $CONFIG_MTD_GEN_PROBE == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_CFI_INTELEXT $CONFIG_MTD_CFI_INTELEXT [list $CONFIG_MTD_GEN_PROBE] 2 }
	global CONFIG_MTD_CFI_AMDSTD
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_GEN_PROBE == 1 || $CONFIG_MTD_GEN_PROBE == 2 || $CONFIG_MTD_GEN_PROBE == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_CFI_AMDSTD $CONFIG_MTD_CFI_AMDSTD [list $CONFIG_MTD_GEN_PROBE] 2 }
	global CONFIG_MTD_RAM
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_RAM $CONFIG_MTD_RAM [list $CONFIG_MTD] 2 }
	global CONFIG_MTD_ROM
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_ROM $CONFIG_MTD_ROM [list $CONFIG_MTD] 2 }
	global CONFIG_MTD_ABSENT
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_ABSENT $CONFIG_MTD_ABSENT [list $CONFIG_MTD] 2 }
	global CONFIG_MTD_OBSOLETE_CHIPS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2)} then {write_tristate $cfg $autocfg CONFIG_MTD_OBSOLETE_CHIPS $CONFIG_MTD_OBSOLETE_CHIPS [list $notmod] 2 }
	global CONFIG_MTD_AMDSTD
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4) && ($CONFIG_MTD_OBSOLETE_CHIPS == 1 || $CONFIG_MTD_OBSOLETE_CHIPS == 2 || $CONFIG_MTD_OBSOLETE_CHIPS == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_AMDSTD $CONFIG_MTD_AMDSTD [list $CONFIG_MTD $CONFIG_MTD_OBSOLETE_CHIPS] 2 }
	global CONFIG_MTD_SHARP
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4) && ($CONFIG_MTD_OBSOLETE_CHIPS == 1 || $CONFIG_MTD_OBSOLETE_CHIPS == 2 || $CONFIG_MTD_OBSOLETE_CHIPS == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_SHARP $CONFIG_MTD_SHARP [list $CONFIG_MTD $CONFIG_MTD_OBSOLETE_CHIPS] 2 }
	global CONFIG_MTD_JEDEC
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4) && ($CONFIG_MTD_OBSOLETE_CHIPS == 1 || $CONFIG_MTD_OBSOLETE_CHIPS == 2 || $CONFIG_MTD_OBSOLETE_CHIPS == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_JEDEC $CONFIG_MTD_JEDEC [list $CONFIG_MTD $CONFIG_MTD_OBSOLETE_CHIPS] 2 }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2)} then {write_comment $cfg $autocfg "Mapping drivers for chip access"}
	global CONFIG_MTD_PHYSMAP
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_CFI == 1 || $CONFIG_MTD_CFI == 2 || $CONFIG_MTD_CFI == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_PHYSMAP $CONFIG_MTD_PHYSMAP [list $CONFIG_MTD_CFI] 2 }
	global CONFIG_MTD_PHYSMAP_START
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_PHYSMAP == 1 || $CONFIG_MTD_PHYSMAP == 2)} then {write_hex $cfg $autocfg CONFIG_MTD_PHYSMAP_START $CONFIG_MTD_PHYSMAP_START $notmod }
	global CONFIG_MTD_PHYSMAP_LEN
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_PHYSMAP == 1 || $CONFIG_MTD_PHYSMAP == 2)} then {write_hex $cfg $autocfg CONFIG_MTD_PHYSMAP_LEN $CONFIG_MTD_PHYSMAP_LEN $notmod }
	global CONFIG_MTD_PHYSMAP_BUSWIDTH
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_PHYSMAP == 1 || $CONFIG_MTD_PHYSMAP == 2)} then {write_int $cfg $autocfg CONFIG_MTD_PHYSMAP_BUSWIDTH $CONFIG_MTD_PHYSMAP_BUSWIDTH $notmod }
	global CONFIG_MTD_NETtel
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_CFI_INTELEXT == 1 || $CONFIG_MTD_CFI_INTELEXT == 2 || $CONFIG_MTD_CFI_INTELEXT == 4) && ($CONFIG_MTD_CFI_AMDSTD == 1 || $CONFIG_MTD_CFI_AMDSTD == 2 || $CONFIG_MTD_CFI_AMDSTD == 4) && ($CONFIG_MTD_PARTITIONS == 1 || $CONFIG_MTD_PARTITIONS == 2 || $CONFIG_MTD_PARTITIONS == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_NETtel $CONFIG_MTD_NETtel [list $CONFIG_MTD_CFI_INTELEXT $CONFIG_MTD_CFI_AMDSTD $CONFIG_MTD_PARTITIONS] 2 }
	global CONFIG_MTD_NETteluC
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_UCLINUX == 1 || $CONFIG_UCLINUX == 2 || $CONFIG_UCLINUX == 4) && ($CONFIG_MTD_PARTITIONS == 1 || $CONFIG_MTD_PARTITIONS == 2 || $CONFIG_MTD_PARTITIONS == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_NETteluC $CONFIG_MTD_NETteluC [list $CONFIG_UCLINUX $CONFIG_MTD_PARTITIONS] 2 }
	global CONFIG_MTD_KeyTechnology
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_UCLINUX == 1 || $CONFIG_UCLINUX == 2 || $CONFIG_UCLINUX == 4) && ($CONFIG_MTD_PARTITIONS == 1 || $CONFIG_MTD_PARTITIONS == 2 || $CONFIG_MTD_PARTITIONS == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_KeyTechnology $CONFIG_MTD_KeyTechnology [list $CONFIG_UCLINUX $CONFIG_MTD_PARTITIONS] 2 }
	global CONFIG_MTD_KEYWEST
	global CONFIG_SH_KEYWEST
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_SH_KEYWEST == 1 || $CONFIG_SH_KEYWEST == 2 || $CONFIG_SH_KEYWEST == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_KEYWEST $CONFIG_MTD_KEYWEST [list $CONFIG_SH_KEYWEST] 2 }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2)} then {write_comment $cfg $autocfg "Self-contained MTD device drivers"}
	global CONFIG_MTD_PMC551
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_PMC551 $CONFIG_MTD_PMC551 [list $CONFIG_MTD $CONFIG_PCI] 2 }
	global CONFIG_MTD_PMC551_BUGFIX
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_PMC551 == 1 || $CONFIG_MTD_PMC551 == 2)} then {write_tristate $cfg $autocfg CONFIG_MTD_PMC551_BUGFIX $CONFIG_MTD_PMC551_BUGFIX [list $notmod] 2 }
	global CONFIG_MTD_PMC551_DEBUG
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_PMC551 == 1 || $CONFIG_MTD_PMC551 == 2)} then {write_tristate $cfg $autocfg CONFIG_MTD_PMC551_DEBUG $CONFIG_MTD_PMC551_DEBUG [list $notmod] 2 }
	global CONFIG_MTD_SLRAM
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_SLRAM $CONFIG_MTD_SLRAM [list $CONFIG_MTD] 2 }
	global CONFIG_MTD_MTDRAM
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_MTDRAM $CONFIG_MTD_MTDRAM [list $CONFIG_MTD] 2 }
	global CONFIG_MTDRAM_TOTAL_SIZE
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_MTDRAM == 1 || $CONFIG_MTD_MTDRAM == 2)} then {write_int $cfg $autocfg CONFIG_MTDRAM_TOTAL_SIZE $CONFIG_MTDRAM_TOTAL_SIZE $notmod }
	global CONFIG_MTDRAM_ERASE_SIZE
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_MTDRAM == 1 || $CONFIG_MTD_MTDRAM == 2)} then {write_int $cfg $autocfg CONFIG_MTDRAM_ERASE_SIZE $CONFIG_MTDRAM_ERASE_SIZE $notmod }
	global CONFIG_MTDRAM_ABS_POS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_MTDRAM == 1 || $CONFIG_MTD_MTDRAM == 2) && ($CONFIG_MTD_MTDRAM == 1)} then {write_hex $cfg $autocfg CONFIG_MTDRAM_ABS_POS $CONFIG_MTDRAM_ABS_POS $notmod }
	global CONFIG_MTD_BLKMTD
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_BLKMTD $CONFIG_MTD_BLKMTD [list $CONFIG_MTD] 2 }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2)} then {write_comment $cfg $autocfg "Disk-On-Chip Device Drivers"}
	global CONFIG_MTD_DOC1000
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_DOC1000 $CONFIG_MTD_DOC1000 [list $CONFIG_MTD] 2 }
	global CONFIG_MTD_DOC2000
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_DOC2000 $CONFIG_MTD_DOC2000 [list $CONFIG_MTD] 2 }
	global CONFIG_MTD_DOC2001
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_DOC2001 $CONFIG_MTD_DOC2001 [list $CONFIG_MTD] 2 }
	global CONFIG_MTD_DOCPROBE
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOC2001 == 1 || $CONFIG_MTD_DOC2000 == 1)} then {write_tristate $cfg $autocfg CONFIG_MTD_DOCPROBE $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOC2001 != 1 && $CONFIG_MTD_DOC2000 != 1) && ($CONFIG_MTD_DOC2001 == 2 || $CONFIG_MTD_DOC2000 == 2)} then {write_tristate $cfg $autocfg CONFIG_MTD_DOCPROBE $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOC2001 != 1 && $CONFIG_MTD_DOC2000 != 1) && ($CONFIG_MTD_DOC2001 != 2 && $CONFIG_MTD_DOC2000 != 2)} then {write_tristate $cfg $autocfg CONFIG_MTD_DOCPROBE $CONSTANT_N [list $notmod] 2 }
	global CONFIG_MTD_DOCPROBE_ADVANCED
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOCPROBE == 1 || $CONFIG_MTD_DOCPROBE == 2)} then {write_tristate $cfg $autocfg CONFIG_MTD_DOCPROBE_ADVANCED $CONFIG_MTD_DOCPROBE_ADVANCED [list $notmod] 2 }
	global CONFIG_MTD_DOCPROBE_ADDRESS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOCPROBE == 1 || $CONFIG_MTD_DOCPROBE == 2) && ($CONFIG_MTD_DOCPROBE_ADVANCED == 0)} then {write_hex $cfg $autocfg CONFIG_MTD_DOCPROBE_ADDRESS 0 $notmod }
	global CONFIG_MTD_DOCPROBE_HIGH
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOCPROBE == 1 || $CONFIG_MTD_DOCPROBE == 2) && ($CONFIG_MTD_DOCPROBE_ADVANCED == 0)} then {write_tristate $cfg $autocfg CONFIG_MTD_DOCPROBE_HIGH $CONSTANT_N [list $notmod] 2 }
	global CONFIG_MTD_DOCPROBE_55AA
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOCPROBE == 1 || $CONFIG_MTD_DOCPROBE == 2) && ($CONFIG_MTD_DOCPROBE_ADVANCED == 0)} then {write_tristate $cfg $autocfg CONFIG_MTD_DOCPROBE_55AA $CONSTANT_N [list $notmod] 2 }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOCPROBE == 1 || $CONFIG_MTD_DOCPROBE == 2) && ($CONFIG_MTD_DOCPROBE_ADVANCED != 0)} then {write_hex $cfg $autocfg CONFIG_MTD_DOCPROBE_ADDRESS $CONFIG_MTD_DOCPROBE_ADDRESS $notmod }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOCPROBE == 1 || $CONFIG_MTD_DOCPROBE == 2) && ($CONFIG_MTD_DOCPROBE_ADVANCED != 0)} then {write_tristate $cfg $autocfg CONFIG_MTD_DOCPROBE_HIGH $CONFIG_MTD_DOCPROBE_HIGH [list $notmod] 2 }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_DOCPROBE == 1 || $CONFIG_MTD_DOCPROBE == 2) && ($CONFIG_MTD_DOCPROBE_ADVANCED != 0)} then {write_tristate $cfg $autocfg CONFIG_MTD_DOCPROBE_55AA $CONFIG_MTD_DOCPROBE_55AA [list $notmod] 2 }
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2)} then {write_comment $cfg $autocfg "NAND Flash Device Drivers"}
	global CONFIG_MTD_NAND
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_MTD_NAND $CONFIG_MTD_NAND [list $CONFIG_MTD] 2 }
	global CONFIG_MTD_NAND_ECC
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_NAND == 1 || $CONFIG_MTD_NAND == 2)} then {write_tristate $cfg $autocfg CONFIG_MTD_NAND_ECC $CONFIG_MTD_NAND_ECC [list $notmod] 2 }
	global CONFIG_MTD_NAND_VERIFY_WRITE
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2) && ($CONFIG_MTD_NAND == 1 || $CONFIG_MTD_NAND == 2)} then {write_tristate $cfg $autocfg CONFIG_MTD_NAND_VERIFY_WRITE $CONFIG_MTD_NAND_VERIFY_WRITE [list $notmod] 2 }
	write_comment $cfg $autocfg "Parallel port support"
	global CONFIG_PARPORT
	write_tristate $cfg $autocfg CONFIG_PARPORT $CONFIG_PARPORT [list $notmod] 2
	global CONFIG_PARPORT_PC
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_PARPORT_PC $CONFIG_PARPORT_PC [list $CONFIG_PARPORT] 2 }
	global CONFIG_PARPORT_PC_CML1
	global CONFIG_SERIAL
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0 && $CONFIG_SERIAL != 0) && ($CONFIG_SERIAL == 2)} then {write_tristate $cfg $autocfg CONFIG_PARPORT_PC_CML1 $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0 && $CONFIG_SERIAL != 0) && ($CONFIG_SERIAL != 2)} then {write_tristate $cfg $autocfg CONFIG_PARPORT_PC_CML1 $CONFIG_PARPORT_PC [list $notmod] 2 }
	global CONFIG_PARPORT_SERIAL
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0 && $CONFIG_SERIAL != 0) && ($CONFIG_PARPORT_PC_CML1 == 1 || $CONFIG_PARPORT_PC_CML1 == 2 || $CONFIG_PARPORT_PC_CML1 == 4)} then {write_tristate $cfg $autocfg CONFIG_PARPORT_SERIAL $CONFIG_PARPORT_SERIAL [list $CONFIG_PARPORT_PC_CML1] 2 }
	global CONFIG_PARPORT_PC_FIFO
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_PARPORT_PC_FIFO $CONFIG_PARPORT_PC_FIFO [list $notmod] 2 }
	global CONFIG_PARPORT_PC_SUPERIO
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_PARPORT_PC_SUPERIO $CONFIG_PARPORT_PC_SUPERIO [list $notmod] 2 }
	global CONFIG_PARPORT_PC_PCMCIA
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_PARPORT_PC == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_PARPORT_PC_PCMCIA $CONFIG_PARPORT_PC_PCMCIA [list $CONFIG_PCMCIA] 2 }
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT_PC != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_PARPORT_PC != 1) && ($CONFIG_PARPORT_PC == 1 || $CONFIG_PARPORT_PC == 2 || $CONFIG_PARPORT_PC == 4)} then {write_tristate $cfg $autocfg CONFIG_PARPORT_PC_PCMCIA $CONFIG_PARPORT_PC_PCMCIA [list $CONFIG_PARPORT_PC] 2 }
	global CONFIG_PARPORT_AMIGA
	if {($CONFIG_PARPORT != 0)} then {write_tristate $cfg $autocfg CONFIG_PARPORT_AMIGA $CONSTANT_N [list $notmod] 2 }
	global CONFIG_PARPORT_MFC3
	if {($CONFIG_PARPORT != 0)} then {write_tristate $cfg $autocfg CONFIG_PARPORT_MFC3 $CONSTANT_N [list $notmod] 2 }
	global CONFIG_PARPORT_ATARI
	if {($CONFIG_PARPORT != 0)} then {write_tristate $cfg $autocfg CONFIG_PARPORT_ATARI $CONSTANT_N [list $notmod] 2 }
	global CONFIG_PARPORT_GSC
	if {($CONFIG_PARPORT != 0)} then {write_tristate $cfg $autocfg CONFIG_PARPORT_GSC $CONSTANT_N [list $notmod] 2 }
	global CONFIG_PARPORT_SUNBPP
	if {($CONFIG_PARPORT != 0)} then {write_tristate $cfg $autocfg CONFIG_PARPORT_SUNBPP $CONSTANT_N [list $notmod] 2 }
	global CONFIG_PARPORT_OTHER
	if {($CONFIG_PARPORT != 0)} then {write_tristate $cfg $autocfg CONFIG_PARPORT_OTHER $CONFIG_PARPORT_OTHER [list $notmod] 2 }
	global CONFIG_PARPORT_1284
	if {($CONFIG_PARPORT != 0)} then {write_tristate $cfg $autocfg CONFIG_PARPORT_1284 $CONFIG_PARPORT_1284 [list $notmod] 2 }
	global CONFIG_PARPORT_HD64465
	global CONFIG_SH_HD64465
	if {($CONFIG_PARPORT != 0) && ($CONFIG_SH_HD64465 != 0)} then {write_tristate $cfg $autocfg CONFIG_PARPORT_HD64465 $CONFIG_PARPORT_HD64465 [list $notmod] 2 }
	write_comment $cfg $autocfg "Plug and Play configuration"
	global CONFIG_PNP
	write_tristate $cfg $autocfg CONFIG_PNP $CONFIG_PNP [list $notmod] 2
	global CONFIG_ISAPNP
	if {($CONFIG_PNP == 1 || $CONFIG_PNP == 2 || $CONFIG_PNP == 4)} then {write_tristate $cfg $autocfg CONFIG_ISAPNP $CONFIG_ISAPNP [list $CONFIG_PNP] 2 }
	write_comment $cfg $autocfg "Block devices"
	global CONFIG_BLK_DEV_FD
	write_tristate $cfg $autocfg CONFIG_BLK_DEV_FD $CONFIG_BLK_DEV_FD [list $notmod] 2
	global CONFIG_BLK_DEV_PS2
	if {($CONFIG_MCA == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_PS2 $CONFIG_BLK_DEV_PS2 [list $notmod] 2 }
	global CONFIG_BLK_DEV_XD
	global CONFIG_ISA
	if {($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_XD $CONFIG_BLK_DEV_XD [list $CONFIG_ISA] 2 }
	global CONFIG_PARIDE
	if {($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE $CONFIG_PARIDE [list $CONFIG_PARPORT] 2 }
	global CONFIG_PARIDE_PARPORT
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 0)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_PARPORT $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARPORT != 1 && $CONFIG_PARPORT != 0)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_PARPORT $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2)} then {write_comment $cfg $autocfg "Parallel IDE high-level drivers"}
	global CONFIG_PARIDE_PD
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_PD $CONFIG_PARIDE_PD [list $CONFIG_PARIDE] 2 }
	global CONFIG_PARIDE_PCD
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_PCD $CONFIG_PARIDE_PCD [list $CONFIG_PARIDE] 2 }
	global CONFIG_PARIDE_PF
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_PF $CONFIG_PARIDE_PF [list $CONFIG_PARIDE] 2 }
	global CONFIG_PARIDE_PT
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_PT $CONFIG_PARIDE_PT [list $CONFIG_PARIDE] 2 }
	global CONFIG_PARIDE_PG
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_PG $CONFIG_PARIDE_PG [list $CONFIG_PARIDE] 2 }
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2)} then {write_comment $cfg $autocfg "Parallel IDE protocol modules"}
	global CONFIG_PARIDE_ATEN
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_ATEN $CONFIG_PARIDE_ATEN [list $CONFIG_PARIDE] 2 }
	global CONFIG_PARIDE_BPCK
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_BPCK $CONFIG_PARIDE_BPCK [list $CONFIG_PARIDE] 2 }
	global CONFIG_PARIDE_BPCK6
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_BPCK6 $CONFIG_PARIDE_BPCK6 [list $CONFIG_PARIDE] 2 }
	global CONFIG_PARIDE_COMM
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_COMM $CONFIG_PARIDE_COMM [list $CONFIG_PARIDE] 2 }
	global CONFIG_PARIDE_DSTR
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_DSTR $CONFIG_PARIDE_DSTR [list $CONFIG_PARIDE] 2 }
	global CONFIG_PARIDE_FIT2
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_FIT2 $CONFIG_PARIDE_FIT2 [list $CONFIG_PARIDE] 2 }
	global CONFIG_PARIDE_FIT3
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_FIT3 $CONFIG_PARIDE_FIT3 [list $CONFIG_PARIDE] 2 }
	global CONFIG_PARIDE_EPAT
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_EPAT $CONFIG_PARIDE_EPAT [list $CONFIG_PARIDE] 2 }
	global CONFIG_PARIDE_EPATC8
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE_EPAT != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_EPATC8 $CONFIG_PARIDE_EPATC8 [list $notmod] 2 }
	global CONFIG_PARIDE_EPIA
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_EPIA $CONFIG_PARIDE_EPIA [list $CONFIG_PARIDE] 2 }
	global CONFIG_PARIDE_FRIQ
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_FRIQ $CONFIG_PARIDE_FRIQ [list $CONFIG_PARIDE] 2 }
	global CONFIG_PARIDE_FRPW
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_FRPW $CONFIG_PARIDE_FRPW [list $CONFIG_PARIDE] 2 }
	global CONFIG_PARIDE_KBIC
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_KBIC $CONFIG_PARIDE_KBIC [list $CONFIG_PARIDE] 2 }
	global CONFIG_PARIDE_KTTI
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_KTTI $CONFIG_PARIDE_KTTI [list $CONFIG_PARIDE] 2 }
	global CONFIG_PARIDE_ON20
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_ON20 $CONFIG_PARIDE_ON20 [list $CONFIG_PARIDE] 2 }
	global CONFIG_PARIDE_ON26
	if {($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2) && ($CONFIG_PARIDE == 1 || $CONFIG_PARIDE == 2 || $CONFIG_PARIDE == 4)} then {write_tristate $cfg $autocfg CONFIG_PARIDE_ON26 $CONFIG_PARIDE_ON26 [list $CONFIG_PARIDE] 2 }
	global CONFIG_BLK_CPQ_DA
	if {($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_CPQ_DA $CONFIG_BLK_CPQ_DA [list $CONFIG_PCI] 2 }
	global CONFIG_BLK_CPQ_CISS_DA
	if {($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_CPQ_CISS_DA $CONFIG_BLK_CPQ_CISS_DA [list $CONFIG_PCI] 2 }
	global CONFIG_BLK_DEV_DAC960
	if {($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_DAC960 $CONFIG_BLK_DEV_DAC960 [list $CONFIG_PCI] 2 }
	global CONFIG_BLK_DEV_LOOP
	write_tristate $cfg $autocfg CONFIG_BLK_DEV_LOOP $CONFIG_BLK_DEV_LOOP [list $notmod] 2
	global CONFIG_BLK_DEV_NBD
	if {($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_NBD $CONFIG_BLK_DEV_NBD [list $CONFIG_NET] 2 }
	global CONFIG_BLK_DEV_RAM
	write_tristate $cfg $autocfg CONFIG_BLK_DEV_RAM $CONFIG_BLK_DEV_RAM [list $notmod] 2
	global CONFIG_BLK_DEV_RAM_SIZE
	if {($CONFIG_BLK_DEV_RAM == 1 || $CONFIG_BLK_DEV_RAM == 2)} then {write_int $cfg $autocfg CONFIG_BLK_DEV_RAM_SIZE $CONFIG_BLK_DEV_RAM_SIZE $notmod }
	global CONFIG_BLK_DEV_INITRD
	if {($CONFIG_BLK_DEV_RAM == 1 || $CONFIG_BLK_DEV_RAM == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_INITRD $CONFIG_BLK_DEV_INITRD [list $CONFIG_BLK_DEV_RAM] 2 }
	global CONFIG_BLK_DEV_BLKMEM
	write_tristate $cfg $autocfg CONFIG_BLK_DEV_BLKMEM $CONFIG_BLK_DEV_BLKMEM [list $notmod] 2
	if {($CONFIG_NET == 1)} then {write_comment $cfg $autocfg "Networking options"}
	global CONFIG_PACKET
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_PACKET $CONFIG_PACKET [list $notmod] 2 }
	global CONFIG_PACKET_MMAP
	if {($CONFIG_NET == 1) && ($CONFIG_PACKET != 0)} then {write_tristate $cfg $autocfg CONFIG_PACKET_MMAP $CONFIG_PACKET_MMAP [list $notmod] 2 }
	global CONFIG_NETLINK_DEV
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_NETLINK_DEV $CONFIG_NETLINK_DEV [list $notmod] 2 }
	global CONFIG_NETFILTER
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_NETFILTER $CONFIG_NETFILTER [list $notmod] 2 }
	global CONFIG_NETFILTER_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_NETFILTER == 1)} then {write_tristate $cfg $autocfg CONFIG_NETFILTER_DEBUG $CONFIG_NETFILTER_DEBUG [list $notmod] 2 }
	global CONFIG_FILTER
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_FILTER $CONFIG_FILTER [list $notmod] 2 }
	global CONFIG_UNIX
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_UNIX $CONFIG_UNIX [list $notmod] 2 }
	global CONFIG_INET
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_INET $CONFIG_INET [list $notmod] 2 }
	global CONFIG_IP_MULTICAST
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MULTICAST $CONFIG_IP_MULTICAST [list $notmod] 2 }
	global CONFIG_IP_ADVANCED_ROUTER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_ADVANCED_ROUTER $CONFIG_IP_ADVANCED_ROUTER [list $notmod] 2 }
	global CONFIG_IP_MULTIPLE_TABLES
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MULTIPLE_TABLES $CONFIG_IP_MULTIPLE_TABLES [list $notmod] 2 }
	global CONFIG_IP_ROUTE_FWMARK
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1) && ($CONFIG_IP_MULTIPLE_TABLES == 1) && ($CONFIG_NETFILTER == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_ROUTE_FWMARK $CONFIG_IP_ROUTE_FWMARK [list $notmod] 2 }
	global CONFIG_IP_ROUTE_NAT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1) && ($CONFIG_IP_MULTIPLE_TABLES == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_ROUTE_NAT $CONFIG_IP_ROUTE_NAT [list $notmod] 2 }
	global CONFIG_IP_ROUTE_MULTIPATH
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_ROUTE_MULTIPATH $CONFIG_IP_ROUTE_MULTIPATH [list $notmod] 2 }
	global CONFIG_IP_ROUTE_TOS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_ROUTE_TOS $CONFIG_IP_ROUTE_TOS [list $notmod] 2 }
	global CONFIG_IP_ROUTE_VERBOSE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_ROUTE_VERBOSE $CONFIG_IP_ROUTE_VERBOSE [list $notmod] 2 }
	global CONFIG_IP_ROUTE_LARGE_TABLES
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_ADVANCED_ROUTER == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_ROUTE_LARGE_TABLES $CONFIG_IP_ROUTE_LARGE_TABLES [list $notmod] 2 }
	global CONFIG_IP_PNP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_PNP $CONFIG_IP_PNP [list $notmod] 2 }
	global CONFIG_IP_PNP_DHCP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_PNP == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_PNP_DHCP $CONFIG_IP_PNP_DHCP [list $notmod] 2 }
	global CONFIG_IP_PNP_BOOTP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_PNP == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_PNP_BOOTP $CONFIG_IP_PNP_BOOTP [list $notmod] 2 }
	global CONFIG_IP_PNP_RARP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_PNP == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_PNP_RARP $CONFIG_IP_PNP_RARP [list $notmod] 2 }
	global CONFIG_NET_IPIP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_IPIP $CONFIG_NET_IPIP [list $notmod] 2 }
	global CONFIG_NET_IPGRE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_IPGRE $CONFIG_NET_IPGRE [list $notmod] 2 }
	global CONFIG_NET_IPGRE_BROADCAST
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_MULTICAST == 1) && ($CONFIG_NET_IPGRE != 0)} then {write_tristate $cfg $autocfg CONFIG_NET_IPGRE_BROADCAST $CONFIG_NET_IPGRE_BROADCAST [list $notmod] 2 }
	global CONFIG_IP_MROUTE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_MULTICAST == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_MROUTE $CONFIG_IP_MROUTE [list $notmod] 2 }
	global CONFIG_IP_PIMSM_V1
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_MULTICAST == 1) && ($CONFIG_IP_MROUTE == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_PIMSM_V1 $CONFIG_IP_PIMSM_V1 [list $notmod] 2 }
	global CONFIG_IP_PIMSM_V2
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IP_MULTICAST == 1) && ($CONFIG_IP_MROUTE == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_PIMSM_V2 $CONFIG_IP_PIMSM_V2 [list $notmod] 2 }
	global CONFIG_ARPD
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_ARPD $CONFIG_ARPD [list $notmod] 2 }
	global CONFIG_INET_ECN
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_INET_ECN $CONFIG_INET_ECN [list $notmod] 2 }
	global CONFIG_SYN_COOKIES
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_SYN_COOKIES $CONFIG_SYN_COOKIES [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0)} then {write_comment $cfg $autocfg "  IP: Netfilter Configuration"}
	global CONFIG_IP_NF_CONNTRACK
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_CONNTRACK $CONFIG_IP_NF_CONNTRACK [list $notmod] 2 }
	global CONFIG_IP_NF_FTP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_CONNTRACK == 1 || $CONFIG_IP_NF_CONNTRACK == 2 || $CONFIG_IP_NF_CONNTRACK == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_FTP $CONFIG_IP_NF_FTP [list $CONFIG_IP_NF_CONNTRACK] 2 }
	global CONFIG_IP_NF_PPTP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_CONNTRACK == 1 || $CONFIG_IP_NF_CONNTRACK == 2 || $CONFIG_IP_NF_CONNTRACK == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_PPTP $CONFIG_IP_NF_PPTP [list $CONFIG_IP_NF_CONNTRACK] 2 }
	global CONFIG_IP_NF_PPTP_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_PPTP != 0)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_PPTP_DEBUG $CONFIG_IP_NF_PPTP_DEBUG [list $notmod] 2 }
	global CONFIG_IP_NF_IRC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_CONNTRACK == 1 || $CONFIG_IP_NF_CONNTRACK == 2 || $CONFIG_IP_NF_CONNTRACK == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_IRC $CONFIG_IP_NF_IRC [list $CONFIG_IP_NF_CONNTRACK] 2 }
	global CONFIG_IP_NF_QUEUE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_QUEUE $CONFIG_IP_NF_QUEUE [list $notmod] 2 }
	global CONFIG_IP_NF_IPTABLES
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_IPTABLES $CONFIG_IP_NF_IPTABLES [list $notmod] 2 }
	global CONFIG_IP_NF_MATCH_LIMIT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_MATCH_LIMIT $CONFIG_IP_NF_MATCH_LIMIT [list $CONFIG_IP_NF_IPTABLES] 2 }
	global CONFIG_IP_NF_MATCH_MAC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_MATCH_MAC $CONFIG_IP_NF_MATCH_MAC [list $CONFIG_IP_NF_IPTABLES] 2 }
	global CONFIG_IP_NF_MATCH_MARK
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_MATCH_MARK $CONFIG_IP_NF_MATCH_MARK [list $CONFIG_IP_NF_IPTABLES] 2 }
	global CONFIG_IP_NF_MATCH_MULTIPORT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_MATCH_MULTIPORT $CONFIG_IP_NF_MATCH_MULTIPORT [list $CONFIG_IP_NF_IPTABLES] 2 }
	global CONFIG_IP_NF_MATCH_TOS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_MATCH_TOS $CONFIG_IP_NF_MATCH_TOS [list $CONFIG_IP_NF_IPTABLES] 2 }
	global CONFIG_IP_NF_MATCH_LENGTH
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_MATCH_LENGTH $CONFIG_IP_NF_MATCH_LENGTH [list $CONFIG_IP_NF_IPTABLES] 2 }
	global CONFIG_IP_NF_MATCH_TTL
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_MATCH_TTL $CONFIG_IP_NF_MATCH_TTL [list $CONFIG_IP_NF_IPTABLES] 2 }
	global CONFIG_IP_NF_MATCH_TCPMSS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_MATCH_TCPMSS $CONFIG_IP_NF_MATCH_TCPMSS [list $CONFIG_IP_NF_IPTABLES] 2 }
	global CONFIG_IP_NF_MATCH_STATE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_CONNTRACK == 1 || $CONFIG_IP_NF_CONNTRACK == 2 || $CONFIG_IP_NF_CONNTRACK == 4) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_MATCH_STATE $CONFIG_IP_NF_MATCH_STATE [list $CONFIG_IP_NF_CONNTRACK $CONFIG_IP_NF_IPTABLES] 2 }
	global CONFIG_IP_NF_MATCH_UNCLEAN
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_MATCH_UNCLEAN $CONFIG_IP_NF_MATCH_UNCLEAN [list $CONFIG_IP_NF_IPTABLES] 2 }
	global CONFIG_IP_NF_MATCH_OWNER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_MATCH_OWNER $CONFIG_IP_NF_MATCH_OWNER [list $CONFIG_IP_NF_IPTABLES] 2 }
	global CONFIG_IP_NF_FILTER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_FILTER $CONFIG_IP_NF_FILTER [list $CONFIG_IP_NF_IPTABLES] 2 }
	global CONFIG_IP_NF_TARGET_REJECT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_FILTER != 0) && ($CONFIG_IP_NF_FILTER == 1 || $CONFIG_IP_NF_FILTER == 2 || $CONFIG_IP_NF_FILTER == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_TARGET_REJECT $CONFIG_IP_NF_TARGET_REJECT [list $CONFIG_IP_NF_FILTER] 2 }
	global CONFIG_IP_NF_TARGET_MIRROR
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_FILTER != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_NF_FILTER == 1 || $CONFIG_IP_NF_FILTER == 2 || $CONFIG_IP_NF_FILTER == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_TARGET_MIRROR $CONFIG_IP_NF_TARGET_MIRROR [list $CONFIG_IP_NF_FILTER] 2 }
	global CONFIG_IP_NF_NAT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4) && ($CONFIG_IP_NF_CONNTRACK == 1 || $CONFIG_IP_NF_CONNTRACK == 2 || $CONFIG_IP_NF_CONNTRACK == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_NAT $CONFIG_IP_NF_NAT [list $CONFIG_IP_NF_IPTABLES $CONFIG_IP_NF_CONNTRACK] 2 }
	global CONFIG_IP_NF_NAT_NEEDED
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_NAT_NEEDED $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_IP_NF_TARGET_MASQUERADE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_IP_NF_NAT == 1 || $CONFIG_IP_NF_NAT == 2 || $CONFIG_IP_NF_NAT == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_TARGET_MASQUERADE $CONFIG_IP_NF_TARGET_MASQUERADE [list $CONFIG_IP_NF_NAT] 2 }
	global CONFIG_IP_NF_TARGET_REDIRECT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_IP_NF_NAT == 1 || $CONFIG_IP_NF_NAT == 2 || $CONFIG_IP_NF_NAT == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_TARGET_REDIRECT $CONFIG_IP_NF_TARGET_REDIRECT [list $CONFIG_IP_NF_NAT] 2 }
	global CONFIG_IP_NF_NAT_SNMP_BASIC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP_NF_NAT == 1 || $CONFIG_IP_NF_NAT == 2 || $CONFIG_IP_NF_NAT == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_NAT_SNMP_BASIC $CONFIG_IP_NF_NAT_SNMP_BASIC [list $CONFIG_IP_NF_NAT] 2 }
	global CONFIG_IP_NF_NAT_IRC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_IP_NF_IRC == 2)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_NAT_IRC $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_IP_NF_IRC != 2) && ($CONFIG_IP_NF_IRC == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_NAT_IRC $CONFIG_IP_NF_NAT [list $notmod] 2 }
	global CONFIG_IP_NF_NAT_FTP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_IP_NF_FTP == 2)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_NAT_FTP $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_IP_NF_FTP != 2) && ($CONFIG_IP_NF_FTP == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_NAT_FTP $CONFIG_IP_NF_NAT [list $notmod] 2 }
	global CONFIG_IP_NF_NAT_PPTP
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_IP_NF_PPTP == 2)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_NAT_PPTP $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_CONNTRACK != 0) && ($CONFIG_IP_NF_NAT != 0) && ($CONFIG_IP_NF_PPTP != 2) && ($CONFIG_IP_NF_PPTP == 1)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_NAT_PPTP $CONFIG_IP_NF_NAT [list $notmod] 2 }
	global CONFIG_IP_NF_MANGLE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_MANGLE $CONFIG_IP_NF_MANGLE [list $CONFIG_IP_NF_IPTABLES] 2 }
	global CONFIG_IP_NF_TARGET_TOS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_MANGLE != 0) && ($CONFIG_IP_NF_MANGLE == 1 || $CONFIG_IP_NF_MANGLE == 2 || $CONFIG_IP_NF_MANGLE == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_TARGET_TOS $CONFIG_IP_NF_TARGET_TOS [list $CONFIG_IP_NF_MANGLE] 2 }
	global CONFIG_IP_NF_TARGET_MARK
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_MANGLE != 0) && ($CONFIG_IP_NF_MANGLE == 1 || $CONFIG_IP_NF_MANGLE == 2 || $CONFIG_IP_NF_MANGLE == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_TARGET_MARK $CONFIG_IP_NF_TARGET_MARK [list $CONFIG_IP_NF_MANGLE] 2 }
	global CONFIG_IP_NF_TARGET_LOG
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_TARGET_LOG $CONFIG_IP_NF_TARGET_LOG [list $CONFIG_IP_NF_IPTABLES] 2 }
	global CONFIG_IP_NF_TARGET_TCPMSS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_IPTABLES != 0) && ($CONFIG_IP_NF_IPTABLES == 1 || $CONFIG_IP_NF_IPTABLES == 2 || $CONFIG_IP_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_TARGET_TCPMSS $CONFIG_IP_NF_TARGET_TCPMSS [list $CONFIG_IP_NF_IPTABLES] 2 }
	global CONFIG_IP_NF_COMPAT_IPCHAINS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 1) && ($CONFIG_IP_NF_IPTABLES != 1)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_COMPAT_IPCHAINS $CONFIG_IP_NF_COMPAT_IPCHAINS [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 1) && ($CONFIG_IP_NF_IPTABLES != 1) && ($CONFIG_IP_NF_COMPAT_IPCHAINS != 0)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_NAT_NEEDED $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_IP_NF_COMPAT_IPFWADM
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 1) && ($CONFIG_IP_NF_IPTABLES != 1) && ($CONFIG_IP_NF_COMPAT_IPCHAINS != 1)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_COMPAT_IPFWADM $CONFIG_IP_NF_COMPAT_IPFWADM [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP_NF_CONNTRACK != 1) && ($CONFIG_IP_NF_IPTABLES != 1) && ($CONFIG_IP_NF_COMPAT_IPCHAINS != 1) && ($CONFIG_IP_NF_COMPAT_IPFWADM != 0)} then {write_tristate $cfg $autocfg CONFIG_IP_NF_NAT_NEEDED $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_IPV6
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_IPV6 $CONFIG_IPV6 [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0)} then {write_comment $cfg $autocfg "  IPv6: Netfilter Configuration"}
	global CONFIG_IP6_NF_IPTABLES
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0)} then {write_tristate $cfg $autocfg CONFIG_IP6_NF_IPTABLES $CONFIG_IP6_NF_IPTABLES [list $notmod] 2 }
	global CONFIG_IP6_NF_MATCH_LIMIT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP6_NF_MATCH_LIMIT $CONFIG_IP6_NF_MATCH_LIMIT [list $CONFIG_IP6_NF_IPTABLES] 2 }
	global CONFIG_IP6_NF_MATCH_MAC
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP6_NF_MATCH_MAC $CONFIG_IP6_NF_MATCH_MAC [list $CONFIG_IP6_NF_IPTABLES] 2 }
	global CONFIG_IP6_NF_MATCH_MULTIPORT
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP6_NF_MATCH_MULTIPORT $CONFIG_IP6_NF_MATCH_MULTIPORT [list $CONFIG_IP6_NF_IPTABLES] 2 }
	global CONFIG_IP6_NF_MATCH_OWNER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP6_NF_MATCH_OWNER $CONFIG_IP6_NF_MATCH_OWNER [list $CONFIG_IP6_NF_IPTABLES] 2 }
	global CONFIG_IP6_NF_MATCH_MARK
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP6_NF_MATCH_MARK $CONFIG_IP6_NF_MATCH_MARK [list $CONFIG_IP6_NF_IPTABLES] 2 }
	global CONFIG_IP6_NF_FILTER
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP6_NF_FILTER $CONFIG_IP6_NF_FILTER [list $CONFIG_IP6_NF_IPTABLES] 2 }
	global CONFIG_IP6_NF_TARGET_LOG
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_FILTER != 0) && ($CONFIG_IP6_NF_FILTER == 1 || $CONFIG_IP6_NF_FILTER == 2 || $CONFIG_IP6_NF_FILTER == 4)} then {write_tristate $cfg $autocfg CONFIG_IP6_NF_TARGET_LOG $CONFIG_IP6_NF_TARGET_LOG [list $CONFIG_IP6_NF_FILTER] 2 }
	global CONFIG_IP6_NF_MANGLE
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_IPTABLES == 1 || $CONFIG_IP6_NF_IPTABLES == 2 || $CONFIG_IP6_NF_IPTABLES == 4)} then {write_tristate $cfg $autocfg CONFIG_IP6_NF_MANGLE $CONFIG_IP6_NF_MANGLE [list $CONFIG_IP6_NF_IPTABLES] 2 }
	global CONFIG_IP6_NF_TARGET_MARK
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IPV6 != 0) && ($CONFIG_NETFILTER != 0) && ($CONFIG_IP6_NF_IPTABLES != 0) && ($CONFIG_IP6_NF_MANGLE != 0) && ($CONFIG_IP6_NF_MANGLE == 1 || $CONFIG_IP6_NF_MANGLE == 2 || $CONFIG_IP6_NF_MANGLE == 4)} then {write_tristate $cfg $autocfg CONFIG_IP6_NF_TARGET_MARK $CONFIG_IP6_NF_TARGET_MARK [list $CONFIG_IP6_NF_MANGLE] 2 }
	global CONFIG_KHTTPD
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_KHTTPD $CONFIG_KHTTPD [list $notmod] 2 }
	global CONFIG_ATM
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM $CONFIG_ATM [list $notmod] 2 }
	global CONFIG_ATM_CLIP
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_ATM == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_CLIP $CONFIG_ATM_CLIP [list $notmod] 2 }
	global CONFIG_ATM_CLIP_NO_ICMP
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_ATM == 1) && ($CONFIG_INET == 1) && ($CONFIG_ATM_CLIP == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_CLIP_NO_ICMP $CONFIG_ATM_CLIP_NO_ICMP [list $notmod] 2 }
	global CONFIG_ATM_LANE
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_ATM == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_LANE $CONFIG_ATM_LANE [list $notmod] 2 }
	global CONFIG_ATM_MPOA
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_ATM == 1) && ($CONFIG_INET == 1 && $CONFIG_ATM_LANE != 0)} then {write_tristate $cfg $autocfg CONFIG_ATM_MPOA $CONFIG_ATM_MPOA [list $notmod] 2 }
	global CONFIG_VLAN_8021Q
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_VLAN_8021Q $CONFIG_VLAN_8021Q [list $CONFIG_EXPERIMENTAL] 2 }
	if {($CONFIG_NET == 1)} then {write_comment $cfg $autocfg " "}
	global CONFIG_IPX
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_IPX $CONFIG_IPX [list $notmod] 2 }
	global CONFIG_IPX_INTERN
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0)} then {write_tristate $cfg $autocfg CONFIG_IPX_INTERN $CONFIG_IPX_INTERN [list $notmod] 2 }
	global CONFIG_ATALK
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_ATALK $CONFIG_ATALK [list $notmod] 2 }
	global CONFIG_DECNET
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_DECNET $CONFIG_DECNET [list $notmod] 2 }
	global CONFIG_DECNET_SIOCGIFCONF
	if {($CONFIG_NET == 1) && ($CONFIG_DECNET != 0)} then {write_tristate $cfg $autocfg CONFIG_DECNET_SIOCGIFCONF $CONFIG_DECNET_SIOCGIFCONF [list $notmod] 2 }
	global CONFIG_DECNET_ROUTER
	if {($CONFIG_NET == 1) && ($CONFIG_DECNET != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_DECNET_ROUTER $CONFIG_DECNET_ROUTER [list $notmod] 2 }
	global CONFIG_DECNET_ROUTE_FWMARK
	if {($CONFIG_NET == 1) && ($CONFIG_DECNET != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_DECNET_ROUTER == 1) && ($CONFIG_NETFILTER == 1)} then {write_tristate $cfg $autocfg CONFIG_DECNET_ROUTE_FWMARK $CONFIG_DECNET_ROUTE_FWMARK [list $notmod] 2 }
	global CONFIG_BRIDGE
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_BRIDGE $CONFIG_BRIDGE [list $notmod] 2 }
	global CONFIG_X25
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_X25 $CONFIG_X25 [list $notmod] 2 }
	global CONFIG_LAPB
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_LAPB $CONFIG_LAPB [list $notmod] 2 }
	global CONFIG_LLC
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_LLC $CONFIG_LLC [list $notmod] 2 }
	global CONFIG_NET_DIVERT
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_DIVERT $CONFIG_NET_DIVERT [list $notmod] 2 }
	global CONFIG_ECONET
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_ECONET $CONFIG_ECONET [list $notmod] 2 }
	global CONFIG_ECONET_AUNUDP
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_ECONET != 0)} then {write_tristate $cfg $autocfg CONFIG_ECONET_AUNUDP $CONFIG_ECONET_AUNUDP [list $notmod] 2 }
	global CONFIG_ECONET_NATIVE
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_ECONET != 0)} then {write_tristate $cfg $autocfg CONFIG_ECONET_NATIVE $CONFIG_ECONET_NATIVE [list $notmod] 2 }
	global CONFIG_WAN_ROUTER
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_WAN_ROUTER $CONFIG_WAN_ROUTER [list $notmod] 2 }
	global CONFIG_NET_FASTROUTE
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_FASTROUTE $CONFIG_NET_FASTROUTE [list $notmod] 2 }
	global CONFIG_NET_HW_FLOWCONTROL
	if {($CONFIG_NET == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_HW_FLOWCONTROL $CONFIG_NET_HW_FLOWCONTROL [list $notmod] 2 }
	if {($CONFIG_NET == 1)} then {write_comment $cfg $autocfg "QoS and/or fair queueing"}
	global CONFIG_NET_SCHED
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_SCHED $CONFIG_NET_SCHED [list $notmod] 2 }
	global CONFIG_NET_SCH_CBQ
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_SCH_CBQ $CONFIG_NET_SCH_CBQ [list $notmod] 2 }
	global CONFIG_NET_SCH_CSZ
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_SCH_CSZ $CONFIG_NET_SCH_CSZ [list $notmod] 2 }
	global CONFIG_NET_SCH_ATM
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_ATM == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_SCH_ATM $CONFIG_NET_SCH_ATM [list $notmod] 2 }
	global CONFIG_NET_SCH_PRIO
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_SCH_PRIO $CONFIG_NET_SCH_PRIO [list $notmod] 2 }
	global CONFIG_NET_SCH_RED
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_SCH_RED $CONFIG_NET_SCH_RED [list $notmod] 2 }
	global CONFIG_NET_SCH_SFQ
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_SCH_SFQ $CONFIG_NET_SCH_SFQ [list $notmod] 2 }
	global CONFIG_NET_SCH_TEQL
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_SCH_TEQL $CONFIG_NET_SCH_TEQL [list $notmod] 2 }
	global CONFIG_NET_SCH_TBF
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_SCH_TBF $CONFIG_NET_SCH_TBF [list $notmod] 2 }
	global CONFIG_NET_SCH_GRED
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_SCH_GRED $CONFIG_NET_SCH_GRED [list $notmod] 2 }
	global CONFIG_NET_SCH_DSMARK
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_SCH_DSMARK $CONFIG_NET_SCH_DSMARK [list $notmod] 2 }
	global CONFIG_NET_SCH_INGRESS
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NETFILTER == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_SCH_INGRESS $CONFIG_NET_SCH_INGRESS [list $notmod] 2 }
	global CONFIG_NET_QOS
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_QOS $CONFIG_NET_QOS [list $notmod] 2 }
	global CONFIG_NET_ESTIMATOR
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_QOS == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_ESTIMATOR $CONFIG_NET_ESTIMATOR [list $notmod] 2 }
	global CONFIG_NET_CLS
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_CLS $CONFIG_NET_CLS [list $notmod] 2 }
	global CONFIG_NET_CLS_TCINDEX
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_CLS_TCINDEX $CONFIG_NET_CLS_TCINDEX [list $notmod] 2 }
	global CONFIG_NET_CLS_ROUTE4
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_CLS_ROUTE4 $CONFIG_NET_CLS_ROUTE4 [list $notmod] 2 }
	global CONFIG_NET_CLS_ROUTE
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1) && ($CONFIG_NET_CLS_ROUTE4 != 0)} then {write_tristate $cfg $autocfg CONFIG_NET_CLS_ROUTE $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_NET_CLS_FW
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_CLS_FW $CONFIG_NET_CLS_FW [list $notmod] 2 }
	global CONFIG_NET_CLS_U32
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_CLS_U32 $CONFIG_NET_CLS_U32 [list $notmod] 2 }
	global CONFIG_NET_CLS_RSVP
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1) && ($CONFIG_NET_QOS == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_CLS_RSVP $CONFIG_NET_CLS_RSVP [list $notmod] 2 }
	global CONFIG_NET_CLS_RSVP6
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1) && ($CONFIG_NET_QOS == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_CLS_RSVP6 $CONFIG_NET_CLS_RSVP6 [list $notmod] 2 }
	global CONFIG_NET_CLS_POLICE
	if {($CONFIG_NET == 1) && ($CONFIG_NET_SCHED == 1) && ($CONFIG_NET_CLS == 1) && ($CONFIG_NET_QOS == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_CLS_POLICE $CONFIG_NET_CLS_POLICE [list $notmod] 2 }
	global CONFIG_IPSEC
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC $CONFIG_IPSEC [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_comment $cfg $autocfg "IPSec options (FreeS/WAN)"}
	global CONFIG_IPSEC_IPIP
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_IPIP $CONFIG_IPSEC_IPIP [list $notmod] 2 }
	global CONFIG_IPSEC_AH
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_AH $CONFIG_IPSEC_AH [list $notmod] 2 }
	global CONFIG_IPSEC_AUTH_HMAC_MD5
	global CONFIG_IPSEC_ESP
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_AH == 1 || $CONFIG_IPSEC_ESP == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_AUTH_HMAC_MD5 $CONFIG_IPSEC_AUTH_HMAC_MD5 [list $notmod] 2 }
	global CONFIG_IPSEC_AUTH_HMAC_SHA1
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_AH == 1 || $CONFIG_IPSEC_ESP == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_AUTH_HMAC_SHA1 $CONFIG_IPSEC_AUTH_HMAC_SHA1 [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_ESP $CONFIG_IPSEC_ESP [list $notmod] 2 }
	global CONFIG_IPSEC_ENC_DES
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_ESP == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_ENC_DES $CONFIG_IPSEC_ENC_DES [list $notmod] 2 }
	global CONFIG_IPSEC_ENC_3DES
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0) && ($CONFIG_IPSEC_ESP == 1)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_ENC_3DES $CONFIG_IPSEC_ENC_3DES [list $notmod] 2 }
	global CONFIG_IPSEC_IPCOMP
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_IPCOMP $CONFIG_IPSEC_IPCOMP [list $notmod] 2 }
	global CONFIG_IPSEC_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_IPSEC != 0)} then {write_tristate $cfg $autocfg CONFIG_IPSEC_DEBUG $CONFIG_IPSEC_DEBUG [list $notmod] 2 }
	write_comment $cfg $autocfg "Telephony Support"
	global CONFIG_PHONE
	write_tristate $cfg $autocfg CONFIG_PHONE $CONFIG_PHONE [list $notmod] 2
	global CONFIG_PHONE_IXJ
	if {($CONFIG_PHONE == 1 || $CONFIG_PHONE == 2 || $CONFIG_PHONE == 4)} then {write_tristate $cfg $autocfg CONFIG_PHONE_IXJ $CONFIG_PHONE_IXJ [list $CONFIG_PHONE] 2 }
	global CONFIG_PHONE_IXJ_PCMCIA
	if {($CONFIG_PHONE_IXJ == 1 || $CONFIG_PHONE_IXJ == 2 || $CONFIG_PHONE_IXJ == 4)} then {write_tristate $cfg $autocfg CONFIG_PHONE_IXJ_PCMCIA $CONFIG_PHONE_IXJ_PCMCIA [list $CONFIG_PHONE_IXJ] 2 }
	write_comment $cfg $autocfg "ATA/IDE/MFM/RLL support"
	global CONFIG_IDE
	write_tristate $cfg $autocfg CONFIG_IDE $CONFIG_IDE [list $notmod] 2
	if {($CONFIG_IDE != 0)} then {write_comment $cfg $autocfg "IDE, ATA and ATAPI Block devices"}
	global CONFIG_BLK_DEV_IDE
	if {($CONFIG_IDE != 0) && ($CONFIG_IDE == 1 || $CONFIG_IDE == 2 || $CONFIG_IDE == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDE $CONFIG_BLK_DEV_IDE [list $CONFIG_IDE] 2 }
	if {($CONFIG_IDE != 0)} then {write_comment $cfg $autocfg "Please see Documentation/ide.txt for help/info on IDE drives"}
	global CONFIG_BLK_DEV_HD_IDE
	global CONFIG_X86
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_X86 == 1 || $CONFIG_X86 == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_HD_IDE $CONFIG_BLK_DEV_HD_IDE [list $CONFIG_X86] 2 }
	global CONFIG_BLK_DEV_HD
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_HD $CONFIG_BLK_DEV_HD_IDE [list $notmod] 2 }
	global CONFIG_BLK_DEV_IDEDISK
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDEDISK $CONFIG_BLK_DEV_IDEDISK [list $CONFIG_BLK_DEV_IDE] 2 }
	global CONFIG_IDEDISK_MULTI_MODE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK == 1 || $CONFIG_BLK_DEV_IDEDISK == 2 || $CONFIG_BLK_DEV_IDEDISK == 4)} then {write_tristate $cfg $autocfg CONFIG_IDEDISK_MULTI_MODE $CONFIG_IDEDISK_MULTI_MODE [list $CONFIG_BLK_DEV_IDEDISK] 1 }
	global CONFIG_BLK_DEV_IDEDISK_VENDOR
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDEDISK_VENDOR $CONSTANT_N [list $notmod] 2 }
	global CONFIG_BLK_DEV_IDEDISK_FUJITSU
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK_VENDOR == 1 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 2 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDEDISK_FUJITSU $CONFIG_BLK_DEV_IDEDISK_FUJITSU [list $CONFIG_BLK_DEV_IDEDISK_VENDOR] 1 }
	global CONFIG_BLK_DEV_IDEDISK_IBM
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK_VENDOR == 1 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 2 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDEDISK_IBM $CONFIG_BLK_DEV_IDEDISK_IBM [list $CONFIG_BLK_DEV_IDEDISK_VENDOR] 1 }
	global CONFIG_BLK_DEV_IDEDISK_MAXTOR
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK_VENDOR == 1 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 2 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDEDISK_MAXTOR $CONFIG_BLK_DEV_IDEDISK_MAXTOR [list $CONFIG_BLK_DEV_IDEDISK_VENDOR] 1 }
	global CONFIG_BLK_DEV_IDEDISK_QUANTUM
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK_VENDOR == 1 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 2 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDEDISK_QUANTUM $CONFIG_BLK_DEV_IDEDISK_QUANTUM [list $CONFIG_BLK_DEV_IDEDISK_VENDOR] 1 }
	global CONFIG_BLK_DEV_IDEDISK_SEAGATE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK_VENDOR == 1 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 2 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDEDISK_SEAGATE $CONFIG_BLK_DEV_IDEDISK_SEAGATE [list $CONFIG_BLK_DEV_IDEDISK_VENDOR] 1 }
	global CONFIG_BLK_DEV_IDEDISK_WD
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDEDISK_VENDOR == 1 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 2 || $CONFIG_BLK_DEV_IDEDISK_VENDOR == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDEDISK_WD $CONFIG_BLK_DEV_IDEDISK_WD [list $CONFIG_BLK_DEV_IDEDISK_VENDOR] 1 }
	global CONFIG_BLK_DEV_COMMERIAL
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_COMMERIAL $CONSTANT_N [list $notmod] 2 }
	global CONFIG_BLK_DEV_TIVO
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_COMMERIAL == 1 || $CONFIG_BLK_DEV_COMMERIAL == 2 || $CONFIG_BLK_DEV_COMMERIAL == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_TIVO $CONFIG_BLK_DEV_TIVO [list $CONFIG_BLK_DEV_COMMERIAL] 1 }
	global CONFIG_BLK_DEV_IDECS
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDECS $CONFIG_BLK_DEV_IDECS [list $CONFIG_BLK_DEV_IDE $CONFIG_PCMCIA] 2 }
	global CONFIG_BLK_DEV_IDECD
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDECD $CONFIG_BLK_DEV_IDECD [list $CONFIG_BLK_DEV_IDE] 2 }
	global CONFIG_BLK_DEV_IDETAPE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDETAPE $CONFIG_BLK_DEV_IDETAPE [list $CONFIG_BLK_DEV_IDE] 2 }
	global CONFIG_BLK_DEV_IDEFLOPPY
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDEFLOPPY $CONFIG_BLK_DEV_IDEFLOPPY [list $CONFIG_BLK_DEV_IDE] 2 }
	global CONFIG_BLK_DEV_IDESCSI
	global CONFIG_SCSI
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDESCSI $CONFIG_BLK_DEV_IDESCSI [list $CONFIG_BLK_DEV_IDE $CONFIG_SCSI] 2 }
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0)} then {write_comment $cfg $autocfg "IDE chipset support/bugfixes"}
	global CONFIG_BLK_DEV_CMD640
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_X86 == 1 || $CONFIG_X86 == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_CMD640 $CONFIG_BLK_DEV_CMD640 [list $CONFIG_X86] 2 }
	global CONFIG_BLK_DEV_CMD640_ENHANCED
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_CMD640 == 1 || $CONFIG_BLK_DEV_CMD640 == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_CMD640_ENHANCED $CONFIG_BLK_DEV_CMD640_ENHANCED [list $CONFIG_BLK_DEV_CMD640] 2 }
	global CONFIG_BLK_DEV_ISAPNP
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_ISAPNP == 1 || $CONFIG_ISAPNP == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_ISAPNP $CONFIG_BLK_DEV_ISAPNP [list $CONFIG_ISAPNP] 2 }
	global CONFIG_BLK_DEV_RZ1000
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_X86 == 1 || $CONFIG_X86 == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_RZ1000 $CONFIG_BLK_DEV_RZ1000 [list $CONFIG_X86] 2 }
	global CONFIG_BLK_DEV_IDEPCI
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDEPCI $CONFIG_BLK_DEV_IDEPCI [list $notmod] 2 }
	global CONFIG_IDEPCI_SHARE_IRQ
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1)} then {write_tristate $cfg $autocfg CONFIG_IDEPCI_SHARE_IRQ $CONFIG_IDEPCI_SHARE_IRQ [list $notmod] 2 }
	global CONFIG_BLK_DEV_IDEDMA_PCI
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDEDMA_PCI $CONFIG_BLK_DEV_IDEDMA_PCI [list $notmod] 2 }
	global CONFIG_BLK_DEV_ADMA
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_ADMA $CONFIG_BLK_DEV_IDEDMA_PCI [list $notmod] 2 }
	global CONFIG_BLK_DEV_OFFBOARD
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_OFFBOARD $CONFIG_BLK_DEV_OFFBOARD [list $notmod] 2 }
	global CONFIG_IDEDMA_PCI_AUTO
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_IDEDMA_PCI_AUTO $CONFIG_IDEDMA_PCI_AUTO [list $CONFIG_BLK_DEV_IDEDMA_PCI] 2 }
	global CONFIG_BLK_DEV_IDEDMA
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDEDMA $CONFIG_BLK_DEV_IDEDMA_PCI [list $notmod] 2 }
	global CONFIG_IDEDMA_PCI_WIP
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_IDEDMA_PCI_WIP $CONFIG_IDEDMA_PCI_WIP [list $CONFIG_BLK_DEV_IDEDMA_PCI $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_IDEDMA_NEW_DRIVE_LISTINGS
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_IDEDMA_PCI_WIP == 1 || $CONFIG_IDEDMA_PCI_WIP == 4)} then {write_tristate $cfg $autocfg CONFIG_IDEDMA_NEW_DRIVE_LISTINGS $CONFIG_IDEDMA_NEW_DRIVE_LISTINGS [list $CONFIG_IDEDMA_PCI_WIP] 2 }
	global CONFIG_BLK_DEV_AEC62XX
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_AEC62XX $CONFIG_BLK_DEV_AEC62XX [list $CONFIG_BLK_DEV_IDEDMA_PCI] 2 }
	global CONFIG_AEC62XX_TUNING
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_AEC62XX == 1 || $CONFIG_BLK_DEV_AEC62XX == 2 || $CONFIG_BLK_DEV_AEC62XX == 4)} then {write_tristate $cfg $autocfg CONFIG_AEC62XX_TUNING $CONFIG_AEC62XX_TUNING [list $CONFIG_BLK_DEV_AEC62XX] 1 }
	global CONFIG_BLK_DEV_ALI15X3
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_ALI15X3 $CONFIG_BLK_DEV_ALI15X3 [list $CONFIG_BLK_DEV_IDEDMA_PCI] 2 }
	global CONFIG_WDC_ALI15X3
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_ALI15X3 == 1 || $CONFIG_BLK_DEV_ALI15X3 == 2 || $CONFIG_BLK_DEV_ALI15X3 == 4)} then {write_tristate $cfg $autocfg CONFIG_WDC_ALI15X3 $CONFIG_WDC_ALI15X3 [list $CONFIG_BLK_DEV_ALI15X3] 1 }
	global CONFIG_BLK_DEV_AMD74XX
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_AMD74XX $CONFIG_BLK_DEV_AMD74XX [list $CONFIG_BLK_DEV_IDEDMA_PCI] 2 }
	global CONFIG_AMD74XX_OVERRIDE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_AMD74XX == 1 || $CONFIG_BLK_DEV_AMD74XX == 2 || $CONFIG_BLK_DEV_AMD74XX == 4) && ($CONFIG_IDEDMA_PCI_WIP == 1 || $CONFIG_IDEDMA_PCI_WIP == 2 || $CONFIG_IDEDMA_PCI_WIP == 4)} then {write_tristate $cfg $autocfg CONFIG_AMD74XX_OVERRIDE $CONFIG_AMD74XX_OVERRIDE [list $CONFIG_BLK_DEV_AMD74XX $CONFIG_IDEDMA_PCI_WIP] 1 }
	global CONFIG_BLK_DEV_CMD64X
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_CMD64X $CONFIG_BLK_DEV_CMD64X [list $CONFIG_BLK_DEV_IDEDMA_PCI] 2 }
	global CONFIG_BLK_DEV_CY82C693
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_CY82C693 $CONFIG_BLK_DEV_CY82C693 [list $CONFIG_BLK_DEV_IDEDMA_PCI] 2 }
	global CONFIG_BLK_DEV_CS5530
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_CS5530 $CONFIG_BLK_DEV_CS5530 [list $CONFIG_BLK_DEV_IDEDMA_PCI] 2 }
	global CONFIG_BLK_DEV_HPT34X
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_HPT34X $CONFIG_BLK_DEV_HPT34X [list $CONFIG_BLK_DEV_IDEDMA_PCI] 2 }
	global CONFIG_HPT34X_AUTODMA
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_HPT34X == 1 || $CONFIG_BLK_DEV_HPT34X == 2 || $CONFIG_BLK_DEV_HPT34X == 4) && ($CONFIG_IDEDMA_PCI_WIP == 1 || $CONFIG_IDEDMA_PCI_WIP == 2 || $CONFIG_IDEDMA_PCI_WIP == 4)} then {write_tristate $cfg $autocfg CONFIG_HPT34X_AUTODMA $CONFIG_HPT34X_AUTODMA [list $CONFIG_BLK_DEV_HPT34X $CONFIG_IDEDMA_PCI_WIP] 1 }
	global CONFIG_BLK_DEV_HPT366
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_HPT366 $CONFIG_BLK_DEV_HPT366 [list $CONFIG_BLK_DEV_IDEDMA_PCI] 2 }
	global CONFIG_BLK_DEV_NS87415
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_NS87415 $CONFIG_BLK_DEV_NS87415 [list $CONFIG_BLK_DEV_IDEDMA_PCI] 2 }
	global CONFIG_BLK_DEV_OPTI621
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_OPTI621 $CONFIG_BLK_DEV_OPTI621 [list $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_BLK_DEV_PDC202XX
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_PDC202XX $CONFIG_BLK_DEV_PDC202XX [list $CONFIG_BLK_DEV_IDEDMA_PCI] 2 }
	global CONFIG_PDC202XX_BURST
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_PDC202XX == 1 || $CONFIG_BLK_DEV_PDC202XX == 4)} then {write_tristate $cfg $autocfg CONFIG_PDC202XX_BURST $CONFIG_PDC202XX_BURST [list $CONFIG_BLK_DEV_PDC202XX] 2 }
	global CONFIG_PDC202XX_FORCE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_PDC202XX == 1 || $CONFIG_BLK_DEV_PDC202XX == 4)} then {write_tristate $cfg $autocfg CONFIG_PDC202XX_FORCE $CONFIG_PDC202XX_FORCE [list $CONFIG_BLK_DEV_PDC202XX] 2 }
	global CONFIG_BLK_DEV_SVWKS
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4) && ($CONFIG_X86 == 1 || $CONFIG_X86 == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_SVWKS $CONFIG_BLK_DEV_SVWKS [list $CONFIG_BLK_DEV_IDEDMA_PCI $CONFIG_X86] 2 }
	global CONFIG_BLK_DEV_SIS5513
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4) && ($CONFIG_X86 == 1 || $CONFIG_X86 == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_SIS5513 $CONFIG_BLK_DEV_SIS5513 [list $CONFIG_BLK_DEV_IDEDMA_PCI $CONFIG_X86] 2 }
	global CONFIG_BLK_DEV_SLC90E66
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4) && ($CONFIG_X86 == 1 || $CONFIG_X86 == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_SLC90E66 $CONFIG_BLK_DEV_SLC90E66 [list $CONFIG_BLK_DEV_IDEDMA_PCI $CONFIG_X86] 2 }
	global CONFIG_BLK_DEV_TRM290
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_TRM290 $CONFIG_BLK_DEV_TRM290 [list $CONFIG_BLK_DEV_IDEDMA_PCI] 2 }
	global CONFIG_BLK_DEV_VIA82CXXX
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_BLK_DEV_IDEPCI == 1) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_VIA82CXXX $CONFIG_BLK_DEV_VIA82CXXX [list $CONFIG_BLK_DEV_IDEDMA_PCI] 2 }
	global tmpvar_11
	global CONFIG_BLK_DEV_MPC8xx_IDE
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_BLK_DEV_MPC8xx_IDE == 1)} then {
	if { $tmpvar_11 == "8xx_PCCARD" } then { write_tristate $cfg $autocfg CONFIG_IDE_8xx_PCCARD 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_IDE_8xx_PCCARD 0 [list $notmod] 2 }
	if { $tmpvar_11 == "8xx_DIRECT" } then { write_tristate $cfg $autocfg CONFIG_IDE_8xx_DIRECT 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_IDE_8xx_DIRECT 0 [list $notmod] 2 }
	if { $tmpvar_11 == "EXT_DIRECT" } then { write_tristate $cfg $autocfg CONFIG_IDE_EXT_DIRECT 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_IDE_EXT_DIRECT 0 [list $notmod] 2 }}
	global CONFIG_IDE_CHIPSETS
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0)} then {write_tristate $cfg $autocfg CONFIG_IDE_CHIPSETS $CONFIG_IDE_CHIPSETS [list $notmod] 2 }
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {write_comment $cfg $autocfg "Note: most of these also require special kernel boot parameters"}
	global CONFIG_BLK_DEV_4DRIVES
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_4DRIVES $CONFIG_BLK_DEV_4DRIVES [list $notmod] 2 }
	global CONFIG_BLK_DEV_ALI14XX
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_ALI14XX $CONFIG_BLK_DEV_ALI14XX [list $notmod] 2 }
	global CONFIG_BLK_DEV_DTC2278
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_DTC2278 $CONFIG_BLK_DEV_DTC2278 [list $notmod] 2 }
	global CONFIG_BLK_DEV_HT6560B
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_HT6560B $CONFIG_BLK_DEV_HT6560B [list $notmod] 2 }
	global CONFIG_BLK_DEV_PDC4030
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1) && ($CONFIG_BLK_DEV_IDEDISK == 1 && $CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_PDC4030 $CONFIG_BLK_DEV_PDC4030 [list $notmod] 2 }
	global CONFIG_BLK_DEV_QD65XX
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_QD65XX $CONFIG_BLK_DEV_QD65XX [list $notmod] 2 }
	global CONFIG_BLK_DEV_UMC8672
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_UMC8672 $CONFIG_BLK_DEV_UMC8672 [list $notmod] 2 }
	global CONFIG_BLK_DEV_HD_ONLY
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 0)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_HD_ONLY $CONFIG_BLK_DEV_HD_ONLY [list $notmod] 2 }
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 0)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_HD $CONFIG_BLK_DEV_HD_ONLY [list $notmod] 2 }
	global CONFIG_IDEDMA_AUTO
	global CONFIG_BLK_DEV_IDEDMA_PMAC_AUTO
	global CONFIG_IDEDMA_ICS_AUTO
	if {($CONFIG_IDE != 0) && ($CONFIG_IDEDMA_PCI_AUTO == 1 || $CONFIG_BLK_DEV_IDEDMA_PMAC_AUTO == 1 || $CONFIG_IDEDMA_ICS_AUTO == 1)} then {write_tristate $cfg $autocfg CONFIG_IDEDMA_AUTO $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_IDE != 0) && ($CONFIG_IDEDMA_PCI_AUTO != 1 && $CONFIG_BLK_DEV_IDEDMA_PMAC_AUTO != 1 && $CONFIG_IDEDMA_ICS_AUTO != 1)} then {write_tristate $cfg $autocfg CONFIG_IDEDMA_AUTO $CONSTANT_N [list $notmod] 2 }
	global CONFIG_IDEDMA_IVB
	global CONFIG_BLK_DEV_IDEDMA_PMAC
	global CONFIG_BLK_DEV_IDEDMA_ICS
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDEDMA_PCI == 1 || $CONFIG_BLK_DEV_IDEDMA_PMAC == 1 || $CONFIG_BLK_DEV_IDEDMA_ICS == 1)} then {write_tristate $cfg $autocfg CONFIG_IDEDMA_IVB $CONFIG_IDEDMA_IVB [list $notmod] 2 }
	global CONFIG_DMA_NONPCI
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_TIVO == 1)} then {write_tristate $cfg $autocfg CONFIG_DMA_NONPCI $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_TIVO != 1)} then {write_tristate $cfg $autocfg CONFIG_DMA_NONPCI $CONSTANT_N [list $notmod] 2 }
	global CONFIG_BLK_DEV_IDE_MODES
	global CONFIG_BLK_DEV_IDE_PMAC
	global CONFIG_BLK_DEV_PIIX
	global CONFIG_BLK_DEV_IT8172
	global CONFIG_BLK_DEV_SL82C105
	if {($CONFIG_IDE != 0) && ($CONFIG_IDE_CHIPSETS == 1 || $CONFIG_BLK_DEV_AEC62XX == 1 || $CONFIG_BLK_DEV_ALI15X3 == 1 || $CONFIG_BLK_DEV_AMD74XX == 1 || $CONFIG_BLK_DEV_CMD640 == 1 || $CONFIG_BLK_DEV_CMD64X == 1 || $CONFIG_BLK_DEV_CS5530 == 1 || $CONFIG_BLK_DEV_CY82C693 == 1 || $CONFIG_BLK_DEV_HPT34X == 1 || $CONFIG_BLK_DEV_HPT366 == 1 || $CONFIG_BLK_DEV_IDE_PMAC == 1 || $CONFIG_BLK_DEV_OPTI621 == 1 || $CONFIG_BLK_DEV_SVWKS == 1 || $CONFIG_BLK_DEV_PDC202XX == 1 || $CONFIG_BLK_DEV_PIIX == 1 || $CONFIG_BLK_DEV_IT8172 == 1 || $CONFIG_BLK_DEV_SIS5513 == 1 || $CONFIG_BLK_DEV_SLC90E66 == 1 || $CONFIG_BLK_DEV_SL82C105 == 1 || $CONFIG_BLK_DEV_VIA82CXXX == 1 || $CONFIG_BLK_DEV_MPC8xx_IDE == 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDE_MODES $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_IDE != 0) && ($CONFIG_IDE_CHIPSETS != 1 && $CONFIG_BLK_DEV_AEC62XX != 1 && $CONFIG_BLK_DEV_ALI15X3 != 1 && $CONFIG_BLK_DEV_AMD74XX != 1 && $CONFIG_BLK_DEV_CMD640 != 1 && $CONFIG_BLK_DEV_CMD64X != 1 && $CONFIG_BLK_DEV_CS5530 != 1 && $CONFIG_BLK_DEV_CY82C693 != 1 && $CONFIG_BLK_DEV_HPT34X != 1 && $CONFIG_BLK_DEV_HPT366 != 1 && $CONFIG_BLK_DEV_IDE_PMAC != 1 && $CONFIG_BLK_DEV_OPTI621 != 1 && $CONFIG_BLK_DEV_SVWKS != 1 && $CONFIG_BLK_DEV_PDC202XX != 1 && $CONFIG_BLK_DEV_PIIX != 1 && $CONFIG_BLK_DEV_IT8172 != 1 && $CONFIG_BLK_DEV_SIS5513 != 1 && $CONFIG_BLK_DEV_SLC90E66 != 1 && $CONFIG_BLK_DEV_SL82C105 != 1 && $CONFIG_BLK_DEV_VIA82CXXX != 1 && $CONFIG_BLK_DEV_MPC8xx_IDE != 1)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDE_MODES $CONSTANT_N [list $notmod] 2 }
	global CONFIG_BLK_DEV_ATARAID
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_ATARAID $CONFIG_BLK_DEV_ATARAID [list $CONFIG_BLK_DEV_IDE $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_BLK_DEV_ATARAID_PDC
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4) && ($CONFIG_BLK_DEV_ATARAID == 1 || $CONFIG_BLK_DEV_ATARAID == 2 || $CONFIG_BLK_DEV_ATARAID == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_ATARAID_PDC $CONFIG_BLK_DEV_ATARAID_PDC [list $CONFIG_BLK_DEV_IDE $CONFIG_EXPERIMENTAL $CONFIG_BLK_DEV_ATARAID] 2 }
	global CONFIG_BLK_DEV_ATARAID_HPT
	if {($CONFIG_IDE != 0) && ($CONFIG_BLK_DEV_IDE == 1 || $CONFIG_BLK_DEV_IDE == 2 || $CONFIG_BLK_DEV_IDE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4) && ($CONFIG_BLK_DEV_ATARAID == 1 || $CONFIG_BLK_DEV_ATARAID == 2 || $CONFIG_BLK_DEV_ATARAID == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_ATARAID_HPT $CONFIG_BLK_DEV_ATARAID_HPT [list $CONFIG_BLK_DEV_IDE $CONFIG_EXPERIMENTAL $CONFIG_BLK_DEV_ATARAID] 2 }
	if {($CONFIG_IDE == 0)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_IDE_MODES $CONSTANT_N [list $notmod] 2 }
	if {($CONFIG_IDE == 0)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_HD $CONSTANT_N [list $notmod] 2 }
	write_comment $cfg $autocfg "SCSI support"
	write_tristate $cfg $autocfg CONFIG_SCSI $CONFIG_SCSI [list $notmod] 2
	if {($CONFIG_SCSI != 0)} then {write_comment $cfg $autocfg "SCSI support type (disk, tape, CD-ROM)"}
	global CONFIG_BLK_DEV_SD
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_SD $CONFIG_BLK_DEV_SD [list $CONFIG_SCSI] 2 }
	global CONFIG_SD_EXTRA_DEVS
	if {($CONFIG_SCSI != 0) && ($CONFIG_BLK_DEV_SD != 0)} then {write_int $cfg $autocfg CONFIG_SD_EXTRA_DEVS $CONFIG_SD_EXTRA_DEVS $notmod }
	global CONFIG_CHR_DEV_ST
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_CHR_DEV_ST $CONFIG_CHR_DEV_ST [list $CONFIG_SCSI] 2 }
	global CONFIG_CHR_DEV_OSST
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_CHR_DEV_OSST $CONFIG_CHR_DEV_OSST [list $CONFIG_SCSI] 2 }
	global CONFIG_BLK_DEV_SR
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_SR $CONFIG_BLK_DEV_SR [list $CONFIG_SCSI] 2 }
	global CONFIG_BLK_DEV_SR_VENDOR
	if {($CONFIG_SCSI != 0) && ($CONFIG_BLK_DEV_SR != 0)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_SR_VENDOR $CONFIG_BLK_DEV_SR_VENDOR [list $notmod] 2 }
	global CONFIG_SR_EXTRA_DEVS
	if {($CONFIG_SCSI != 0) && ($CONFIG_BLK_DEV_SR != 0)} then {write_int $cfg $autocfg CONFIG_SR_EXTRA_DEVS $CONFIG_SR_EXTRA_DEVS $notmod }
	global CONFIG_CHR_DEV_SG
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_CHR_DEV_SG $CONFIG_CHR_DEV_SG [list $CONFIG_SCSI] 2 }
	if {($CONFIG_SCSI != 0)} then {write_comment $cfg $autocfg "Some SCSI devices (e.g. CD jukebox) support multiple LUNs"}
	global CONFIG_SCSI_DEBUG_QUEUES
	if {($CONFIG_SCSI != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_DEBUG_QUEUES $CONFIG_SCSI_DEBUG_QUEUES [list $notmod] 2 }
	global CONFIG_SCSI_MULTI_LUN
	if {($CONFIG_SCSI != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_MULTI_LUN $CONFIG_SCSI_MULTI_LUN [list $notmod] 2 }
	global CONFIG_SCSI_CONSTANTS
	if {($CONFIG_SCSI != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_CONSTANTS $CONFIG_SCSI_CONSTANTS [list $notmod] 2 }
	global CONFIG_SCSI_LOGGING
	if {($CONFIG_SCSI != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_LOGGING $CONFIG_SCSI_LOGGING [list $notmod] 2 }
	if {($CONFIG_SCSI != 0)} then {write_comment $cfg $autocfg "SCSI low-level drivers"}
	global CONFIG_BLK_DEV_3W_XXXX_RAID
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_BLK_DEV_3W_XXXX_RAID $CONFIG_BLK_DEV_3W_XXXX_RAID [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_7000FASST
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_7000FASST $CONFIG_SCSI_7000FASST [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_ACARD
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_ACARD $CONFIG_SCSI_ACARD [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_AHA152X
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_AHA152X $CONFIG_SCSI_AHA152X [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_AHA1542
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_AHA1542 $CONFIG_SCSI_AHA1542 [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_AHA1740
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_AHA1740 $CONFIG_SCSI_AHA1740 [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_AACRAID
	if {($CONFIG_SCSI != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_AACRAID $CONFIG_SCSI_AACRAID [list $CONFIG_SCSI $CONFIG_PCI] 2 }
	global CONFIG_SCSI_AIC7XXX
	global CONFIG_SCSI_AIC7XXX_OLD
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX_OLD != 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_AIC7XXX $CONFIG_SCSI_AIC7XXX [list $CONFIG_SCSI] 2 }
	global CONFIG_AIC7XXX_CMDS_PER_DEVICE
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX_OLD != 1) && ($CONFIG_SCSI_AIC7XXX != 0)} then {write_int $cfg $autocfg CONFIG_AIC7XXX_CMDS_PER_DEVICE $CONFIG_AIC7XXX_CMDS_PER_DEVICE $notmod }
	global CONFIG_AIC7XXX_RESET_DELAY_MS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX_OLD != 1) && ($CONFIG_SCSI_AIC7XXX != 0)} then {write_int $cfg $autocfg CONFIG_AIC7XXX_RESET_DELAY_MS $CONFIG_AIC7XXX_RESET_DELAY_MS $notmod }
	global CONFIG_AIC7XXX_BUILD_FIRMWARE
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX_OLD != 1) && ($CONFIG_SCSI_AIC7XXX != 0)} then {write_tristate $cfg $autocfg CONFIG_AIC7XXX_BUILD_FIRMWARE $CONFIG_AIC7XXX_BUILD_FIRMWARE [list $notmod] 2 }
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX != 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_AIC7XXX_OLD $CONFIG_SCSI_AIC7XXX_OLD [list $CONFIG_SCSI] 2 }
	global CONFIG_AIC7XXX_OLD_TCQ_ON_BY_DEFAULT
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX != 1) && ($CONFIG_SCSI_AIC7XXX_OLD != 0)} then {write_tristate $cfg $autocfg CONFIG_AIC7XXX_OLD_TCQ_ON_BY_DEFAULT $CONFIG_AIC7XXX_OLD_TCQ_ON_BY_DEFAULT [list $notmod] 2 }
	global CONFIG_AIC7XXX_OLD_CMDS_PER_DEVICE
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX != 1) && ($CONFIG_SCSI_AIC7XXX_OLD != 0)} then {write_int $cfg $autocfg CONFIG_AIC7XXX_OLD_CMDS_PER_DEVICE $CONFIG_AIC7XXX_OLD_CMDS_PER_DEVICE $notmod }
	global CONFIG_AIC7XXX_OLD_PROC_STATS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_AIC7XXX != 1) && ($CONFIG_SCSI_AIC7XXX_OLD != 0)} then {write_tristate $cfg $autocfg CONFIG_AIC7XXX_OLD_PROC_STATS $CONFIG_AIC7XXX_OLD_PROC_STATS [list $notmod] 2 }
	global CONFIG_SCSI_DPT_I2O
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_DPT_I2O $CONFIG_SCSI_DPT_I2O [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_ADVANSYS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_ADVANSYS $CONFIG_SCSI_ADVANSYS [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_IN2000
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_IN2000 $CONFIG_SCSI_IN2000 [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_AM53C974
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_AM53C974 $CONFIG_SCSI_AM53C974 [list $CONFIG_SCSI $CONFIG_PCI] 2 }
	global CONFIG_SCSI_MEGARAID
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_MEGARAID $CONFIG_SCSI_MEGARAID [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_BUSLOGIC
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_BUSLOGIC $CONFIG_SCSI_BUSLOGIC [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_OMIT_FLASHPOINT
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_BUSLOGIC != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_OMIT_FLASHPOINT $CONFIG_SCSI_OMIT_FLASHPOINT [list $notmod] 2 }
	global CONFIG_SCSI_CPQFCTS
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_CPQFCTS $CONFIG_SCSI_CPQFCTS [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_DMX3191D
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_DMX3191D $CONFIG_SCSI_DMX3191D [list $CONFIG_SCSI $CONFIG_PCI] 2 }
	global CONFIG_SCSI_DTC3280
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_DTC3280 $CONFIG_SCSI_DTC3280 [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_EATA
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_EATA $CONFIG_SCSI_EATA [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_EATA_TAGGED_QUEUE
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_EATA != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_EATA_TAGGED_QUEUE $CONFIG_SCSI_EATA_TAGGED_QUEUE [list $notmod] 2 }
	global CONFIG_SCSI_EATA_LINKED_COMMANDS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_EATA != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_EATA_LINKED_COMMANDS $CONFIG_SCSI_EATA_LINKED_COMMANDS [list $notmod] 2 }
	global CONFIG_SCSI_EATA_MAX_TAGS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_EATA != 0)} then {write_int $cfg $autocfg CONFIG_SCSI_EATA_MAX_TAGS $CONFIG_SCSI_EATA_MAX_TAGS $notmod }
	global CONFIG_SCSI_EATA_DMA
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_EATA_DMA $CONFIG_SCSI_EATA_DMA [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_EATA_PIO
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_EATA_PIO $CONFIG_SCSI_EATA_PIO [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_FUTURE_DOMAIN
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_FUTURE_DOMAIN $CONFIG_SCSI_FUTURE_DOMAIN [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_FD_MCS
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_FD_MCS $CONFIG_SCSI_FD_MCS [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_GDTH
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_GDTH $CONFIG_SCSI_GDTH [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_GENERIC_NCR5380
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_GENERIC_NCR5380 $CONFIG_SCSI_GENERIC_NCR5380 [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_GENERIC_NCR53C400
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_GENERIC_NCR5380 != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_GENERIC_NCR53C400 $CONFIG_SCSI_GENERIC_NCR53C400 [list $notmod] 2 }
	global tmpvar_12
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_GENERIC_NCR5380 != 0)} then {
	if { $tmpvar_12 == "Port" } then { write_tristate $cfg $autocfg CONFIG_SCSI_G_NCR5380_PORT 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SCSI_G_NCR5380_PORT 0 [list $notmod] 2 }
	if { $tmpvar_12 == "Memory" } then { write_tristate $cfg $autocfg CONFIG_SCSI_G_NCR5380_MEM 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_SCSI_G_NCR5380_MEM 0 [list $notmod] 2 }}
	global CONFIG_SCSI_IBMMCA
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_IBMMCA $CONFIG_SCSI_IBMMCA [list $CONFIG_SCSI] 2 }
	global CONFIG_IBMMCA_SCSI_ORDER_STANDARD
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI_IBMMCA != 0)} then {write_tristate $cfg $autocfg CONFIG_IBMMCA_SCSI_ORDER_STANDARD $CONFIG_IBMMCA_SCSI_ORDER_STANDARD [list $notmod] 2 }
	global CONFIG_IBMMCA_SCSI_DEV_RESET
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI_IBMMCA != 0)} then {write_tristate $cfg $autocfg CONFIG_IBMMCA_SCSI_DEV_RESET $CONFIG_IBMMCA_SCSI_DEV_RESET [list $notmod] 2 }
	global CONFIG_SCSI_INITIO
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_INITIO $CONFIG_SCSI_INITIO [list $CONFIG_SCSI $CONFIG_PCI] 2 }
	global CONFIG_SCSI_INIA100
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_INIA100 $CONFIG_SCSI_INIA100 [list $CONFIG_SCSI $CONFIG_PCI] 2 }
	global CONFIG_SCSI_PPA
	if {($CONFIG_SCSI != 0) && ($CONFIG_PARPORT != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_PPA $CONFIG_SCSI_PPA [list $CONFIG_SCSI $CONFIG_PARPORT] 2 }
	global CONFIG_SCSI_IMM
	if {($CONFIG_SCSI != 0) && ($CONFIG_PARPORT != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_IMM $CONFIG_SCSI_IMM [list $CONFIG_SCSI $CONFIG_PARPORT] 2 }
	global CONFIG_SCSI_IZIP_EPP16
	if {($CONFIG_SCSI != 0) && ($CONFIG_PARPORT != 0) && ($CONFIG_SCSI_PPA != 0 || $CONFIG_SCSI_IMM != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_IZIP_EPP16 $CONFIG_SCSI_IZIP_EPP16 [list $notmod] 2 }
	global CONFIG_SCSI_IZIP_SLOW_CTR
	if {($CONFIG_SCSI != 0) && ($CONFIG_PARPORT != 0) && ($CONFIG_SCSI_PPA != 0 || $CONFIG_SCSI_IMM != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_IZIP_SLOW_CTR $CONFIG_SCSI_IZIP_SLOW_CTR [list $notmod] 2 }
	global CONFIG_SCSI_NCR53C406A
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_NCR53C406A $CONFIG_SCSI_NCR53C406A [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_NCR_D700
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_NCR_D700 $CONFIG_SCSI_NCR_D700 [list $CONFIG_SCSI] 2 }
	global CONFIG_53C700_IO_MAPPED
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI_NCR_D700 != 0)} then {write_tristate $cfg $autocfg CONFIG_53C700_IO_MAPPED $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_SCSI_NCR53C7xx
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_NCR53C7xx $CONFIG_SCSI_NCR53C7xx [list $CONFIG_SCSI $CONFIG_PCI] 2 }
	global CONFIG_SCSI_NCR53C7xx_sync
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_NCR53C7xx != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_NCR53C7xx_sync $CONFIG_SCSI_NCR53C7xx_sync [list $notmod] 2 }
	global CONFIG_SCSI_NCR53C7xx_FAST
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_NCR53C7xx != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_NCR53C7xx_FAST $CONFIG_SCSI_NCR53C7xx_FAST [list $notmod] 2 }
	global CONFIG_SCSI_NCR53C7xx_DISCONNECT
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_NCR53C7xx != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_NCR53C7xx_DISCONNECT $CONFIG_SCSI_NCR53C7xx_DISCONNECT [list $notmod] 2 }
	global CONFIG_SCSI_SYM53C8XX_2
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_SYM53C8XX_2 $CONFIG_SCSI_SYM53C8XX_2 [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_SYM53C8XX_DMA_ADDRESSING_MODE
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI_SYM53C8XX_2 != 0)} then {write_int $cfg $autocfg CONFIG_SCSI_SYM53C8XX_DMA_ADDRESSING_MODE $CONFIG_SCSI_SYM53C8XX_DMA_ADDRESSING_MODE $notmod }
	global CONFIG_SCSI_SYM53C8XX_DEFAULT_TAGS
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI_SYM53C8XX_2 != 0)} then {write_int $cfg $autocfg CONFIG_SCSI_SYM53C8XX_DEFAULT_TAGS $CONFIG_SCSI_SYM53C8XX_DEFAULT_TAGS $notmod }
	global CONFIG_SCSI_SYM53C8XX_MAX_TAGS
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI_SYM53C8XX_2 != 0)} then {write_int $cfg $autocfg CONFIG_SCSI_SYM53C8XX_MAX_TAGS $CONFIG_SCSI_SYM53C8XX_MAX_TAGS $notmod }
	global CONFIG_SCSI_SYM53C8XX_IOMAPPED
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI_SYM53C8XX_2 != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_SYM53C8XX_IOMAPPED $CONFIG_SCSI_SYM53C8XX_IOMAPPED [list $notmod] 2 }
	global CONFIG_SCSI_NCR53C8XX
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_NCR53C8XX $CONFIG_SCSI_NCR53C8XX [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_SYM53C8XX
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_SYM53C8XX $CONFIG_SCSI_SYM53C8XX [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_NCR53C8XX_DEFAULT_TAGS
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0)} then {write_int $cfg $autocfg CONFIG_SCSI_NCR53C8XX_DEFAULT_TAGS $CONFIG_SCSI_NCR53C8XX_DEFAULT_TAGS $notmod }
	global CONFIG_SCSI_NCR53C8XX_MAX_TAGS
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0)} then {write_int $cfg $autocfg CONFIG_SCSI_NCR53C8XX_MAX_TAGS $CONFIG_SCSI_NCR53C8XX_MAX_TAGS $notmod }
	global CONFIG_SCSI_NCR53C8XX_SYNC
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0)} then {write_int $cfg $autocfg CONFIG_SCSI_NCR53C8XX_SYNC $CONFIG_SCSI_NCR53C8XX_SYNC $notmod }
	global CONFIG_SCSI_NCR53C8XX_PROFILE
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_NCR53C8XX_PROFILE $CONFIG_SCSI_NCR53C8XX_PROFILE [list $notmod] 2 }
	global CONFIG_SCSI_NCR53C8XX_IOMAPPED
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_NCR53C8XX_IOMAPPED $CONFIG_SCSI_NCR53C8XX_IOMAPPED [list $notmod] 2 }
	global CONFIG_SCSI_NCR53C8XX_PQS_PDS
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0) && ($CONFIG_SCSI_SYM53C8XX != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_NCR53C8XX_PQS_PDS $CONFIG_SCSI_NCR53C8XX_PQS_PDS [list $notmod] 2 }
	global CONFIG_SCSI_NCR53C8XX_NO_DISCONNECT
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0) && ($CONFIG_SCSI_NCR53C8XX_DEFAULT_TAGS == "0")} then {write_tristate $cfg $autocfg CONFIG_SCSI_NCR53C8XX_NO_DISCONNECT $CONFIG_SCSI_NCR53C8XX_NO_DISCONNECT [list $notmod] 2 }
	global CONFIG_SCSI_NCR53C8XX_SYMBIOS_COMPAT
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1 && $CONFIG_SCSI_SYM53C8XX_2 != 1) && ($CONFIG_SCSI_NCR53C8XX != 0 || $CONFIG_SCSI_SYM53C8XX != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_SCSI_NCR53C8XX_SYMBIOS_COMPAT $CONFIG_SCSI_NCR53C8XX_SYMBIOS_COMPAT [list $notmod] 2 }
	global CONFIG_SCSI_MCA_53C9X
	if {($CONFIG_SCSI != 0) && ($CONFIG_MCA == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_MCA_53C9X $CONFIG_SCSI_MCA_53C9X [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_PAS16
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_PAS16 $CONFIG_SCSI_PAS16 [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_PCI2000
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_PCI2000 $CONFIG_SCSI_PCI2000 [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_PCI2220I
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_PCI2220I $CONFIG_SCSI_PCI2220I [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_PSI240I
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_PSI240I $CONFIG_SCSI_PSI240I [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_QLOGIC_FAS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_QLOGIC_FAS $CONFIG_SCSI_QLOGIC_FAS [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_QLOGIC_ISP
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_QLOGIC_ISP $CONFIG_SCSI_QLOGIC_ISP [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_QLOGIC_FC
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_QLOGIC_FC $CONFIG_SCSI_QLOGIC_FC [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_QLOGIC_FC_FIRMWARE
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI_QLOGIC_FC != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_QLOGIC_FC_FIRMWARE $CONFIG_SCSI_QLOGIC_FC_FIRMWARE [list $notmod] 2 }
	global CONFIG_SCSI_QLOGIC_1280
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_QLOGIC_1280 $CONFIG_SCSI_QLOGIC_1280 [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_SIM710
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_SIM710 $CONFIG_SCSI_SIM710 [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_SYM53C416
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_SYM53C416 $CONFIG_SCSI_SYM53C416 [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_DC390T
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_DC390T $CONFIG_SCSI_DC390T [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_DC390T_NOGENSUPP
	if {($CONFIG_SCSI != 0) && ($CONFIG_PCI == 1) && ($CONFIG_SCSI_DC390T != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_DC390T_NOGENSUPP $CONFIG_SCSI_DC390T_NOGENSUPP [list $notmod] 2 }
	global CONFIG_SCSI_T128
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_T128 $CONFIG_SCSI_T128 [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_U14_34F
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_U14_34F $CONFIG_SCSI_U14_34F [list $CONFIG_SCSI] 2 }
	global CONFIG_SCSI_U14_34F_LINKED_COMMANDS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_U14_34F != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_U14_34F_LINKED_COMMANDS $CONFIG_SCSI_U14_34F_LINKED_COMMANDS [list $notmod] 2 }
	global CONFIG_SCSI_U14_34F_MAX_TAGS
	if {($CONFIG_SCSI != 0) && ($CONFIG_SCSI_U14_34F != 0)} then {write_int $cfg $autocfg CONFIG_SCSI_U14_34F_MAX_TAGS $CONFIG_SCSI_U14_34F_MAX_TAGS $notmod }
	global CONFIG_SCSI_DEBUG
	if {($CONFIG_SCSI != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_SCSI_DEBUG $CONFIG_SCSI_DEBUG [list $CONFIG_SCSI] 2 }
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0)} then {write_comment $cfg $autocfg "PCMCIA SCSI adapter support"}
	global CONFIG_SCSI_PCMCIA
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0)} then {write_tristate $cfg $autocfg CONFIG_SCSI_PCMCIA $CONFIG_SCSI_PCMCIA [list $notmod] 2 }
	global CONFIG_PCMCIA_AHA152X
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_SCSI_PCMCIA == 1)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_AHA152X $CONFIG_PCMCIA_AHA152X [list $CONSTANT_M] 2 }
	global CONFIG_PCMCIA_FDOMAIN
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_SCSI_PCMCIA == 1)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_FDOMAIN $CONFIG_PCMCIA_FDOMAIN [list $CONSTANT_M] 2 }
	global CONFIG_PCMCIA_NINJA_SCSI
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_SCSI_PCMCIA == 1)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_NINJA_SCSI $CONFIG_PCMCIA_NINJA_SCSI [list $CONSTANT_M] 2 }
	global CONFIG_PCMCIA_QLOGIC
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_SCSI_PCMCIA == 1)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_QLOGIC $CONFIG_PCMCIA_QLOGIC [list $CONSTANT_M] 2 }
	global CONFIG_PCMCIA_SCSICARD
	if {($CONFIG_SCSI != 0) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_PCMCIA_QLOGIC == 1 || $CONFIG_PCMCIA_AHA152X == 1 || $CONFIG_PCMCIA_FDOMAIN == 1 || $CONFIG_PCMCIA_NINJA_SCSI == 1)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_SCSICARD $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1)} then {write_comment $cfg $autocfg "IEEE 1394 (FireWire) support (EXPERIMENTAL)"}
	global CONFIG_IEEE1394
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_IEEE1394 $CONFIG_IEEE1394 [list $CONFIG_PCI] 2 }
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0)} then {write_comment $cfg $autocfg "Device Drivers"}
	global CONFIG_IEEE1394_PCILYNX
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_IEEE1394 == 1 || $CONFIG_IEEE1394 == 2 || $CONFIG_IEEE1394 == 4)} then {write_tristate $cfg $autocfg CONFIG_IEEE1394_PCILYNX $CONFIG_IEEE1394_PCILYNX [list $CONFIG_IEEE1394] 2 }
	global CONFIG_IEEE1394_PCILYNX_LOCALRAM
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_IEEE1394_PCILYNX != 0)} then {write_tristate $cfg $autocfg CONFIG_IEEE1394_PCILYNX_LOCALRAM $CONFIG_IEEE1394_PCILYNX_LOCALRAM [list $notmod] 2 }
	global CONFIG_IEEE1394_PCILYNX_PORTS
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_IEEE1394_PCILYNX != 0)} then {write_tristate $cfg $autocfg CONFIG_IEEE1394_PCILYNX_PORTS $CONFIG_IEEE1394_PCILYNX_PORTS [list $notmod] 2 }
	global CONFIG_IEEE1394_OHCI1394
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_IEEE1394 == 1 || $CONFIG_IEEE1394 == 2 || $CONFIG_IEEE1394 == 4)} then {write_tristate $cfg $autocfg CONFIG_IEEE1394_OHCI1394 $CONFIG_IEEE1394_OHCI1394 [list $CONFIG_IEEE1394] 2 }
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0)} then {write_comment $cfg $autocfg "Protocol Drivers"}
	global CONFIG_IEEE1394_VIDEO1394
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_IEEE1394_OHCI1394 == 1 || $CONFIG_IEEE1394_OHCI1394 == 2 || $CONFIG_IEEE1394_OHCI1394 == 4)} then {write_tristate $cfg $autocfg CONFIG_IEEE1394_VIDEO1394 $CONFIG_IEEE1394_VIDEO1394 [list $CONFIG_IEEE1394_OHCI1394] 2 }
	global CONFIG_IEEE1394_SBP2
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_IEEE1394 == 1 || $CONFIG_IEEE1394 == 2 || $CONFIG_IEEE1394 == 4)} then {write_tristate $cfg $autocfg CONFIG_IEEE1394_SBP2 $CONFIG_IEEE1394_SBP2 [list $CONFIG_SCSI $CONFIG_IEEE1394] 2 }
	global CONFIG_IEEE1394_RAWIO
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0) && ($CONFIG_IEEE1394 == 1 || $CONFIG_IEEE1394 == 2 || $CONFIG_IEEE1394 == 4)} then {write_tristate $cfg $autocfg CONFIG_IEEE1394_RAWIO $CONFIG_IEEE1394_RAWIO [list $CONFIG_IEEE1394] 2 }
	global CONFIG_IEEE1394_VERBOSEDEBUG
	if {($CONFIG_PCI == 1 && $CONFIG_EXPERIMENTAL == 1) && ($CONFIG_IEEE1394 != 0)} then {write_tristate $cfg $autocfg CONFIG_IEEE1394_VERBOSEDEBUG $CONFIG_IEEE1394_VERBOSEDEBUG [list $notmod] 2 }
	write_comment $cfg $autocfg "I2O device support"
	global CONFIG_I2O
	write_tristate $cfg $autocfg CONFIG_I2O $CONFIG_I2O [list $notmod] 2
	global CONFIG_I2O_PCI
	if {($CONFIG_PCI == 1) && ($CONFIG_I2O == 1 || $CONFIG_I2O == 2 || $CONFIG_I2O == 4)} then {write_tristate $cfg $autocfg CONFIG_I2O_PCI $CONFIG_I2O_PCI [list $CONFIG_I2O] 2 }
	global CONFIG_I2O_BLOCK
	if {($CONFIG_I2O == 1 || $CONFIG_I2O == 2 || $CONFIG_I2O == 4)} then {write_tristate $cfg $autocfg CONFIG_I2O_BLOCK $CONFIG_I2O_BLOCK [list $CONFIG_I2O] 2 }
	global CONFIG_I2O_LAN
	if {($CONFIG_NET == 1) && ($CONFIG_I2O == 1 || $CONFIG_I2O == 2 || $CONFIG_I2O == 4)} then {write_tristate $cfg $autocfg CONFIG_I2O_LAN $CONFIG_I2O_LAN [list $CONFIG_I2O] 2 }
	global CONFIG_I2O_SCSI
	if {($CONFIG_I2O == 1 || $CONFIG_I2O == 2 || $CONFIG_I2O == 4) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_I2O_SCSI $CONFIG_I2O_SCSI [list $CONFIG_I2O $CONFIG_SCSI] 2 }
	global CONFIG_I2O_PROC
	if {($CONFIG_I2O == 1 || $CONFIG_I2O == 2 || $CONFIG_I2O == 4)} then {write_tristate $cfg $autocfg CONFIG_I2O_PROC $CONFIG_I2O_PROC [list $CONFIG_I2O] 2 }
	if {($CONFIG_NET == 1)} then {write_comment $cfg $autocfg "Network device support"}
	global CONFIG_NETDEVICES
	if {($CONFIG_NET == 1)} then {write_tristate $cfg $autocfg CONFIG_NETDEVICES $CONFIG_NETDEVICES [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_comment $cfg $autocfg "ARCnet devices"}
	global CONFIG_ARCNET
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_ARCNET $CONFIG_ARCNET [list $notmod] 2 }
	global CONFIG_ARCNET_1201
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {write_tristate $cfg $autocfg CONFIG_ARCNET_1201 $CONFIG_ARCNET_1201 [list $CONFIG_ARCNET] 2 }
	global CONFIG_ARCNET_1051
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {write_tristate $cfg $autocfg CONFIG_ARCNET_1051 $CONFIG_ARCNET_1051 [list $CONFIG_ARCNET] 2 }
	global CONFIG_ARCNET_RAW
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {write_tristate $cfg $autocfg CONFIG_ARCNET_RAW $CONFIG_ARCNET_RAW [list $CONFIG_ARCNET] 2 }
	global CONFIG_ARCNET_COM90xx
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {write_tristate $cfg $autocfg CONFIG_ARCNET_COM90xx $CONFIG_ARCNET_COM90xx [list $CONFIG_ARCNET] 2 }
	global CONFIG_ARCNET_COM90xxIO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {write_tristate $cfg $autocfg CONFIG_ARCNET_COM90xxIO $CONFIG_ARCNET_COM90xxIO [list $CONFIG_ARCNET] 2 }
	global CONFIG_ARCNET_RIM_I
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {write_tristate $cfg $autocfg CONFIG_ARCNET_RIM_I $CONFIG_ARCNET_RIM_I [list $CONFIG_ARCNET] 2 }
	global CONFIG_ARCNET_COM20020
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4)} then {write_tristate $cfg $autocfg CONFIG_ARCNET_COM20020 $CONFIG_ARCNET_COM20020 [list $CONFIG_ARCNET] 2 }
	global CONFIG_ARCNET_COM20020_ISA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET_COM20020 == 1 || $CONFIG_ARCNET_COM20020 == 2 || $CONFIG_ARCNET_COM20020 == 4) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {write_tristate $cfg $autocfg CONFIG_ARCNET_COM20020_ISA $CONFIG_ARCNET_COM20020_ISA [list $CONFIG_ARCNET_COM20020 $CONFIG_ISA] 2 }
	global CONFIG_ARCNET_COM20020_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ARCNET != 0) && ($CONFIG_ARCNET_COM20020 == 1 || $CONFIG_ARCNET_COM20020 == 2 || $CONFIG_ARCNET_COM20020 == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_ARCNET_COM20020_PCI $CONFIG_ARCNET_COM20020_PCI [list $CONFIG_ARCNET_COM20020 $CONFIG_PCI] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0)} then {write_comment $cfg $autocfg "Appletalk devices"}
	global CONFIG_APPLETALK
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0)} then {write_tristate $cfg $autocfg CONFIG_APPLETALK $CONFIG_APPLETALK [list $notmod] 2 }
	global CONFIG_LTPC
	global CONFIG_DEV_APPLETALK
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_DEV_APPLETALK == 1 || $CONFIG_DEV_APPLETALK == 2 || $CONFIG_DEV_APPLETALK == 4)} then {write_tristate $cfg $autocfg CONFIG_LTPC $CONFIG_LTPC [list $CONFIG_DEV_APPLETALK] 2 }
	global CONFIG_COPS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_DEV_APPLETALK == 1 || $CONFIG_DEV_APPLETALK == 2 || $CONFIG_DEV_APPLETALK == 4)} then {write_tristate $cfg $autocfg CONFIG_COPS $CONFIG_COPS [list $CONFIG_DEV_APPLETALK] 2 }
	global CONFIG_COPS_DAYNA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_COPS != 0)} then {write_tristate $cfg $autocfg CONFIG_COPS_DAYNA $CONFIG_COPS_DAYNA [list $notmod] 2 }
	global CONFIG_COPS_TANGENT
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_COPS != 0)} then {write_tristate $cfg $autocfg CONFIG_COPS_TANGENT $CONFIG_COPS_TANGENT [list $notmod] 2 }
	global CONFIG_IPDDP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_DEV_APPLETALK == 1 || $CONFIG_DEV_APPLETALK == 2 || $CONFIG_DEV_APPLETALK == 4)} then {write_tristate $cfg $autocfg CONFIG_IPDDP $CONFIG_IPDDP [list $CONFIG_DEV_APPLETALK] 2 }
	global CONFIG_IPDDP_ENCAP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_IPDDP != 0)} then {write_tristate $cfg $autocfg CONFIG_IPDDP_ENCAP $CONFIG_IPDDP_ENCAP [list $notmod] 2 }
	global CONFIG_IPDDP_DECAP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATALK != 0) && ($CONFIG_IPDDP != 0)} then {write_tristate $cfg $autocfg CONFIG_IPDDP_DECAP $CONFIG_IPDDP_DECAP [list $notmod] 2 }
	global CONFIG_DUMMY
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_DUMMY $CONFIG_DUMMY [list $notmod] 2 }
	global CONFIG_BONDING
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_BONDING $CONFIG_BONDING [list $notmod] 2 }
	global CONFIG_EQUALIZER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_EQUALIZER $CONFIG_EQUALIZER [list $notmod] 2 }
	global CONFIG_TUN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_TUN $CONFIG_TUN [list $notmod] 2 }
	global CONFIG_ETHERTAP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_ETHERTAP $CONFIG_ETHERTAP [list $notmod] 2 }
	global CONFIG_NET_SB1000
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ISAPNP == 1 || $CONFIG_ISAPNP == 2) && ($CONFIG_ISAPNP == 1 || $CONFIG_ISAPNP == 2 || $CONFIG_ISAPNP == 4)} then {write_tristate $cfg $autocfg CONFIG_NET_SB1000 $CONFIG_NET_SB1000 [list $CONFIG_ISAPNP] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_comment $cfg $autocfg "Ethernet (10 or 100Mbit)"}
	global CONFIG_NET_ETHERNET
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_ETHERNET $CONFIG_NET_ETHERNET [list $notmod] 2 }
	global CONFIG_SUNLANCE
	global CONFIG_SBUS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_SBUS == 1 || $CONFIG_SBUS == 2 || $CONFIG_SBUS == 4)} then {write_tristate $cfg $autocfg CONFIG_SUNLANCE $CONFIG_SUNLANCE [list $CONFIG_SBUS] 2 }
	global CONFIG_HAPPYMEAL
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_HAPPYMEAL $CONFIG_HAPPYMEAL [list $notmod] 2 }
	global CONFIG_SUNBMAC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_SBUS == 1 || $CONFIG_SBUS == 2 || $CONFIG_SBUS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_SUNBMAC $CONFIG_SUNBMAC [list $CONFIG_SBUS $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_SUNQE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_SBUS == 1 || $CONFIG_SBUS == 2 || $CONFIG_SBUS == 4)} then {write_tristate $cfg $autocfg CONFIG_SUNQE $CONFIG_SUNQE [list $CONFIG_SBUS] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_SBUS == 1 || $CONFIG_SBUS == 2 || $CONFIG_SBUS == 4)} then {write_tristate $cfg $autocfg CONFIG_SUNLANCE $CONFIG_SUNLANCE [list $CONFIG_SBUS] 2 }
	global CONFIG_SUNGEM
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SUNGEM $CONFIG_SUNGEM [list $CONFIG_PCI] 2 }
	global CONFIG_NET_VENDOR_3COM
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_VENDOR_3COM $CONFIG_NET_VENDOR_3COM [list $notmod] 2 }
	global CONFIG_EL1
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {write_tristate $cfg $autocfg CONFIG_EL1 $CONFIG_EL1 [list $CONFIG_ISA] 2 }
	global CONFIG_EL2
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {write_tristate $cfg $autocfg CONFIG_EL2 $CONFIG_EL2 [list $CONFIG_ISA] 2 }
	global CONFIG_ELPLUS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {write_tristate $cfg $autocfg CONFIG_ELPLUS $CONFIG_ELPLUS [list $CONFIG_ISA] 2 }
	global CONFIG_EL16
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_EL16 $CONFIG_EL16 [list $CONFIG_ISA $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_EL3
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_MCA == 1)} then {write_tristate $cfg $autocfg CONFIG_EL3 $CONFIG_EL3 [list $notmod] 2 }
	global CONFIG_ELMC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_MCA == 1 || $CONFIG_MCA == 2 || $CONFIG_MCA == 4)} then {write_tristate $cfg $autocfg CONFIG_ELMC $CONFIG_ELMC [list $CONFIG_MCA] 2 }
	global CONFIG_ELMC_II
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_MCA == 1 || $CONFIG_MCA == 2 || $CONFIG_MCA == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_ELMC_II $CONFIG_ELMC_II [list $CONFIG_MCA $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_VORTEX
	global CONFIG_EISA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_3COM == 1) && ($CONFIG_PCI == 1 || $CONFIG_EISA == 1)} then {write_tristate $cfg $autocfg CONFIG_VORTEX $CONFIG_VORTEX [list $notmod] 2 }
	global CONFIG_LANCE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {write_tristate $cfg $autocfg CONFIG_LANCE $CONFIG_LANCE [list $CONFIG_ISA] 2 }
	global CONFIG_NET_VENDOR_SMC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_VENDOR_SMC $CONFIG_NET_VENDOR_SMC [list $notmod] 2 }
	global CONFIG_WD80x3
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_SMC == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {write_tristate $cfg $autocfg CONFIG_WD80x3 $CONFIG_WD80x3 [list $CONFIG_ISA] 2 }
	global CONFIG_ULTRAMCA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_SMC == 1) && ($CONFIG_MCA == 1 || $CONFIG_MCA == 2 || $CONFIG_MCA == 4)} then {write_tristate $cfg $autocfg CONFIG_ULTRAMCA $CONFIG_ULTRAMCA [list $CONFIG_MCA] 2 }
	global CONFIG_ULTRA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_SMC == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {write_tristate $cfg $autocfg CONFIG_ULTRA $CONFIG_ULTRA [list $CONFIG_ISA] 2 }
	global CONFIG_ULTRA32
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_SMC == 1) && ($CONFIG_EISA == 1 || $CONFIG_EISA == 2 || $CONFIG_EISA == 4)} then {write_tristate $cfg $autocfg CONFIG_ULTRA32 $CONFIG_ULTRA32 [list $CONFIG_EISA] 2 }
	global CONFIG_SMC9194
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_SMC == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {write_tristate $cfg $autocfg CONFIG_SMC9194 $CONFIG_SMC9194 [list $CONFIG_ISA] 2 }
	global CONFIG_NET_VENDOR_RACAL
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_VENDOR_RACAL $CONFIG_NET_VENDOR_RACAL [list $notmod] 2 }
	global CONFIG_NI5010
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_RACAL == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_NI5010 $CONFIG_NI5010 [list $CONFIG_ISA $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_NI52
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_RACAL == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {write_tristate $cfg $autocfg CONFIG_NI52 $CONFIG_NI52 [list $CONFIG_ISA] 2 }
	global CONFIG_NI65
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_VENDOR_RACAL == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {write_tristate $cfg $autocfg CONFIG_NI65 $CONFIG_NI65 [list $CONFIG_ISA] 2 }
	global CONFIG_AT1700
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_MCA == 1) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_AT1700 $CONFIG_AT1700 [list $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_DEPCA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_MCA == 1)} then {write_tristate $cfg $autocfg CONFIG_DEPCA $CONFIG_DEPCA [list $notmod] 2 }
	global CONFIG_HP100
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_HP100 $CONFIG_HP100 [list $notmod] 2 }
	global CONFIG_NET_ISA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 4)} then {write_tristate $cfg $autocfg CONFIG_NET_ISA $CONFIG_NET_ISA [list $CONFIG_ISA] 2 }
	global CONFIG_E2100
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {write_tristate $cfg $autocfg CONFIG_E2100 $CONFIG_E2100 [list $notmod] 2 }
	global CONFIG_EWRK3
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {write_tristate $cfg $autocfg CONFIG_EWRK3 $CONFIG_EWRK3 [list $notmod] 2 }
	global CONFIG_EEXPRESS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {write_tristate $cfg $autocfg CONFIG_EEXPRESS $CONFIG_EEXPRESS [list $notmod] 2 }
	global CONFIG_EEXPRESS_PRO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {write_tristate $cfg $autocfg CONFIG_EEXPRESS_PRO $CONFIG_EEXPRESS_PRO [list $notmod] 2 }
	global CONFIG_HPLAN_PLUS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {write_tristate $cfg $autocfg CONFIG_HPLAN_PLUS $CONFIG_HPLAN_PLUS [list $notmod] 2 }
	global CONFIG_HPLAN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {write_tristate $cfg $autocfg CONFIG_HPLAN $CONFIG_HPLAN [list $notmod] 2 }
	global CONFIG_LP486E
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {write_tristate $cfg $autocfg CONFIG_LP486E $CONFIG_LP486E [list $notmod] 2 }
	global CONFIG_ETH16I
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {write_tristate $cfg $autocfg CONFIG_ETH16I $CONFIG_ETH16I [list $notmod] 2 }
	global CONFIG_NE2000
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_ISA == 1)} then {write_tristate $cfg $autocfg CONFIG_NE2000 $CONFIG_NE2000 [list $notmod] 2 }
	global CONFIG_SKMC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_MCA == 1)} then {write_tristate $cfg $autocfg CONFIG_SKMC $CONFIG_SKMC [list $notmod] 2 }
	global CONFIG_NE2_MCA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_MCA == 1)} then {write_tristate $cfg $autocfg CONFIG_NE2_MCA $CONFIG_NE2_MCA [list $notmod] 2 }
	global CONFIG_IBMLANA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_MCA == 1)} then {write_tristate $cfg $autocfg CONFIG_IBMLANA $CONFIG_IBMLANA [list $notmod] 2 }
	global CONFIG_NET_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_PCI $CONFIG_NET_PCI [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_PCI != 1)} then {write_tristate $cfg $autocfg CONFIG_NET_PCI $CONSTANT_N [list $notmod] 2 }
	global CONFIG_PCNET32
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_PCNET32 $CONFIG_PCNET32 [list $CONFIG_PCI] 2 }
	global CONFIG_ADAPTEC_STARFIRE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_ADAPTEC_STARFIRE $CONFIG_ADAPTEC_STARFIRE [list $CONFIG_PCI $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_APRICOT
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {write_tristate $cfg $autocfg CONFIG_APRICOT $CONFIG_APRICOT [list $CONFIG_ISA] 2 }
	global CONFIG_CS89x0
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {write_tristate $cfg $autocfg CONFIG_CS89x0 $CONFIG_CS89x0 [list $CONFIG_ISA] 2 }
	global CONFIG_TULIP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_TULIP $CONFIG_TULIP [list $CONFIG_PCI] 2 }
	global CONFIG_TULIP_MWI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_TULIP == 1 || $CONFIG_TULIP == 2) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_TULIP_MWI $CONFIG_TULIP_MWI [list $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_TULIP_MMIO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_TULIP == 1 || $CONFIG_TULIP == 2)} then {write_tristate $cfg $autocfg CONFIG_TULIP_MMIO $CONFIG_TULIP_MMIO [list $notmod] 2 }
	global CONFIG_DE4X5
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_EISA == 1)} then {write_tristate $cfg $autocfg CONFIG_DE4X5 $CONFIG_DE4X5 [list $notmod] 2 }
	global CONFIG_DGRS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_EISA == 1)} then {write_tristate $cfg $autocfg CONFIG_DGRS $CONFIG_DGRS [list $notmod] 2 }
	global CONFIG_DM9102
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_DM9102 $CONFIG_DM9102 [list $CONFIG_PCI] 2 }
	global CONFIG_EEPRO100
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_EEPRO100 $CONFIG_EEPRO100 [list $CONFIG_PCI] 2 }
	global CONFIG_LNE390
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_EISA == 1 || $CONFIG_EISA == 2 || $CONFIG_EISA == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_LNE390 $CONFIG_LNE390 [list $CONFIG_EISA $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_FEALNX
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_FEALNX $CONFIG_FEALNX [list $CONFIG_PCI] 2 }
	global CONFIG_NATSEMI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_NATSEMI $CONFIG_NATSEMI [list $CONFIG_PCI] 2 }
	global CONFIG_NE2K_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_NE2K_PCI $CONFIG_NE2K_PCI [list $CONFIG_PCI] 2 }
	global CONFIG_NE3210
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_EISA == 1 || $CONFIG_EISA == 2 || $CONFIG_EISA == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_NE3210 $CONFIG_NE3210 [list $CONFIG_EISA $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_ES3210
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_EISA == 1 || $CONFIG_EISA == 2 || $CONFIG_EISA == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_ES3210 $CONFIG_ES3210 [list $CONFIG_EISA $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_8139CP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_8139CP $CONFIG_8139CP [list $CONFIG_PCI $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_8139TOO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_8139TOO $CONFIG_8139TOO [list $CONFIG_PCI] 2 }
	global CONFIG_8139TOO_PIO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_8139TOO == 1 || $CONFIG_8139TOO == 2 || $CONFIG_8139TOO == 4)} then {write_tristate $cfg $autocfg CONFIG_8139TOO_PIO $CONFIG_8139TOO_PIO [list $CONFIG_8139TOO] 1 }
	global CONFIG_8139TOO_TUNE_TWISTER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_8139TOO == 1 || $CONFIG_8139TOO == 2 || $CONFIG_8139TOO == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_8139TOO_TUNE_TWISTER $CONFIG_8139TOO_TUNE_TWISTER [list $CONFIG_8139TOO $CONFIG_EXPERIMENTAL] 1 }
	global CONFIG_8139TOO_8129
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_8139TOO == 1 || $CONFIG_8139TOO == 2 || $CONFIG_8139TOO == 4)} then {write_tristate $cfg $autocfg CONFIG_8139TOO_8129 $CONFIG_8139TOO_8129 [list $CONFIG_8139TOO] 1 }
	global CONFIG_RTL8139
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_RTL8139 $CONFIG_RTL8139 [list $CONFIG_PCI] 2 }
	global CONFIG_SIS900
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SIS900 $CONFIG_SIS900 [list $CONFIG_PCI] 2 }
	global CONFIG_EPIC100
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_EPIC100 $CONFIG_EPIC100 [list $CONFIG_PCI] 2 }
	global CONFIG_SUNDANCE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SUNDANCE $CONFIG_SUNDANCE [list $CONFIG_PCI] 2 }
	global CONFIG_TLAN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_EISA == 1)} then {write_tristate $cfg $autocfg CONFIG_TLAN $CONFIG_TLAN [list $notmod] 2 }
	global CONFIG_VIA_RHINE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_VIA_RHINE $CONFIG_VIA_RHINE [list $CONFIG_PCI] 2 }
	global CONFIG_VIA_RHINE_MMIO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_VIA_RHINE == 1 || $CONFIG_VIA_RHINE == 2 || $CONFIG_VIA_RHINE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_VIA_RHINE_MMIO $CONFIG_VIA_RHINE_MMIO [list $CONFIG_VIA_RHINE $CONFIG_EXPERIMENTAL] 1 }
	global CONFIG_WINBOND_840
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_WINBOND_840 $CONFIG_WINBOND_840 [list $CONFIG_PCI] 2 }
	global CONFIG_LAN_SAA9730
	global CONFIG_MIPS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_PCI == 1) && ($CONFIG_EXPERIMENTAL == 1 && $CONFIG_MIPS == 1)} then {write_tristate $cfg $autocfg CONFIG_LAN_SAA9730 $CONFIG_LAN_SAA9730 [list $notmod] 2 }
	global CONFIG_NET_POCKET
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_POCKET $CONFIG_NET_POCKET [list $notmod] 2 }
	global CONFIG_DE600
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_POCKET == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {write_tristate $cfg $autocfg CONFIG_DE600 $CONFIG_DE600 [list $CONFIG_ISA] 2 }
	global CONFIG_DE620
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_NET_POCKET == 1) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {write_tristate $cfg $autocfg CONFIG_DE620 $CONFIG_DE620 [list $CONFIG_ISA] 2 }
	global CONFIG_FEC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1)} then {write_tristate $cfg $autocfg CONFIG_FEC $CONFIG_FEC [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1)} then {write_tristate $cfg $autocfg CONFIG_CS89x0 $CONFIG_CS89x0 [list $notmod] 2 }
	global CONFIG_UCCS89x0_HW_SWAP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_ETHERNET == 1) && ($CONFIG_CS89x0 != 0)} then {write_tristate $cfg $autocfg CONFIG_UCCS89x0_HW_SWAP $CONFIG_UCCS89x0_HW_SWAP [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_comment $cfg $autocfg "Ethernet (1000 Mbit)"}
	global CONFIG_ACENIC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_ACENIC $CONFIG_ACENIC [list $CONFIG_PCI] 2 }
	global CONFIG_ACENIC_OMIT_TIGON_I
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ACENIC != 0)} then {write_tristate $cfg $autocfg CONFIG_ACENIC_OMIT_TIGON_I $CONFIG_ACENIC_OMIT_TIGON_I [list $notmod] 2 }
	global CONFIG_DL2K
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_DL2K $CONFIG_DL2K [list $CONFIG_PCI] 2 }
	global CONFIG_MYRI_SBUS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SBUS == 1 || $CONFIG_SBUS == 2 || $CONFIG_SBUS == 4)} then {write_tristate $cfg $autocfg CONFIG_MYRI_SBUS $CONFIG_MYRI_SBUS [list $CONFIG_SBUS] 2 }
	global CONFIG_NS83820
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_NS83820 $CONFIG_NS83820 [list $CONFIG_PCI] 2 }
	global CONFIG_HAMACHI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_HAMACHI $CONFIG_HAMACHI [list $CONFIG_PCI] 2 }
	global CONFIG_YELLOWFIN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_YELLOWFIN $CONFIG_YELLOWFIN [list $CONFIG_PCI $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_SK98LIN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SK98LIN $CONFIG_SK98LIN [list $CONFIG_PCI] 2 }
	global CONFIG_FDDI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_FDDI $CONFIG_FDDI [list $notmod] 2 }
	global CONFIG_DEFXX
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_FDDI == 1) && ($CONFIG_PCI == 1 || $CONFIG_EISA == 1)} then {write_tristate $cfg $autocfg CONFIG_DEFXX $CONFIG_DEFXX [list $notmod] 2 }
	global CONFIG_SKFP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_FDDI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SKFP $CONFIG_SKFP [list $CONFIG_PCI] 2 }
	global CONFIG_HIPPI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_HIPPI $CONFIG_HIPPI [list $notmod] 2 }
	global CONFIG_ROADRUNNER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_INET == 1) && ($CONFIG_HIPPI == 1 && $CONFIG_PCI == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_ROADRUNNER $CONFIG_ROADRUNNER [list $CONFIG_PCI] 2 }
	global CONFIG_ROADRUNNER_LARGE_RINGS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_INET == 1) && ($CONFIG_HIPPI == 1 && $CONFIG_PCI == 1) && ($CONFIG_ROADRUNNER != 0)} then {write_tristate $cfg $autocfg CONFIG_ROADRUNNER_LARGE_RINGS $CONFIG_ROADRUNNER_LARGE_RINGS [list $notmod] 2 }
	global CONFIG_PLIP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_PLIP $CONFIG_PLIP [list $CONFIG_PARPORT] 2 }
	global CONFIG_PPP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_PPP $CONFIG_PPP [list $notmod] 2 }
	global CONFIG_PPP_MULTILINK
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_PPP_MULTILINK $CONFIG_PPP_MULTILINK [list $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_PPP_FILTER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_FILTER == 1 || $CONFIG_FILTER == 4)} then {write_tristate $cfg $autocfg CONFIG_PPP_FILTER $CONFIG_PPP_FILTER [list $CONFIG_FILTER] 2 }
	global CONFIG_PPP_ASYNC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {write_tristate $cfg $autocfg CONFIG_PPP_ASYNC $CONFIG_PPP_ASYNC [list $CONFIG_PPP] 2 }
	global CONFIG_PPP_SYNC_TTY
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {write_tristate $cfg $autocfg CONFIG_PPP_SYNC_TTY $CONFIG_PPP_SYNC_TTY [list $CONFIG_PPP] 2 }
	global CONFIG_PPP_DEFLATE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {write_tristate $cfg $autocfg CONFIG_PPP_DEFLATE $CONFIG_PPP_DEFLATE [list $CONFIG_PPP] 2 }
	global CONFIG_PPP_BSDCOMP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {write_tristate $cfg $autocfg CONFIG_PPP_BSDCOMP $CONFIG_PPP_BSDCOMP [list $CONFIG_PPP] 2 }
	global CONFIG_PPPOE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {write_tristate $cfg $autocfg CONFIG_PPPOE $CONFIG_PPPOE [list $CONFIG_PPP] 2 }
	global CONFIG_PPPOATM
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PPP != 0) && ($CONFIG_ATM != 0) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {write_tristate $cfg $autocfg CONFIG_PPPOATM $CONFIG_PPPOATM [list $CONFIG_PPP] 2 }
	global CONFIG_SLIP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_SLIP $CONFIG_SLIP [list $notmod] 2 }
	global CONFIG_SLIP_COMPRESSED
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {write_tristate $cfg $autocfg CONFIG_SLIP_COMPRESSED $CONFIG_SLIP_COMPRESSED [list $notmod] 2 }
	global CONFIG_SLIP_SMART
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {write_tristate $cfg $autocfg CONFIG_SLIP_SMART $CONFIG_SLIP_SMART [list $notmod] 2 }
	global CONFIG_SLIP_MODE_SLIP6
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_SLIP != 0)} then {write_tristate $cfg $autocfg CONFIG_SLIP_MODE_SLIP6 $CONFIG_SLIP_MODE_SLIP6 [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_comment $cfg $autocfg "Wireless LAN (non-hamradio)"}
	global CONFIG_NET_RADIO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_RADIO $CONFIG_NET_RADIO [list $notmod] 2 }
	global CONFIG_STRIP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_INET == 1 || $CONFIG_INET == 2 || $CONFIG_INET == 4)} then {write_tristate $cfg $autocfg CONFIG_STRIP $CONFIG_STRIP [list $CONFIG_INET] 2 }
	global CONFIG_WAVELAN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1)} then {write_tristate $cfg $autocfg CONFIG_WAVELAN $CONFIG_WAVELAN [list $notmod] 2 }
	global CONFIG_ARLAN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1)} then {write_tristate $cfg $autocfg CONFIG_ARLAN $CONFIG_ARLAN [list $notmod] 2 }
	global CONFIG_AIRONET4500
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1)} then {write_tristate $cfg $autocfg CONFIG_AIRONET4500 $CONFIG_AIRONET4500 [list $notmod] 2 }
	global CONFIG_AIRONET4500_NONCS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_AIRONET4500 == 1 || $CONFIG_AIRONET4500 == 2 || $CONFIG_AIRONET4500 == 4)} then {write_tristate $cfg $autocfg CONFIG_AIRONET4500_NONCS $CONFIG_AIRONET4500_NONCS [list $CONFIG_AIRONET4500] 2 }
	global CONFIG_AIRONET4500_PNP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_AIRONET4500 != 0 && $CONFIG_AIRONET4500_NONCS != 0)} then {write_tristate $cfg $autocfg CONFIG_AIRONET4500_PNP $CONFIG_AIRONET4500_PNP [list $notmod] 2 }
	global CONFIG_AIRONET4500_PCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_AIRONET4500 != 0 && $CONFIG_AIRONET4500_NONCS != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_AIRONET4500_PCI $CONFIG_AIRONET4500_PCI [list $CONFIG_PCI] 2 }
	global CONFIG_AIRONET4500_ISA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_AIRONET4500 != 0 && $CONFIG_AIRONET4500_NONCS != 0) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_AIRONET4500_ISA $CONFIG_AIRONET4500_ISA [list $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_AIRONET4500_I365
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_AIRONET4500 != 0 && $CONFIG_AIRONET4500_NONCS != 0) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_AIRONET4500_I365 $CONFIG_AIRONET4500_I365 [list $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_AIRONET4500_PROC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_AIRONET4500 == 1 || $CONFIG_AIRONET4500 == 2 || $CONFIG_AIRONET4500 == 4)} then {write_tristate $cfg $autocfg CONFIG_AIRONET4500_PROC $CONFIG_AIRONET4500_PROC [list $CONFIG_AIRONET4500 $CONSTANT_M] 2 }
	global CONFIG_AIRO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_AIRO $CONFIG_AIRO [list $notmod] 2 }
	global CONFIG_HERMES
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1)} then {write_tristate $cfg $autocfg CONFIG_HERMES $CONFIG_HERMES [list $notmod] 2 }
	global CONFIG_PLX_HERMES
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_PCI == 1) && ($CONFIG_HERMES == 1 || $CONFIG_HERMES == 2 || $CONFIG_HERMES == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_PLX_HERMES $CONFIG_PLX_HERMES [list $CONFIG_HERMES $CONFIG_EXPERIMENTAL] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_PCMCIA != 0)} then {write_comment $cfg $autocfg "Wireless Pcmcia cards support"}
	global CONFIG_PCMCIA_HERMES
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_PCMCIA != 0) && ($CONFIG_HERMES == 1 || $CONFIG_HERMES == 2 || $CONFIG_HERMES == 4)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_HERMES $CONFIG_PCMCIA_HERMES [list $CONFIG_HERMES] 2 }
	global CONFIG_AIRO_CS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_PCMCIA != 0)} then {write_tristate $cfg $autocfg CONFIG_AIRO_CS $CONFIG_AIRO_CS [list $notmod] 2 }
	global CONFIG_NET_WIRELESS
	global CONFIG_ALL_PPC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_PCI == 1 || $CONFIG_ALL_PPC == 1 || $CONFIG_PCMCIA != 0)} then {write_tristate $cfg $autocfg CONFIG_NET_WIRELESS $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_RADIO == 1) && ($CONFIG_PCI != 1 && $CONFIG_ALL_PPC != 1 && $CONFIG_PCMCIA == 0)} then {write_tristate $cfg $autocfg CONFIG_NET_WIRELESS $CONSTANT_N [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_comment $cfg $autocfg "Token Ring devices"}
	global CONFIG_TR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI == 1 || $CONFIG_ISA == 1 || $CONFIG_MCA == 1)} then {write_tristate $cfg $autocfg CONFIG_TR $CONFIG_TR [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_PCI != 1 && $CONFIG_ISA != 1 && $CONFIG_MCA != 1)} then {write_tristate $cfg $autocfg CONFIG_TR $CONSTANT_N [list $notmod] 2 }
	global CONFIG_IBMTR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_MCA == 1)} then {write_tristate $cfg $autocfg CONFIG_IBMTR $CONFIG_IBMTR [list $notmod] 2 }
	global CONFIG_IBMOL
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_TR == 1 || $CONFIG_TR == 2 || $CONFIG_TR == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_IBMOL $CONFIG_IBMOL [list $CONFIG_TR $CONFIG_PCI] 2 }
	global CONFIG_IBMLS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_TR == 1 || $CONFIG_TR == 2 || $CONFIG_TR == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_IBMLS $CONFIG_IBMLS [list $CONFIG_TR $CONFIG_PCI] 2 }
	global CONFIG_TMS380TR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0)} then {write_tristate $cfg $autocfg CONFIG_TMS380TR $CONFIG_TMS380TR [list $notmod] 2 }
	global CONFIG_TMSPCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_TMS380TR != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_TMSPCI $CONFIG_TMSPCI [list $CONFIG_PCI] 2 }
	global CONFIG_TMSISA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_TMS380TR != 0) && ($CONFIG_ISA == 1 || $CONFIG_ISA == 2 || $CONFIG_ISA == 4)} then {write_tristate $cfg $autocfg CONFIG_TMSISA $CONFIG_TMSISA [list $CONFIG_ISA] 2 }
	global CONFIG_ABYSS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_TMS380TR != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_ABYSS $CONFIG_ABYSS [list $CONFIG_PCI] 2 }
	global CONFIG_MADGEMC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_TMS380TR != 0) && ($CONFIG_MCA == 1 || $CONFIG_MCA == 2 || $CONFIG_MCA == 4)} then {write_tristate $cfg $autocfg CONFIG_MADGEMC $CONFIG_MADGEMC [list $CONFIG_MCA] 2 }
	global CONFIG_SMCTR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_TR != 0) && ($CONFIG_MCA == 1)} then {write_tristate $cfg $autocfg CONFIG_SMCTR $CONFIG_SMCTR [list $notmod] 2 }
	global CONFIG_NET_FC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_FC $CONFIG_NET_FC [list $notmod] 2 }
	global CONFIG_IPHASE5526
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_NET_FC == 1) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_IPHASE5526 $CONFIG_IPHASE5526 [list $CONFIG_SCSI $CONFIG_PCI] 2 }
	global CONFIG_RCPCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_RCPCI $CONFIG_RCPCI [list $CONFIG_PCI] 2 }
	global CONFIG_SHAPER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_SHAPER $CONFIG_SHAPER [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_comment $cfg $autocfg "Wan interfaces"}
	global CONFIG_WAN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1)} then {write_tristate $cfg $autocfg CONFIG_WAN $CONFIG_WAN [list $notmod] 2 }
	global CONFIG_HOSTESS_SV11
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {write_tristate $cfg $autocfg CONFIG_HOSTESS_SV11 $CONFIG_HOSTESS_SV11 [list $CONSTANT_M] 2 }
	global CONFIG_COSA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {write_tristate $cfg $autocfg CONFIG_COSA $CONFIG_COSA [list $CONSTANT_M] 2 }
	global CONFIG_COMX
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {write_tristate $cfg $autocfg CONFIG_COMX $CONFIG_COMX [list $notmod] 2 }
	global CONFIG_COMX_HW_COMX
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_COMX == 1 || $CONFIG_COMX == 2 || $CONFIG_COMX == 4)} then {write_tristate $cfg $autocfg CONFIG_COMX_HW_COMX $CONFIG_COMX_HW_COMX [list $CONFIG_COMX] 2 }
	global CONFIG_COMX_HW_LOCOMX
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_COMX == 1 || $CONFIG_COMX == 2 || $CONFIG_COMX == 4)} then {write_tristate $cfg $autocfg CONFIG_COMX_HW_LOCOMX $CONFIG_COMX_HW_LOCOMX [list $CONFIG_COMX] 2 }
	global CONFIG_COMX_HW_MIXCOM
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_COMX == 1 || $CONFIG_COMX == 2 || $CONFIG_COMX == 4)} then {write_tristate $cfg $autocfg CONFIG_COMX_HW_MIXCOM $CONFIG_COMX_HW_MIXCOM [list $CONFIG_COMX] 2 }
	global CONFIG_COMX_PROTO_PPP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_COMX == 1 || $CONFIG_COMX == 2 || $CONFIG_COMX == 4)} then {write_tristate $cfg $autocfg CONFIG_COMX_PROTO_PPP $CONFIG_COMX_PROTO_PPP [list $CONFIG_COMX] 2 }
	global CONFIG_COMX_PROTO_LAPB
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_LAPB == 1) && ($CONFIG_COMX == 1 || $CONFIG_COMX == 2 || $CONFIG_COMX == 4)} then {write_tristate $cfg $autocfg CONFIG_COMX_PROTO_LAPB $CONFIG_COMX_PROTO_LAPB [list $CONFIG_COMX] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_LAPB == 2) && ($CONFIG_LAPB == 1 || $CONFIG_LAPB == 2 || $CONFIG_LAPB == 4)} then {write_tristate $cfg $autocfg CONFIG_COMX_PROTO_LAPB $CONFIG_COMX_PROTO_LAPB [list $CONFIG_LAPB] 2 }
	global CONFIG_COMX_PROTO_FR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_COMX != 0) && ($CONFIG_COMX == 1 || $CONFIG_COMX == 2 || $CONFIG_COMX == 4)} then {write_tristate $cfg $autocfg CONFIG_COMX_PROTO_FR $CONFIG_COMX_PROTO_FR [list $CONFIG_COMX] 2 }
	global CONFIG_DSCC4
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {write_tristate $cfg $autocfg CONFIG_DSCC4 $CONFIG_DSCC4 [list $CONSTANT_M] 2 }
	global CONFIG_FARSYNC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {write_tristate $cfg $autocfg CONFIG_FARSYNC $CONFIG_FARSYNC [list $notmod] 2 }
	global CONFIG_LANMEDIA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {write_tristate $cfg $autocfg CONFIG_LANMEDIA $CONFIG_LANMEDIA [list $notmod] 2 }
	global CONFIG_SEALEVEL_4021
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {write_tristate $cfg $autocfg CONFIG_SEALEVEL_4021 $CONFIG_SEALEVEL_4021 [list $CONSTANT_M] 2 }
	global CONFIG_SYNCLINK_SYNCPPP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {write_tristate $cfg $autocfg CONFIG_SYNCLINK_SYNCPPP $CONFIG_SYNCLINK_SYNCPPP [list $notmod] 2 }
	global CONFIG_HDLC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {write_tristate $cfg $autocfg CONFIG_HDLC $CONFIG_HDLC [list $notmod] 2 }
	global CONFIG_HDLC_PPP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_HDLC != 0)} then {write_tristate $cfg $autocfg CONFIG_HDLC_PPP $CONFIG_HDLC_PPP [list $notmod] 2 }
	global CONFIG_HDLC_X25
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_HDLC != 0) && ($CONFIG_LAPB == 2 && $CONFIG_HDLC == 2 || $CONFIG_LAPB == 1)} then {write_tristate $cfg $autocfg CONFIG_HDLC_X25 $CONFIG_HDLC_X25 [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_HDLC != 0) && ($CONFIG_LAPB != 2 || $CONFIG_HDLC != 2 && $CONFIG_LAPB != 1)} then {write_comment $cfg $autocfg "    X.25/LAPB support is disabled"}
	global CONFIG_N2
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_HDLC != 0) && ($CONFIG_HDLC == 1 || $CONFIG_HDLC == 2 || $CONFIG_HDLC == 4)} then {write_tristate $cfg $autocfg CONFIG_N2 $CONFIG_N2 [list $CONFIG_HDLC] 2 }
	global CONFIG_C101
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_HDLC != 0) && ($CONFIG_HDLC == 1 || $CONFIG_HDLC == 2 || $CONFIG_HDLC == 4)} then {write_tristate $cfg $autocfg CONFIG_C101 $CONFIG_C101 [list $CONFIG_HDLC] 2 }
	global CONFIG_DLCI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1)} then {write_tristate $cfg $autocfg CONFIG_DLCI $CONFIG_DLCI [list $notmod] 2 }
	global CONFIG_DLCI_COUNT
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_DLCI != 0)} then {write_int $cfg $autocfg CONFIG_DLCI_COUNT $CONFIG_DLCI_COUNT $notmod }
	global CONFIG_DLCI_MAX
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_DLCI != 0)} then {write_int $cfg $autocfg CONFIG_DLCI_MAX $CONFIG_DLCI_MAX $notmod }
	global CONFIG_SDLA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_DLCI != 0) && ($CONFIG_DLCI == 1 || $CONFIG_DLCI == 2 || $CONFIG_DLCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SDLA $CONFIG_SDLA [list $CONFIG_DLCI] 2 }
	global CONFIG_WAN_ROUTER_DRIVERS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0)} then {write_tristate $cfg $autocfg CONFIG_WAN_ROUTER_DRIVERS $CONFIG_WAN_ROUTER_DRIVERS [list $notmod] 2 }
	global CONFIG_VENDOR_SANGOMA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_WAN_ROUTER == 1 || $CONFIG_WAN_ROUTER == 2 || $CONFIG_WAN_ROUTER == 4)} then {write_tristate $cfg $autocfg CONFIG_VENDOR_SANGOMA $CONFIG_VENDOR_SANGOMA [list $CONFIG_WAN_ROUTER] 2 }
	global CONFIG_WANPIPE_CHDLC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_VENDOR_SANGOMA != 0)} then {write_tristate $cfg $autocfg CONFIG_WANPIPE_CHDLC $CONFIG_WANPIPE_CHDLC [list $notmod] 2 }
	global CONFIG_WANPIPE_FR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_VENDOR_SANGOMA != 0)} then {write_tristate $cfg $autocfg CONFIG_WANPIPE_FR $CONFIG_WANPIPE_FR [list $notmod] 2 }
	global CONFIG_WANPIPE_X25
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_VENDOR_SANGOMA != 0)} then {write_tristate $cfg $autocfg CONFIG_WANPIPE_X25 $CONFIG_WANPIPE_X25 [list $notmod] 2 }
	global CONFIG_WANPIPE_PPP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_VENDOR_SANGOMA != 0)} then {write_tristate $cfg $autocfg CONFIG_WANPIPE_PPP $CONFIG_WANPIPE_PPP [list $notmod] 2 }
	global CONFIG_WANPIPE_MULTPPP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_VENDOR_SANGOMA != 0)} then {write_tristate $cfg $autocfg CONFIG_WANPIPE_MULTPPP $CONFIG_WANPIPE_MULTPPP [list $notmod] 2 }
	global CONFIG_CYCLADES_SYNC
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_WAN_ROUTER_DRIVERS == 1 || $CONFIG_WAN_ROUTER_DRIVERS == 2 || $CONFIG_WAN_ROUTER_DRIVERS == 4)} then {write_tristate $cfg $autocfg CONFIG_CYCLADES_SYNC $CONFIG_CYCLADES_SYNC [list $CONFIG_WAN_ROUTER_DRIVERS] 2 }
	global CONFIG_CYCLOMX_X25
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_WAN_ROUTER != 0) && ($CONFIG_WAN_ROUTER_DRIVERS == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_CYCLADES_SYNC != 0)} then {write_tristate $cfg $autocfg CONFIG_CYCLOMX_X25 $CONFIG_CYCLOMX_X25 [list $notmod] 2 }
	global CONFIG_LAPBETHER
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_LAPB == 1 || $CONFIG_LAPB == 2 || $CONFIG_LAPB == 4) && ($CONFIG_X25 == 1 || $CONFIG_X25 == 2 || $CONFIG_X25 == 4)} then {write_tristate $cfg $autocfg CONFIG_LAPBETHER $CONFIG_LAPBETHER [list $CONFIG_LAPB $CONFIG_X25] 2 }
	global CONFIG_X25_ASY
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_WAN == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_LAPB == 1 || $CONFIG_LAPB == 2 || $CONFIG_LAPB == 4) && ($CONFIG_X25 == 1 || $CONFIG_X25 == 2 || $CONFIG_X25 == 4)} then {write_tristate $cfg $autocfg CONFIG_X25_ASY $CONFIG_X25_ASY [list $CONFIG_LAPB $CONFIG_X25] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0)} then {write_comment $cfg $autocfg "PCMCIA network device support"}
	global CONFIG_NET_PCMCIA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0)} then {write_tristate $cfg $autocfg CONFIG_NET_PCMCIA $CONFIG_NET_PCMCIA [list $notmod] 2 }
	global CONFIG_PCMCIA_3C589
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_3C589 $CONFIG_PCMCIA_3C589 [list $CONFIG_PCMCIA] 2 }
	global CONFIG_PCMCIA_3C574
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_3C574 $CONFIG_PCMCIA_3C574 [list $CONFIG_PCMCIA] 2 }
	global CONFIG_PCMCIA_FMVJ18X
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_FMVJ18X $CONFIG_PCMCIA_FMVJ18X [list $CONFIG_PCMCIA] 2 }
	global CONFIG_PCMCIA_PCNET
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_PCNET $CONFIG_PCMCIA_PCNET [list $CONFIG_PCMCIA] 2 }
	global CONFIG_PCMCIA_AXNET
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_AXNET $CONFIG_PCMCIA_AXNET [list $CONFIG_PCMCIA] 2 }
	global CONFIG_PCMCIA_NMCLAN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_NMCLAN $CONFIG_PCMCIA_NMCLAN [list $CONFIG_PCMCIA] 2 }
	global CONFIG_PCMCIA_SMC91C92
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_SMC91C92 $CONFIG_PCMCIA_SMC91C92 [list $CONFIG_PCMCIA] 2 }
	global CONFIG_PCMCIA_XIRC2PS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_XIRC2PS $CONFIG_PCMCIA_XIRC2PS [list $CONFIG_PCMCIA] 2 }
	global CONFIG_ARCNET_COM20020_CS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_ARCNET_COM20020 == 1 || $CONFIG_ARCNET_COM20020 == 2 || $CONFIG_ARCNET_COM20020 == 4) && ($CONFIG_ARCNET == 1 || $CONFIG_ARCNET == 2 || $CONFIG_ARCNET == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_ARCNET_COM20020_CS $CONFIG_ARCNET_COM20020_CS [list $CONFIG_ARCNET_COM20020 $CONFIG_ARCNET $CONFIG_PCMCIA] 2 }
	global CONFIG_PCMCIA_IBMTR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_IBMTR != 1) && ($CONFIG_TR == 1 || $CONFIG_TR == 2 || $CONFIG_TR == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_IBMTR $CONFIG_PCMCIA_IBMTR [list $CONFIG_TR $CONFIG_PCMCIA] 2 }
	global CONFIG_PCMCIA_XIRCOM
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_CARDBUS == 1)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_XIRCOM $CONFIG_PCMCIA_XIRCOM [list $notmod] 2 }
	global CONFIG_PCMCIA_XIRTULIP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_CARDBUS == 1)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_XIRTULIP $CONFIG_PCMCIA_XIRTULIP [list $notmod] 2 }
	global CONFIG_NET_PCMCIA_RADIO
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1)} then {write_tristate $cfg $autocfg CONFIG_NET_PCMCIA_RADIO $CONFIG_NET_PCMCIA_RADIO [list $notmod] 2 }
	global CONFIG_PCMCIA_RAYCS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_NET_PCMCIA_RADIO == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_RAYCS $CONFIG_PCMCIA_RAYCS [list $CONFIG_PCMCIA] 2 }
	global CONFIG_PCMCIA_NETWAVE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_NET_PCMCIA_RADIO == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_NETWAVE $CONFIG_PCMCIA_NETWAVE [list $CONFIG_PCMCIA] 2 }
	global CONFIG_PCMCIA_WAVELAN
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_NET_PCMCIA_RADIO == 1) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_WAVELAN $CONFIG_PCMCIA_WAVELAN [list $CONFIG_PCMCIA] 2 }
	global CONFIG_AIRONET4500_CS
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_NET_PCMCIA == 1) && ($CONFIG_NET_PCMCIA_RADIO == 1) && ($CONFIG_AIRONET4500 == 1 || $CONFIG_AIRONET4500 == 2 || $CONFIG_AIRONET4500 == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_AIRONET4500_CS $CONFIG_AIRONET4500_CS [list $CONFIG_AIRONET4500 $CONFIG_PCMCIA] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1)} then {write_comment $cfg $autocfg "ATM drivers"}
	global CONFIG_ATM_TCP
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_INET == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_TCP $CONFIG_ATM_TCP [list $notmod] 2 }
	global CONFIG_ATM_LANAI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_LANAI $CONFIG_ATM_LANAI [list $notmod] 2 }
	global CONFIG_ATM_ENI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_ENI $CONFIG_ATM_ENI [list $notmod] 2 }
	global CONFIG_ATM_ENI_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0)} then {write_tristate $cfg $autocfg CONFIG_ATM_ENI_DEBUG $CONFIG_ATM_ENI_DEBUG [list $notmod] 2 }
	global CONFIG_ATM_ENI_TUNE_BURST
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0)} then {write_tristate $cfg $autocfg CONFIG_ATM_ENI_TUNE_BURST $CONFIG_ATM_ENI_TUNE_BURST [list $notmod] 2 }
	global CONFIG_ATM_ENI_BURST_TX_16W
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_ENI_BURST_TX_16W $CONFIG_ATM_ENI_BURST_TX_16W [list $notmod] 2 }
	global CONFIG_ATM_ENI_BURST_TX_8W
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_ENI_BURST_TX_8W $CONFIG_ATM_ENI_BURST_TX_8W [list $notmod] 2 }
	global CONFIG_ATM_ENI_BURST_TX_4W
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_ENI_BURST_TX_4W $CONFIG_ATM_ENI_BURST_TX_4W [list $notmod] 2 }
	global CONFIG_ATM_ENI_BURST_TX_2W
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_ENI_BURST_TX_2W $CONFIG_ATM_ENI_BURST_TX_2W [list $notmod] 2 }
	global CONFIG_ATM_ENI_BURST_RX_16W
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_ENI_BURST_RX_16W $CONFIG_ATM_ENI_BURST_RX_16W [list $notmod] 2 }
	global CONFIG_ATM_ENI_BURST_RX_8W
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_ENI_BURST_RX_8W $CONFIG_ATM_ENI_BURST_RX_8W [list $notmod] 2 }
	global CONFIG_ATM_ENI_BURST_RX_4W
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_ENI_BURST_RX_4W $CONFIG_ATM_ENI_BURST_RX_4W [list $notmod] 2 }
	global CONFIG_ATM_ENI_BURST_RX_2W
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ENI != 0) && ($CONFIG_ATM_ENI_TUNE_BURST == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_ENI_BURST_RX_2W $CONFIG_ATM_ENI_BURST_RX_2W [list $notmod] 2 }
	global CONFIG_ATM_FIRESTREAM
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_FIRESTREAM $CONFIG_ATM_FIRESTREAM [list $notmod] 2 }
	global CONFIG_ATM_ZATM
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_ZATM $CONFIG_ATM_ZATM [list $notmod] 2 }
	global CONFIG_ATM_ZATM_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_ZATM != 0)} then {write_tristate $cfg $autocfg CONFIG_ATM_ZATM_DEBUG $CONFIG_ATM_ZATM_DEBUG [list $notmod] 2 }
	global CONFIG_ATM_NICSTAR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_NICSTAR $CONFIG_ATM_NICSTAR [list $notmod] 2 }
	global CONFIG_ATM_NICSTAR_USE_SUNI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_NICSTAR != 0)} then {write_tristate $cfg $autocfg CONFIG_ATM_NICSTAR_USE_SUNI $CONFIG_ATM_NICSTAR_USE_SUNI [list $notmod] 2 }
	global CONFIG_ATM_NICSTAR_USE_IDT77105
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_NICSTAR != 0)} then {write_tristate $cfg $autocfg CONFIG_ATM_NICSTAR_USE_IDT77105 $CONFIG_ATM_NICSTAR_USE_IDT77105 [list $notmod] 2 }
	global CONFIG_ATM_IDT77252
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_IDT77252 $CONFIG_ATM_IDT77252 [list $notmod] 2 }
	global CONFIG_ATM_IDT77252_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_IDT77252 != 0)} then {write_tristate $cfg $autocfg CONFIG_ATM_IDT77252_DEBUG $CONFIG_ATM_IDT77252_DEBUG [list $notmod] 2 }
	global CONFIG_ATM_IDT77252_RCV_ALL
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_IDT77252 != 0)} then {write_tristate $cfg $autocfg CONFIG_ATM_IDT77252_RCV_ALL $CONFIG_ATM_IDT77252_RCV_ALL [list $notmod] 2 }
	global CONFIG_ATM_IDT77252_USE_SUNI
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_IDT77252 != 0)} then {write_tristate $cfg $autocfg CONFIG_ATM_IDT77252_USE_SUNI $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_ATM_AMBASSADOR
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_AMBASSADOR $CONFIG_ATM_AMBASSADOR [list $notmod] 2 }
	global CONFIG_ATM_AMBASSADOR_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_AMBASSADOR != 0)} then {write_tristate $cfg $autocfg CONFIG_ATM_AMBASSADOR_DEBUG $CONFIG_ATM_AMBASSADOR_DEBUG [list $notmod] 2 }
	global CONFIG_ATM_HORIZON
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_HORIZON $CONFIG_ATM_HORIZON [list $notmod] 2 }
	global CONFIG_ATM_HORIZON_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_HORIZON != 0)} then {write_tristate $cfg $autocfg CONFIG_ATM_HORIZON_DEBUG $CONFIG_ATM_HORIZON_DEBUG [list $notmod] 2 }
	global CONFIG_ATM_IA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_IA $CONFIG_ATM_IA [list $notmod] 2 }
	global CONFIG_ATM_IA_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_IA != 0)} then {write_tristate $cfg $autocfg CONFIG_ATM_IA_DEBUG $CONFIG_ATM_IA_DEBUG [list $notmod] 2 }
	global CONFIG_ATM_FORE200E_MAYBE
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_FORE200E_MAYBE $CONFIG_ATM_FORE200E_MAYBE [list $notmod] 2 }
	global CONFIG_ATM_FORE200E_PCA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1) && ($CONFIG_ATM_FORE200E_MAYBE != 0) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_FORE200E_PCA $CONFIG_ATM_FORE200E_PCA [list $notmod] 2 }
	global CONFIG_ATM_FORE200E_PCA_DEFAULT_FW
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1) && ($CONFIG_ATM_FORE200E_MAYBE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_FORE200E_PCA == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_FORE200E_PCA_DEFAULT_FW $CONFIG_ATM_FORE200E_PCA_DEFAULT_FW [list $notmod] 2 }
	global CONFIG_ATM_FORE200E_PCA_FW
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1) && ($CONFIG_ATM_FORE200E_MAYBE != 0) && ($CONFIG_PCI == 1) && ($CONFIG_ATM_FORE200E_PCA == 1) && ($CONFIG_ATM_FORE200E_PCA_DEFAULT_FW == 0)} then {write_string $cfg $autocfg CONFIG_ATM_FORE200E_PCA_FW "$CONFIG_ATM_FORE200E_PCA_FW" $notmod }
	global CONFIG_ATM_FORE200E_TX_RETRY
	global CONFIG_ATM_FORE200E_SBA
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1) && ($CONFIG_ATM_FORE200E_PCA == 1 || $CONFIG_ATM_FORE200E_SBA == 1)} then {write_int $cfg $autocfg CONFIG_ATM_FORE200E_TX_RETRY $CONFIG_ATM_FORE200E_TX_RETRY $notmod }
	global CONFIG_ATM_FORE200E_DEBUG
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1) && ($CONFIG_ATM_FORE200E_PCA == 1 || $CONFIG_ATM_FORE200E_SBA == 1)} then {write_int $cfg $autocfg CONFIG_ATM_FORE200E_DEBUG $CONFIG_ATM_FORE200E_DEBUG $notmod }
	global CONFIG_ATM_FORE200E
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1) && ($CONFIG_ATM_FORE200E_PCA == 1 || $CONFIG_ATM_FORE200E_SBA == 1) && ($CONFIG_ATM_FORE200E_MAYBE == 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_FORE200E $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NETDEVICES == 1) && ($CONFIG_ATM == 1) && ($CONFIG_PCI == 1 || $CONFIG_SBUS == 1) && ($CONFIG_ATM_FORE200E_PCA == 1 || $CONFIG_ATM_FORE200E_SBA == 1) && ($CONFIG_ATM_FORE200E_MAYBE != 1)} then {write_tristate $cfg $autocfg CONFIG_ATM_FORE200E $CONSTANT_M [list $notmod] 2 }
	write_comment $cfg $autocfg "Amateur Radio support"
	global CONFIG_HAMRADIO
	write_tristate $cfg $autocfg CONFIG_HAMRADIO $CONFIG_HAMRADIO [list $notmod] 2
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0)} then {write_comment $cfg $autocfg "Packet Radio protocols"}
	global CONFIG_AX25
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0)} then {write_tristate $cfg $autocfg CONFIG_AX25 $CONFIG_AX25 [list $notmod] 2 }
	global CONFIG_AX25_DAMA_SLAVE
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0)} then {write_tristate $cfg $autocfg CONFIG_AX25_DAMA_SLAVE $CONFIG_AX25_DAMA_SLAVE [list $notmod] 2 }
	global CONFIG_NETROM
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {write_tristate $cfg $autocfg CONFIG_NETROM $CONFIG_NETROM [list $CONFIG_AX25] 2 }
	global CONFIG_ROSE
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {write_tristate $cfg $autocfg CONFIG_ROSE $CONFIG_ROSE [list $CONFIG_AX25] 2 }
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0)} then {write_comment $cfg $autocfg "AX.25 network device drivers"}
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0)} then {write_comment $cfg $autocfg "AX.25 network device drivers"}
	global CONFIG_MKISS
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {write_tristate $cfg $autocfg CONFIG_MKISS $CONFIG_MKISS [list $CONFIG_AX25] 2 }
	global CONFIG_6PACK
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {write_tristate $cfg $autocfg CONFIG_6PACK $CONFIG_6PACK [list $CONFIG_AX25] 2 }
	global CONFIG_BPQETHER
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {write_tristate $cfg $autocfg CONFIG_BPQETHER $CONFIG_BPQETHER [list $CONFIG_AX25] 2 }
	global CONFIG_DMASCC
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {write_tristate $cfg $autocfg CONFIG_DMASCC $CONFIG_DMASCC [list $CONFIG_AX25] 2 }
	global CONFIG_SCC
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {write_tristate $cfg $autocfg CONFIG_SCC $CONFIG_SCC [list $CONFIG_AX25] 2 }
	global CONFIG_SCC_DELAY
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SCC != 0)} then {write_tristate $cfg $autocfg CONFIG_SCC_DELAY $CONFIG_SCC_DELAY [list $notmod] 2 }
	global CONFIG_SCC_TRXECHO
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SCC != 0)} then {write_tristate $cfg $autocfg CONFIG_SCC_TRXECHO $CONFIG_SCC_TRXECHO [list $notmod] 2 }
	global CONFIG_BAYCOM_SER_FDX
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {write_tristate $cfg $autocfg CONFIG_BAYCOM_SER_FDX $CONFIG_BAYCOM_SER_FDX [list $CONFIG_AX25] 2 }
	global CONFIG_BAYCOM_SER_HDX
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {write_tristate $cfg $autocfg CONFIG_BAYCOM_SER_HDX $CONFIG_BAYCOM_SER_HDX [list $CONFIG_AX25] 2 }
	global CONFIG_BAYCOM_PAR
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {write_tristate $cfg $autocfg CONFIG_BAYCOM_PAR $CONFIG_BAYCOM_PAR [list $CONFIG_PARPORT $CONFIG_AX25] 2 }
	global CONFIG_BAYCOM_EPP
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {write_tristate $cfg $autocfg CONFIG_BAYCOM_EPP $CONFIG_BAYCOM_EPP [list $CONFIG_PARPORT $CONFIG_AX25] 2 }
	global CONFIG_SOUNDMODEM
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUNDMODEM $CONFIG_SOUNDMODEM [list $CONFIG_PARPORT $CONFIG_AX25] 2 }
	global CONFIG_SOUNDMODEM_SBC
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {write_tristate $cfg $autocfg CONFIG_SOUNDMODEM_SBC $CONFIG_SOUNDMODEM_SBC [list $notmod] 2 }
	global CONFIG_SOUNDMODEM_WSS
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {write_tristate $cfg $autocfg CONFIG_SOUNDMODEM_WSS $CONFIG_SOUNDMODEM_WSS [list $notmod] 2 }
	global CONFIG_SOUNDMODEM_AFSK1200
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {write_tristate $cfg $autocfg CONFIG_SOUNDMODEM_AFSK1200 $CONFIG_SOUNDMODEM_AFSK1200 [list $notmod] 2 }
	global CONFIG_SOUNDMODEM_AFSK2400_7
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {write_tristate $cfg $autocfg CONFIG_SOUNDMODEM_AFSK2400_7 $CONFIG_SOUNDMODEM_AFSK2400_7 [list $notmod] 2 }
	global CONFIG_SOUNDMODEM_AFSK2400_8
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {write_tristate $cfg $autocfg CONFIG_SOUNDMODEM_AFSK2400_8 $CONFIG_SOUNDMODEM_AFSK2400_8 [list $notmod] 2 }
	global CONFIG_SOUNDMODEM_AFSK2666
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {write_tristate $cfg $autocfg CONFIG_SOUNDMODEM_AFSK2666 $CONFIG_SOUNDMODEM_AFSK2666 [list $notmod] 2 }
	global CONFIG_SOUNDMODEM_HAPN4800
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {write_tristate $cfg $autocfg CONFIG_SOUNDMODEM_HAPN4800 $CONFIG_SOUNDMODEM_HAPN4800 [list $notmod] 2 }
	global CONFIG_SOUNDMODEM_PSK4800
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {write_tristate $cfg $autocfg CONFIG_SOUNDMODEM_PSK4800 $CONFIG_SOUNDMODEM_PSK4800 [list $notmod] 2 }
	global CONFIG_SOUNDMODEM_FSK9600
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_SOUNDMODEM != 0)} then {write_tristate $cfg $autocfg CONFIG_SOUNDMODEM_FSK9600 $CONFIG_SOUNDMODEM_FSK9600 [list $notmod] 2 }
	global CONFIG_YAM
	if {($CONFIG_HAMRADIO != 0) && ($CONFIG_NET != 0) && ($CONFIG_AX25 != 0) && ($CONFIG_AX25 == 1 || $CONFIG_AX25 == 2 || $CONFIG_AX25 == 4)} then {write_tristate $cfg $autocfg CONFIG_YAM $CONFIG_YAM [list $CONFIG_AX25] 2 }
	if {($CONFIG_NET != 0)} then {write_comment $cfg $autocfg "IrDA (infrared) support"}
	global CONFIG_IRDA
	if {($CONFIG_NET != 0) && ($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4)} then {write_tristate $cfg $autocfg CONFIG_IRDA $CONFIG_IRDA [list $CONFIG_NET] 2 }
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {write_comment $cfg $autocfg "IrDA protocols"}
	global CONFIG_IRLAN
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {write_tristate $cfg $autocfg CONFIG_IRLAN $CONFIG_IRLAN [list $CONFIG_IRDA] 2 }
	global CONFIG_IRNET
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_NETDEVICES != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4) && ($CONFIG_PPP == 1 || $CONFIG_PPP == 2 || $CONFIG_PPP == 4)} then {write_tristate $cfg $autocfg CONFIG_IRNET $CONFIG_IRNET [list $CONFIG_IRDA $CONFIG_PPP] 2 }
	global CONFIG_IRCOMM
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {write_tristate $cfg $autocfg CONFIG_IRCOMM $CONFIG_IRCOMM [list $CONFIG_IRDA] 2 }
	global CONFIG_IRDA_ULTRA
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {write_tristate $cfg $autocfg CONFIG_IRDA_ULTRA $CONFIG_IRDA_ULTRA [list $notmod] 2 }
	global CONFIG_IRDA_OPTIONS
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {write_tristate $cfg $autocfg CONFIG_IRDA_OPTIONS $CONFIG_IRDA_OPTIONS [list $notmod] 2 }
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA_OPTIONS != 0)} then {write_comment $cfg $autocfg "  IrDA options"}
	global CONFIG_IRDA_CACHE_LAST_LSAP
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA_OPTIONS != 0)} then {write_tristate $cfg $autocfg CONFIG_IRDA_CACHE_LAST_LSAP $CONFIG_IRDA_CACHE_LAST_LSAP [list $notmod] 2 }
	global CONFIG_IRDA_FAST_RR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA_OPTIONS != 0)} then {write_tristate $cfg $autocfg CONFIG_IRDA_FAST_RR $CONFIG_IRDA_FAST_RR [list $notmod] 2 }
	global CONFIG_IRDA_DEBUG
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA_OPTIONS != 0)} then {write_tristate $cfg $autocfg CONFIG_IRDA_DEBUG $CONFIG_IRDA_DEBUG [list $notmod] 2 }
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {write_comment $cfg $autocfg "Infrared-port device drivers"}
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {write_comment $cfg $autocfg "SIR device drivers"}
	global CONFIG_IRTTY_SIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {write_tristate $cfg $autocfg CONFIG_IRTTY_SIR $CONFIG_IRTTY_SIR [list $CONFIG_IRDA] 2 }
	global CONFIG_IRPORT_SIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {write_tristate $cfg $autocfg CONFIG_IRPORT_SIR $CONFIG_IRPORT_SIR [list $CONFIG_IRDA] 2 }
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {write_comment $cfg $autocfg "Dongle support"}
	global CONFIG_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {write_tristate $cfg $autocfg CONFIG_DONGLE $CONFIG_DONGLE [list $notmod] 2 }
	global CONFIG_ESI_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_DONGLE != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {write_tristate $cfg $autocfg CONFIG_ESI_DONGLE $CONFIG_ESI_DONGLE [list $CONFIG_IRDA] 2 }
	global CONFIG_ACTISYS_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_DONGLE != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {write_tristate $cfg $autocfg CONFIG_ACTISYS_DONGLE $CONFIG_ACTISYS_DONGLE [list $CONFIG_IRDA] 2 }
	global CONFIG_TEKRAM_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_DONGLE != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {write_tristate $cfg $autocfg CONFIG_TEKRAM_DONGLE $CONFIG_TEKRAM_DONGLE [list $CONFIG_IRDA] 2 }
	global CONFIG_GIRBIL_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_DONGLE != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {write_tristate $cfg $autocfg CONFIG_GIRBIL_DONGLE $CONFIG_GIRBIL_DONGLE [list $CONFIG_IRDA] 2 }
	global CONFIG_LITELINK_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_DONGLE != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {write_tristate $cfg $autocfg CONFIG_LITELINK_DONGLE $CONFIG_LITELINK_DONGLE [list $CONFIG_IRDA] 2 }
	global CONFIG_OLD_BELKIN_DONGLE
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_DONGLE != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {write_tristate $cfg $autocfg CONFIG_OLD_BELKIN_DONGLE $CONFIG_OLD_BELKIN_DONGLE [list $CONFIG_IRDA] 2 }
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0)} then {write_comment $cfg $autocfg "FIR device drivers"}
	global CONFIG_USB_IRDA
	global CONFIG_USB
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_IRDA $CONFIG_USB_IRDA [list $CONFIG_IRDA $CONFIG_USB $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_NSC_FIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {write_tristate $cfg $autocfg CONFIG_NSC_FIR $CONFIG_NSC_FIR [list $CONFIG_IRDA] 2 }
	global CONFIG_WINBOND_FIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {write_tristate $cfg $autocfg CONFIG_WINBOND_FIR $CONFIG_WINBOND_FIR [list $CONFIG_IRDA] 2 }
	global CONFIG_TOSHIBA_FIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {write_tristate $cfg $autocfg CONFIG_TOSHIBA_FIR $CONFIG_TOSHIBA_FIR [list $CONFIG_IRDA] 2 }
	global CONFIG_SMC_IRCC_FIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_EXPERIMENTAL != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {write_tristate $cfg $autocfg CONFIG_SMC_IRCC_FIR $CONFIG_SMC_IRCC_FIR [list $CONFIG_IRDA] 2 }
	global CONFIG_ALI_FIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_EXPERIMENTAL != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {write_tristate $cfg $autocfg CONFIG_ALI_FIR $CONFIG_ALI_FIR [list $CONFIG_IRDA] 2 }
	global CONFIG_VLSI_FIR
	if {($CONFIG_NET != 0) && ($CONFIG_IRDA != 0) && ($CONFIG_EXPERIMENTAL != 0) && ($CONFIG_IRDA == 1 || $CONFIG_IRDA == 2 || $CONFIG_IRDA == 4)} then {write_tristate $cfg $autocfg CONFIG_VLSI_FIR $CONFIG_VLSI_FIR [list $CONFIG_IRDA] 2 }
	write_comment $cfg $autocfg "ISDN subsystem"
	global CONFIG_ISDN
	if {($CONFIG_NET != 0)} then {write_tristate $cfg $autocfg CONFIG_ISDN $CONFIG_ISDN [list $notmod] 2 }
	global CONFIG_ISDN_PPP
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_INET != 0)} then {write_tristate $cfg $autocfg CONFIG_ISDN_PPP $CONFIG_ISDN_PPP [list $notmod] 2 }
	global CONFIG_ISDN_PPP_VJ
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_INET != 0) && ($CONFIG_ISDN_PPP != 0)} then {write_tristate $cfg $autocfg CONFIG_ISDN_PPP_VJ $CONFIG_ISDN_PPP_VJ [list $notmod] 2 }
	global CONFIG_ISDN_MPP
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_INET != 0) && ($CONFIG_ISDN_PPP != 0)} then {write_tristate $cfg $autocfg CONFIG_ISDN_MPP $CONFIG_ISDN_MPP [list $notmod] 2 }
	global CONFIG_ISDN_PPP_BSDCOMP
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_INET != 0) && ($CONFIG_ISDN_PPP != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_PPP_BSDCOMP $CONFIG_ISDN_PPP_BSDCOMP [list $CONFIG_ISDN] 2 }
	global CONFIG_ISDN_AUDIO
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0)} then {write_tristate $cfg $autocfg CONFIG_ISDN_AUDIO $CONFIG_ISDN_AUDIO [list $notmod] 2 }
	global CONFIG_ISDN_TTY_FAX
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_AUDIO != 0)} then {write_tristate $cfg $autocfg CONFIG_ISDN_TTY_FAX $CONFIG_ISDN_TTY_FAX [list $notmod] 2 }
	global CONFIG_ISDN_X25
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_X25 != 0)} then {write_tristate $cfg $autocfg CONFIG_ISDN_X25 $CONFIG_ISDN_X25 [list $notmod] 2 }
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0)} then {write_comment $cfg $autocfg "ISDN feature submodules"}
	global CONFIG_ISDN_DRV_LOOP
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_LOOP $CONFIG_ISDN_DRV_LOOP [list $CONFIG_ISDN] 2 }
	global CONFIG_ISDN_DIVERSION
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DIVERSION $CONFIG_ISDN_DIVERSION [list $CONFIG_ISDN] 2 }
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0)} then {write_comment $cfg $autocfg "low-level hardware drivers"}
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0)} then {write_comment $cfg $autocfg "Passive ISDN cards"}
	global CONFIG_ISDN_DRV_HISAX
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_HISAX $CONFIG_ISDN_DRV_HISAX [list $CONFIG_ISDN] 2 }
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_comment $cfg $autocfg "  D-channel protocol features"}
	global CONFIG_HISAX_EURO
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_EURO $CONFIG_HISAX_EURO [list $notmod] 2 }
	global CONFIG_DE_AOC
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_HISAX_EURO != 0)} then {write_tristate $cfg $autocfg CONFIG_DE_AOC $CONFIG_DE_AOC [list $notmod] 2 }
	global CONFIG_HISAX_NO_SENDCOMPLETE
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_HISAX_EURO != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_NO_SENDCOMPLETE $CONFIG_HISAX_NO_SENDCOMPLETE [list $notmod] 2 }
	global CONFIG_HISAX_NO_LLC
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_HISAX_EURO != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_NO_LLC $CONFIG_HISAX_NO_LLC [list $notmod] 2 }
	global CONFIG_HISAX_NO_KEYPAD
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_HISAX_EURO != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_NO_KEYPAD $CONFIG_HISAX_NO_KEYPAD [list $notmod] 2 }
	global CONFIG_HISAX_1TR6
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_1TR6 $CONFIG_HISAX_1TR6 [list $notmod] 2 }
	global CONFIG_HISAX_NI1
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_NI1 $CONFIG_HISAX_NI1 [list $notmod] 2 }
	global CONFIG_HISAX_MAX_CARDS
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_int $cfg $autocfg CONFIG_HISAX_MAX_CARDS $CONFIG_HISAX_MAX_CARDS $notmod }
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_comment $cfg $autocfg "  HiSax supported cards"}
	global CONFIG_HISAX_16_0
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_16_0 $CONFIG_HISAX_16_0 [list $notmod] 2 }
	global CONFIG_HISAX_16_3
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_16_3 $CONFIG_HISAX_16_3 [list $notmod] 2 }
	global CONFIG_HISAX_TELESPCI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_TELESPCI $CONFIG_HISAX_TELESPCI [list $notmod] 2 }
	global CONFIG_HISAX_S0BOX
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_S0BOX $CONFIG_HISAX_S0BOX [list $notmod] 2 }
	global CONFIG_HISAX_AVM_A1
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_AVM_A1 $CONFIG_HISAX_AVM_A1 [list $notmod] 2 }
	global CONFIG_HISAX_FRITZPCI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_FRITZPCI $CONFIG_HISAX_FRITZPCI [list $notmod] 2 }
	global CONFIG_HISAX_AVM_A1_PCMCIA
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_AVM_A1_PCMCIA $CONFIG_HISAX_AVM_A1_PCMCIA [list $notmod] 2 }
	global CONFIG_HISAX_ELSA
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_ELSA $CONFIG_HISAX_ELSA [list $notmod] 2 }
	global CONFIG_HISAX_IX1MICROR2
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_IX1MICROR2 $CONFIG_HISAX_IX1MICROR2 [list $notmod] 2 }
	global CONFIG_HISAX_DIEHLDIVA
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_DIEHLDIVA $CONFIG_HISAX_DIEHLDIVA [list $notmod] 2 }
	global CONFIG_HISAX_ASUSCOM
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_ASUSCOM $CONFIG_HISAX_ASUSCOM [list $notmod] 2 }
	global CONFIG_HISAX_TELEINT
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_TELEINT $CONFIG_HISAX_TELEINT [list $notmod] 2 }
	global CONFIG_HISAX_HFCS
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_HFCS $CONFIG_HISAX_HFCS [list $notmod] 2 }
	global CONFIG_HISAX_SEDLBAUER
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_SEDLBAUER $CONFIG_HISAX_SEDLBAUER [list $notmod] 2 }
	global CONFIG_HISAX_SPORTSTER
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_SPORTSTER $CONFIG_HISAX_SPORTSTER [list $notmod] 2 }
	global CONFIG_HISAX_MIC
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_MIC $CONFIG_HISAX_MIC [list $notmod] 2 }
	global CONFIG_HISAX_NETJET
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_NETJET $CONFIG_HISAX_NETJET [list $notmod] 2 }
	global CONFIG_HISAX_NETJET_U
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_NETJET_U $CONFIG_HISAX_NETJET_U [list $notmod] 2 }
	global CONFIG_HISAX_NICCY
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_NICCY $CONFIG_HISAX_NICCY [list $notmod] 2 }
	global CONFIG_HISAX_ISURF
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_ISURF $CONFIG_HISAX_ISURF [list $notmod] 2 }
	global CONFIG_HISAX_HSTSAPHIR
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_HSTSAPHIR $CONFIG_HISAX_HSTSAPHIR [list $notmod] 2 }
	global CONFIG_HISAX_BKM_A4T
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_BKM_A4T $CONFIG_HISAX_BKM_A4T [list $notmod] 2 }
	global CONFIG_HISAX_SCT_QUADRO
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_SCT_QUADRO $CONFIG_HISAX_SCT_QUADRO [list $notmod] 2 }
	global CONFIG_HISAX_GAZEL
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_GAZEL $CONFIG_HISAX_GAZEL [list $notmod] 2 }
	global CONFIG_HISAX_HFC_PCI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_HFC_PCI $CONFIG_HISAX_HFC_PCI [list $notmod] 2 }
	global CONFIG_HISAX_W6692
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_W6692 $CONFIG_HISAX_W6692 [list $notmod] 2 }
	global CONFIG_HISAX_HFC_SX
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_HFC_SX $CONFIG_HISAX_HFC_SX [list $notmod] 2 }
	global CONFIG_HISAX_DEBUG
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0)} then {write_tristate $cfg $autocfg CONFIG_HISAX_DEBUG $CONFIG_HISAX_DEBUG [list $notmod] 2 }
	global CONFIG_HISAX_SEDLBAUER_CS
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_HISAX_SEDLBAUER_CS $CONFIG_HISAX_SEDLBAUER_CS [list $CONFIG_PCMCIA] 2 }
	global CONFIG_HISAX_ELSA_CS
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_HISAX_ELSA_CS $CONFIG_HISAX_ELSA_CS [list $CONFIG_PCMCIA] 2 }
	global CONFIG_HISAX_ST5481
	global CONFIG_HISAX
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_HISAX == 1 || $CONFIG_HISAX == 2 || $CONFIG_HISAX == 4) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_HISAX_ST5481 $CONFIG_HISAX_ST5481 [list $CONFIG_HISAX $CONFIG_USB $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_HISAX_FRITZ_PCIPNP
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_HISAX != 0) && ($CONFIG_HISAX == 1 || $CONFIG_HISAX == 2 || $CONFIG_HISAX == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_HISAX_FRITZ_PCIPNP $CONFIG_HISAX_FRITZ_PCIPNP [list $CONFIG_HISAX $CONFIG_EXPERIMENTAL] 2 }
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0)} then {write_comment $cfg $autocfg "Active ISDN cards"}
	global CONFIG_ISDN_DRV_ICN
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_ICN $CONFIG_ISDN_DRV_ICN [list $CONFIG_ISDN] 2 }
	global CONFIG_ISDN_DRV_PCBIT
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_PCBIT $CONFIG_ISDN_DRV_PCBIT [list $CONFIG_ISDN] 2 }
	global CONFIG_ISDN_DRV_SC
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_SC $CONFIG_ISDN_DRV_SC [list $CONFIG_ISDN] 2 }
	global CONFIG_ISDN_DRV_ACT2000
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_ACT2000 $CONFIG_ISDN_DRV_ACT2000 [list $CONFIG_ISDN] 2 }
	global CONFIG_ISDN_DRV_EICON
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_EICON $CONFIG_ISDN_DRV_EICON [list $notmod] 2 }
	global CONFIG_ISDN_DRV_EICON_DIVAS
	global CONFIG_ISDN_DRV_EICON_OLD
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_EICON != 0) && ($CONFIG_ISDN_DRV_EICON_OLD != 1) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_EICON_DIVAS $CONFIG_ISDN_DRV_EICON_DIVAS [list $CONFIG_ISDN $CONFIG_PCI] 2 }
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_EICON != 0) && ($CONFIG_ISDN_DRV_EICON_DIVAS != 1) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_EICON_OLD $CONFIG_ISDN_DRV_EICON_OLD [list $CONFIG_ISDN] 2 }
	global CONFIG_ISDN_DRV_EICON_PCI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_EICON != 0) && ($CONFIG_ISDN_DRV_EICON_DIVAS != 1) && ($CONFIG_ISDN_DRV_EICON_OLD != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_EICON_PCI $CONFIG_ISDN_DRV_EICON_PCI [list $CONFIG_PCI] 2 }
	global CONFIG_ISDN_DRV_EICON_ISA
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_DRV_EICON != 0) && ($CONFIG_ISDN_DRV_EICON_DIVAS != 1) && ($CONFIG_ISDN_DRV_EICON_OLD != 0)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_EICON_ISA $CONFIG_ISDN_DRV_EICON_ISA [list $notmod] 2 }
	global CONFIG_ISDN_DRV_TPAM
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_EXPERIMENTAL != 0) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_TPAM $CONFIG_ISDN_DRV_TPAM [list $CONFIG_ISDN $CONFIG_PCI] 2 }
	global CONFIG_ISDN_CAPI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0)} then {write_tristate $cfg $autocfg CONFIG_ISDN_CAPI $CONFIG_ISDN_CAPI [list $notmod] 2 }
	global CONFIG_ISDN_DRV_AVMB1_VERBOSE_REASON
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_AVMB1_VERBOSE_REASON $CONFIG_ISDN_DRV_AVMB1_VERBOSE_REASON [list $notmod] 2 }
	global CONFIG_ISDN_CAPI_MIDDLEWARE
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_CAPI_MIDDLEWARE $CONFIG_ISDN_CAPI_MIDDLEWARE [list $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_ISDN_CAPI_CAPI20
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_CAPI_CAPI20 $CONFIG_ISDN_CAPI_CAPI20 [list $CONFIG_ISDN_CAPI] 2 }
	global CONFIG_ISDN_CAPI_CAPIFS_BOOL
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI_MIDDLEWARE == 1) && ($CONFIG_ISDN_CAPI_CAPI20 == 1 || $CONFIG_ISDN_CAPI_CAPI20 == 2 || $CONFIG_ISDN_CAPI_CAPI20 == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_CAPI_CAPIFS_BOOL $CONFIG_ISDN_CAPI_CAPIFS_BOOL [list $CONFIG_ISDN_CAPI_CAPI20] 1 }
	global CONFIG_ISDN_CAPI_CAPIFS
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI_MIDDLEWARE == 1) && ($CONFIG_ISDN_CAPI_CAPIFS_BOOL == 1)} then {write_tristate $cfg $autocfg CONFIG_ISDN_CAPI_CAPIFS $CONFIG_ISDN_CAPI_CAPI20 [list $notmod] 2 }
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI_MIDDLEWARE == 1) && ($CONFIG_ISDN_CAPI_CAPIFS_BOOL != 1)} then {write_tristate $cfg $autocfg CONFIG_ISDN_CAPI_CAPIFS $CONSTANT_N [list $notmod] 2 }
	global CONFIG_ISDN_CAPI_CAPIDRV
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4) && ($CONFIG_ISDN == 1 || $CONFIG_ISDN == 2 || $CONFIG_ISDN == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_CAPI_CAPIDRV $CONFIG_ISDN_CAPI_CAPIDRV [list $CONFIG_ISDN_CAPI $CONFIG_ISDN] 2 }
	global CONFIG_ISDN_DRV_AVMB1_B1ISA
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_AVMB1_B1ISA $CONFIG_ISDN_DRV_AVMB1_B1ISA [list $CONFIG_ISDN_CAPI] 2 }
	global CONFIG_ISDN_DRV_AVMB1_B1PCI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_AVMB1_B1PCI $CONFIG_ISDN_DRV_AVMB1_B1PCI [list $CONFIG_ISDN_CAPI $CONFIG_PCI] 2 }
	global CONFIG_ISDN_DRV_AVMB1_B1PCIV4
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_DRV_AVMB1_B1PCI == 1 || $CONFIG_ISDN_DRV_AVMB1_B1PCI == 2 || $CONFIG_ISDN_DRV_AVMB1_B1PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_AVMB1_B1PCIV4 $CONFIG_ISDN_DRV_AVMB1_B1PCIV4 [list $CONFIG_ISDN_DRV_AVMB1_B1PCI] 1 }
	global CONFIG_ISDN_DRV_AVMB1_T1ISA
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_AVMB1_T1ISA $CONFIG_ISDN_DRV_AVMB1_T1ISA [list $CONFIG_ISDN_CAPI] 2 }
	global CONFIG_ISDN_DRV_AVMB1_B1PCMCIA
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_AVMB1_B1PCMCIA $CONFIG_ISDN_DRV_AVMB1_B1PCMCIA [list $CONFIG_ISDN_CAPI] 2 }
	global CONFIG_ISDN_DRV_AVMB1_AVM_CS
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_DRV_AVMB1_B1PCMCIA == 1 || $CONFIG_ISDN_DRV_AVMB1_B1PCMCIA == 2 || $CONFIG_ISDN_DRV_AVMB1_B1PCMCIA == 4) && ($CONFIG_PCMCIA == 1 || $CONFIG_PCMCIA == 2 || $CONFIG_PCMCIA == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_AVMB1_AVM_CS $CONFIG_ISDN_DRV_AVMB1_AVM_CS [list $CONFIG_ISDN_DRV_AVMB1_B1PCMCIA $CONFIG_PCMCIA] 2 }
	global CONFIG_ISDN_DRV_AVMB1_T1PCI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_AVMB1_T1PCI $CONFIG_ISDN_DRV_AVMB1_T1PCI [list $CONFIG_ISDN_CAPI $CONFIG_PCI] 2 }
	global CONFIG_ISDN_DRV_AVMB1_C4
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_ISDN_CAPI != 0) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_ISDN_DRV_AVMB1_C4 $CONFIG_ISDN_DRV_AVMB1_C4 [list $CONFIG_ISDN_CAPI $CONFIG_PCI] 2 }
	global CONFIG_HYSDN
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_PROC_FS == 1 || $CONFIG_PROC_FS == 2 || $CONFIG_PROC_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_HYSDN $CONFIG_HYSDN [list $CONSTANT_M $CONFIG_PROC_FS] 2 }
	global CONFIG_HYSDN_CAPI
	if {($CONFIG_NET != 0) && ($CONFIG_ISDN != 0) && ($CONFIG_HYSDN == 1 || $CONFIG_HYSDN == 2 || $CONFIG_HYSDN == 4) && ($CONFIG_ISDN_CAPI == 1 || $CONFIG_ISDN_CAPI == 2 || $CONFIG_ISDN_CAPI == 4)} then {write_tristate $cfg $autocfg CONFIG_HYSDN_CAPI $CONFIG_HYSDN_CAPI [list $CONFIG_HYSDN $CONFIG_ISDN_CAPI] 1 }
	write_comment $cfg $autocfg "Old CD-ROM drivers (not SCSI, not IDE)"
	global CONFIG_CD_NO_IDESCSI
	write_tristate $cfg $autocfg CONFIG_CD_NO_IDESCSI $CONFIG_CD_NO_IDESCSI [list $notmod] 2
	global CONFIG_AZTCD
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {write_tristate $cfg $autocfg CONFIG_AZTCD $CONFIG_AZTCD [list $notmod] 2 }
	global CONFIG_GSCD
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {write_tristate $cfg $autocfg CONFIG_GSCD $CONFIG_GSCD [list $notmod] 2 }
	global CONFIG_SBPCD
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {write_tristate $cfg $autocfg CONFIG_SBPCD $CONFIG_SBPCD [list $notmod] 2 }
	global CONFIG_SBPCD2
	if {($CONFIG_CD_NO_IDESCSI != 0) && ($CONFIG_SBPCD == 1)} then {write_tristate $cfg $autocfg CONFIG_SBPCD2 $CONFIG_SBPCD2 [list $notmod] 2 }
	global CONFIG_SBPCD3
	if {($CONFIG_CD_NO_IDESCSI != 0) && ($CONFIG_SBPCD == 1) && ($CONFIG_SBPCD2 == 1)} then {write_tristate $cfg $autocfg CONFIG_SBPCD3 $CONFIG_SBPCD3 [list $notmod] 2 }
	global CONFIG_SBPCD4
	if {($CONFIG_CD_NO_IDESCSI != 0) && ($CONFIG_SBPCD == 1) && ($CONFIG_SBPCD2 == 1) && ($CONFIG_SBPCD3 == 1)} then {write_tristate $cfg $autocfg CONFIG_SBPCD4 $CONFIG_SBPCD4 [list $notmod] 2 }
	global CONFIG_MCD
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {write_tristate $cfg $autocfg CONFIG_MCD $CONFIG_MCD [list $notmod] 2 }
	global CONFIG_MCD_IRQ
	if {($CONFIG_CD_NO_IDESCSI != 0) && ($CONFIG_MCD != 0)} then {write_int $cfg $autocfg CONFIG_MCD_IRQ $CONFIG_MCD_IRQ $notmod }
	global CONFIG_MCD_BASE
	if {($CONFIG_CD_NO_IDESCSI != 0) && ($CONFIG_MCD != 0)} then {write_hex $cfg $autocfg CONFIG_MCD_BASE $CONFIG_MCD_BASE $notmod }
	global CONFIG_MCDX
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {write_tristate $cfg $autocfg CONFIG_MCDX $CONFIG_MCDX [list $notmod] 2 }
	global CONFIG_OPTCD
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {write_tristate $cfg $autocfg CONFIG_OPTCD $CONFIG_OPTCD [list $notmod] 2 }
	global CONFIG_CM206
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {write_tristate $cfg $autocfg CONFIG_CM206 $CONFIG_CM206 [list $notmod] 2 }
	global CONFIG_SJCD
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {write_tristate $cfg $autocfg CONFIG_SJCD $CONFIG_SJCD [list $notmod] 2 }
	global CONFIG_ISP16_CDI
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {write_tristate $cfg $autocfg CONFIG_ISP16_CDI $CONFIG_ISP16_CDI [list $notmod] 2 }
	global CONFIG_CDU31A
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {write_tristate $cfg $autocfg CONFIG_CDU31A $CONFIG_CDU31A [list $notmod] 2 }
	global CONFIG_CDU535
	if {($CONFIG_CD_NO_IDESCSI != 0)} then {write_tristate $cfg $autocfg CONFIG_CDU535 $CONFIG_CDU535 [list $notmod] 2 }
	write_comment $cfg $autocfg "Character devices"
	global CONFIG_68328_SERIAL
	if {($CONFIG_M68328 == 1)} then {write_tristate $cfg $autocfg CONFIG_68328_SERIAL $CONFIG_68328_SERIAL [list $notmod] 2 }
	global CONFIG_68328_SERIAL_RTS_CTS
	if {($CONFIG_M68328 == 1) && ($CONFIG_68328_SERIAL == 1)} then {write_tristate $cfg $autocfg CONFIG_68328_SERIAL_RTS_CTS $CONFIG_68328_SERIAL_RTS_CTS [list $notmod] 2 }
	global CONFIG_68328_DIGI
	if {($CONFIG_M68328 == 1) && ($CONFIG_PILOT == 1)} then {write_tristate $cfg $autocfg CONFIG_68328_DIGI $CONFIG_68328_DIGI [list $notmod] 2 }
	if {($CONFIG_M68EZ328 == 1)} then {write_tristate $cfg $autocfg CONFIG_68328_SERIAL $CONFIG_68328_SERIAL [list $notmod] 2 }
	if {($CONFIG_M68EZ328 == 1) && ($CONFIG_68328_SERIAL == 1)} then {write_tristate $cfg $autocfg CONFIG_68328_SERIAL_RTS_CTS $CONFIG_68328_SERIAL_RTS_CTS [list $notmod] 2 }
	global CONFIG_68681_SERIAL
	if {($CONFIG_M68EZ328 == 1) && ($CONFIG_M68EZ328ADS == 1)} then {write_tristate $cfg $autocfg CONFIG_68681_SERIAL $CONFIG_68681_SERIAL [list $notmod] 2 }
	if {($CONFIG_M68VZ328 == 1)} then {write_tristate $cfg $autocfg CONFIG_68328_SERIAL $CONFIG_68328_SERIAL [list $notmod] 2 }
	global CONFIG_68332_SERIAL
	if {($CONFIG_M68332 == 1)} then {write_tristate $cfg $autocfg CONFIG_68332_SERIAL $CONFIG_68332_SERIAL [list $notmod] 2 }
	global CONFIG_68302_SERIAL
	if {($CONFIG_M68EN302 == 1)} then {write_tristate $cfg $autocfg CONFIG_68302_SERIAL $CONFIG_68302_SERIAL [list $notmod] 2 }
	global CONFIG_SERIAL_CONSOLE
	if {($CONFIG_M68360_SMC_UART == 1)} then {write_tristate $cfg $autocfg CONFIG_SERIAL_CONSOLE $CONFIG_SERIAL_CONSOLE [list $notmod] 2 }
	global tmpvar_13
	if {($CONFIG_M68360_SMC_UART == 1) && ($CONFIG_SERIAL_CONSOLE == 1)} then {
	if { $tmpvar_13 == "9600" } then { write_tristate $cfg $autocfg CONFIG_CONSOLE_9600 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CONSOLE_9600 0 [list $notmod] 2 }
	if { $tmpvar_13 == "19200" } then { write_tristate $cfg $autocfg CONFIG_CONSOLE_19200 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CONSOLE_19200 0 [list $notmod] 2 }
	if { $tmpvar_13 == "115200" } then { write_tristate $cfg $autocfg CONFIG_CONSOLE_115200 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_CONSOLE_115200 0 [list $notmod] 2 }}
	global CONFIG_COLDFIRE_SERIAL
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_COLDFIRE_SERIAL $CONFIG_COLDFIRE_SERIAL [list $notmod] 2 }
	global CONFIG_MCF_MBUS
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_MCF_MBUS $CONFIG_MCF_MBUS [list $notmod] 2 }
	global CONFIG_LCDTXT
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_LCDTXT $CONFIG_LCDTXT [list $notmod] 2 }
	global CONFIG_LCDDMA
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_LCDDMA $CONFIG_LCDDMA [list $notmod] 2 }
	global CONFIG_DAC0800
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_DAC0800 $CONFIG_DAC0800 [list $notmod] 2 }
	global CONFIG_DACI2S
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_DACI2S $CONFIG_DACI2S [list $notmod] 2 }
	global CONFIG_T6963
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_T6963 $CONFIG_T6963 [list $notmod] 2 }
	global CONFIG_T6963_PIO
	if {($CONFIG_COLDFIRE == 1) && ($CONFIG_T6963 == 1)} then {write_tristate $cfg $autocfg CONFIG_T6963_PIO $CONFIG_T6963_PIO [list $notmod] 2 }
	global CONFIG_T6963_DMA
	if {($CONFIG_COLDFIRE == 1) && ($CONFIG_T6963 == 1) && ($CONFIG_T6963_PIO != 1)} then {write_tristate $cfg $autocfg CONFIG_T6963_DMA $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_LEDMAN
	write_tristate $cfg $autocfg CONFIG_LEDMAN $CONFIG_LEDMAN [list $notmod] 2
	global CONFIG_VT
	write_tristate $cfg $autocfg CONFIG_VT $CONFIG_VT [list $notmod] 2
	global CONFIG_VT_CONSOLE
	if {($CONFIG_VT == 1)} then {write_tristate $cfg $autocfg CONFIG_VT_CONSOLE $CONFIG_VT_CONSOLE [list $notmod] 2 }
	write_tristate $cfg $autocfg CONFIG_SERIAL $CONFIG_SERIAL [list $notmod] 2
	if {($CONFIG_SERIAL == 1)} then {write_tristate $cfg $autocfg CONFIG_SERIAL_CONSOLE $CONFIG_SERIAL_CONSOLE [list $notmod] 2 }
	global CONFIG_SERIAL_ACPI
	if {($CONFIG_ACPI == 1)} then {write_tristate $cfg $autocfg CONFIG_SERIAL_ACPI $CONFIG_SERIAL_ACPI [list $notmod] 2 }
	global CONFIG_SERIAL_EXTENDED
	if {($CONFIG_SERIAL == 1 || $CONFIG_SERIAL == 2 || $CONFIG_SERIAL == 4)} then {write_tristate $cfg $autocfg CONFIG_SERIAL_EXTENDED $CONFIG_SERIAL_EXTENDED [list $CONFIG_SERIAL] 1 }
	global CONFIG_SERIAL_MANY_PORTS
	if {($CONFIG_SERIAL_EXTENDED == 1)} then {write_tristate $cfg $autocfg CONFIG_SERIAL_MANY_PORTS $CONFIG_SERIAL_MANY_PORTS [list $notmod] 2 }
	global CONFIG_SERIAL_SHARE_IRQ
	if {($CONFIG_SERIAL_EXTENDED == 1)} then {write_tristate $cfg $autocfg CONFIG_SERIAL_SHARE_IRQ $CONFIG_SERIAL_SHARE_IRQ [list $notmod] 2 }
	global CONFIG_SERIAL_DETECT_IRQ
	if {($CONFIG_SERIAL_EXTENDED == 1)} then {write_tristate $cfg $autocfg CONFIG_SERIAL_DETECT_IRQ $CONFIG_SERIAL_DETECT_IRQ [list $notmod] 2 }
	global CONFIG_SERIAL_MULTIPORT
	if {($CONFIG_SERIAL_EXTENDED == 1)} then {write_tristate $cfg $autocfg CONFIG_SERIAL_MULTIPORT $CONFIG_SERIAL_MULTIPORT [list $notmod] 2 }
	global CONFIG_HUB6
	if {($CONFIG_SERIAL_EXTENDED == 1)} then {write_tristate $cfg $autocfg CONFIG_HUB6 $CONFIG_HUB6 [list $notmod] 2 }
	global CONFIG_SERIAL_NONSTANDARD
	write_tristate $cfg $autocfg CONFIG_SERIAL_NONSTANDARD $CONFIG_SERIAL_NONSTANDARD [list $notmod] 2
	global CONFIG_COMPUTONE
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {write_tristate $cfg $autocfg CONFIG_COMPUTONE $CONFIG_COMPUTONE [list $notmod] 2 }
	global CONFIG_ROCKETPORT
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {write_tristate $cfg $autocfg CONFIG_ROCKETPORT $CONFIG_ROCKETPORT [list $notmod] 2 }
	global CONFIG_CYCLADES
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {write_tristate $cfg $autocfg CONFIG_CYCLADES $CONFIG_CYCLADES [list $notmod] 2 }
	global CONFIG_CYZ_INTR
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_EXPERIMENTAL == 1 && $CONFIG_CYCLADES != 0)} then {write_tristate $cfg $autocfg CONFIG_CYZ_INTR $CONFIG_CYZ_INTR [list $notmod] 2 }
	global CONFIG_DIGIEPCA
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {write_tristate $cfg $autocfg CONFIG_DIGIEPCA $CONFIG_DIGIEPCA [list $notmod] 2 }
	global CONFIG_DIGI
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_DIGIEPCA == 0)} then {write_tristate $cfg $autocfg CONFIG_DIGI $CONFIG_DIGI [list $notmod] 2 }
	global CONFIG_ESPSERIAL
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {write_tristate $cfg $autocfg CONFIG_ESPSERIAL $CONFIG_ESPSERIAL [list $notmod] 2 }
	global CONFIG_MOXA_INTELLIO
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {write_tristate $cfg $autocfg CONFIG_MOXA_INTELLIO $CONFIG_MOXA_INTELLIO [list $notmod] 2 }
	global CONFIG_MOXA_SMARTIO
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {write_tristate $cfg $autocfg CONFIG_MOXA_SMARTIO $CONFIG_MOXA_SMARTIO [list $notmod] 2 }
	global CONFIG_ISI
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_ISI $CONFIG_ISI [list $CONSTANT_M] 2 }
	global CONFIG_SYNCLINK
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {write_tristate $cfg $autocfg CONFIG_SYNCLINK $CONFIG_SYNCLINK [list $notmod] 2 }
	global CONFIG_N_HDLC
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {write_tristate $cfg $autocfg CONFIG_N_HDLC $CONFIG_N_HDLC [list $notmod] 2 }
	global CONFIG_RISCOM8
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {write_tristate $cfg $autocfg CONFIG_RISCOM8 $CONFIG_RISCOM8 [list $notmod] 2 }
	global CONFIG_SPECIALIX
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {write_tristate $cfg $autocfg CONFIG_SPECIALIX $CONFIG_SPECIALIX [list $notmod] 2 }
	global CONFIG_SPECIALIX_RTSCTS
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_SPECIALIX != 0)} then {write_tristate $cfg $autocfg CONFIG_SPECIALIX_RTSCTS $CONFIG_SPECIALIX_RTSCTS [list $notmod] 2 }
	global CONFIG_SX
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {write_tristate $cfg $autocfg CONFIG_SX $CONFIG_SX [list $notmod] 2 }
	global CONFIG_RIO
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {write_tristate $cfg $autocfg CONFIG_RIO $CONFIG_RIO [list $notmod] 2 }
	global CONFIG_RIO_OLDPCI
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_RIO != 0)} then {write_tristate $cfg $autocfg CONFIG_RIO_OLDPCI $CONFIG_RIO_OLDPCI [list $notmod] 2 }
	global CONFIG_STALDRV
	if {($CONFIG_SERIAL_NONSTANDARD == 1)} then {write_tristate $cfg $autocfg CONFIG_STALDRV $CONFIG_STALDRV [list $notmod] 2 }
	global CONFIG_STALLION
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_STALDRV == 1)} then {write_tristate $cfg $autocfg CONFIG_STALLION $CONFIG_STALLION [list $notmod] 2 }
	global CONFIG_ISTALLION
	if {($CONFIG_SERIAL_NONSTANDARD == 1) && ($CONFIG_STALDRV == 1)} then {write_tristate $cfg $autocfg CONFIG_ISTALLION $CONFIG_ISTALLION [list $notmod] 2 }
	global CONFIG_A2232
	global CONFIG_ZORRO
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_ZORRO == 1)} then {write_tristate $cfg $autocfg CONFIG_A2232 $CONFIG_A2232 [list $notmod] 2 }
	global CONFIG_SERIAL_CORE
	global CONFIG_SERIAL_AMBA
	global CONFIG_SERIAL_CLPS711X
	if {($CONFIG_SERIAL_AMBA == 1 || $CONFIG_SERIAL_CLPS711X == 1)} then {write_tristate $cfg $autocfg CONFIG_SERIAL_CORE $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_SERIAL_CORE_CONSOLE
	global CONFIG_SERIAL_AMBA_CONSOLE
	global CONFIG_SERIAL_CLPS711X_CONSOLE
	if {($CONFIG_SERIAL_AMBA_CONSOLE == 1 || $CONFIG_SERIAL_CLPS711X_CONSOLE == 1)} then {write_tristate $cfg $autocfg CONFIG_SERIAL_CORE_CONSOLE $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_UNIX98_PTYS
	write_tristate $cfg $autocfg CONFIG_UNIX98_PTYS $CONFIG_UNIX98_PTYS [list $notmod] 2
	global CONFIG_UNIX98_PTY_COUNT
	if {($CONFIG_UNIX98_PTYS == 1)} then {write_int $cfg $autocfg CONFIG_UNIX98_PTY_COUNT $CONFIG_UNIX98_PTY_COUNT $notmod }
	global CONFIG_PRINTER
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_PRINTER $CONFIG_PRINTER [list $CONFIG_PARPORT] 2 }
	global CONFIG_LP_CONSOLE
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PRINTER != 0)} then {write_tristate $cfg $autocfg CONFIG_LP_CONSOLE $CONFIG_LP_CONSOLE [list $notmod] 2 }
	global CONFIG_PPDEV
	if {($CONFIG_PARPORT != 0) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_PPDEV $CONFIG_PPDEV [list $CONFIG_PARPORT] 2 }
	write_comment $cfg $autocfg "I2C support"
	global CONFIG_I2C
	write_tristate $cfg $autocfg CONFIG_I2C $CONFIG_I2C [list $notmod] 2
	global CONFIG_I2C_ALGOBIT
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C == 1 || $CONFIG_I2C == 2 || $CONFIG_I2C == 4)} then {write_tristate $cfg $autocfg CONFIG_I2C_ALGOBIT $CONFIG_I2C_ALGOBIT [list $CONFIG_I2C] 2 }
	global CONFIG_I2C_PHILIPSPAR
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C_ALGOBIT != 0) && ($CONFIG_I2C_ALGOBIT == 1 || $CONFIG_I2C_ALGOBIT == 2 || $CONFIG_I2C_ALGOBIT == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_I2C_PHILIPSPAR $CONFIG_I2C_PHILIPSPAR [list $CONFIG_I2C_ALGOBIT $CONFIG_PARPORT] 2 }
	global CONFIG_I2C_ELV
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C_ALGOBIT != 0) && ($CONFIG_I2C_ALGOBIT == 1 || $CONFIG_I2C_ALGOBIT == 2 || $CONFIG_I2C_ALGOBIT == 4)} then {write_tristate $cfg $autocfg CONFIG_I2C_ELV $CONFIG_I2C_ELV [list $CONFIG_I2C_ALGOBIT] 2 }
	global CONFIG_I2C_VELLEMAN
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C_ALGOBIT != 0) && ($CONFIG_I2C_ALGOBIT == 1 || $CONFIG_I2C_ALGOBIT == 2 || $CONFIG_I2C_ALGOBIT == 4)} then {write_tristate $cfg $autocfg CONFIG_I2C_VELLEMAN $CONFIG_I2C_VELLEMAN [list $CONFIG_I2C_ALGOBIT] 2 }
	global CONFIG_I2C_ALGOPCF
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C == 1 || $CONFIG_I2C == 2 || $CONFIG_I2C == 4)} then {write_tristate $cfg $autocfg CONFIG_I2C_ALGOPCF $CONFIG_I2C_ALGOPCF [list $CONFIG_I2C] 2 }
	global CONFIG_I2C_ELEKTOR
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C_ALGOPCF != 0) && ($CONFIG_I2C_ALGOPCF == 1 || $CONFIG_I2C_ALGOPCF == 2 || $CONFIG_I2C_ALGOPCF == 4)} then {write_tristate $cfg $autocfg CONFIG_I2C_ELEKTOR $CONFIG_I2C_ELEKTOR [list $CONFIG_I2C_ALGOPCF] 2 }
	global CONFIG_I2C_CHARDEV
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C == 1 || $CONFIG_I2C == 2 || $CONFIG_I2C == 4)} then {write_tristate $cfg $autocfg CONFIG_I2C_CHARDEV $CONFIG_I2C_CHARDEV [list $CONFIG_I2C] 2 }
	global CONFIG_I2C_PROC
	if {($CONFIG_I2C != 0) && ($CONFIG_I2C == 1 || $CONFIG_I2C == 2 || $CONFIG_I2C == 4)} then {write_tristate $cfg $autocfg CONFIG_I2C_PROC $CONFIG_I2C_PROC [list $CONFIG_I2C] 2 }
	write_comment $cfg $autocfg "Mice"
	global CONFIG_BUSMOUSE
	write_tristate $cfg $autocfg CONFIG_BUSMOUSE $CONFIG_BUSMOUSE [list $notmod] 2
	global CONFIG_ATIXL_BUSMOUSE
	if {($CONFIG_BUSMOUSE != 0) && ($CONFIG_BUSMOUSE == 1 || $CONFIG_BUSMOUSE == 2 || $CONFIG_BUSMOUSE == 4)} then {write_tristate $cfg $autocfg CONFIG_ATIXL_BUSMOUSE $CONFIG_ATIXL_BUSMOUSE [list $CONFIG_BUSMOUSE] 2 }
	global CONFIG_LOGIBUSMOUSE
	if {($CONFIG_BUSMOUSE != 0) && ($CONFIG_BUSMOUSE == 1 || $CONFIG_BUSMOUSE == 2 || $CONFIG_BUSMOUSE == 4)} then {write_tristate $cfg $autocfg CONFIG_LOGIBUSMOUSE $CONFIG_LOGIBUSMOUSE [list $CONFIG_BUSMOUSE] 2 }
	global CONFIG_MS_BUSMOUSE
	if {($CONFIG_BUSMOUSE != 0) && ($CONFIG_BUSMOUSE == 1 || $CONFIG_BUSMOUSE == 2 || $CONFIG_BUSMOUSE == 4)} then {write_tristate $cfg $autocfg CONFIG_MS_BUSMOUSE $CONFIG_MS_BUSMOUSE [list $CONFIG_BUSMOUSE] 2 }
	global CONFIG_MOUSE
	write_tristate $cfg $autocfg CONFIG_MOUSE $CONFIG_MOUSE [list $notmod] 2
	global CONFIG_PSMOUSE
	if {($CONFIG_MOUSE != 0)} then {write_tristate $cfg $autocfg CONFIG_PSMOUSE $CONFIG_PSMOUSE [list $notmod] 2 }
	global CONFIG_82C710_MOUSE
	if {($CONFIG_MOUSE != 0)} then {write_tristate $cfg $autocfg CONFIG_82C710_MOUSE $CONFIG_82C710_MOUSE [list $notmod] 2 }
	global CONFIG_PC110_PAD
	if {($CONFIG_MOUSE != 0)} then {write_tristate $cfg $autocfg CONFIG_PC110_PAD $CONFIG_PC110_PAD [list $notmod] 2 }
	write_comment $cfg $autocfg "Joysticks"
	global CONFIG_INPUT_GAMEPORT
	global CONFIG_INPUT
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_GAMEPORT $CONFIG_INPUT_GAMEPORT [list $CONFIG_INPUT] 2 }
	global CONFIG_INPUT_NS558
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_NS558 $CONFIG_INPUT_NS558 [list $CONFIG_INPUT_GAMEPORT] 2 }
	global CONFIG_INPUT_LIGHTNING
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_LIGHTNING $CONFIG_INPUT_LIGHTNING [list $CONFIG_INPUT_GAMEPORT] 2 }
	global CONFIG_INPUT_PCIGAME
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_PCIGAME $CONFIG_INPUT_PCIGAME [list $CONFIG_INPUT_GAMEPORT] 2 }
	global CONFIG_INPUT_CS461X
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_CS461X $CONFIG_INPUT_CS461X [list $CONFIG_INPUT_GAMEPORT] 2 }
	global CONFIG_INPUT_EMU10K1
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_EMU10K1 $CONFIG_INPUT_EMU10K1 [list $CONFIG_INPUT_GAMEPORT] 2 }
	global CONFIG_INPUT_SERIO
	if {($CONFIG_INPUT != 0)} then {write_tristate $cfg $autocfg CONFIG_INPUT_SERIO $CONFIG_INPUT_SERIO [list $notmod] 2 }
	global CONFIG_INPUT_SERPORT
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_SERPORT $CONFIG_INPUT_SERPORT [list $CONFIG_INPUT_SERIO] 2 }
	if {($CONFIG_INPUT == 0)} then {write_tristate $cfg $autocfg CONFIG_INPUT_GAMEPORT $CONSTANT_N [list $notmod] 2 }
	if {($CONFIG_INPUT == 0)} then {write_comment $cfg $autocfg "Input core support is needed for gameports"}
	if {($CONFIG_INPUT != 0)} then {write_comment $cfg $autocfg "Joysticks"}
	global CONFIG_INPUT_ANALOG
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_ANALOG $CONFIG_INPUT_ANALOG [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT] 2 }
	global CONFIG_INPUT_A3D
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_A3D $CONFIG_INPUT_A3D [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT] 2 }
	global CONFIG_INPUT_ADI
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_ADI $CONFIG_INPUT_ADI [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT] 2 }
	global CONFIG_INPUT_COBRA
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_COBRA $CONFIG_INPUT_COBRA [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT] 2 }
	global CONFIG_INPUT_GF2K
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_GF2K $CONFIG_INPUT_GF2K [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT] 2 }
	global CONFIG_INPUT_GRIP
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_GRIP $CONFIG_INPUT_GRIP [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT] 2 }
	global CONFIG_INPUT_INTERACT
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_INTERACT $CONFIG_INPUT_INTERACT [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT] 2 }
	global CONFIG_INPUT_TMDC
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_TMDC $CONFIG_INPUT_TMDC [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT] 2 }
	global CONFIG_INPUT_SIDEWINDER
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_GAMEPORT == 1 || $CONFIG_INPUT_GAMEPORT == 2 || $CONFIG_INPUT_GAMEPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_SIDEWINDER $CONFIG_INPUT_SIDEWINDER [list $CONFIG_INPUT $CONFIG_INPUT_GAMEPORT] 2 }
	global CONFIG_INPUT_IFORCE_USB
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_IFORCE_USB $CONFIG_INPUT_IFORCE_USB [list $CONFIG_INPUT $CONFIG_USB] 2 }
	global CONFIG_INPUT_IFORCE_232
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_IFORCE_232 $CONFIG_INPUT_IFORCE_232 [list $CONFIG_INPUT $CONFIG_INPUT_SERIO] 2 }
	global CONFIG_INPUT_WARRIOR
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_WARRIOR $CONFIG_INPUT_WARRIOR [list $CONFIG_INPUT $CONFIG_INPUT_SERIO] 2 }
	global CONFIG_INPUT_MAGELLAN
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_MAGELLAN $CONFIG_INPUT_MAGELLAN [list $CONFIG_INPUT $CONFIG_INPUT_SERIO] 2 }
	global CONFIG_INPUT_SPACEORB
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_SPACEORB $CONFIG_INPUT_SPACEORB [list $CONFIG_INPUT $CONFIG_INPUT_SERIO] 2 }
	global CONFIG_INPUT_SPACEBALL
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_SPACEBALL $CONFIG_INPUT_SPACEBALL [list $CONFIG_INPUT $CONFIG_INPUT_SERIO] 2 }
	global CONFIG_INPUT_STINGER
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_INPUT_SERIO == 1 || $CONFIG_INPUT_SERIO == 2 || $CONFIG_INPUT_SERIO == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_STINGER $CONFIG_INPUT_STINGER [list $CONFIG_INPUT $CONFIG_INPUT_SERIO] 2 }
	global CONFIG_INPUT_DB9
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_DB9 $CONFIG_INPUT_DB9 [list $CONFIG_INPUT $CONFIG_PARPORT] 2 }
	global CONFIG_INPUT_GAMECON
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_GAMECON $CONFIG_INPUT_GAMECON [list $CONFIG_INPUT $CONFIG_PARPORT] 2 }
	global CONFIG_INPUT_TURBOGRAFX
	if {($CONFIG_INPUT != 0) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_INPUT_TURBOGRAFX $CONFIG_INPUT_TURBOGRAFX [list $CONFIG_INPUT $CONFIG_PARPORT] 2 }
	if {($CONFIG_INPUT == 0)} then {write_comment $cfg $autocfg "Input core support is needed for joysticks"}
	global CONFIG_QIC02_TAPE
	write_tristate $cfg $autocfg CONFIG_QIC02_TAPE $CONFIG_QIC02_TAPE [list $notmod] 2
	global CONFIG_QIC02_DYNCONF
	if {($CONFIG_QIC02_TAPE != 0)} then {write_tristate $cfg $autocfg CONFIG_QIC02_DYNCONF $CONFIG_QIC02_DYNCONF [list $notmod] 2 }
	if {($CONFIG_QIC02_TAPE != 0) && ($CONFIG_QIC02_DYNCONF != 1)} then {write_comment $cfg $autocfg "  Edit configuration parameters in ./include/linux/tpqic02.h!"}
	if {($CONFIG_QIC02_TAPE != 0) && ($CONFIG_QIC02_DYNCONF == 1)} then {write_comment $cfg $autocfg "  Setting runtime QIC-02 configuration is done with qic02conf"}
	if {($CONFIG_QIC02_TAPE != 0) && ($CONFIG_QIC02_DYNCONF == 1)} then {write_comment $cfg $autocfg "  from the tpqic02-support package.  It is available at"}
	if {($CONFIG_QIC02_TAPE != 0) && ($CONFIG_QIC02_DYNCONF == 1)} then {write_comment $cfg $autocfg "  metalab.unc.edu or ftp://titus.cfw.com/pub/Linux/util/"}
	write_comment $cfg $autocfg "Watchdog Cards"
	global CONFIG_WATCHDOG
	write_tristate $cfg $autocfg CONFIG_WATCHDOG $CONFIG_WATCHDOG [list $notmod] 2
	global CONFIG_WATCHDOG_NOWAYOUT
	if {($CONFIG_WATCHDOG != 0)} then {write_tristate $cfg $autocfg CONFIG_WATCHDOG_NOWAYOUT $CONFIG_WATCHDOG_NOWAYOUT [list $notmod] 2 }
	global CONFIG_SOFT_WATCHDOG
	if {($CONFIG_WATCHDOG != 0)} then {write_tristate $cfg $autocfg CONFIG_SOFT_WATCHDOG $CONFIG_SOFT_WATCHDOG [list $notmod] 2 }
	global CONFIG_WDT
	if {($CONFIG_WATCHDOG != 0)} then {write_tristate $cfg $autocfg CONFIG_WDT $CONFIG_WDT [list $notmod] 2 }
	global CONFIG_WDTPCI
	if {($CONFIG_WATCHDOG != 0)} then {write_tristate $cfg $autocfg CONFIG_WDTPCI $CONFIG_WDTPCI [list $notmod] 2 }
	global CONFIG_WDT_501
	if {($CONFIG_WATCHDOG != 0) && ($CONFIG_WDT != 0)} then {write_tristate $cfg $autocfg CONFIG_WDT_501 $CONFIG_WDT_501 [list $notmod] 2 }
	global CONFIG_WDT_501_FAN
	if {($CONFIG_WATCHDOG != 0) && ($CONFIG_WDT != 0) && ($CONFIG_WDT_501 == 1)} then {write_tristate $cfg $autocfg CONFIG_WDT_501_FAN $CONFIG_WDT_501_FAN [list $notmod] 2 }
	global CONFIG_PCWATCHDOG
	if {($CONFIG_WATCHDOG != 0)} then {write_tristate $cfg $autocfg CONFIG_PCWATCHDOG $CONFIG_PCWATCHDOG [list $notmod] 2 }
	global CONFIG_ACQUIRE_WDT
	if {($CONFIG_WATCHDOG != 0)} then {write_tristate $cfg $autocfg CONFIG_ACQUIRE_WDT $CONFIG_ACQUIRE_WDT [list $notmod] 2 }
	global CONFIG_ADVANTECH_WDT
	if {($CONFIG_WATCHDOG != 0)} then {write_tristate $cfg $autocfg CONFIG_ADVANTECH_WDT $CONFIG_ADVANTECH_WDT [list $notmod] 2 }
	global CONFIG_EUROTECH_WDT
	if {($CONFIG_WATCHDOG != 0)} then {write_tristate $cfg $autocfg CONFIG_EUROTECH_WDT $CONFIG_EUROTECH_WDT [list $notmod] 2 }
	global CONFIG_IB700_WDT
	if {($CONFIG_WATCHDOG != 0)} then {write_tristate $cfg $autocfg CONFIG_IB700_WDT $CONFIG_IB700_WDT [list $notmod] 2 }
	global CONFIG_I810_TCO
	if {($CONFIG_WATCHDOG != 0)} then {write_tristate $cfg $autocfg CONFIG_I810_TCO $CONFIG_I810_TCO [list $notmod] 2 }
	global CONFIG_MIXCOMWD
	if {($CONFIG_WATCHDOG != 0)} then {write_tristate $cfg $autocfg CONFIG_MIXCOMWD $CONFIG_MIXCOMWD [list $notmod] 2 }
	global CONFIG_60XX_WDT
	if {($CONFIG_WATCHDOG != 0)} then {write_tristate $cfg $autocfg CONFIG_60XX_WDT $CONFIG_60XX_WDT [list $notmod] 2 }
	global CONFIG_W83877F_WDT
	if {($CONFIG_WATCHDOG != 0)} then {write_tristate $cfg $autocfg CONFIG_W83877F_WDT $CONFIG_W83877F_WDT [list $notmod] 2 }
	global CONFIG_MACHZ_WDT
	if {($CONFIG_WATCHDOG != 0)} then {write_tristate $cfg $autocfg CONFIG_MACHZ_WDT $CONFIG_MACHZ_WDT [list $notmod] 2 }
	global CONFIG_INTEL_RNG
	if {($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_INTEL_RNG $CONFIG_INTEL_RNG [list $CONFIG_PCI] 2 }
	global CONFIG_NVRAM
	write_tristate $cfg $autocfg CONFIG_NVRAM $CONFIG_NVRAM [list $notmod] 2
	global CONFIG_RTC
	write_tristate $cfg $autocfg CONFIG_RTC $CONFIG_RTC [list $notmod] 2
	global CONFIG_DTLK
	write_tristate $cfg $autocfg CONFIG_DTLK $CONFIG_DTLK [list $notmod] 2
	global CONFIG_R3964
	write_tristate $cfg $autocfg CONFIG_R3964 $CONFIG_R3964 [list $notmod] 2
	global CONFIG_APPLICOM
	write_tristate $cfg $autocfg CONFIG_APPLICOM $CONFIG_APPLICOM [list $notmod] 2
	global CONFIG_SONYPI
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_X86 == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SONYPI $CONFIG_SONYPI [list $CONFIG_PCI] 2 }
	write_comment $cfg $autocfg "Ftape, the floppy tape device driver"
	global CONFIG_FTAPE
	write_tristate $cfg $autocfg CONFIG_FTAPE $CONFIG_FTAPE [list $notmod] 2
	global CONFIG_ZFTAPE
	if {($CONFIG_FTAPE != 0) && ($CONFIG_FTAPE == 1 || $CONFIG_FTAPE == 2 || $CONFIG_FTAPE == 4)} then {write_tristate $cfg $autocfg CONFIG_ZFTAPE $CONFIG_ZFTAPE [list $CONFIG_FTAPE] 2 }
	global CONFIG_ZFT_DFLT_BLK_SZ
	if {($CONFIG_FTAPE != 0) && ($CONFIG_ZFTAPE != 0)} then {write_int $cfg $autocfg CONFIG_ZFT_DFLT_BLK_SZ $CONFIG_ZFT_DFLT_BLK_SZ $notmod }
	if {($CONFIG_FTAPE != 0) && ($CONFIG_ZFTAPE != 0)} then {write_comment $cfg $autocfg "  The compressor will be built as a module only!"}
	global CONFIG_ZFT_COMPRESSOR
	if {($CONFIG_FTAPE != 0) && ($CONFIG_ZFTAPE != 0)} then {write_tristate $cfg $autocfg CONFIG_ZFT_COMPRESSOR $CONSTANT_M [list $notmod] 2 }
	global CONFIG_FT_NR_BUFFERS
	if {($CONFIG_FTAPE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_int $cfg $autocfg CONFIG_FT_NR_BUFFERS $CONFIG_FT_NR_BUFFERS $notmod }
	global CONFIG_FT_PROC_FS
	if {($CONFIG_FTAPE != 0) && ($CONFIG_PROC_FS == 1)} then {write_tristate $cfg $autocfg CONFIG_FT_PROC_FS $CONFIG_FT_PROC_FS [list $notmod] 2 }
	global tmpvar_14
	if {($CONFIG_FTAPE != 0)} then {
	if { $tmpvar_14 == "Normal" } then { write_tristate $cfg $autocfg CONFIG_FT_NORMAL_DEBUG 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FT_NORMAL_DEBUG 0 [list $notmod] 2 }
	if { $tmpvar_14 == "Excessive" } then { write_tristate $cfg $autocfg CONFIG_FT_FULL_DEBUG 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FT_FULL_DEBUG 0 [list $notmod] 2 }
	if { $tmpvar_14 == "Reduced" } then { write_tristate $cfg $autocfg CONFIG_FT_NO_TRACE 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FT_NO_TRACE 0 [list $notmod] 2 }
	if { $tmpvar_14 == "None" } then { write_tristate $cfg $autocfg CONFIG_FT_NO_TRACE_AT_ALL 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FT_NO_TRACE_AT_ALL 0 [list $notmod] 2 }}
	if {($CONFIG_FTAPE != 0)} then {write_comment $cfg $autocfg "Hardware configuration"}
	global tmpvar_15
	if {($CONFIG_FTAPE != 0)} then {
	if { $tmpvar_15 == "Standard" } then { write_tristate $cfg $autocfg CONFIG_FT_STD_FDC 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FT_STD_FDC 0 [list $notmod] 2 }
	if { $tmpvar_15 == "MACH-2" } then { write_tristate $cfg $autocfg CONFIG_FT_MACH2 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FT_MACH2 0 [list $notmod] 2 }
	if { $tmpvar_15 == "FC-10/FC-20" } then { write_tristate $cfg $autocfg CONFIG_FT_PROBE_FC10 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FT_PROBE_FC10 0 [list $notmod] 2 }
	if { $tmpvar_15 == "Alt/82078" } then { write_tristate $cfg $autocfg CONFIG_FT_ALT_FDC 1 [list $notmod] 2 } else { write_tristate $cfg $autocfg CONFIG_FT_ALT_FDC 0 [list $notmod] 2 }}
	global CONFIG_FT_STD_FDC
	if {($CONFIG_FTAPE != 0) && ($CONFIG_FT_STD_FDC != 1)} then {write_comment $cfg $autocfg "   Consult the manuals of your tape drive for the correct settings!"}
	global CONFIG_FT_FDC_BASE
	if {($CONFIG_FTAPE != 0) && ($CONFIG_FT_STD_FDC != 1)} then {write_hex $cfg $autocfg CONFIG_FT_FDC_BASE $CONFIG_FT_FDC_BASE $notmod }
	global CONFIG_FT_FDC_IRQ
	if {($CONFIG_FTAPE != 0) && ($CONFIG_FT_STD_FDC != 1)} then {write_int $cfg $autocfg CONFIG_FT_FDC_IRQ $CONFIG_FT_FDC_IRQ $notmod }
	global CONFIG_FT_FDC_DMA
	if {($CONFIG_FTAPE != 0) && ($CONFIG_FT_STD_FDC != 1)} then {write_int $cfg $autocfg CONFIG_FT_FDC_DMA $CONFIG_FT_FDC_DMA $notmod }
	global CONFIG_FT_FDC_THR
	if {($CONFIG_FTAPE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_int $cfg $autocfg CONFIG_FT_FDC_THR $CONFIG_FT_FDC_THR $notmod }
	global CONFIG_FT_FDC_MAX_RATE
	if {($CONFIG_FTAPE != 0) && ($CONFIG_EXPERIMENTAL == 1)} then {write_int $cfg $autocfg CONFIG_FT_FDC_MAX_RATE $CONFIG_FT_FDC_MAX_RATE $notmod }
	global CONFIG_FT_ALPHA_CLOCK
	if {($CONFIG_FTAPE != 0)} then {write_int $cfg $autocfg CONFIG_FT_ALPHA_CLOCK 0 $notmod }
	global CONFIG_AGP
	global CONFIG_DRM_AGP
	if {($CONFIG_DRM_AGP == 1 || $CONFIG_DRM_AGP == 2 || $CONFIG_DRM_AGP == 4)} then {write_tristate $cfg $autocfg CONFIG_AGP $CONFIG_AGP [list $CONFIG_DRM_AGP] 2 }
	global CONFIG_AGP_INTEL
	if {($CONFIG_AGP != 0)} then {write_tristate $cfg $autocfg CONFIG_AGP_INTEL $CONFIG_AGP_INTEL [list $notmod] 2 }
	global CONFIG_AGP_I810
	if {($CONFIG_AGP != 0)} then {write_tristate $cfg $autocfg CONFIG_AGP_I810 $CONFIG_AGP_I810 [list $notmod] 2 }
	global CONFIG_AGP_VIA
	if {($CONFIG_AGP != 0)} then {write_tristate $cfg $autocfg CONFIG_AGP_VIA $CONFIG_AGP_VIA [list $notmod] 2 }
	global CONFIG_AGP_AMD
	if {($CONFIG_AGP != 0)} then {write_tristate $cfg $autocfg CONFIG_AGP_AMD $CONFIG_AGP_AMD [list $notmod] 2 }
	global CONFIG_AGP_SIS
	if {($CONFIG_AGP != 0)} then {write_tristate $cfg $autocfg CONFIG_AGP_SIS $CONFIG_AGP_SIS [list $notmod] 2 }
	global CONFIG_AGP_ALI
	if {($CONFIG_AGP != 0)} then {write_tristate $cfg $autocfg CONFIG_AGP_ALI $CONFIG_AGP_ALI [list $notmod] 2 }
	global CONFIG_AGP_SWORKS
	if {($CONFIG_AGP != 0)} then {write_tristate $cfg $autocfg CONFIG_AGP_SWORKS $CONFIG_AGP_SWORKS [list $notmod] 2 }
	global CONFIG_DRM
	write_tristate $cfg $autocfg CONFIG_DRM $CONFIG_DRM [list $notmod] 2
	global CONFIG_DRM_TDFX
	if {($CONFIG_DRM != 0)} then {write_tristate $cfg $autocfg CONFIG_DRM_TDFX $CONFIG_DRM_TDFX [list $notmod] 2 }
	global CONFIG_DRM_GAMMA
	if {($CONFIG_DRM != 0)} then {write_tristate $cfg $autocfg CONFIG_DRM_GAMMA $CONFIG_DRM_GAMMA [list $notmod] 2 }
	global CONFIG_DRM_R128
	if {($CONFIG_DRM != 0)} then {write_tristate $cfg $autocfg CONFIG_DRM_R128 $CONFIG_DRM_R128 [list $notmod] 2 }
	global CONFIG_DRM_RADEON
	if {($CONFIG_DRM != 0) && ($CONFIG_AGP == 1 || $CONFIG_AGP == 2 || $CONFIG_AGP == 4)} then {write_tristate $cfg $autocfg CONFIG_DRM_RADEON $CONFIG_DRM_RADEON [list $CONFIG_AGP] 2 }
	global CONFIG_DRM_I810
	if {($CONFIG_DRM != 0) && ($CONFIG_AGP == 1 || $CONFIG_AGP == 2 || $CONFIG_AGP == 4)} then {write_tristate $cfg $autocfg CONFIG_DRM_I810 $CONFIG_DRM_I810 [list $CONFIG_AGP] 2 }
	global CONFIG_DRM_MGA
	if {($CONFIG_DRM != 0) && ($CONFIG_AGP == 1 || $CONFIG_AGP == 2 || $CONFIG_AGP == 4)} then {write_tristate $cfg $autocfg CONFIG_DRM_MGA $CONFIG_DRM_MGA [list $CONFIG_AGP] 2 }
	global CONFIG_DRM_SIS
	if {($CONFIG_DRM != 0) && ($CONFIG_AGP == 1 || $CONFIG_AGP == 2 || $CONFIG_AGP == 4)} then {write_tristate $cfg $autocfg CONFIG_DRM_SIS $CONFIG_DRM_SIS [list $CONFIG_AGP] 2 }
	if {($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0)} then {write_comment $cfg $autocfg "PCMCIA character devices"}
	global CONFIG_PCMCIA_SERIAL_CS
	if {($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_SERIAL == 1 || $CONFIG_SERIAL == 2 || $CONFIG_SERIAL == 4)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_SERIAL_CS $CONFIG_PCMCIA_SERIAL_CS [list $CONFIG_SERIAL] 2 }
	global CONFIG_PCMCIA_CHRDEV
	if {($CONFIG_HOTPLUG == 1 && $CONFIG_PCMCIA != 0) && ($CONFIG_PCMCIA_SERIAL_CS == 1)} then {write_tristate $cfg $autocfg CONFIG_PCMCIA_CHRDEV $CONSTANT_Y [list $notmod] 2 }
	write_comment $cfg $autocfg "File systems"
	global CONFIG_QUOTA
	write_tristate $cfg $autocfg CONFIG_QUOTA $CONFIG_QUOTA [list $notmod] 2
	global CONFIG_AUTOFS_FS
	write_tristate $cfg $autocfg CONFIG_AUTOFS_FS $CONFIG_AUTOFS_FS [list $notmod] 2
	global CONFIG_AUTOFS4_FS
	write_tristate $cfg $autocfg CONFIG_AUTOFS4_FS $CONFIG_AUTOFS4_FS [list $notmod] 2
	global CONFIG_REISERFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_REISERFS_FS $CONFIG_REISERFS_FS [list $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_REISERFS_CHECK
	if {($CONFIG_REISERFS_FS == 1 || $CONFIG_REISERFS_FS == 2 || $CONFIG_REISERFS_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_REISERFS_CHECK $CONFIG_REISERFS_CHECK [list $CONFIG_REISERFS_FS $CONFIG_EXPERIMENTAL] 1 }
	global CONFIG_REISERFS_PROC_INFO
	if {($CONFIG_REISERFS_FS == 1 || $CONFIG_REISERFS_FS == 2 || $CONFIG_REISERFS_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_REISERFS_PROC_INFO $CONFIG_REISERFS_PROC_INFO [list $CONFIG_REISERFS_FS $CONFIG_EXPERIMENTAL] 1 }
	global CONFIG_ADFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_ADFS_FS $CONFIG_ADFS_FS [list $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_ADFS_FS_RW
	if {($CONFIG_ADFS_FS == 1 || $CONFIG_ADFS_FS == 2 || $CONFIG_ADFS_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_ADFS_FS_RW $CONFIG_ADFS_FS_RW [list $CONFIG_ADFS_FS $CONFIG_EXPERIMENTAL] 1 }
	global CONFIG_AFFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_AFFS_FS $CONFIG_AFFS_FS [list $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_HFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_HFS_FS $CONFIG_HFS_FS [list $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_BFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_BFS_FS $CONFIG_BFS_FS [list $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_EXT3_FS
	write_tristate $cfg $autocfg CONFIG_EXT3_FS $CONFIG_EXT3_FS [list $notmod] 2
	global CONFIG_JBD
	write_tristate $cfg $autocfg CONFIG_JBD $CONFIG_JBD [list $notmod] 2
	global CONFIG_JBD_DEBUG
	if {($CONFIG_JBD == 1 || $CONFIG_JBD == 2 || $CONFIG_JBD == 4)} then {write_tristate $cfg $autocfg CONFIG_JBD_DEBUG $CONFIG_JBD_DEBUG [list $CONFIG_JBD] 1 }
	global CONFIG_FAT_FS
	write_tristate $cfg $autocfg CONFIG_FAT_FS $CONFIG_FAT_FS [list $notmod] 2
	global CONFIG_MSDOS_FS
	if {($CONFIG_FAT_FS == 1 || $CONFIG_FAT_FS == 2 || $CONFIG_FAT_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_MSDOS_FS $CONFIG_MSDOS_FS [list $CONFIG_FAT_FS] 2 }
	global CONFIG_UMSDOS_FS
	if {($CONFIG_MSDOS_FS == 1 || $CONFIG_MSDOS_FS == 2 || $CONFIG_MSDOS_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_UMSDOS_FS $CONFIG_UMSDOS_FS [list $CONFIG_MSDOS_FS] 2 }
	global CONFIG_VFAT_FS
	if {($CONFIG_FAT_FS == 1 || $CONFIG_FAT_FS == 2 || $CONFIG_FAT_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_VFAT_FS $CONFIG_VFAT_FS [list $CONFIG_FAT_FS] 2 }
	global CONFIG_EFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_EFS_FS $CONFIG_EFS_FS [list $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_JFFS_FS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_JFFS_FS $CONFIG_JFFS_FS [list $CONFIG_MTD] 2 }
	global CONFIG_JFFS_FS_VERBOSE
	if {($CONFIG_JFFS_FS == 1 || $CONFIG_JFFS_FS == 2)} then {write_int $cfg $autocfg CONFIG_JFFS_FS_VERBOSE $CONFIG_JFFS_FS_VERBOSE $notmod }
	global CONFIG_JFFS_PROC_FS
	if {($CONFIG_JFFS_FS == 1 || $CONFIG_JFFS_FS == 2)} then {write_tristate $cfg $autocfg CONFIG_JFFS_PROC_FS $CONFIG_JFFS_PROC_FS [list $notmod] 2 }
	global CONFIG_JFFS2_FS
	if {($CONFIG_MTD == 1 || $CONFIG_MTD == 2 || $CONFIG_MTD == 4)} then {write_tristate $cfg $autocfg CONFIG_JFFS2_FS $CONFIG_JFFS2_FS [list $CONFIG_MTD] 2 }
	global CONFIG_JFFS2_FS_DEBUG
	if {($CONFIG_JFFS2_FS == 1 || $CONFIG_JFFS2_FS == 2)} then {write_int $cfg $autocfg CONFIG_JFFS2_FS_DEBUG $CONFIG_JFFS2_FS_DEBUG $notmod }
	global CONFIG_CRAMFS
	write_tristate $cfg $autocfg CONFIG_CRAMFS $CONFIG_CRAMFS [list $notmod] 2
	global CONFIG_TMPFS
	write_tristate $cfg $autocfg CONFIG_TMPFS $CONFIG_TMPFS [list $notmod] 2
	global CONFIG_RAMFS
	write_tristate $cfg $autocfg CONFIG_RAMFS $CONFIG_RAMFS [list $notmod] 2
	global CONFIG_ISO9660_FS
	write_tristate $cfg $autocfg CONFIG_ISO9660_FS $CONFIG_ISO9660_FS [list $notmod] 2
	global CONFIG_JOLIET
	if {($CONFIG_ISO9660_FS == 1 || $CONFIG_ISO9660_FS == 2 || $CONFIG_ISO9660_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_JOLIET $CONFIG_JOLIET [list $CONFIG_ISO9660_FS] 1 }
	global CONFIG_ZISOFS
	if {($CONFIG_ISO9660_FS == 1 || $CONFIG_ISO9660_FS == 2 || $CONFIG_ISO9660_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_ZISOFS $CONFIG_ZISOFS [list $CONFIG_ISO9660_FS] 1 }
	global CONFIG_MINIX_FS
	write_tristate $cfg $autocfg CONFIG_MINIX_FS $CONFIG_MINIX_FS [list $notmod] 2
	global CONFIG_VXFS_FS
	write_tristate $cfg $autocfg CONFIG_VXFS_FS $CONFIG_VXFS_FS [list $notmod] 2
	global CONFIG_NTFS_FS
	write_tristate $cfg $autocfg CONFIG_NTFS_FS $CONFIG_NTFS_FS [list $notmod] 2
	global CONFIG_NTFS_RW
	if {($CONFIG_NTFS_FS == 1 || $CONFIG_NTFS_FS == 2 || $CONFIG_NTFS_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_NTFS_RW $CONFIG_NTFS_RW [list $CONFIG_NTFS_FS $CONFIG_EXPERIMENTAL] 1 }
	global CONFIG_HPFS_FS
	write_tristate $cfg $autocfg CONFIG_HPFS_FS $CONFIG_HPFS_FS [list $notmod] 2
	write_tristate $cfg $autocfg CONFIG_PROC_FS $CONFIG_PROC_FS [list $notmod] 2
	global CONFIG_DEVFS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_DEVFS_FS $CONFIG_DEVFS_FS [list $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_DEVFS_MOUNT
	if {($CONFIG_DEVFS_FS == 1 || $CONFIG_DEVFS_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_DEVFS_MOUNT $CONFIG_DEVFS_MOUNT [list $CONFIG_DEVFS_FS] 2 }
	global CONFIG_DEVFS_DEBUG
	if {($CONFIG_DEVFS_FS == 1 || $CONFIG_DEVFS_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_DEVFS_DEBUG $CONFIG_DEVFS_DEBUG [list $CONFIG_DEVFS_FS] 2 }
	global CONFIG_DEVPTS_FS
	if {($CONFIG_UNIX98_PTYS == 1 || $CONFIG_UNIX98_PTYS == 4)} then {write_tristate $cfg $autocfg CONFIG_DEVPTS_FS $CONFIG_DEVPTS_FS [list $CONFIG_UNIX98_PTYS] 2 }
	global CONFIG_QNX4FS_FS
	if {($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_QNX4FS_FS $CONFIG_QNX4FS_FS [list $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_QNX4FS_RW
	if {($CONFIG_QNX4FS_FS == 1 || $CONFIG_QNX4FS_FS == 2 || $CONFIG_QNX4FS_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_QNX4FS_RW $CONFIG_QNX4FS_RW [list $CONFIG_QNX4FS_FS $CONFIG_EXPERIMENTAL] 1 }
	global CONFIG_ROMFS_FS
	write_tristate $cfg $autocfg CONFIG_ROMFS_FS $CONFIG_ROMFS_FS [list $notmod] 2
	global CONFIG_EXT2_FS
	write_tristate $cfg $autocfg CONFIG_EXT2_FS $CONFIG_EXT2_FS [list $notmod] 2
	global CONFIG_SYSV_FS
	write_tristate $cfg $autocfg CONFIG_SYSV_FS $CONFIG_SYSV_FS [list $notmod] 2
	global CONFIG_UDF_FS
	write_tristate $cfg $autocfg CONFIG_UDF_FS $CONFIG_UDF_FS [list $notmod] 2
	global CONFIG_UDF_RW
	if {($CONFIG_UDF_FS == 1 || $CONFIG_UDF_FS == 2 || $CONFIG_UDF_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_UDF_RW $CONFIG_UDF_RW [list $CONFIG_UDF_FS $CONFIG_EXPERIMENTAL] 1 }
	global CONFIG_UFS_FS
	write_tristate $cfg $autocfg CONFIG_UFS_FS $CONFIG_UFS_FS [list $notmod] 2
	global CONFIG_UFS_FS_WRITE
	if {($CONFIG_UFS_FS == 1 || $CONFIG_UFS_FS == 2 || $CONFIG_UFS_FS == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_UFS_FS_WRITE $CONFIG_UFS_FS_WRITE [list $CONFIG_UFS_FS $CONFIG_EXPERIMENTAL] 1 }
	if {($CONFIG_NET == 1)} then {write_comment $cfg $autocfg "Network File Systems"}
	global CONFIG_CODA_FS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1 || $CONFIG_INET == 2 || $CONFIG_INET == 4)} then {write_tristate $cfg $autocfg CONFIG_CODA_FS $CONFIG_CODA_FS [list $CONFIG_INET] 2 }
	global CONFIG_INTERMEZZO_FS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1 || $CONFIG_INET == 2 || $CONFIG_INET == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_INTERMEZZO_FS $CONFIG_INTERMEZZO_FS [list $CONFIG_INET $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_NFS_FS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1 || $CONFIG_INET == 2 || $CONFIG_INET == 4)} then {write_tristate $cfg $autocfg CONFIG_NFS_FS $CONFIG_NFS_FS [list $CONFIG_INET] 2 }
	global CONFIG_NFS_V3
	if {($CONFIG_NET == 1) && ($CONFIG_NFS_FS == 1 || $CONFIG_NFS_FS == 2 || $CONFIG_NFS_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_NFS_V3 $CONFIG_NFS_V3 [list $CONFIG_NFS_FS] 1 }
	global CONFIG_ROOT_NFS
	if {($CONFIG_NET == 1) && ($CONFIG_NFS_FS == 1 || $CONFIG_NFS_FS == 4) && ($CONFIG_IP_PNP == 1 || $CONFIG_IP_PNP == 4)} then {write_tristate $cfg $autocfg CONFIG_ROOT_NFS $CONFIG_ROOT_NFS [list $CONFIG_NFS_FS $CONFIG_IP_PNP] 2 }
	global CONFIG_NFSD
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1 || $CONFIG_INET == 2 || $CONFIG_INET == 4)} then {write_tristate $cfg $autocfg CONFIG_NFSD $CONFIG_NFSD [list $CONFIG_INET] 2 }
	global CONFIG_NFSD_V3
	if {($CONFIG_NET == 1) && ($CONFIG_NFSD == 1 || $CONFIG_NFSD == 2 || $CONFIG_NFSD == 4)} then {write_tristate $cfg $autocfg CONFIG_NFSD_V3 $CONFIG_NFSD_V3 [list $CONFIG_NFSD] 1 }
	global CONFIG_SUNRPC
	if {($CONFIG_NET == 1) && ($CONFIG_NFS_FS == 1 || $CONFIG_NFSD == 1)} then {write_tristate $cfg $autocfg CONFIG_SUNRPC $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_LOCKD
	if {($CONFIG_NET == 1) && ($CONFIG_NFS_FS == 1 || $CONFIG_NFSD == 1)} then {write_tristate $cfg $autocfg CONFIG_LOCKD $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NFS_FS != 1 && $CONFIG_NFSD != 1) && ($CONFIG_NFS_FS == 2 || $CONFIG_NFSD == 2)} then {write_tristate $cfg $autocfg CONFIG_SUNRPC $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NFS_FS != 1 && $CONFIG_NFSD != 1) && ($CONFIG_NFS_FS == 2 || $CONFIG_NFSD == 2)} then {write_tristate $cfg $autocfg CONFIG_LOCKD $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NFS_FS != 1 && $CONFIG_NFSD != 1) && ($CONFIG_NFS_FS != 2 && $CONFIG_NFSD != 2)} then {write_tristate $cfg $autocfg CONFIG_SUNRPC $CONSTANT_N [list $notmod] 2 }
	if {($CONFIG_NET == 1) && ($CONFIG_NFS_FS != 1 && $CONFIG_NFSD != 1) && ($CONFIG_NFS_FS != 2 && $CONFIG_NFSD != 2)} then {write_tristate $cfg $autocfg CONFIG_LOCKD $CONSTANT_N [list $notmod] 2 }
	global CONFIG_LOCKD_V4
	if {($CONFIG_NET == 1) && ($CONFIG_NFSD_V3 == 1 || $CONFIG_NFS_V3 == 1)} then {write_tristate $cfg $autocfg CONFIG_LOCKD_V4 $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_SMB_FS
	if {($CONFIG_NET == 1) && ($CONFIG_INET == 1 || $CONFIG_INET == 2 || $CONFIG_INET == 4)} then {write_tristate $cfg $autocfg CONFIG_SMB_FS $CONFIG_SMB_FS [list $CONFIG_INET] 2 }
	global CONFIG_SMB_NLS_DEFAULT
	if {($CONFIG_NET == 1) && ($CONFIG_SMB_FS != 0)} then {write_tristate $cfg $autocfg CONFIG_SMB_NLS_DEFAULT $CONFIG_SMB_NLS_DEFAULT [list $notmod] 2 }
	global CONFIG_SMB_NLS_REMOTE
	if {($CONFIG_NET == 1) && ($CONFIG_SMB_FS != 0) && ($CONFIG_SMB_NLS_DEFAULT == 1)} then {write_string $cfg $autocfg CONFIG_SMB_NLS_REMOTE "$CONFIG_SMB_NLS_REMOTE" $notmod }
	global CONFIG_NCP_FS
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0)} then {write_tristate $cfg $autocfg CONFIG_NCP_FS $CONFIG_NCP_FS [list $notmod] 2 }
	global CONFIG_NCPFS_PACKET_SIGNING
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_PACKET_SIGNING $CONFIG_NCPFS_PACKET_SIGNING [list $CONFIG_NCP_FS] 1 }
	global CONFIG_NCPFS_IOCTL_LOCKING
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_IOCTL_LOCKING $CONFIG_NCPFS_IOCTL_LOCKING [list $CONFIG_NCP_FS] 1 }
	global CONFIG_NCPFS_STRONG
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_STRONG $CONFIG_NCPFS_STRONG [list $CONFIG_NCP_FS] 1 }
	global CONFIG_NCPFS_NFS_NS
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_NFS_NS $CONFIG_NCPFS_NFS_NS [list $CONFIG_NCP_FS] 1 }
	global CONFIG_NCPFS_OS2_NS
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_OS2_NS $CONFIG_NCPFS_OS2_NS [list $CONFIG_NCP_FS] 1 }
	global CONFIG_NCPFS_SMALLDOS
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_SMALLDOS $CONFIG_NCPFS_SMALLDOS [list $CONFIG_NCP_FS] 1 }
	global CONFIG_NCPFS_NLS
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_NLS $CONFIG_NCPFS_NLS [list $CONFIG_NCP_FS] 1 }
	global CONFIG_NCPFS_EXTRAS
	if {($CONFIG_NET == 1) && ($CONFIG_IPX != 0 || $CONFIG_INET != 0) && ($CONFIG_NCP_FS == 1 || $CONFIG_NCP_FS == 2 || $CONFIG_NCP_FS == 4)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_EXTRAS $CONFIG_NCPFS_EXTRAS [list $CONFIG_NCP_FS] 1 }
	if {($CONFIG_NET == 1) && ($CONFIG_IPX == 0 && $CONFIG_INET == 0)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_NLS $CONSTANT_N [list $notmod] 2 }
	if {($CONFIG_NET != 1)} then {write_tristate $cfg $autocfg CONFIG_NCPFS_NLS $CONSTANT_N [list $notmod] 2 }
	if {($CONFIG_NET != 1)} then {write_tristate $cfg $autocfg CONFIG_SMB_FS $CONSTANT_N [list $notmod] 2 }
	global CONFIG_ZISOFS_FS
	if {($CONFIG_ZISOFS == 1)} then {write_tristate $cfg $autocfg CONFIG_ZISOFS_FS $CONFIG_ISO9660_FS [list $notmod] 2 }
	if {($CONFIG_ZISOFS != 1)} then {write_tristate $cfg $autocfg CONFIG_ZISOFS_FS $CONSTANT_N [list $notmod] 2 }
	global CONFIG_ZLIB_FS_INFLATE
	if {($CONFIG_CRAMFS == 1 || $CONFIG_ZISOFS_FS == 1)} then {write_tristate $cfg $autocfg CONFIG_ZLIB_FS_INFLATE $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_CRAMFS != 1 && $CONFIG_ZISOFS_FS != 1) && ($CONFIG_CRAMFS == 2 || $CONFIG_ZISOFS_FS == 2)} then {write_tristate $cfg $autocfg CONFIG_ZLIB_FS_INFLATE $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_CRAMFS != 1 && $CONFIG_ZISOFS_FS != 1) && ($CONFIG_CRAMFS != 2 && $CONFIG_ZISOFS_FS != 2)} then {write_tristate $cfg $autocfg CONFIG_ZLIB_FS_INFLATE $CONSTANT_N [list $notmod] 2 }
	write_comment $cfg $autocfg "Partition Types"
	global CONFIG_PARTITION_ADVANCED
	write_tristate $cfg $autocfg CONFIG_PARTITION_ADVANCED $CONFIG_PARTITION_ADVANCED [list $notmod] 2
	global CONFIG_ACORN_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_ACORN_PARTITION $CONFIG_ACORN_PARTITION [list $notmod] 2 }
	global CONFIG_ACORN_PARTITION_ICS
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_ACORN_PARTITION != 0)} then {write_tristate $cfg $autocfg CONFIG_ACORN_PARTITION_ICS $CONFIG_ACORN_PARTITION_ICS [list $notmod] 2 }
	global CONFIG_ACORN_PARTITION_ADFS
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_ACORN_PARTITION != 0)} then {write_tristate $cfg $autocfg CONFIG_ACORN_PARTITION_ADFS $CONFIG_ACORN_PARTITION_ADFS [list $notmod] 2 }
	global CONFIG_ACORN_PARTITION_POWERTEC
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_ACORN_PARTITION != 0)} then {write_tristate $cfg $autocfg CONFIG_ACORN_PARTITION_POWERTEC $CONFIG_ACORN_PARTITION_POWERTEC [list $notmod] 2 }
	global CONFIG_ACORN_PARTITION_RISCIX
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_ACORN_PARTITION != 0)} then {write_tristate $cfg $autocfg CONFIG_ACORN_PARTITION_RISCIX $CONFIG_ACORN_PARTITION_RISCIX [list $notmod] 2 }
	global CONFIG_OSF_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_OSF_PARTITION $CONFIG_OSF_PARTITION [list $notmod] 2 }
	global CONFIG_AMIGA_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_AMIGA_PARTITION $CONFIG_AMIGA_PARTITION [list $notmod] 2 }
	global CONFIG_ATARI_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_ATARI_PARTITION $CONFIG_ATARI_PARTITION [list $notmod] 2 }
	global CONFIG_MAC_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_MAC_PARTITION $CONFIG_MAC_PARTITION [list $notmod] 2 }
	global CONFIG_MSDOS_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_MSDOS_PARTITION $CONFIG_MSDOS_PARTITION [list $notmod] 2 }
	global CONFIG_BSD_DISKLABEL
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_MSDOS_PARTITION == 1)} then {write_tristate $cfg $autocfg CONFIG_BSD_DISKLABEL $CONFIG_BSD_DISKLABEL [list $notmod] 2 }
	global CONFIG_MINIX_SUBPARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_MSDOS_PARTITION == 1)} then {write_tristate $cfg $autocfg CONFIG_MINIX_SUBPARTITION $CONFIG_MINIX_SUBPARTITION [list $notmod] 2 }
	global CONFIG_SOLARIS_X86_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_MSDOS_PARTITION == 1)} then {write_tristate $cfg $autocfg CONFIG_SOLARIS_X86_PARTITION $CONFIG_SOLARIS_X86_PARTITION [list $notmod] 2 }
	global CONFIG_UNIXWARE_DISKLABEL
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_MSDOS_PARTITION == 1)} then {write_tristate $cfg $autocfg CONFIG_UNIXWARE_DISKLABEL $CONFIG_UNIXWARE_DISKLABEL [list $notmod] 2 }
	global CONFIG_LDM_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_LDM_PARTITION $CONFIG_LDM_PARTITION [list $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_LDM_DEBUG
	if {($CONFIG_PARTITION_ADVANCED == 1) && ($CONFIG_LDM_PARTITION == 1)} then {write_tristate $cfg $autocfg CONFIG_LDM_DEBUG $CONFIG_LDM_DEBUG [list $notmod] 2 }
	global CONFIG_SGI_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_SGI_PARTITION $CONFIG_SGI_PARTITION [list $notmod] 2 }
	global CONFIG_ULTRIX_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_ULTRIX_PARTITION $CONFIG_ULTRIX_PARTITION [list $notmod] 2 }
	global CONFIG_SUN_PARTITION
	if {($CONFIG_PARTITION_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_SUN_PARTITION $CONFIG_SUN_PARTITION [list $notmod] 2 }
	global CONFIG_AMIGA
	global CONFIG_ATARI
	global CONFIG_MAC
	global CONFIG_SGI_IP22
	global CONFIG_SGI_IP27
	if {($CONFIG_PARTITION_ADVANCED != 1) && ($CONFIG_AMIGA != 1 && $CONFIG_ATARI != 1 && $CONFIG_MAC != 1 && $CONFIG_SGI_IP22 != 1 && $CONFIG_SGI_IP27 != 1)} then {write_tristate $cfg $autocfg CONFIG_MSDOS_PARTITION $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_PARTITION_ADVANCED != 1) && ($CONFIG_AFFS_FS == 1)} then {write_tristate $cfg $autocfg CONFIG_AMIGA_PARTITION $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_SMB_NLS
	if {($CONFIG_SMB_FS == 2 || $CONFIG_SMB_FS == 1)} then {write_tristate $cfg $autocfg CONFIG_SMB_NLS $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_SMB_FS != 2 && $CONFIG_SMB_FS != 1)} then {write_tristate $cfg $autocfg CONFIG_SMB_NLS $CONSTANT_N [list $notmod] 2 }
	global CONFIG_NLS
	if {($CONFIG_JOLIET == 1 || $CONFIG_FAT_FS != 0 || $CONFIG_NTFS_FS != 0 || $CONFIG_NCPFS_NLS == 1 || $CONFIG_SMB_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_JOLIET != 1 && $CONFIG_FAT_FS == 0 && $CONFIG_NTFS_FS == 0 && $CONFIG_NCPFS_NLS != 1 && $CONFIG_SMB_NLS != 1)} then {write_tristate $cfg $autocfg CONFIG_NLS $CONSTANT_N [list $notmod] 2 }
	if {($CONFIG_NLS == 1)} then {write_comment $cfg $autocfg "Native Language Support"}
	global CONFIG_NLS_DEFAULT
	if {($CONFIG_NLS == 1)} then {write_string $cfg $autocfg CONFIG_NLS_DEFAULT "$CONFIG_NLS_DEFAULT" $notmod }
	global CONFIG_NLS_CODEPAGE_437
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_437 $CONFIG_NLS_CODEPAGE_437 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_737
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_737 $CONFIG_NLS_CODEPAGE_737 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_775
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_775 $CONFIG_NLS_CODEPAGE_775 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_850
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_850 $CONFIG_NLS_CODEPAGE_850 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_852
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_852 $CONFIG_NLS_CODEPAGE_852 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_855
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_855 $CONFIG_NLS_CODEPAGE_855 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_857
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_857 $CONFIG_NLS_CODEPAGE_857 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_860
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_860 $CONFIG_NLS_CODEPAGE_860 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_861
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_861 $CONFIG_NLS_CODEPAGE_861 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_862
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_862 $CONFIG_NLS_CODEPAGE_862 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_863
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_863 $CONFIG_NLS_CODEPAGE_863 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_864
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_864 $CONFIG_NLS_CODEPAGE_864 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_865
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_865 $CONFIG_NLS_CODEPAGE_865 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_866
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_866 $CONFIG_NLS_CODEPAGE_866 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_869
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_869 $CONFIG_NLS_CODEPAGE_869 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_936
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_936 $CONFIG_NLS_CODEPAGE_936 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_950
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_950 $CONFIG_NLS_CODEPAGE_950 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_932
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_932 $CONFIG_NLS_CODEPAGE_932 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_949
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_949 $CONFIG_NLS_CODEPAGE_949 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_874
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_874 $CONFIG_NLS_CODEPAGE_874 [list $notmod] 2 }
	global CONFIG_NLS_ISO8859_8
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_8 $CONFIG_NLS_ISO8859_8 [list $notmod] 2 }
	global CONFIG_NLS_CODEPAGE_1251
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_CODEPAGE_1251 $CONFIG_NLS_CODEPAGE_1251 [list $notmod] 2 }
	global CONFIG_NLS_ISO8859_1
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_1 $CONFIG_NLS_ISO8859_1 [list $notmod] 2 }
	global CONFIG_NLS_ISO8859_2
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_2 $CONFIG_NLS_ISO8859_2 [list $notmod] 2 }
	global CONFIG_NLS_ISO8859_3
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_3 $CONFIG_NLS_ISO8859_3 [list $notmod] 2 }
	global CONFIG_NLS_ISO8859_4
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_4 $CONFIG_NLS_ISO8859_4 [list $notmod] 2 }
	global CONFIG_NLS_ISO8859_5
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_5 $CONFIG_NLS_ISO8859_5 [list $notmod] 2 }
	global CONFIG_NLS_ISO8859_6
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_6 $CONFIG_NLS_ISO8859_6 [list $notmod] 2 }
	global CONFIG_NLS_ISO8859_7
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_7 $CONFIG_NLS_ISO8859_7 [list $notmod] 2 }
	global CONFIG_NLS_ISO8859_9
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_9 $CONFIG_NLS_ISO8859_9 [list $notmod] 2 }
	global CONFIG_NLS_ISO8859_13
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_13 $CONFIG_NLS_ISO8859_13 [list $notmod] 2 }
	global CONFIG_NLS_ISO8859_14
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_14 $CONFIG_NLS_ISO8859_14 [list $notmod] 2 }
	global CONFIG_NLS_ISO8859_15
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_ISO8859_15 $CONFIG_NLS_ISO8859_15 [list $notmod] 2 }
	global CONFIG_NLS_KOI8_R
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_KOI8_R $CONFIG_NLS_KOI8_R [list $notmod] 2 }
	global CONFIG_NLS_KOI8_U
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_KOI8_U $CONFIG_NLS_KOI8_U [list $notmod] 2 }
	global CONFIG_NLS_UTF8
	if {($CONFIG_NLS == 1)} then {write_tristate $cfg $autocfg CONFIG_NLS_UTF8 $CONFIG_NLS_UTF8 [list $notmod] 2 }
	if {($CONFIG_VT == 1)} then {write_comment $cfg $autocfg "Console drivers"}
	global CONFIG_VGA_CONSOLE
	if {($CONFIG_VT == 1)} then {write_tristate $cfg $autocfg CONFIG_VGA_CONSOLE $CONFIG_VGA_CONSOLE [list $notmod] 2 }
	global CONFIG_VIDEO_SELECT
	if {($CONFIG_VT == 1)} then {write_tristate $cfg $autocfg CONFIG_VIDEO_SELECT $CONFIG_VIDEO_SELECT [list $notmod] 2 }
	global CONFIG_MDA_CONSOLE
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_MDA_CONSOLE $CONFIG_MDA_CONSOLE [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_comment $cfg $autocfg "Frame-buffer support"}
	global CONFIG_FB
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_FB $CONFIG_FB [list $notmod] 2 }
	global CONFIG_DUMMY_CONSOLE
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1)} then {write_tristate $cfg $autocfg CONFIG_DUMMY_CONSOLE $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_FB_RIVA
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_FB_RIVA $CONFIG_FB_RIVA [list $notmod] 2 }
	global CONFIG_FB_CLGEN
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_FB_CLGEN $CONFIG_FB_CLGEN [list $notmod] 2 }
	global CONFIG_FB_PM2
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_FB_PM2 $CONFIG_FB_PM2 [list $notmod] 2 }
	global CONFIG_FB_PM2_FIFO_DISCONNECT
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB_PM2 == 1 || $CONFIG_FB_PM2 == 2) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_FB_PM2_FIFO_DISCONNECT $CONFIG_FB_PM2_FIFO_DISCONNECT [list $notmod] 2 }
	global CONFIG_FB_PM2_PCI
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB_PM2 == 1 || $CONFIG_FB_PM2 == 2) && ($CONFIG_PCI == 1)} then {write_tristate $cfg $autocfg CONFIG_FB_PM2_PCI $CONFIG_FB_PM2_PCI [list $notmod] 2 }
	global CONFIG_FB_ACORN
	global CONFIG_ARCH_ACORN
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_ARCH_ACORN == 1 || $CONFIG_ARCH_ACORN == 4)} then {write_tristate $cfg $autocfg CONFIG_FB_ACORN $CONFIG_FB_ACORN [list $CONFIG_ARCH_ACORN] 2 }
	global CONFIG_FB_CLPS711X
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_ARCH_CLPS711X == 1 || $CONFIG_ARCH_CLPS711X == 4)} then {write_tristate $cfg $autocfg CONFIG_FB_CLPS711X $CONFIG_FB_CLPS711X [list $CONFIG_ARCH_CLPS711X] 2 }
	global CONFIG_FB_CYBER2000
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_FB_CYBER2000 $CONFIG_FB_CYBER2000 [list $CONFIG_PCI] 2 }
	global CONFIG_FB_SA1100
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_ARCH_SA1100 == 1 || $CONFIG_ARCH_SA1100 == 4)} then {write_tristate $cfg $autocfg CONFIG_FB_SA1100 $CONFIG_FB_SA1100 [list $CONFIG_ARCH_SA1100] 2 }
	global CONFIG_FB_SGIVW
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_VISWS == 1)} then {write_tristate $cfg $autocfg CONFIG_FB_SGIVW $CONFIG_FB_SGIVW [list $notmod] 2 }
	global CONFIG_BUS_I2C
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_VISWS == 1)} then {write_tristate $cfg $autocfg CONFIG_BUS_I2C $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_FB_MATROX
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {write_tristate $cfg $autocfg CONFIG_FB_MATROX $CONFIG_FB_MATROX [list $notmod] 2 }
	global CONFIG_FB_MATROX_MILLENIUM
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0)} then {write_tristate $cfg $autocfg CONFIG_FB_MATROX_MILLENIUM $CONFIG_FB_MATROX_MILLENIUM [list $notmod] 2 }
	global CONFIG_FB_MATROX_MYSTIQUE
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0)} then {write_tristate $cfg $autocfg CONFIG_FB_MATROX_MYSTIQUE $CONFIG_FB_MATROX_MYSTIQUE [list $notmod] 2 }
	global CONFIG_FB_MATROX_G100
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0)} then {write_tristate $cfg $autocfg CONFIG_FB_MATROX_G100 $CONFIG_FB_MATROX_G100 [list $notmod] 2 }
	global CONFIG_FB_MATROX_I2C
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0) && ($CONFIG_I2C != 0) && ($CONFIG_FB_MATROX == 1 || $CONFIG_FB_MATROX == 2 || $CONFIG_FB_MATROX == 4) && ($CONFIG_I2C_ALGOBIT == 1 || $CONFIG_I2C_ALGOBIT == 2 || $CONFIG_I2C_ALGOBIT == 4)} then {write_tristate $cfg $autocfg CONFIG_FB_MATROX_I2C $CONFIG_FB_MATROX_I2C [list $CONFIG_FB_MATROX $CONFIG_I2C_ALGOBIT] 2 }
	global CONFIG_FB_MATROX_MAVEN
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0) && ($CONFIG_I2C != 0) && ($CONFIG_FB_MATROX_G100 == 1) && ($CONFIG_FB_MATROX_I2C == 1 || $CONFIG_FB_MATROX_I2C == 2 || $CONFIG_FB_MATROX_I2C == 4)} then {write_tristate $cfg $autocfg CONFIG_FB_MATROX_MAVEN $CONFIG_FB_MATROX_MAVEN [list $CONFIG_FB_MATROX_I2C] 2 }
	global CONFIG_FB_MATROX_G450
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0) && ($CONFIG_FB_MATROX_G100 == 1 || $CONFIG_FB_MATROX_G100 == 2 || $CONFIG_FB_MATROX_G100 == 4)} then {write_tristate $cfg $autocfg CONFIG_FB_MATROX_G450 $CONFIG_FB_MATROX_G450 [list $CONFIG_FB_MATROX_G100] 2 }
	global CONFIG_FB_MATROX_MULTIHEAD
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_MATROX != 0)} then {write_tristate $cfg $autocfg CONFIG_FB_MATROX_MULTIHEAD $CONFIG_FB_MATROX_MULTIHEAD [list $notmod] 2 }
	global CONFIG_FB_ATY
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {write_tristate $cfg $autocfg CONFIG_FB_ATY $CONFIG_FB_ATY [list $notmod] 2 }
	global CONFIG_FB_ATY_GX
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_ATY != 0)} then {write_tristate $cfg $autocfg CONFIG_FB_ATY_GX $CONFIG_FB_ATY_GX [list $notmod] 2 }
	global CONFIG_FB_ATY_CT
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_ATY != 0)} then {write_tristate $cfg $autocfg CONFIG_FB_ATY_CT $CONFIG_FB_ATY_CT [list $notmod] 2 }
	global CONFIG_FB_RADEON
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {write_tristate $cfg $autocfg CONFIG_FB_RADEON $CONFIG_FB_RADEON [list $notmod] 2 }
	global CONFIG_FB_ATY128
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {write_tristate $cfg $autocfg CONFIG_FB_ATY128 $CONFIG_FB_ATY128 [list $notmod] 2 }
	global CONFIG_FB_SIS
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {write_tristate $cfg $autocfg CONFIG_FB_SIS $CONFIG_FB_SIS [list $notmod] 2 }
	global CONFIG_FB_SIS_300
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_SIS != 0)} then {write_tristate $cfg $autocfg CONFIG_FB_SIS_300 $CONFIG_FB_SIS_300 [list $notmod] 2 }
	global CONFIG_FB_SIS_315
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0) && ($CONFIG_FB_SIS != 0)} then {write_tristate $cfg $autocfg CONFIG_FB_SIS_315 $CONFIG_FB_SIS_315 [list $notmod] 2 }
	global CONFIG_FB_3DFX
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {write_tristate $cfg $autocfg CONFIG_FB_3DFX $CONFIG_FB_3DFX [list $notmod] 2 }
	global CONFIG_FB_VOODOO1
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_PCI != 0)} then {write_tristate $cfg $autocfg CONFIG_FB_VOODOO1 $CONFIG_FB_VOODOO1 [list $notmod] 2 }
	global CONFIG_FB_VIRTUAL
	if {($CONFIG_VT == 1) && ($CONFIG_FB == 1) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_FB_VIRTUAL $CONFIG_FB_VIRTUAL [list $notmod] 2 }
	global CONFIG_FBCON_ADVANCED
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_ADVANCED $CONFIG_FBCON_ADVANCED [list $notmod] 2 }
	global CONFIG_FBCON_MFB
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_MFB $CONFIG_FBCON_MFB [list $notmod] 2 }
	global CONFIG_FBCON_CFB2
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_CFB2 $CONFIG_FBCON_CFB2 [list $notmod] 2 }
	global CONFIG_FBCON_CFB4
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_CFB4 $CONFIG_FBCON_CFB4 [list $notmod] 2 }
	global CONFIG_FBCON_CFB8
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_CFB8 $CONFIG_FBCON_CFB8 [list $notmod] 2 }
	global CONFIG_FBCON_CFB16
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_CFB16 $CONFIG_FBCON_CFB16 [list $notmod] 2 }
	global CONFIG_FBCON_CFB24
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_CFB24 $CONFIG_FBCON_CFB24 [list $notmod] 2 }
	global CONFIG_FBCON_CFB32
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_CFB32 $CONFIG_FBCON_CFB32 [list $notmod] 2 }
	global CONFIG_FBCON_AFB
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_AFB $CONFIG_FBCON_AFB [list $notmod] 2 }
	global CONFIG_FBCON_ILBM
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_ILBM $CONFIG_FBCON_ILBM [list $notmod] 2 }
	global CONFIG_FBCON_IPLAN2P2
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_IPLAN2P2 $CONFIG_FBCON_IPLAN2P2 [list $notmod] 2 }
	global CONFIG_FBCON_IPLAN2P4
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_IPLAN2P4 $CONFIG_FBCON_IPLAN2P4 [list $notmod] 2 }
	global CONFIG_FBCON_IPLAN2P8
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_IPLAN2P8 $CONFIG_FBCON_IPLAN2P8 [list $notmod] 2 }
	global CONFIG_FBCON_MAC
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_MAC $CONFIG_FBCON_MAC [list $notmod] 2 }
	global CONFIG_FBCON_VGA_PLANES
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_VGA_PLANES $CONFIG_FBCON_VGA_PLANES [list $notmod] 2 }
	global CONFIG_FBCON_VGA
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_VGA $CONFIG_FBCON_VGA [list $notmod] 2 }
	global CONFIG_FBCON_HGA
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_HGA $CONFIG_FBCON_HGA [list $notmod] 2 }
	global CONFIG_FB_AMIGA
	global CONFIG_FB_ATARI
	global CONFIG_FB_CYBER
	global CONFIG_FB_MAC
	global CONFIG_FB_RETINAZ3
	global CONFIG_FB_VIRGE
	global CONFIG_FB_BWTWO
	global CONFIG_FB_TX3912
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ACORN == 1 || $CONFIG_FB_AMIGA == 1 || $CONFIG_FB_ATARI == 1 || $CONFIG_FB_CYBER == 1 || $CONFIG_FB_MAC == 1 || $CONFIG_FB_RETINAZ3 == 1 || $CONFIG_FB_VIRGE == 1 || $CONFIG_FB_VIRTUAL == 1 || $CONFIG_FB_BWTWO == 1 || $CONFIG_FB_CLGEN == 1 || $CONFIG_FB_TX3912 == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_MFB $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ACORN != 1 && $CONFIG_FB_AMIGA != 1 && $CONFIG_FB_ATARI != 1 && $CONFIG_FB_CYBER != 1 && $CONFIG_FB_MAC != 1 && $CONFIG_FB_RETINAZ3 != 1 && $CONFIG_FB_VIRGE != 1 && $CONFIG_FB_VIRTUAL != 1 && $CONFIG_FB_BWTWO != 1 && $CONFIG_FB_CLGEN != 1 && $CONFIG_FB_TX3912 != 1) && ($CONFIG_FB_ACORN == 2 || $CONFIG_FB_AMIGA == 2 || $CONFIG_FB_ATARI == 2 || $CONFIG_FB_CYBER == 2 || $CONFIG_FB_MAC == 2 || $CONFIG_FB_RETINAZ3 == 2 || $CONFIG_FB_VIRGE == 2 || $CONFIG_FB_VIRTUAL == 2 || $CONFIG_FB_BWTWO == 2 || $CONFIG_FB_CLGEN == 2 || $CONFIG_FB_TX3912 == 2)} then {write_tristate $cfg $autocfg CONFIG_FBCON_MFB $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ACORN == 1 || $CONFIG_FB_MAC == 1 || $CONFIG_FB_SA1100 == 1 || $CONFIG_FB_VIRTUAL == 1 || $CONFIG_FB_TX3912 == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_CFB2 $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ACORN == 1 || $CONFIG_FB_MAC == 1 || $CONFIG_FB_SA1100 == 1 || $CONFIG_FB_VIRTUAL == 1 || $CONFIG_FB_TX3912 == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_CFB4 $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ACORN != 1 && $CONFIG_FB_MAC != 1 && $CONFIG_FB_SA1100 != 1 && $CONFIG_FB_VIRTUAL != 1 && $CONFIG_FB_TX3912 != 1) && ($CONFIG_FB_ACORN == 2 || $CONFIG_FB_MAC == 2 || $CONFIG_FB_SA1100 == 2 || $CONFIG_FB_VIRTUAL == 2 || $CONFIG_FB_TX3912 == 2)} then {write_tristate $cfg $autocfg CONFIG_FBCON_CFB2 $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ACORN != 1 && $CONFIG_FB_MAC != 1 && $CONFIG_FB_SA1100 != 1 && $CONFIG_FB_VIRTUAL != 1 && $CONFIG_FB_TX3912 != 1) && ($CONFIG_FB_ACORN == 2 || $CONFIG_FB_MAC == 2 || $CONFIG_FB_SA1100 == 2 || $CONFIG_FB_VIRTUAL == 2 || $CONFIG_FB_TX3912 == 2)} then {write_tristate $cfg $autocfg CONFIG_FBCON_CFB4 $CONSTANT_M [list $notmod] 2 }
	global CONFIG_FB_OF
	global CONFIG_FB_TGA
	global CONFIG_FB_VESA
	global CONFIG_FB_TCX
	global CONFIG_FB_CGTHREE
	global CONFIG_FB_CONTROL
	global CONFIG_FB_CGFOURTEEN
	global CONFIG_FB_G364
	global CONFIG_FB_VALKYRIE
	global CONFIG_FB_PLATINUM
	global CONFIG_FB_IGA
	global CONFIG_FB_CT65550
	global CONFIG_FB_P9100
	global CONFIG_FB_PMAG_BA
	global CONFIG_FB_PMAGB_B
	global CONFIG_FB_MAXINE
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ACORN == 1 || $CONFIG_FB_ATARI == 1 || $CONFIG_FB_ATY == 1 || $CONFIG_FB_MAC == 1 || $CONFIG_FB_OF == 1 || $CONFIG_FB_TGA == 1 || $CONFIG_FB_VESA == 1 || $CONFIG_FB_VIRTUAL == 1 || $CONFIG_FB_TCX == 1 || $CONFIG_FB_CGTHREE == 1 || $CONFIG_FB_CONTROL == 1 || $CONFIG_FB_CLGEN == 1 || $CONFIG_FB_CGFOURTEEN == 1 || $CONFIG_FB_G364 == 1 || $CONFIG_FB_VIRGE == 1 || $CONFIG_FB_CYBER == 1 || $CONFIG_FB_VALKYRIE == 1 || $CONFIG_FB_PLATINUM == 1 || $CONFIG_FB_IGA == 1 || $CONFIG_FB_MATROX == 1 || $CONFIG_FB_CT65550 == 1 || $CONFIG_FB_PM2 == 1 || $CONFIG_FB_P9100 == 1 || $CONFIG_FB_ATY128 == 1 || $CONFIG_FB_RIVA == 1 || $CONFIG_FB_RADEON == 1 || $CONFIG_FB_SGIVW == 1 || $CONFIG_FB_CYBER2000 == 1 || $CONFIG_FB_SA1100 == 1 || $CONFIG_FB_3DFX == 1 || $CONFIG_FB_PMAG_BA == 1 || $CONFIG_FB_PMAGB_B == 1 || $CONFIG_FB_MAXINE == 1 || $CONFIG_FB_TX3912 == 1 || $CONFIG_FB_SIS == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_CFB8 $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ACORN != 1 && $CONFIG_FB_ATARI != 1 && $CONFIG_FB_ATY != 1 && $CONFIG_FB_MAC != 1 && $CONFIG_FB_OF != 1 && $CONFIG_FB_TGA != 1 && $CONFIG_FB_VESA != 1 && $CONFIG_FB_VIRTUAL != 1 && $CONFIG_FB_TCX != 1 && $CONFIG_FB_CGTHREE != 1 && $CONFIG_FB_CONTROL != 1 && $CONFIG_FB_CLGEN != 1 && $CONFIG_FB_CGFOURTEEN != 1 && $CONFIG_FB_G364 != 1 && $CONFIG_FB_VIRGE != 1 && $CONFIG_FB_CYBER != 1 && $CONFIG_FB_VALKYRIE != 1 && $CONFIG_FB_PLATINUM != 1 && $CONFIG_FB_IGA != 1 && $CONFIG_FB_MATROX != 1 && $CONFIG_FB_CT65550 != 1 && $CONFIG_FB_PM2 != 1 && $CONFIG_FB_P9100 != 1 && $CONFIG_FB_ATY128 != 1 && $CONFIG_FB_RIVA != 1 && $CONFIG_FB_RADEON != 1 && $CONFIG_FB_SGIVW != 1 && $CONFIG_FB_CYBER2000 != 1 && $CONFIG_FB_SA1100 != 1 && $CONFIG_FB_3DFX != 1 && $CONFIG_FB_PMAG_BA != 1 && $CONFIG_FB_PMAGB_B != 1 && $CONFIG_FB_MAXINE != 1 && $CONFIG_FB_TX3912 != 1 && $CONFIG_FB_SIS != 1) && ($CONFIG_FB_ACORN == 2 || $CONFIG_FB_ATARI == 2 || $CONFIG_FB_ATY == 2 || $CONFIG_FB_MAC == 2 || $CONFIG_FB_OF == 2 || $CONFIG_FB_TGA == 2 || $CONFIG_FB_VESA == 2 || $CONFIG_FB_VIRTUAL == 2 || $CONFIG_FB_TCX == 2 || $CONFIG_FB_CGTHREE == 2 || $CONFIG_FB_CONTROL == 2 || $CONFIG_FB_CLGEN == 2 || $CONFIG_FB_CGFOURTEEN == 2 || $CONFIG_FB_G364 == 2 || $CONFIG_FB_VIRGE == 2 || $CONFIG_FB_CYBER == 2 || $CONFIG_FB_VALKYRIE == 2 || $CONFIG_FB_PLATINUM == 2 || $CONFIG_FB_IGA == 2 || $CONFIG_FB_MATROX == 2 || $CONFIG_FB_CT65550 == 2 || $CONFIG_FB_PM2 == 2 || $CONFIG_FB_P9100 == 2 || $CONFIG_FB_ATY128 == 2 || $CONFIG_FB_RIVA == 2 || $CONFIG_FB_3DFX == 2 || $CONFIG_FB_SGIVW == 2 || $CONFIG_FB_CYBER2000 == 2 || $CONFIG_FB_PMAG_BA == 2 || $CONFIG_FB_PMAGB_B == 2 || $CONFIG_FB_MAXINE == 2 || $CONFIG_FB_RADEON == 2 || $CONFIG_FB_SA1100 == 2 || $CONFIG_FB_SIS == 2 || $CONFIG_FB_TX3912 == 2)} then {write_tristate $cfg $autocfg CONFIG_FBCON_CFB8 $CONSTANT_M [list $notmod] 2 }
	global CONFIG_FB_TBOX
	global CONFIG_FB_Q40
	global CONFIG_FB_PVR2
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI == 1 || $CONFIG_FB_ATY == 1 || $CONFIG_FB_MAC == 1 || $CONFIG_FB_VESA == 1 || $CONFIG_FB_VIRTUAL == 1 || $CONFIG_FB_TBOX == 1 || $CONFIG_FB_Q40 == 1 || $CONFIG_FB_RADEON == 1 || $CONFIG_FB_CONTROL == 1 || $CONFIG_FB_CLGEN == 1 || $CONFIG_FB_VIRGE == 1 || $CONFIG_FB_CYBER == 1 || $CONFIG_FB_VALKYRIE == 1 || $CONFIG_FB_PLATINUM == 1 || $CONFIG_FB_CT65550 == 1 || $CONFIG_FB_MATROX == 1 || $CONFIG_FB_PM2 == 1 || $CONFIG_FB_SGIVW == 1 || $CONFIG_FB_RIVA == 1 || $CONFIG_FB_ATY128 == 1 || $CONFIG_FB_CYBER2000 == 1 || $CONFIG_FB_3DFX == 1 || $CONFIG_FB_SIS == 1 || $CONFIG_FB_SA1100 == 1 || $CONFIG_FB_PVR2 == 1 || $CONFIG_FB_VOODOO1 == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_CFB16 $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI != 1 && $CONFIG_FB_ATY != 1 && $CONFIG_FB_MAC != 1 && $CONFIG_FB_VESA != 1 && $CONFIG_FB_VIRTUAL != 1 && $CONFIG_FB_TBOX != 1 && $CONFIG_FB_Q40 != 1 && $CONFIG_FB_RADEON != 1 && $CONFIG_FB_CONTROL != 1 && $CONFIG_FB_CLGEN != 1 && $CONFIG_FB_VIRGE != 1 && $CONFIG_FB_CYBER != 1 && $CONFIG_FB_VALKYRIE != 1 && $CONFIG_FB_PLATINUM != 1 && $CONFIG_FB_CT65550 != 1 && $CONFIG_FB_MATROX != 1 && $CONFIG_FB_PM2 != 1 && $CONFIG_FB_SGIVW != 1 && $CONFIG_FB_RIVA != 1 && $CONFIG_FB_ATY128 != 1 && $CONFIG_FB_CYBER2000 != 1 && $CONFIG_FB_3DFX != 1 && $CONFIG_FB_SIS != 1 && $CONFIG_FB_SA1100 != 1 && $CONFIG_FB_PVR2 != 1 && $CONFIG_FB_VOODOO1 != 1) && ($CONFIG_FB_ATARI == 2 || $CONFIG_FB_ATY == 2 || $CONFIG_FB_MAC == 2 || $CONFIG_FB_VESA == 2 || $CONFIG_FB_VIRTUAL == 2 || $CONFIG_FB_TBOX == 2 || $CONFIG_FB_Q40 == 2 || $CONFIG_FB_3DFX == 2 || $CONFIG_FB_CONTROL == 2 || $CONFIG_FB_CLGEN == 2 || $CONFIG_FB_VIRGE == 2 || $CONFIG_FB_CYBER == 2 || $CONFIG_FB_VALKYRIE == 2 || $CONFIG_FB_PLATINUM == 2 || $CONFIG_FB_CT65550 == 2 || $CONFIG_FB_MATROX == 2 || $CONFIG_FB_PM2 == 2 || $CONFIG_FB_SGIVW == 2 || $CONFIG_FB_RIVA == 2 || $CONFIG_FB_ATY128 == 2 || $CONFIG_FB_CYBER2000 == 2 || $CONFIG_FB_SIS == 2 || $CONFIG_FB_SA1100 == 2 || $CONFIG_FB_RADEON == 2 || $CONFIG_FB_PVR2 == 2 || $CONFIG_FB_VOODOO1 == 2)} then {write_tristate $cfg $autocfg CONFIG_FBCON_CFB16 $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATY == 1 || $CONFIG_FB_VIRTUAL == 1 || $CONFIG_FB_CLGEN == 1 || $CONFIG_FB_VESA == 1 || $CONFIG_FB_MATROX == 1 || $CONFIG_FB_PM2 == 1 || $CONFIG_FB_ATY128 == 1 || $CONFIG_FB_RADEON == 1 || $CONFIG_FB_CYBER2000 == 1 || $CONFIG_FB_PVR2 == 1 || $CONFIG_FB_VOODOO1 == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_CFB24 $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATY != 1 && $CONFIG_FB_VIRTUAL != 1 && $CONFIG_FB_CLGEN != 1 && $CONFIG_FB_VESA != 1 && $CONFIG_FB_MATROX != 1 && $CONFIG_FB_PM2 != 1 && $CONFIG_FB_ATY128 != 1 && $CONFIG_FB_RADEON != 1 && $CONFIG_FB_CYBER2000 != 1 && $CONFIG_FB_PVR2 != 1 && $CONFIG_FB_VOODOO1 != 1) && ($CONFIG_FB_ATY == 2 || $CONFIG_FB_VIRTUAL == 2 || $CONFIG_FB_CLGEN == 2 || $CONFIG_FB_VESA == 2 || $CONFIG_FB_MATROX == 2 || $CONFIG_FB_PM2 == 2 || $CONFIG_FB_ATY128 == 2 || $CONFIG_FB_RADEON == 2 || $CONFIG_FB_CYBER2000 == 2 || $CONFIG_FB_PVR2 == 2 || $CONFIG_FB_VOODOO1 == 2)} then {write_tristate $cfg $autocfg CONFIG_FBCON_CFB24 $CONSTANT_M [list $notmod] 2 }
	global CONFIG_FB_FM2
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI == 1 || $CONFIG_FB_ATY == 1 || $CONFIG_FB_VESA == 1 || $CONFIG_FB_VIRTUAL == 1 || $CONFIG_FB_CONTROL == 1 || $CONFIG_FB_CLGEN == 1 || $CONFIG_FB_TGA == 1 || $CONFIG_FB_PLATINUM == 1 || $CONFIG_FB_MATROX == 1 || $CONFIG_FB_PM2 == 1 || $CONFIG_FB_RIVA == 1 || $CONFIG_FB_ATY128 == 1 || $CONFIG_FB_FM2 == 1 || $CONFIG_FB_SGIVW == 1 || $CONFIG_FB_RADEON == 1 || $CONFIG_FB_PVR2 == 1 || $CONFIG_FB_3DFX == 1 || $CONFIG_FB_SIS == 1 || $CONFIG_FB_VOODOO1 == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_CFB32 $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI != 1 && $CONFIG_FB_ATY != 1 && $CONFIG_FB_VESA != 1 && $CONFIG_FB_VIRTUAL != 1 && $CONFIG_FB_CONTROL != 1 && $CONFIG_FB_CLGEN != 1 && $CONFIG_FB_TGA != 1 && $CONFIG_FB_PLATINUM != 1 && $CONFIG_FB_MATROX != 1 && $CONFIG_FB_PM2 != 1 && $CONFIG_FB_RIVA != 1 && $CONFIG_FB_ATY128 != 1 && $CONFIG_FB_FM2 != 1 && $CONFIG_FB_SGIVW != 1 && $CONFIG_FB_RADEON != 1 && $CONFIG_FB_PVR2 != 1 && $CONFIG_FB_3DFX != 1 && $CONFIG_FB_SIS != 1 && $CONFIG_FB_VOODOO1 != 1) && ($CONFIG_FB_ATARI == 2 || $CONFIG_FB_ATY == 2 || $CONFIG_FB_VESA == 2 || $CONFIG_FB_VIRTUAL == 2 || $CONFIG_FB_CONTROL == 2 || $CONFIG_FB_CLGEN == 2 || $CONFIG_FB_TGA == 2 || $CONFIG_FB_PLATINUM == 2 || $CONFIG_FB_MATROX == 2 || $CONFIG_FB_PM2 == 2 || $CONFIG_FB_RIVA == 2 || $CONFIG_FB_ATY128 == 2 || $CONFIG_FB_3DFX == 2 || $CONFIG_FB_RADEON == 2 || $CONFIG_FB_SGIVW == 2 || $CONFIG_FB_SIS == 2 || $CONFIG_FB_PVR2 == 2 || $CONFIG_FB_VOODOO1 == 2)} then {write_tristate $cfg $autocfg CONFIG_FBCON_CFB32 $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_AMIGA == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_AFB $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_AMIGA == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_ILBM $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_AMIGA != 1) && ($CONFIG_FB_AMIGA == 2)} then {write_tristate $cfg $autocfg CONFIG_FBCON_AFB $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_AMIGA != 1) && ($CONFIG_FB_AMIGA == 2)} then {write_tristate $cfg $autocfg CONFIG_FBCON_ILBM $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_IPLAN2P2 $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_IPLAN2P4 $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_IPLAN2P8 $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI != 1) && ($CONFIG_FB_ATARI == 2)} then {write_tristate $cfg $autocfg CONFIG_FBCON_IPLAN2P2 $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI != 1) && ($CONFIG_FB_ATARI == 2)} then {write_tristate $cfg $autocfg CONFIG_FBCON_IPLAN2P4 $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_ATARI != 1) && ($CONFIG_FB_ATARI == 2)} then {write_tristate $cfg $autocfg CONFIG_FBCON_IPLAN2P8 $CONSTANT_M [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_MAC == 1 || $CONFIG_FB_VIRTUAL == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_MAC $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_MAC != 1 && $CONFIG_FB_VIRTUAL != 1) && ($CONFIG_FB_MAC == 2 || $CONFIG_FB_VIRTUAL == 2)} then {write_tristate $cfg $autocfg CONFIG_FBCON_MAC $CONSTANT_M [list $notmod] 2 }
	global CONFIG_FB_VGA16
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_VGA16 == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_VGA_PLANES $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_VGA16 != 1) && ($CONFIG_FB_VGA16 == 2)} then {write_tristate $cfg $autocfg CONFIG_FBCON_VGA_PLANES $CONSTANT_M [list $notmod] 2 }
	global CONFIG_FB_HGA
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_HGA == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_HGA $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_HGA != 1) && ($CONFIG_FB_HGA == 2)} then {write_tristate $cfg $autocfg CONFIG_FBCON_HGA $CONSTANT_M [list $notmod] 2 }
	global CONFIG_FBCON_STI
	global CONFIG_FB_STI
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_ADVANCED != 1) && ($CONFIG_FB_STI == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_STI $CONSTANT_Y [list $notmod] 2 }
	global CONFIG_FBCON_FONTWIDTH8_ONLY
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_FONTWIDTH8_ONLY $CONFIG_FBCON_FONTWIDTH8_ONLY [list $notmod] 2 }
	global CONFIG_FBCON_FONTS
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1)} then {write_tristate $cfg $autocfg CONFIG_FBCON_FONTS $CONFIG_FBCON_FONTS [list $notmod] 2 }
	global CONFIG_FONT_8x8
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1)} then {write_tristate $cfg $autocfg CONFIG_FONT_8x8 $CONFIG_FONT_8x8 [list $notmod] 2 }
	global CONFIG_FONT_8x16
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1)} then {write_tristate $cfg $autocfg CONFIG_FONT_8x16 $CONFIG_FONT_8x16 [list $notmod] 2 }
	global CONFIG_FONT_SUN8x16
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1)} then {write_tristate $cfg $autocfg CONFIG_FONT_SUN8x16 $CONFIG_FONT_SUN8x16 [list $notmod] 2 }
	global CONFIG_FONT_SUN12x22
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1) && ($CONFIG_FBCON_FONTWIDTH8_ONLY == 0)} then {write_tristate $cfg $autocfg CONFIG_FONT_SUN12x22 $CONFIG_FONT_SUN12x22 [list $notmod] 2 }
	global CONFIG_FONT_6x11
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1) && ($CONFIG_FBCON_FONTWIDTH8_ONLY == 0)} then {write_tristate $cfg $autocfg CONFIG_FONT_6x11 $CONFIG_FONT_6x11 [list $notmod] 2 }
	global CONFIG_FONT_PEARL_8x8
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1)} then {write_tristate $cfg $autocfg CONFIG_FONT_PEARL_8x8 $CONFIG_FONT_PEARL_8x8 [list $notmod] 2 }
	global CONFIG_FONT_ACORN_8x8
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS == 1)} then {write_tristate $cfg $autocfg CONFIG_FONT_ACORN_8x8 $CONFIG_FONT_ACORN_8x8 [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS != 1)} then {write_tristate $cfg $autocfg CONFIG_FONT_8x8 $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_VT == 1) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_FB == 1) && ($CONFIG_FBCON_FONTS != 1)} then {write_tristate $cfg $autocfg CONFIG_FONT_8x16 $CONSTANT_Y [list $notmod] 2 }
	write_comment $cfg $autocfg "Sound"
	global CONFIG_SOUND
	write_tristate $cfg $autocfg CONFIG_SOUND $CONFIG_SOUND [list $notmod] 2
	global CONFIG_SOUND_BT878
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_BT878 $CONFIG_SOUND_BT878 [list $CONFIG_SOUND] 2 }
	global CONFIG_SOUND_CMPCI
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_CMPCI $CONFIG_SOUND_CMPCI [list $CONFIG_SOUND $CONFIG_PCI] 2 }
	global CONFIG_SOUND_CMPCI_FM
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2)} then {write_tristate $cfg $autocfg CONFIG_SOUND_CMPCI_FM $CONFIG_SOUND_CMPCI_FM [list $notmod] 2 }
	global CONFIG_SOUND_CMPCI_FMIO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_FM == 1)} then {write_hex $cfg $autocfg CONFIG_SOUND_CMPCI_FMIO 388 $notmod }
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_FM == 1)} then {write_hex $cfg $autocfg CONFIG_SOUND_CMPCI_FMIO $CONFIG_SOUND_CMPCI_FMIO $notmod }
	global CONFIG_SOUND_CMPCI_MIDI
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2)} then {write_tristate $cfg $autocfg CONFIG_SOUND_CMPCI_MIDI $CONFIG_SOUND_CMPCI_MIDI [list $notmod] 2 }
	global CONFIG_SOUND_CMPCI_MPUIO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_MIDI == 1)} then {write_hex $cfg $autocfg CONFIG_SOUND_CMPCI_MPUIO $CONFIG_SOUND_CMPCI_MPUIO $notmod }
	global CONFIG_SOUND_CMPCI_JOYSTICK
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2)} then {write_tristate $cfg $autocfg CONFIG_SOUND_CMPCI_JOYSTICK $CONFIG_SOUND_CMPCI_JOYSTICK [list $notmod] 2 }
	global CONFIG_SOUND_CMPCI_CM8738
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2)} then {write_tristate $cfg $autocfg CONFIG_SOUND_CMPCI_CM8738 $CONFIG_SOUND_CMPCI_CM8738 [list $notmod] 2 }
	global CONFIG_SOUND_CMPCI_SPDIFINVERSE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_CM8738 == 1)} then {write_tristate $cfg $autocfg CONFIG_SOUND_CMPCI_SPDIFINVERSE $CONFIG_SOUND_CMPCI_SPDIFINVERSE [list $notmod] 2 }
	global CONFIG_SOUND_CMPCI_SPDIFLOOP
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_CM8738 == 1)} then {write_tristate $cfg $autocfg CONFIG_SOUND_CMPCI_SPDIFLOOP $CONFIG_SOUND_CMPCI_SPDIFLOOP [list $notmod] 2 }
	global CONFIG_SOUND_CMPCI_SPEAKERS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_CM8738 == 1)} then {write_int $cfg $autocfg CONFIG_SOUND_CMPCI_SPEAKERS $CONFIG_SOUND_CMPCI_SPEAKERS $notmod }
	global CONFIG_SOUND_CMPCI_LINE_REAR
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_CM8738 == 1) && ($CONFIG_SOUND_CMPCI_SPEAKERS != "2")} then {write_tristate $cfg $autocfg CONFIG_SOUND_CMPCI_LINE_REAR $CONFIG_SOUND_CMPCI_LINE_REAR [list $notmod] 2 }
	global CONFIG_SOUND_CMPCI_LINE_BASS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_CMPCI == 1 || $CONFIG_SOUND_CMPCI == 2) && ($CONFIG_SOUND_CMPCI_CM8738 == 1) && ($CONFIG_SOUND_CMPCI_SPEAKERS != "2")} then {write_tristate $cfg $autocfg CONFIG_SOUND_CMPCI_LINE_BASS $CONFIG_SOUND_CMPCI_LINE_BASS [list $notmod] 2 }
	global CONFIG_SOUND_EMU10K1
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_EMU10K1 $CONFIG_SOUND_EMU10K1 [list $CONFIG_SOUND $CONFIG_PCI] 2 }
	global CONFIG_MIDI_EMU10K1
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_EMU10K1 == 1 || $CONFIG_SOUND_EMU10K1 == 2 || $CONFIG_SOUND_EMU10K1 == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_MIDI_EMU10K1 $CONFIG_MIDI_EMU10K1 [list $CONFIG_SOUND_EMU10K1 $CONFIG_EXPERIMENTAL] 1 }
	global CONFIG_SOUND_FUSION
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_FUSION $CONFIG_SOUND_FUSION [list $CONFIG_SOUND] 2 }
	global CONFIG_SOUND_CS4281
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_CS4281 $CONFIG_SOUND_CS4281 [list $CONFIG_SOUND] 2 }
	global CONFIG_SOUND_ES1370
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_ES1370 $CONFIG_SOUND_ES1370 [list $CONFIG_SOUND $CONFIG_PCI] 2 }
	global CONFIG_SOUND_ES1371
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_ES1371 $CONFIG_SOUND_ES1371 [list $CONFIG_SOUND $CONFIG_PCI] 2 }
	global CONFIG_SOUND_ESSSOLO1
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_ESSSOLO1 $CONFIG_SOUND_ESSSOLO1 [list $CONFIG_SOUND] 2 }
	global CONFIG_SOUND_MAESTRO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_MAESTRO $CONFIG_SOUND_MAESTRO [list $CONFIG_SOUND] 2 }
	global CONFIG_SOUND_MAESTRO3
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_MAESTRO3 $CONFIG_SOUND_MAESTRO3 [list $CONFIG_SOUND $CONFIG_PCI $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_SOUND_ICH
	if {($CONFIG_SOUND != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_ICH $CONFIG_SOUND_ICH [list $CONFIG_PCI] 2 }
	global CONFIG_SOUND_RME96XX
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_RME96XX $CONFIG_SOUND_RME96XX [list $CONFIG_SOUND $CONFIG_PCI $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_SOUND_SONICVIBES
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_SONICVIBES $CONFIG_SOUND_SONICVIBES [list $CONFIG_SOUND] 2 }
	global CONFIG_SOUND_VWSND
	if {($CONFIG_SOUND != 0) && ($CONFIG_VISWS == 1) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_VWSND $CONFIG_SOUND_VWSND [list $CONFIG_SOUND] 2 }
	global CONFIG_SOUND_TRIDENT
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_TRIDENT $CONFIG_SOUND_TRIDENT [list $CONFIG_SOUND] 2 }
	global CONFIG_SOUND_MSNDCLAS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_MSNDCLAS $CONFIG_SOUND_MSNDCLAS [list $CONFIG_SOUND] 2 }
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1 || $CONFIG_SOUND_MSNDCLAS == 2) && ($CONFIG_SOUND_MSNDCLAS == 1)} then {write_comment $cfg $autocfg "  Compiled-in MSND Classic support requires firmware during compilation."}
	global CONFIG_MSNDCLAS_HAVE_BOOT
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1 || $CONFIG_SOUND_MSNDCLAS == 2) && ($CONFIG_SOUND_MSNDCLAS == 1)} then {write_tristate $cfg $autocfg CONFIG_MSNDCLAS_HAVE_BOOT $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1 || $CONFIG_SOUND_MSNDCLAS == 2) && ($CONFIG_SOUND_MSNDCLAS != 1)} then {write_tristate $cfg $autocfg CONFIG_MSNDCLAS_HAVE_BOOT $CONSTANT_N [list $notmod] 2 }
	global CONFIG_MSNDCLAS_INIT_FILE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1 || $CONFIG_SOUND_MSNDCLAS == 2)} then {write_string $cfg $autocfg CONFIG_MSNDCLAS_INIT_FILE "$CONFIG_MSNDCLAS_INIT_FILE" $notmod }
	global CONFIG_MSNDCLAS_PERM_FILE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1 || $CONFIG_SOUND_MSNDCLAS == 2)} then {write_string $cfg $autocfg CONFIG_MSNDCLAS_PERM_FILE "$CONFIG_MSNDCLAS_PERM_FILE" $notmod }
	global CONFIG_MSNDCLAS_IRQ
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1)} then {write_int $cfg $autocfg CONFIG_MSNDCLAS_IRQ $CONFIG_MSNDCLAS_IRQ $notmod }
	global CONFIG_MSNDCLAS_MEM
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1)} then {write_hex $cfg $autocfg CONFIG_MSNDCLAS_MEM $CONFIG_MSNDCLAS_MEM $notmod }
	global CONFIG_MSNDCLAS_IO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDCLAS == 1)} then {write_hex $cfg $autocfg CONFIG_MSNDCLAS_IO $CONFIG_MSNDCLAS_IO $notmod }
	global CONFIG_SOUND_MSNDPIN
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_MSNDPIN $CONFIG_SOUND_MSNDPIN [list $CONFIG_SOUND] 2 }
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1 || $CONFIG_SOUND_MSNDPIN == 2) && ($CONFIG_SOUND_MSNDPIN == 1)} then {write_comment $cfg $autocfg "Compiled-in MSND Pinnacle support requires firmware during compilation."}
	global CONFIG_MSNDPIN_HAVE_BOOT
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1 || $CONFIG_SOUND_MSNDPIN == 2) && ($CONFIG_SOUND_MSNDPIN == 1)} then {write_tristate $cfg $autocfg CONFIG_MSNDPIN_HAVE_BOOT $CONSTANT_Y [list $notmod] 2 }
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1 || $CONFIG_SOUND_MSNDPIN == 2) && ($CONFIG_SOUND_MSNDPIN != 1)} then {write_tristate $cfg $autocfg CONFIG_MSNDPIN_HAVE_BOOT $CONSTANT_N [list $notmod] 2 }
	global CONFIG_MSNDPIN_INIT_FILE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1 || $CONFIG_SOUND_MSNDPIN == 2)} then {write_string $cfg $autocfg CONFIG_MSNDPIN_INIT_FILE "$CONFIG_MSNDPIN_INIT_FILE" $notmod }
	global CONFIG_MSNDPIN_PERM_FILE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1 || $CONFIG_SOUND_MSNDPIN == 2)} then {write_string $cfg $autocfg CONFIG_MSNDPIN_PERM_FILE "$CONFIG_MSNDPIN_PERM_FILE" $notmod }
	global CONFIG_MSNDPIN_IRQ
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1)} then {write_int $cfg $autocfg CONFIG_MSNDPIN_IRQ $CONFIG_MSNDPIN_IRQ $notmod }
	global CONFIG_MSNDPIN_MEM
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1)} then {write_hex $cfg $autocfg CONFIG_MSNDPIN_MEM $CONFIG_MSNDPIN_MEM $notmod }
	global CONFIG_MSNDPIN_IO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1)} then {write_hex $cfg $autocfg CONFIG_MSNDPIN_IO $CONFIG_MSNDPIN_IO $notmod }
	global CONFIG_MSNDPIN_DIGITAL
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1)} then {write_tristate $cfg $autocfg CONFIG_MSNDPIN_DIGITAL $CONFIG_MSNDPIN_DIGITAL [list $notmod] 2 }
	global CONFIG_MSNDPIN_NONPNP
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1)} then {write_tristate $cfg $autocfg CONFIG_MSNDPIN_NONPNP $CONFIG_MSNDPIN_NONPNP [list $notmod] 2 }
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {write_comment $cfg $autocfg "MSND Pinnacle DSP section will be configured to above parameters."}
	global CONFIG_MSNDPIN_CFG
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {write_hex $cfg $autocfg CONFIG_MSNDPIN_CFG $CONFIG_MSNDPIN_CFG $notmod }
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {write_comment $cfg $autocfg "Pinnacle-specific Device Configuration (0 disables)"}
	global CONFIG_MSNDPIN_MPU_IO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {write_hex $cfg $autocfg CONFIG_MSNDPIN_MPU_IO $CONFIG_MSNDPIN_MPU_IO $notmod }
	global CONFIG_MSNDPIN_MPU_IRQ
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {write_int $cfg $autocfg CONFIG_MSNDPIN_MPU_IRQ $CONFIG_MSNDPIN_MPU_IRQ $notmod }
	global CONFIG_MSNDPIN_IDE_IO0
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {write_hex $cfg $autocfg CONFIG_MSNDPIN_IDE_IO0 $CONFIG_MSNDPIN_IDE_IO0 $notmod }
	global CONFIG_MSNDPIN_IDE_IO1
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {write_hex $cfg $autocfg CONFIG_MSNDPIN_IDE_IO1 $CONFIG_MSNDPIN_IDE_IO1 $notmod }
	global CONFIG_MSNDPIN_IDE_IRQ
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {write_int $cfg $autocfg CONFIG_MSNDPIN_IDE_IRQ $CONFIG_MSNDPIN_IDE_IRQ $notmod }
	global CONFIG_MSNDPIN_JOYSTICK_IO
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1) && ($CONFIG_MSNDPIN_NONPNP == 1)} then {write_hex $cfg $autocfg CONFIG_MSNDPIN_JOYSTICK_IO $CONFIG_MSNDPIN_JOYSTICK_IO $notmod }
	global CONFIG_MSND_FIFOSIZE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_MSNDPIN == 1 || $CONFIG_SOUND_MSNDCLAS == 1)} then {write_int $cfg $autocfg CONFIG_MSND_FIFOSIZE $CONFIG_MSND_FIFOSIZE $notmod }
	global CONFIG_SOUND_VIA82CXXX
	if {($CONFIG_SOUND != 0) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_VIA82CXXX $CONFIG_SOUND_VIA82CXXX [list $CONFIG_PCI] 2 }
	global CONFIG_MIDI_VIA82CXXX
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_VIA82CXXX == 1 || $CONFIG_SOUND_VIA82CXXX == 2 || $CONFIG_SOUND_VIA82CXXX == 4)} then {write_tristate $cfg $autocfg CONFIG_MIDI_VIA82CXXX $CONFIG_MIDI_VIA82CXXX [list $CONFIG_SOUND_VIA82CXXX] 1 }
	global CONFIG_SOUND_OSS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_OSS $CONFIG_SOUND_OSS [list $CONFIG_SOUND] 2 }
	global CONFIG_SOUND_TRACEINIT
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2)} then {write_tristate $cfg $autocfg CONFIG_SOUND_TRACEINIT $CONFIG_SOUND_TRACEINIT [list $notmod] 2 }
	global CONFIG_SOUND_DMAP
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2)} then {write_tristate $cfg $autocfg CONFIG_SOUND_DMAP $CONFIG_SOUND_DMAP [list $notmod] 2 }
	global CONFIG_SOUND_AD1816
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_AD1816 $CONFIG_SOUND_AD1816 [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_SOUND_SGALAXY
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_SGALAXY $CONFIG_SOUND_SGALAXY [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_SOUND_ADLIB
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_ADLIB $CONFIG_SOUND_ADLIB [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_SOUND_ACI_MIXER
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_ACI_MIXER $CONFIG_SOUND_ACI_MIXER [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_SOUND_CS4232
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_CS4232 $CONFIG_SOUND_CS4232 [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_SOUND_SSCAPE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_SSCAPE $CONFIG_SOUND_SSCAPE [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_SOUND_GUS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_GUS $CONFIG_SOUND_GUS [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_SOUND_GUS16
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_GUS != 0)} then {write_tristate $cfg $autocfg CONFIG_SOUND_GUS16 $CONFIG_SOUND_GUS16 [list $notmod] 2 }
	global CONFIG_SOUND_GUSMAX
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_GUS != 0)} then {write_tristate $cfg $autocfg CONFIG_SOUND_GUSMAX $CONFIG_SOUND_GUSMAX [list $notmod] 2 }
	global CONFIG_SOUND_VMIDI
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_VMIDI $CONFIG_SOUND_VMIDI [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_SOUND_TRIX
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_TRIX $CONFIG_SOUND_TRIX [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_TRIX_HAVE_BOOT
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_TRIX == 1)} then {write_tristate $cfg $autocfg CONFIG_TRIX_HAVE_BOOT $CONFIG_TRIX_HAVE_BOOT [list $notmod] 2 }
	global CONFIG_TRIX_BOOT_FILE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_TRIX == 1) && ($CONFIG_TRIX_HAVE_BOOT == 1)} then {write_string $cfg $autocfg CONFIG_TRIX_BOOT_FILE "$CONFIG_TRIX_BOOT_FILE" $notmod }
	global CONFIG_SOUND_MSS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_MSS $CONFIG_SOUND_MSS [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_SOUND_MPU401
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_MPU401 $CONFIG_SOUND_MPU401 [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_SOUND_NM256
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_NM256 $CONFIG_SOUND_NM256 [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_SOUND_MAD16
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_MAD16 $CONFIG_SOUND_MAD16 [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_MAD16_OLDCARD
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_MAD16 == 1 || $CONFIG_SOUND_MAD16 == 2)} then {write_tristate $cfg $autocfg CONFIG_MAD16_OLDCARD $CONFIG_MAD16_OLDCARD [list $notmod] 2 }
	global CONFIG_SOUND_PAS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_PAS $CONFIG_SOUND_PAS [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_PAS_JOYSTICK
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_PAS == 1 || $CONFIG_SOUND_PAS == 4)} then {write_tristate $cfg $autocfg CONFIG_PAS_JOYSTICK $CONFIG_PAS_JOYSTICK [list $CONFIG_SOUND_PAS] 2 }
	global CONFIG_SOUND_PSS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_PSS $CONFIG_SOUND_PSS [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_PSS_MIXER
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_PSS == 1 || $CONFIG_SOUND_PSS == 2)} then {write_tristate $cfg $autocfg CONFIG_PSS_MIXER $CONFIG_PSS_MIXER [list $notmod] 2 }
	global CONFIG_PSS_HAVE_BOOT
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_PSS == 1 || $CONFIG_SOUND_PSS == 2)} then {write_tristate $cfg $autocfg CONFIG_PSS_HAVE_BOOT $CONFIG_PSS_HAVE_BOOT [list $notmod] 2 }
	global CONFIG_PSS_BOOT_FILE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_PSS == 1 || $CONFIG_SOUND_PSS == 2) && ($CONFIG_PSS_HAVE_BOOT == 1)} then {write_string $cfg $autocfg CONFIG_PSS_BOOT_FILE "$CONFIG_PSS_BOOT_FILE" $notmod }
	global CONFIG_SOUND_SB
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_SB $CONFIG_SOUND_SB [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_SOUND_AWE32_SYNTH
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_AWE32_SYNTH $CONFIG_SOUND_AWE32_SYNTH [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_SOUND_WAVEFRONT
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_WAVEFRONT $CONFIG_SOUND_WAVEFRONT [list $CONFIG_SOUND_OSS $CONSTANT_M] 2 }
	global CONFIG_SOUND_MAUI
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_MAUI $CONFIG_SOUND_MAUI [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_MAUI_HAVE_BOOT
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_MAUI == 1)} then {write_tristate $cfg $autocfg CONFIG_MAUI_HAVE_BOOT $CONFIG_MAUI_HAVE_BOOT [list $notmod] 2 }
	global CONFIG_MAUI_BOOT_FILE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_MAUI == 1) && ($CONFIG_MAUI_HAVE_BOOT == 1)} then {write_string $cfg $autocfg CONFIG_MAUI_BOOT_FILE "$CONFIG_MAUI_BOOT_FILE" $notmod }
	global CONFIG_SOUND_YM3812
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_YM3812 $CONFIG_SOUND_YM3812 [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_SOUND_OPL3SA1
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_OPL3SA1 $CONFIG_SOUND_OPL3SA1 [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_SOUND_OPL3SA2
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_OPL3SA2 $CONFIG_SOUND_OPL3SA2 [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_SOUND_YMFPCI
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4) && ($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_YMFPCI $CONFIG_SOUND_YMFPCI [list $CONFIG_SOUND_OSS $CONFIG_PCI] 2 }
	global CONFIG_SOUND_YMFPCI_LEGACY
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_YMFPCI == 1 || $CONFIG_SOUND_YMFPCI == 2 || $CONFIG_SOUND_YMFPCI == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_YMFPCI_LEGACY $CONFIG_SOUND_YMFPCI_LEGACY [list $CONFIG_SOUND_YMFPCI] 1 }
	global CONFIG_SOUND_UART6850
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_UART6850 $CONFIG_SOUND_UART6850 [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_SOUND_AEDSP16
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2 || $CONFIG_SOUND_OSS == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_AEDSP16 $CONFIG_SOUND_AEDSP16 [list $CONFIG_SOUND_OSS] 2 }
	global CONFIG_SC6600
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2)} then {write_tristate $cfg $autocfg CONFIG_SC6600 $CONFIG_SC6600 [list $notmod] 2 }
	global CONFIG_SC6600_JOY
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2) && ($CONFIG_SC6600 == 1)} then {write_tristate $cfg $autocfg CONFIG_SC6600_JOY $CONFIG_SC6600_JOY [list $notmod] 2 }
	global CONFIG_SC6600_CDROM
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2) && ($CONFIG_SC6600 == 1)} then {write_int $cfg $autocfg CONFIG_SC6600_CDROM $CONFIG_SC6600_CDROM $notmod }
	global CONFIG_SC6600_CDROMBASE
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2) && ($CONFIG_SC6600 == 1)} then {write_hex $cfg $autocfg CONFIG_SC6600_CDROMBASE $CONFIG_SC6600_CDROMBASE $notmod }
	global CONFIG_AEDSP16_SBPRO
	global CONFIG_AEDSP16_MSS
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2) && ($CONFIG_SOUND_SB == 1 || $CONFIG_SOUND_SB == 2) && ($CONFIG_AEDSP16_MSS != 1)} then {write_tristate $cfg $autocfg CONFIG_AEDSP16_SBPRO $CONFIG_AEDSP16_SBPRO [list $notmod] 2 }
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2) && ($CONFIG_SOUND_MSS == 1 || $CONFIG_SOUND_MSS == 2) && ($CONFIG_AEDSP16_SBPRO != 1)} then {write_tristate $cfg $autocfg CONFIG_AEDSP16_MSS $CONFIG_AEDSP16_MSS [list $notmod] 2 }
	global CONFIG_AEDSP16_MPU401
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND_OSS == 1 || $CONFIG_SOUND_OSS == 2) && ($CONFIG_SOUND_AEDSP16 == 1 || $CONFIG_SOUND_AEDSP16 == 2) && ($CONFIG_SOUND_MPU401 == 1 || $CONFIG_SOUND_MPU401 == 2)} then {write_tristate $cfg $autocfg CONFIG_AEDSP16_MPU401 $CONFIG_AEDSP16_MPU401 [list $notmod] 2 }
	global CONFIG_SOUND_TVMIXER
	if {($CONFIG_SOUND != 0) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4) && ($CONFIG_I2C == 1 || $CONFIG_I2C == 2 || $CONFIG_I2C == 4)} then {write_tristate $cfg $autocfg CONFIG_SOUND_TVMIXER $CONFIG_SOUND_TVMIXER [list $CONFIG_SOUND $CONFIG_I2C] 2 }
	if {($CONFIG_SOUND != 0) && ($CONFIG_INPUT_GAMEPORT != 0) && ($CONFIG_SOUND_ESSSOLO1 == 1 || $CONFIG_SOUND_ES1370 == 1 || $CONFIG_SOUND_ES1371 == 1 || $CONFIG_SOUND_SONICVIBES == 1)} then {write_tristate $cfg $autocfg CONFIG_INPUT_GAMEPORT $CONSTANT_Y [list $notmod] 2 }
	write_comment $cfg $autocfg "USB support"
	if {($CONFIG_PCI == 1 || $CONFIG_PCI == 2 || $CONFIG_PCI == 4)} then {write_tristate $cfg $autocfg CONFIG_USB $CONFIG_USB [list $CONFIG_PCI] 2 }
	global CONFIG_USB_DEBUG
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2)} then {write_tristate $cfg $autocfg CONFIG_USB_DEBUG $CONFIG_USB_DEBUG [list $notmod] 2 }
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2)} then {write_comment $cfg $autocfg "Miscellaneous USB options"}
	global CONFIG_USB_DEVICEFS
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2)} then {write_tristate $cfg $autocfg CONFIG_USB_DEVICEFS $CONFIG_USB_DEVICEFS [list $notmod] 2 }
	global CONFIG_USB_BANDWIDTH
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2) && ($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_USB_BANDWIDTH $CONFIG_USB_BANDWIDTH [list $notmod] 2 }
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2) && ($CONFIG_EXPERIMENTAL != 1)} then {write_tristate $cfg $autocfg CONFIG_USB_BANDWIDTH $CONSTANT_N [list $notmod] 2 }
	global CONFIG_USB_LONG_TIMEOUT
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2)} then {write_tristate $cfg $autocfg CONFIG_USB_LONG_TIMEOUT $CONFIG_USB_LONG_TIMEOUT [list $notmod] 2 }
	write_comment $cfg $autocfg "USB Controllers"
	global CONFIG_USB_UHCI
	global CONFIG_USB_UHCI_ALT
	if {($CONFIG_USB_UHCI_ALT != 1) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_UHCI $CONFIG_USB_UHCI [list $CONFIG_USB] 2 }
	if {($CONFIG_USB_UHCI != 1) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_UHCI_ALT $CONFIG_USB_UHCI_ALT [list $CONFIG_USB] 2 }
	if {($CONFIG_USB_UHCI == 1)} then {write_tristate $cfg $autocfg CONFIG_USB_UHCI_ALT $CONSTANT_N [list $notmod] 2 }
	global CONFIG_USB_OHCI
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_OHCI $CONFIG_USB_OHCI [list $CONFIG_USB] 2 }
	write_comment $cfg $autocfg "USB Device Class drivers"
	global CONFIG_USB_AUDIO
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_SOUND == 1 || $CONFIG_SOUND == 2 || $CONFIG_SOUND == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_AUDIO $CONFIG_USB_AUDIO [list $CONFIG_USB $CONFIG_SOUND] 2 }
	global CONFIG_USB_BLUETOOTH
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_BLUETOOTH $CONFIG_USB_BLUETOOTH [list $CONFIG_USB $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_STORAGE
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_STORAGE $CONFIG_USB_STORAGE [list $CONFIG_USB $CONFIG_SCSI] 2 }
	global CONFIG_USB_STORAGE_DEBUG
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_STORAGE_DEBUG $CONFIG_USB_STORAGE_DEBUG [list $CONFIG_USB_STORAGE] 1 }
	global CONFIG_USB_STORAGE_DATAFAB
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_STORAGE_DATAFAB $CONFIG_USB_STORAGE_DATAFAB [list $CONFIG_USB_STORAGE $CONFIG_EXPERIMENTAL] 1 }
	global CONFIG_USB_STORAGE_FREECOM
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_STORAGE_FREECOM $CONFIG_USB_STORAGE_FREECOM [list $CONFIG_USB_STORAGE] 1 }
	global CONFIG_USB_STORAGE_ISD200
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_STORAGE_ISD200 $CONFIG_USB_STORAGE_ISD200 [list $CONFIG_USB_STORAGE] 1 }
	global CONFIG_USB_STORAGE_DPCM
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_STORAGE_DPCM $CONFIG_USB_STORAGE_DPCM [list $CONFIG_USB_STORAGE] 1 }
	global CONFIG_USB_STORAGE_HP8200e
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_STORAGE_HP8200e $CONFIG_USB_STORAGE_HP8200e [list $CONFIG_USB_STORAGE $CONFIG_EXPERIMENTAL] 1 }
	global CONFIG_USB_STORAGE_SDDR09
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_STORAGE_SDDR09 $CONFIG_USB_STORAGE_SDDR09 [list $CONFIG_USB_STORAGE $CONFIG_EXPERIMENTAL] 1 }
	global CONFIG_USB_STORAGE_JUMPSHOT
	if {($CONFIG_USB_STORAGE == 1 || $CONFIG_USB_STORAGE == 2 || $CONFIG_USB_STORAGE == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_STORAGE_JUMPSHOT $CONFIG_USB_STORAGE_JUMPSHOT [list $CONFIG_USB_STORAGE $CONFIG_EXPERIMENTAL] 1 }
	global CONFIG_USB_ACM
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_ACM $CONFIG_USB_ACM [list $CONFIG_USB] 2 }
	global CONFIG_USB_PRINTER
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_PRINTER $CONFIG_USB_PRINTER [list $CONFIG_USB] 2 }
	write_comment $cfg $autocfg "USB Human Interface Devices (HID)"
	global CONFIG_USB_HID
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_HID $CONFIG_USB_HID [list $CONFIG_USB $CONFIG_INPUT] 2 }
	global CONFIG_USB_HIDDEV
	if {($CONFIG_USB_HID == 1 || $CONFIG_USB_HID == 2 || $CONFIG_USB_HID == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_HIDDEV $CONFIG_USB_HIDDEV [list $CONFIG_USB_HID] 1 }
	global CONFIG_USB_KBD
	if {($CONFIG_USB_HID != 1) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_KBD $CONFIG_USB_KBD [list $CONFIG_USB $CONFIG_INPUT] 2 }
	global CONFIG_USB_MOUSE
	if {($CONFIG_USB_HID != 1) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_MOUSE $CONFIG_USB_MOUSE [list $CONFIG_USB $CONFIG_INPUT] 2 }
	global CONFIG_USB_WACOM
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_INPUT == 1 || $CONFIG_INPUT == 2 || $CONFIG_INPUT == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_WACOM $CONFIG_USB_WACOM [list $CONFIG_USB $CONFIG_INPUT] 2 }
	write_comment $cfg $autocfg "USB Imaging devices"
	global CONFIG_USB_DC2XX
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_DC2XX $CONFIG_USB_DC2XX [list $CONFIG_USB] 2 }
	global CONFIG_USB_MDC800
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_MDC800 $CONFIG_USB_MDC800 [list $CONFIG_USB $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_SCANNER
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SCANNER $CONFIG_USB_SCANNER [list $CONFIG_USB] 2 }
	global CONFIG_USB_MICROTEK
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_MICROTEK $CONFIG_USB_MICROTEK [list $CONFIG_USB $CONFIG_SCSI] 2 }
	global CONFIG_USB_HPUSBSCSI
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_SCSI == 1 || $CONFIG_SCSI == 2 || $CONFIG_SCSI == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_HPUSBSCSI $CONFIG_USB_HPUSBSCSI [list $CONFIG_USB $CONFIG_SCSI $CONFIG_EXPERIMENTAL] 2 }
	write_comment $cfg $autocfg "USB Multimedia devices"
	global CONFIG_USB_IBMCAM
	global CONFIG_VIDEO_DEV
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_VIDEO_DEV == 1 || $CONFIG_VIDEO_DEV == 2 || $CONFIG_VIDEO_DEV == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_IBMCAM $CONFIG_USB_IBMCAM [list $CONFIG_USB $CONFIG_VIDEO_DEV] 2 }
	global CONFIG_USB_OV511
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_VIDEO_DEV == 1 || $CONFIG_VIDEO_DEV == 2 || $CONFIG_VIDEO_DEV == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_OV511 $CONFIG_USB_OV511 [list $CONFIG_USB $CONFIG_VIDEO_DEV] 2 }
	global CONFIG_USB_PWC
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_VIDEO_DEV == 1 || $CONFIG_VIDEO_DEV == 2 || $CONFIG_VIDEO_DEV == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_PWC $CONFIG_USB_PWC [list $CONFIG_USB $CONFIG_VIDEO_DEV] 2 }
	global CONFIG_USB_SE401
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_VIDEO_DEV == 1 || $CONFIG_VIDEO_DEV == 2 || $CONFIG_VIDEO_DEV == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SE401 $CONFIG_USB_SE401 [list $CONFIG_USB $CONFIG_VIDEO_DEV] 2 }
	global CONFIG_USB_DSBR
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_VIDEO_DEV == 1 || $CONFIG_VIDEO_DEV == 2 || $CONFIG_VIDEO_DEV == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_DSBR $CONFIG_USB_DSBR [list $CONFIG_USB $CONFIG_VIDEO_DEV $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_DABUSB
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_DABUSB $CONFIG_USB_DABUSB [list $CONFIG_USB] 2 }
	write_comment $cfg $autocfg "USB Network adaptors"
	if {($CONFIG_NET == 0)} then {write_comment $cfg $autocfg "  Networking support is needed for USB Networking device support"}
	global CONFIG_USB_PEGASUS
	if {($CONFIG_NET != 0) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_PEGASUS $CONFIG_USB_PEGASUS [list $CONFIG_USB $CONFIG_NET $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_KAWETH
	if {($CONFIG_NET != 0) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_KAWETH $CONFIG_USB_KAWETH [list $CONFIG_USB $CONFIG_NET $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_CATC
	if {($CONFIG_NET != 0) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_CATC $CONFIG_USB_CATC [list $CONFIG_USB $CONFIG_NET $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_CDCETHER
	if {($CONFIG_NET != 0) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_CDCETHER $CONFIG_USB_CDCETHER [list $CONFIG_USB $CONFIG_NET $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_USBNET
	if {($CONFIG_NET != 0) && ($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_NET == 1 || $CONFIG_NET == 2 || $CONFIG_NET == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_USBNET $CONFIG_USB_USBNET [list $CONFIG_USB $CONFIG_NET $CONFIG_EXPERIMENTAL] 2 }
	write_comment $cfg $autocfg "USB port drivers"
	global CONFIG_USB_USS720
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_PARPORT == 1 || $CONFIG_PARPORT == 2 || $CONFIG_PARPORT == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_USS720 $CONFIG_USB_USS720 [list $CONFIG_USB $CONFIG_PARPORT] 2 }
	write_comment $cfg $autocfg "USB Serial Converter support"
	global CONFIG_USB_SERIAL
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL $CONFIG_USB_SERIAL [list $CONFIG_USB] 2 }
	global CONFIG_USB_SERIAL_DEBUG
	if {($CONFIG_USB_SERIAL == 1) && ($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_DEBUG $CONFIG_USB_SERIAL_DEBUG [list $CONFIG_USB_SERIAL] 1 }
	global CONFIG_USB_SERIAL_GENERIC
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_GENERIC $CONFIG_USB_SERIAL_GENERIC [list $CONFIG_USB_SERIAL] 1 }
	global CONFIG_USB_SERIAL_BELKIN
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_BELKIN $CONFIG_USB_SERIAL_BELKIN [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_SERIAL_WHITEHEAT
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_WHITEHEAT $CONFIG_USB_SERIAL_WHITEHEAT [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_SERIAL_DIGI_ACCELEPORT
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_DIGI_ACCELEPORT $CONFIG_USB_SERIAL_DIGI_ACCELEPORT [list $CONFIG_USB_SERIAL] 2 }
	global CONFIG_USB_SERIAL_EMPEG
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_EMPEG $CONFIG_USB_SERIAL_EMPEG [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_SERIAL_FTDI_SIO
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_FTDI_SIO $CONFIG_USB_SERIAL_FTDI_SIO [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_SERIAL_VISOR
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_VISOR $CONFIG_USB_SERIAL_VISOR [list $CONFIG_USB_SERIAL] 2 }
	global CONFIG_USB_SERIAL_IR
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_IR $CONFIG_USB_SERIAL_IR [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_SERIAL_EDGEPORT
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_EDGEPORT $CONFIG_USB_SERIAL_EDGEPORT [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_SERIAL_KEYSPAN_PDA
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_KEYSPAN_PDA $CONFIG_USB_SERIAL_KEYSPAN_PDA [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_SERIAL_KEYSPAN
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_KEYSPAN $CONFIG_USB_SERIAL_KEYSPAN [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_SERIAL_KEYSPAN_USA28
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_KEYSPAN_USA28 $CONFIG_USB_SERIAL_KEYSPAN_USA28 [list $CONFIG_USB_SERIAL_KEYSPAN] 1 }
	global CONFIG_USB_SERIAL_KEYSPAN_USA28X
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_KEYSPAN_USA28X $CONFIG_USB_SERIAL_KEYSPAN_USA28X [list $CONFIG_USB_SERIAL_KEYSPAN] 1 }
	global CONFIG_USB_SERIAL_KEYSPAN_USA28XA
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_KEYSPAN_USA28XA $CONFIG_USB_SERIAL_KEYSPAN_USA28XA [list $CONFIG_USB_SERIAL_KEYSPAN] 1 }
	global CONFIG_USB_SERIAL_KEYSPAN_USA28XB
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_KEYSPAN_USA28XB $CONFIG_USB_SERIAL_KEYSPAN_USA28XB [list $CONFIG_USB_SERIAL_KEYSPAN] 1 }
	global CONFIG_USB_SERIAL_KEYSPAN_USA19
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_KEYSPAN_USA19 $CONFIG_USB_SERIAL_KEYSPAN_USA19 [list $CONFIG_USB_SERIAL_KEYSPAN] 1 }
	global CONFIG_USB_SERIAL_KEYSPAN_USA18X
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_KEYSPAN_USA18X $CONFIG_USB_SERIAL_KEYSPAN_USA18X [list $CONFIG_USB_SERIAL_KEYSPAN] 1 }
	global CONFIG_USB_SERIAL_KEYSPAN_USA19W
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_KEYSPAN_USA19W $CONFIG_USB_SERIAL_KEYSPAN_USA19W [list $CONFIG_USB_SERIAL_KEYSPAN] 1 }
	global CONFIG_USB_SERIAL_KEYSPAN_USA49W
	if {($CONFIG_USB_SERIAL_KEYSPAN == 1 || $CONFIG_USB_SERIAL_KEYSPAN == 2 || $CONFIG_USB_SERIAL_KEYSPAN == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_KEYSPAN_USA49W $CONFIG_USB_SERIAL_KEYSPAN_USA49W [list $CONFIG_USB_SERIAL_KEYSPAN] 1 }
	global CONFIG_USB_SERIAL_MCT_U232
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_MCT_U232 $CONFIG_USB_SERIAL_MCT_U232 [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_SERIAL_PL2303
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_PL2303 $CONFIG_USB_SERIAL_PL2303 [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_SERIAL_CYBERJACK
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_CYBERJACK $CONFIG_USB_SERIAL_CYBERJACK [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_SERIAL_XIRCOM
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_XIRCOM $CONFIG_USB_SERIAL_XIRCOM [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL] 2 }
	global CONFIG_USB_SERIAL_OMNINET
	if {($CONFIG_USB_SERIAL == 1 || $CONFIG_USB_SERIAL == 2 || $CONFIG_USB_SERIAL == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_SERIAL_OMNINET $CONFIG_USB_SERIAL_OMNINET [list $CONFIG_USB_SERIAL $CONFIG_EXPERIMENTAL] 2 }
	write_comment $cfg $autocfg "USB Miscellaneous drivers"
	global CONFIG_USB_RIO500
	if {($CONFIG_USB == 1 || $CONFIG_USB == 2 || $CONFIG_USB == 4) && ($CONFIG_EXPERIMENTAL == 1 || $CONFIG_EXPERIMENTAL == 2 || $CONFIG_EXPERIMENTAL == 4)} then {write_tristate $cfg $autocfg CONFIG_USB_RIO500 $CONFIG_USB_RIO500 [list $CONFIG_USB $CONFIG_EXPERIMENTAL] 2 }
	write_comment $cfg $autocfg "Kernel hacking"
	global CONFIG_FULLDEBUG
	write_tristate $cfg $autocfg CONFIG_FULLDEBUG $CONFIG_FULLDEBUG [list $notmod] 2
	global CONFIG_MAGIC_SYSRQ
	write_tristate $cfg $autocfg CONFIG_MAGIC_SYSRQ $CONFIG_MAGIC_SYSRQ [list $notmod] 2
	global CONFIG_CONTIGUOUS_PAGE_ALLOC
	if {($CONFIG_EXPERIMENTAL == 1)} then {write_tristate $cfg $autocfg CONFIG_CONTIGUOUS_PAGE_ALLOC $CONFIG_CONTIGUOUS_PAGE_ALLOC [list $notmod] 2 }
	global CONFIG_MEM_MAP
	if {($CONFIG_EXPERIMENTAL == 1) && ($CONFIG_CONTIGUOUS_PAGE_ALLOC == 1 || $CONFIG_CONTIGUOUS_PAGE_ALLOC == 4)} then {write_tristate $cfg $autocfg CONFIG_MEM_MAP $CONFIG_MEM_MAP [list $CONFIG_CONTIGUOUS_PAGE_ALLOC] 2 }
	global CONFIG_PROFILE
	write_tristate $cfg $autocfg CONFIG_PROFILE $CONFIG_PROFILE [list $notmod] 2
	global CONFIG_PROFILE_SHIFT
	if {($CONFIG_PROFILE == 1)} then {write_int $cfg $autocfg CONFIG_PROFILE_SHIFT $CONFIG_PROFILE_SHIFT $notmod }
	global CONFIG_HIGHPROFILE
	if {($CONFIG_PROFILE == 1)} then {write_tristate $cfg $autocfg CONFIG_HIGHPROFILE $CONFIG_HIGHPROFILE [list $notmod] 2 }
	global CONFIG_DUMPTOFLASH
	if {($CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_DUMPTOFLASH $CONFIG_DUMPTOFLASH [list $notmod] 2 }
	global CONFIG_NO_KERNEL_MSG
	write_tristate $cfg $autocfg CONFIG_NO_KERNEL_MSG $CONFIG_NO_KERNEL_MSG [list $notmod] 2
	global CONFIG_SMALL_TASKS
	write_tristate $cfg $autocfg CONFIG_SMALL_TASKS $CONFIG_SMALL_TASKS [list $notmod] 2
	global CONFIG_BDM_DISABLE
	if {($CONFIG_EXPERIMENTAL == 1 && $CONFIG_COLDFIRE == 1)} then {write_tristate $cfg $autocfg CONFIG_BDM_DISABLE $CONFIG_BDM_DISABLE [list $notmod] 2 }
	close $cfg
	close $autocfg
}


proc clear_choices { } {
	global CONFIG_M68000; set CONFIG_M68000 0
	global CONFIG_M68EN302; set CONFIG_M68EN302 0
	global CONFIG_M68328; set CONFIG_M68328 0
	global CONFIG_M68EZ328; set CONFIG_M68EZ328 0
	global CONFIG_M68VZ328; set CONFIG_M68VZ328 0
	global CONFIG_M68332; set CONFIG_M68332 0
	global CONFIG_M68360; set CONFIG_M68360 0
	global CONFIG_M5204; set CONFIG_M5204 0
	global CONFIG_M5206; set CONFIG_M5206 0
	global CONFIG_M5206e; set CONFIG_M5206e 0
	global CONFIG_M5272; set CONFIG_M5272 0
	global CONFIG_M5307; set CONFIG_M5307 0
	global CONFIG_M5407; set CONFIG_M5407 0
	global CONFIG_CLOCK_AUTO; set CONFIG_CLOCK_AUTO 0
	global CONFIG_CLOCK_16MHz; set CONFIG_CLOCK_16MHz 0
	global CONFIG_CLOCK_20MHz; set CONFIG_CLOCK_20MHz 0
	global CONFIG_CLOCK_25MHz; set CONFIG_CLOCK_25MHz 0
	global CONFIG_CLOCK_33MHz; set CONFIG_CLOCK_33MHz 0
	global CONFIG_CLOCK_40MHz; set CONFIG_CLOCK_40MHz 0
	global CONFIG_CLOCK_45MHz; set CONFIG_CLOCK_45MHz 0
	global CONFIG_CLOCK_50MHz; set CONFIG_CLOCK_50MHz 0
	global CONFIG_CLOCK_54MHz; set CONFIG_CLOCK_54MHz 0
	global CONFIG_CLOCK_60MHz; set CONFIG_CLOCK_60MHz 0
	global CONFIG_CLOCK_66MHz; set CONFIG_CLOCK_66MHz 0
	global CONFIG_RAMAUTO; set CONFIG_RAMAUTO 0
	global CONFIG_RAM4MB; set CONFIG_RAM4MB 0
	global CONFIG_RAM8MB; set CONFIG_RAM8MB 0
	global CONFIG_RAM16MB; set CONFIG_RAM16MB 0
	global CONFIG_RAM32MB; set CONFIG_RAM32MB 0
	global CONFIG_AUTOBIT; set CONFIG_AUTOBIT 0
	global CONFIG_RAM8BIT; set CONFIG_RAM8BIT 0
	global CONFIG_RAM16BIT; set CONFIG_RAM16BIT 0
	global CONFIG_RAM32bit; set CONFIG_RAM32bit 0
	global CONFIG_NOFLASH; set CONFIG_NOFLASH 0
	global CONFIG_AMDFLASH; set CONFIG_AMDFLASH 0
	global CONFIG_INTELFLASH; set CONFIG_INTELFLASH 0
	global CONFIG_FLASHAUTO; set CONFIG_FLASHAUTO 0
	global CONFIG_FLASH128KB; set CONFIG_FLASH128KB 0
	global CONFIG_FLASH1MB; set CONFIG_FLASH1MB 0
	global CONFIG_FLASH2MB; set CONFIG_FLASH2MB 0
	global CONFIG_FLASH4MB; set CONFIG_FLASH4MB 0
	global CONFIG_FLASH6MB; set CONFIG_FLASH6MB 0
	global CONFIG_FLASH8MB; set CONFIG_FLASH8MB 0
	global CONFIG_FLASH16MB; set CONFIG_FLASH16MB 0
	global CONFIG_FLASHAUTOBIT; set CONFIG_FLASHAUTOBIT 0
	global CONFIG_FLASH8BIT; set CONFIG_FLASH8BIT 0
	global CONFIG_FLASH16BIT; set CONFIG_FLASH16BIT 0
	global CONFIG_FLASH32bit; set CONFIG_FLASH32bit 0
	global CONFIG_RAMKERNEL; set CONFIG_RAMKERNEL 0
	global CONFIG_ROMKERNEL; set CONFIG_ROMKERNEL 0
	global CONFIG_HIMEMKERNEL; set CONFIG_HIMEMKERNEL 0
	global CONFIG_PCI_GOBIOS; set CONFIG_PCI_GOBIOS 0
	global CONFIG_PCI_GODIRECT; set CONFIG_PCI_GODIRECT 0
	global CONFIG_PCI_GOANY; set CONFIG_PCI_GOANY 0
	global CONFIG_KCORE_ELF; set CONFIG_KCORE_ELF 0
	global CONFIG_KCORE_AOUT; set CONFIG_KCORE_AOUT 0
	global CONFIG_MTD_CFI_NOSWAP; set CONFIG_MTD_CFI_NOSWAP 0
	global CONFIG_MTD_CFI_BE_BYTE_SWAP; set CONFIG_MTD_CFI_BE_BYTE_SWAP 0
	global CONFIG_MTD_CFI_LE_BYTE_SWAP; set CONFIG_MTD_CFI_LE_BYTE_SWAP 0
	global CONFIG_IDE_8xx_PCCARD; set CONFIG_IDE_8xx_PCCARD 0
	global CONFIG_IDE_8xx_DIRECT; set CONFIG_IDE_8xx_DIRECT 0
	global CONFIG_IDE_EXT_DIRECT; set CONFIG_IDE_EXT_DIRECT 0
	global CONFIG_SCSI_G_NCR5380_PORT; set CONFIG_SCSI_G_NCR5380_PORT 0
	global CONFIG_SCSI_G_NCR5380_MEM; set CONFIG_SCSI_G_NCR5380_MEM 0
	global CONFIG_CONSOLE_9600; set CONFIG_CONSOLE_9600 0
	global CONFIG_CONSOLE_19200; set CONFIG_CONSOLE_19200 0
	global CONFIG_CONSOLE_115200; set CONFIG_CONSOLE_115200 0
	global CONFIG_FT_NORMAL_DEBUG; set CONFIG_FT_NORMAL_DEBUG 0
	global CONFIG_FT_FULL_DEBUG; set CONFIG_FT_FULL_DEBUG 0
	global CONFIG_FT_NO_TRACE; set CONFIG_FT_NO_TRACE 0
	global CONFIG_FT_NO_TRACE_AT_ALL; set CONFIG_FT_NO_TRACE_AT_ALL 0
	global CONFIG_FT_STD_FDC; set CONFIG_FT_STD_FDC 0
	global CONFIG_FT_MACH2; set CONFIG_FT_MACH2 0
	global CONFIG_FT_PROBE_FC10; set CONFIG_FT_PROBE_FC10 0
	global CONFIG_FT_ALT_FDC; set CONFIG_FT_ALT_FDC 0
}


proc update_choices { } {
	global tmpvar_0
	set tmpvar_0 "M68EZ328"
	global CONFIG_M68000
	if { $CONFIG_M68000 == 1 } then { set tmpvar_0 "MC68000" }
	global CONFIG_M68EN302
	if { $CONFIG_M68EN302 == 1 } then { set tmpvar_0 "MC68EN302" }
	global CONFIG_M68328
	if { $CONFIG_M68328 == 1 } then { set tmpvar_0 "MC68328" }
	global CONFIG_M68EZ328
	if { $CONFIG_M68EZ328 == 1 } then { set tmpvar_0 "MC68EZ328" }
	global CONFIG_M68VZ328
	if { $CONFIG_M68VZ328 == 1 } then { set tmpvar_0 "MC68VZ328" }
	global CONFIG_M68332
	if { $CONFIG_M68332 == 1 } then { set tmpvar_0 "MC68332" }
	global CONFIG_M68360
	if { $CONFIG_M68360 == 1 } then { set tmpvar_0 "MC68360" }
	global CONFIG_M5204
	if { $CONFIG_M5204 == 1 } then { set tmpvar_0 "MCF5204" }
	global CONFIG_M5206
	if { $CONFIG_M5206 == 1 } then { set tmpvar_0 "MCF5206" }
	global CONFIG_M5206e
	if { $CONFIG_M5206e == 1 } then { set tmpvar_0 "MCF5206e" }
	global CONFIG_M5272
	if { $CONFIG_M5272 == 1 } then { set tmpvar_0 "MCF5272" }
	global CONFIG_M5307
	if { $CONFIG_M5307 == 1 } then { set tmpvar_0 "MCF5307" }
	global CONFIG_M5407
	if { $CONFIG_M5407 == 1 } then { set tmpvar_0 "MCF5407" }
	global tmpvar_1
	set tmpvar_1 "AUTO"
	global CONFIG_CLOCK_AUTO
	if { $CONFIG_CLOCK_AUTO == 1 } then { set tmpvar_1 "AUTO" }
	global CONFIG_CLOCK_16MHz
	if { $CONFIG_CLOCK_16MHz == 1 } then { set tmpvar_1 "16MHz" }
	global CONFIG_CLOCK_20MHz
	if { $CONFIG_CLOCK_20MHz == 1 } then { set tmpvar_1 "20MHz" }
	global CONFIG_CLOCK_25MHz
	if { $CONFIG_CLOCK_25MHz == 1 } then { set tmpvar_1 "25MHz" }
	global CONFIG_CLOCK_33MHz
	if { $CONFIG_CLOCK_33MHz == 1 } then { set tmpvar_1 "33MHz" }
	global CONFIG_CLOCK_40MHz
	if { $CONFIG_CLOCK_40MHz == 1 } then { set tmpvar_1 "40MHz" }
	global CONFIG_CLOCK_45MHz
	if { $CONFIG_CLOCK_45MHz == 1 } then { set tmpvar_1 "45MHz" }
	global CONFIG_CLOCK_50MHz
	if { $CONFIG_CLOCK_50MHz == 1 } then { set tmpvar_1 "50MHz" }
	global CONFIG_CLOCK_54MHz
	if { $CONFIG_CLOCK_54MHz == 1 } then { set tmpvar_1 "54MHz" }
	global CONFIG_CLOCK_60MHz
	if { $CONFIG_CLOCK_60MHz == 1 } then { set tmpvar_1 "60MHz" }
	global CONFIG_CLOCK_66MHz
	if { $CONFIG_CLOCK_66MHz == 1 } then { set tmpvar_1 "66MHz" }
	global tmpvar_2
	set tmpvar_2 "AUTO"
	global CONFIG_RAMAUTO
	if { $CONFIG_RAMAUTO == 1 } then { set tmpvar_2 "AUTO" }
	global CONFIG_RAM4MB
	if { $CONFIG_RAM4MB == 1 } then { set tmpvar_2 "4MB" }
	global CONFIG_RAM8MB
	if { $CONFIG_RAM8MB == 1 } then { set tmpvar_2 "8MB" }
	global CONFIG_RAM16MB
	if { $CONFIG_RAM16MB == 1 } then { set tmpvar_2 "16MB" }
	global CONFIG_RAM32MB
	if { $CONFIG_RAM32MB == 1 } then { set tmpvar_2 "32MB" }
	global tmpvar_3
	set tmpvar_3 "AUTO"
	global CONFIG_AUTOBIT
	if { $CONFIG_AUTOBIT == 1 } then { set tmpvar_3 "AUTO" }
	global CONFIG_RAM8BIT
	if { $CONFIG_RAM8BIT == 1 } then { set tmpvar_3 "8bit" }
	global CONFIG_RAM16BIT
	if { $CONFIG_RAM16BIT == 1 } then { set tmpvar_3 "16bit" }
	global CONFIG_RAM32bit
	if { $CONFIG_RAM32bit == 1 } then { set tmpvar_3 "32bit" }
	global tmpvar_4
	set tmpvar_4 "NONE"
	global CONFIG_NOFLASH
	if { $CONFIG_NOFLASH == 1 } then { set tmpvar_4 "NONE" }
	global CONFIG_AMDFLASH
	if { $CONFIG_AMDFLASH == 1 } then { set tmpvar_4 "AMD" }
	global CONFIG_INTELFLASH
	if { $CONFIG_INTELFLASH == 1 } then { set tmpvar_4 "INTEL" }
	global tmpvar_5
	set tmpvar_5 "AUTO"
	global CONFIG_FLASHAUTO
	if { $CONFIG_FLASHAUTO == 1 } then { set tmpvar_5 "AUTO" }
	global CONFIG_FLASH128KB
	if { $CONFIG_FLASH128KB == 1 } then { set tmpvar_5 "128KB" }
	global CONFIG_FLASH1MB
	if { $CONFIG_FLASH1MB == 1 } then { set tmpvar_5 "1MB" }
	global CONFIG_FLASH2MB
	if { $CONFIG_FLASH2MB == 1 } then { set tmpvar_5 "2MB" }
	global CONFIG_FLASH4MB
	if { $CONFIG_FLASH4MB == 1 } then { set tmpvar_5 "4MB" }
	global CONFIG_FLASH6MB
	if { $CONFIG_FLASH6MB == 1 } then { set tmpvar_5 "6MB" }
	global CONFIG_FLASH8MB
	if { $CONFIG_FLASH8MB == 1 } then { set tmpvar_5 "8MB" }
	global CONFIG_FLASH16MB
	if { $CONFIG_FLASH16MB == 1 } then { set tmpvar_5 "16MB" }
	global tmpvar_6
	set tmpvar_6 "AUTO"
	global CONFIG_FLASHAUTOBIT
	if { $CONFIG_FLASHAUTOBIT == 1 } then { set tmpvar_6 "AUTO" }
	global CONFIG_FLASH8BIT
	if { $CONFIG_FLASH8BIT == 1 } then { set tmpvar_6 "8bit" }
	global CONFIG_FLASH16BIT
	if { $CONFIG_FLASH16BIT == 1 } then { set tmpvar_6 "16bit" }
	global CONFIG_FLASH32bit
	if { $CONFIG_FLASH32bit == 1 } then { set tmpvar_6 "32bit" }
	global tmpvar_7
	set tmpvar_7 "ROM"
	global CONFIG_RAMKERNEL
	if { $CONFIG_RAMKERNEL == 1 } then { set tmpvar_7 "RAM" }
	global CONFIG_ROMKERNEL
	if { $CONFIG_ROMKERNEL == 1 } then { set tmpvar_7 "ROM" }
	global CONFIG_HIMEMKERNEL
	if { $CONFIG_HIMEMKERNEL == 1 } then { set tmpvar_7 "HIMEM" }
	global tmpvar_8
	set tmpvar_8 "Any"
	global CONFIG_PCI_GOBIOS
	if { $CONFIG_PCI_GOBIOS == 1 } then { set tmpvar_8 "BIOS" }
	global CONFIG_PCI_GODIRECT
	if { $CONFIG_PCI_GODIRECT == 1 } then { set tmpvar_8 "Direct" }
	global CONFIG_PCI_GOANY
	if { $CONFIG_PCI_GOANY == 1 } then { set tmpvar_8 "Any" }
	global tmpvar_9
	set tmpvar_9 "ELF"
	global CONFIG_KCORE_ELF
	if { $CONFIG_KCORE_ELF == 1 } then { set tmpvar_9 "ELF" }
	global CONFIG_KCORE_AOUT
	if { $CONFIG_KCORE_AOUT == 1 } then { set tmpvar_9 "A.OUT" }
	global tmpvar_10
	set tmpvar_10 "NO"
	global CONFIG_MTD_CFI_NOSWAP
	if { $CONFIG_MTD_CFI_NOSWAP == 1 } then { set tmpvar_10 "NO" }
	global CONFIG_MTD_CFI_BE_BYTE_SWAP
	if { $CONFIG_MTD_CFI_BE_BYTE_SWAP == 1 } then { set tmpvar_10 "BIG_ENDIAN_BYTE" }
	global CONFIG_MTD_CFI_LE_BYTE_SWAP
	if { $CONFIG_MTD_CFI_LE_BYTE_SWAP == 1 } then { set tmpvar_10 "LITTLE_ENDIAN_BYTE" }
	global tmpvar_11
	set tmpvar_11 "8xx_PCCARD"
	global CONFIG_IDE_8xx_PCCARD
	if { $CONFIG_IDE_8xx_PCCARD == 1 } then { set tmpvar_11 "8xx_PCCARD" }
	global CONFIG_IDE_8xx_DIRECT
	if { $CONFIG_IDE_8xx_DIRECT == 1 } then { set tmpvar_11 "8xx_DIRECT" }
	global CONFIG_IDE_EXT_DIRECT
	if { $CONFIG_IDE_EXT_DIRECT == 1 } then { set tmpvar_11 "EXT_DIRECT" }
	global tmpvar_12
	set tmpvar_12 "Port"
	global CONFIG_SCSI_G_NCR5380_PORT
	if { $CONFIG_SCSI_G_NCR5380_PORT == 1 } then { set tmpvar_12 "Port" }
	global CONFIG_SCSI_G_NCR5380_MEM
	if { $CONFIG_SCSI_G_NCR5380_MEM == 1 } then { set tmpvar_12 "Memory" }
	global tmpvar_13
	set tmpvar_13 "19200"
	global CONFIG_CONSOLE_9600
	if { $CONFIG_CONSOLE_9600 == 1 } then { set tmpvar_13 "9600" }
	global CONFIG_CONSOLE_19200
	if { $CONFIG_CONSOLE_19200 == 1 } then { set tmpvar_13 "19200" }
	global CONFIG_CONSOLE_115200
	if { $CONFIG_CONSOLE_115200 == 1 } then { set tmpvar_13 "115200" }
	global tmpvar_14
	set tmpvar_14 "Normal"
	global CONFIG_FT_NORMAL_DEBUG
	if { $CONFIG_FT_NORMAL_DEBUG == 1 } then { set tmpvar_14 "Normal" }
	global CONFIG_FT_FULL_DEBUG
	if { $CONFIG_FT_FULL_DEBUG == 1 } then { set tmpvar_14 "Excessive" }
	global CONFIG_FT_NO_TRACE
	if { $CONFIG_FT_NO_TRACE == 1 } then { set tmpvar_14 "Reduced" }
	global CONFIG_FT_NO_TRACE_AT_ALL
	if { $CONFIG_FT_NO_TRACE_AT_ALL == 1 } then { set tmpvar_14 "None" }
	global tmpvar_15
	set tmpvar_15 "Standard"
	global CONFIG_FT_STD_FDC
	if { $CONFIG_FT_STD_FDC == 1 } then { set tmpvar_15 "Standard" }
	global CONFIG_FT_MACH2
	if { $CONFIG_FT_MACH2 == 1 } then { set tmpvar_15 "MACH-2" }
	global CONFIG_FT_PROBE_FC10
	if { $CONFIG_FT_PROBE_FC10 == 1 } then { set tmpvar_15 "FC-10/FC-20" }
	global CONFIG_FT_ALT_FDC
	if { $CONFIG_FT_ALT_FDC == 1 } then { set tmpvar_15 "Alt/82078" }
}


proc update_define_mainmenu {} {
	global CONFIG_MODULES
	global CONFIG_UCLINUX
	global CONFIG_UID16
	global CONFIG_RWSEM_GENERIC_SPINLOCK
	global CONFIG_RWSEM_XCHGADD_ALGORITHM
	global CONSTANT_Y
	set CONFIG_UCLINUX $CONSTANT_Y
	set CONFIG_UID16 $CONSTANT_Y
	set CONFIG_RWSEM_GENERIC_SPINLOCK $CONSTANT_Y
	global CONSTANT_N
	set CONFIG_RWSEM_XCHGADD_ALGORITHM $CONSTANT_N
}


set defaults "arch/m68knommu/defconfig"
set ARCH "m68knommu"
# FILE: tail.tk
# This file is boilerplate TCL/TK function definitions for 'make xconfig'.
#
# CHANGES
# =======
#
# 8 January 1998, Michael Elizabeth Chastain, <mec@shout.net>
# Arrange buttons in three columns for better screen fitting.
#

#
# Read the user's settings from .config.  These will override whatever is
# in config.in.  Don't do this if the user specified a -D to force
# the defaults.
#
if { [file readable .config] == 1} then {
	if { $argc > 0 } then {
		if { [lindex $argv 0] != "-D" } then {
			read_config .config
		}
		else
		{
			read_config $defaults
		}
	} else {
		read_config .config
	}
} else {
	read_config $defaults
}

update_define 1 $total_menus 0
update_mainmenu

button .f0.right.save -anchor w -text "Save and Exit" -underline 0\
    -command { catch {exec cp -f .config .config.old}; \
		writeconfig .config include/linux/autoconf.h; wrapup .wrap }

button .f0.right.quit -anchor w -text "Quit Without Saving" -underline 0\
    -command { maybe_exit .maybe }

button .f0.right.load -anchor w -text "Load Configuration from File" \
    -command { load_configfile .load "Load Configuration from file" read_config_file
}

button .f0.right.store -anchor w -text "Store Configuration to File" \
    -command { load_configfile .load "Store Configuration to file" write_config_file }

#
# Now pack everything.
#

pack .f0.right.store .f0.right.load .f0.right.quit .f0.right.save \
    -padx 0 -pady 0 -side bottom -fill x
pack .f0.left .f0.middle .f0.right -side left -padx 5 -pady 0 -fill y
pack .f0 -padx 5 -pady 5

update idletasks
set winy [expr 10 + [winfo reqheight .f0]]
set scry [lindex [wm maxsize .] 1]
set winx [expr 10 + [winfo reqwidth .f0]]
set scrx [lindex [wm maxsize .] 0]
if {$winx < $scrx} then {set maxx -1} else {set maxx $winx}
if {$winy < $scry} then {set maxy -1} else {set maxy $winy}
.f0 configure -width $winx -height $winy 
wm maxsize . $maxx $maxy

#
# If we cannot write our config files, disable the write button.
#
if { [file exists .config] == 1 } then {
		if { [file writable .config] == 0 } then {
			.f0.right.save configure -state disabled
		}
	} else {
		if { [file writable .] == 0 } then {
			.f0.right.save configure -state disabled
		}
	}

if { [file exists include/linux/autoconf.h] == 1 } then {
		if { [file writable include/linux/autoconf.h] == 0 } then {
			.f0.right.save configure -state disabled
		}
	} else {
		if { [file writable include/linux/] == 0 } then {
			.f0.right.save configure -state disabled
		}
	}
