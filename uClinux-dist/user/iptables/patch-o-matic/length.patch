diff -uNr original/linux/include/linux/netfilter_ipv4/ipt_length.h linux/include/linux/netfilter_ipv4/ipt_length.h
--- original/linux/include/linux/netfilter_ipv4/ipt_length.h	Thu Jan  1 07:30:00 1970
+++ linux/include/linux/netfilter_ipv4/ipt_length.h	Wed May  2 20:50:15 2001
@@ -0,0 +1,9 @@
+#ifndef _IPT_LENGTH_H
+#define _IPT_LENGTH_H
+
+struct ipt_length_info {
+    u_int16_t	min, max;
+    u_int8_t	invert;
+};
+
+#endif /*_IPT_LENGTH_H*/
diff -uNr original/linux/net/ipv4/netfilter/ipt_length.c linux/net/ipv4/netfilter/ipt_length.c
--- original/linux/net/ipv4/netfilter/ipt_length.c	Thu Jan  1 07:30:00 1970
+++ linux/net/ipv4/netfilter/ipt_length.c	Wed May  2 20:28:35 2001
@@ -0,0 +1,51 @@
+/* Kernel module to match packet length. */
+#include <linux/module.h>
+#include <linux/skbuff.h>
+
+#include <linux/netfilter_ipv4/ipt_length.h>
+#include <linux/netfilter_ipv4/ip_tables.h>
+
+static int
+match(const struct sk_buff *skb,
+      const struct net_device *in,
+      const struct net_device *out,
+      const void *matchinfo,
+      int offset,
+      const void *hdr,
+      u_int16_t datalen,
+      int *hotdrop)
+{
+	const struct ipt_length_info *info = matchinfo;
+	u_int16_t pktlen = ntohs(skb->nh.iph->tot_len);
+	
+	return (pktlen >= info->min && pktlen <= info->max) ^ info->invert;
+}
+
+static int
+checkentry(const char *tablename,
+           const struct ipt_ip *ip,
+           void *matchinfo,
+           unsigned int matchsize,
+           unsigned int hook_mask)
+{
+	if (matchsize != IPT_ALIGN(sizeof(struct ipt_length_info)))
+		return 0;
+
+	return 1;
+}
+
+static struct ipt_match length_match
+= { { NULL, NULL }, "length", &match, &checkentry, NULL, THIS_MODULE };
+
+static int __init init(void)
+{
+	return ipt_register_match(&length_match);
+}
+
+static void __exit fini(void)
+{
+	ipt_unregister_match(&length_match);
+}
+
+module_init(init);
+module_exit(fini);
