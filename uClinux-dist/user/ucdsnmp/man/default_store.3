.TH SNMP_AGENT_API 3 "27 Oct 1999"
.UC 5
.SH NAME
default_store \- generic storage of global data.
.SH SYNOPSIS
.nf
#include <ucd-snmp/ucd-snmp-config.h>
#include <ucd-snmp/ucd-snmp-includes.h>

int ds_set_boolean(int storeid, int which, int value);
int ds_get_boolean(int storeid, int which);
int ds_set_int(int storeid, int which, int value);
int ds_get_int(int storeid, int which);
int ds_set_string(int storeid, int which, const char *value);
char *ds_get_string(int storeid, int which);
int ds_register_config(u_char type, const char *ftype, const char *token,
                       int storeid, int which);
int ds_register_premib(u_char type, const char *ftype, const char *token,
                       int storeid, int which);
.fi
.SH DESCRIPTION
The purpose of the default storage is three-fold:
.IP 1)
To create a global storage space without creating a whole bunch of
globally accessible variables or a whole bunch of access functions to
work with more privately restricted variables.
.IP 2)
To provide a single location where the thread locking needs to be
implemented. At the time of this writing, however, thread locking is not
yet in place.
.IP 3)
To reduce the number of cross dependencies between code pieces that
may or may not be linked together in the long run. This provides for a
single location in which configuration data, for example, can be
stored for a separate section of code that may not be linked in to
the application in question.
.PP
The functions defined here implement these goals.
.PP
Currently, three data types are supported: boolean's, integers, and
strings. Each of based trade data types have separate storage
spaces. In addition, the storage space for each data type is divided
further by the application level.   Currently, there are two storage
spaces. The first is reserved for the SNMP library itself. The second 
is intended for use in applications and is not modified or checked by
the library, and, therefore, this is the space usable by you.
.PP
You can think of these storage spaces as being 3 arrays, something
like bool_storage[storeid][which], int_storage[storeid][which], and
string_storage[storeid][which].  The data is then accessed through the 
functions defined below.  For data you wish to store, you should use a 
storeid of DS_APPLICATION_ID.
.PP
The storage space used by the library is defined in the
default_store.h file, which currently contains the following defines:
.PP
.nf
/* These definitions correspond with the "storid" argument to the API */
#define DS_LIBRARY_ID     0
#define DS_APPLICATION_ID 1
#define DS_TOKEN_ID       2

/* These definitions correspond with the "which" argument to the API,
   when the storeid argument is DS_LIBRARY_ID */
/* library booleans */
#define DS_LIB_MIB_ERRORS          0
#define DS_LIB_SAVE_MIB_DESCRS     1
#define DS_LIB_MIB_COMMENT_TERM    2
#define DS_LIB_MIB_PARSE_LABEL     3
#define DS_LIB_DUMP_PACKET         4
#define DS_LIB_LOG_TIMESTAMP       5
#define DS_LIB_DONT_READ_CONFIGS   6
#define DS_LIB_MIB_REPLACE         7  /* replace objects from latest module */
#define DS_LIB_PRINT_NUMERIC_ENUM  8  /* print only numeric enum values */
#define DS_LIB_PRINT_NUMERIC_OIDS  9  /* print only numeric enum values */
#define DS_LIB_DONT_BREAKDOWN_OIDS 10 /* dont print oid indexes specially */
#define DS_LIB_ALARM_DONT_USE_SIG  11 /* don't use the alarm() signal */
#define DS_LIB_PRINT_FULL_OID      12 /* print fully qualified oids */
#define DS_LIB_QUICK_PRINT         13 /* print very brief output for parsing */
#define DS_LIB_RANDOM_ACCESS	   14 /* random access to oid labels */
#define DS_LIB_REGEX_ACCESS	   15 /* regex matching to oid labels */
#define DS_LIB_DONT_CHECK_RANGE    16 /* don't check values for ranges on send*/
#define DS_LIB_NO_TOKEN_WARNINGS   17 /* no warn about unknown config tokens */

/* library integers */
#define DS_LIB_MIB_WARNINGS  0
#define DS_LIB_SECLEVEL      1
#define DS_LIB_SNMPVERSION   2
#define DS_LIB_DEFAULT_PORT  3
#define DS_LIB_PRINT_SUFFIX_ONLY 4 /* print out only a single oid node  == 1.
                                      like #1 but supply mib module too == 2. */

/* library strings */
#define DS_LIB_SECNAME         0
#define DS_LIB_CONTEXT         1
#define DS_LIB_PASSPHRASE      2
#define DS_LIB_AUTHPASSPHRASE  3
#define DS_LIB_PRIVPASSPHRASE  4
#define DS_LIB_OPTIONALCONFIG  5
#define DS_LIB_APPTYPE         6
#define DS_LIB_COMMUNITY       7

.fi
.SH FUNCTIONS
.IP "ds_set_boolean(int storeid, int which, int value)"
Stores
.I true
if 
.I value
!= 0 or else false into the bool_storage[storeid][which] slot.
.IP "int ds_get_boolean(int storeid, int which)"
Returns 1 if storage[storeid][which] is true, or 0 if false.
.IP "int ds_set_string(int storeid, int which, const char *value)"
Stores
.I value
into the string_storage[storeid][which] slot.
.IP "char *ds_get_string(int storeid, int which)"
Returns the string which has been stored in the
string_storage[storeid][which] slot.
.IP "ds_set_int(int storeid, int which, int value)"
Stores
.I value
into the int_storage[storeid][which] slot.
.IP "int ds_get_int(int storeid, int which)"
Returns the integer which has been stored in the
int_storage[storeid][which] slot.
.IP "ds_register_config(u_char type, const char *ftype, const char *token, int storeid, int which)"
This token registers a configuration file directive and attaches it to 
a default storage type and slot.  Specifically,
.I storeid
and
.I which
indicate the storage slot in the data type indicated by
.I type,
where
.I type
is either one of the following constants: ASN_BOOLEAN, ASN_INTEGER, or
ASN_OCTET_STR.  The
.I ftype
variable indicates the file name base string searched for the
.I token
keyword.  For example, the following call:
.RS
.IP
ds_register_config(ASN_INTEGER, "snmp", "testtoken", DS_APPLICATION_ID, 5)
.RE
.IP
would indicate that when the snmp.conf file(s) were found and parsed,
that any line beginning with the word "testtoken" should be read and
the value after "testtoken" should be stored into the
int_storage[DS_APPLICATION_ID][5] slot.  For example the following
line in the configuration file:
.RS
.IP
testtoken 42
.RE
.IP
would set int_storage[DS_APPLICATION_ID][5] = 42.
.SH "SEE ALSO"
snmp_config(5), read_config(3)

