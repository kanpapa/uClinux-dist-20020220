.\" /***********************************************************
.\" 	Copyright 1989 by Carnegie Mellon University
.\" 
.\"                       All Rights Reserved
.\" 
.\" Permission to use, copy, modify, and distribute this software and its 
.\" documentation for any purpose and without fee is hereby granted, 
.\" provided that the above copyright notice appear in all copies and that
.\" both that copyright notice and this permission notice appear in 
.\" supporting documentation, and that the name of CMU not be
.\" used in advertising or publicity pertaining to distribution of the
.\" software without specific, written prior permission.  
.\" 
.\" CMU DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
.\" ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
.\" CMU BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
.\" ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
.\" WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
.\" ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
.\" SOFTWARE.
.\" ******************************************************************/
.TH SNMP_SESS_API 3 "21 Oct 1999"
.UC 5
.SH NAME
snmp_sess_init, snmp_sess_open, snmp_sess_session,
snmp_sess_send, snmp_sess_async_send,
snmp_sess_select_info, snmp_sess_read,
snmp_sess_timeout, snmp_sess_close, snmp_sess_error - session functions
.SH SYNOPSIS
#include <sys/types>
.br
#include <netinet/in.h>
.br
#include <sys/time.h>
.br
#include <ucd-snmp/snmp.h>
.br
#include <ucd-snmp/snmp_impl.h>
.br
#include <ucd-snmp/asn1.h>
.br
#include <ucd-snmp/snmp_api.h>
.PP
void snmp_sess_init ( struct snmp_session * );
.PP
void * snmp_sess_open ( struct snmp_session * );
.PP
struct snmp_session * snmp_sess_session ( void * );
.PP
int snmp_sess_send ( void * opaque,
.RS
struct snmp_pdu *pdu );
.RE
.PP
int snmp_sess_async_send ( void * opaque,
.RS
struct snmp_pdu *pdu,
.RE
.RS
snmp_callback callback, void * callbackData );
.RE
.PP
int snmp_sess_select_info ( void * opaque,
.RS
int *numfds, fd_set *fdset,
.RE
.RS
struct timeval *timeout, int *block );
.RE
.PP
void snmp_sess_read ( void * opaque, fd_set *fdset );
.RE
.PP
void snmp_sess_timeout ( void * opaque );
.PP
int snmp_sess_close ( void * opaque );
.PP
void snmp_sess_error ( void * opaque,
.RS
int *pcliberr,
int *psnmperr,
char **pperrstring );
.RE
.PP
.SH DESCRIPTION
These functions define a subset of the API that can be used
to manage single SNMP sessions in a multi-threaded application.
Except for
.I snmp_sess_session,
these functions are single session versions of the traditional
SNMP library API.
.PP
Note that these functions use an
.I Opaque
pointer to identify a single session in lieu of a
.I session
pointer.
.PP
.I Snmp_sess_init
prepares a struct snmp_session that sources transport characteristics
and common information that will be used for a set of SNMP transactions.
After this structure is passed to
.I snmp_open
to create an SNMP session, the structure is not used.
.PP
SNMP sessions that are created with
.I snmp_sess_open
are not affected by and should not be used with
.I snmp_select_info,
.I snmp_read,
.I snmp_timeout,
nor
.I snmp_close.
Use the other functions described here with similar capabilities.
.PP
.I Snmp_sess_init
and
.I snmp_sess_open
each take as input a pointer to a struct snmp_session object.
This structure contains information for a set of transactions that
will share similar transport characteristics.
.I Snmp_sess_session
takes the opaque session handle and returns a pointer to
its associated struct snmp_session.
.PP
.I Snmp_sess_send
and
.I snmp_sess_async_send
each take as input an additional pointer to a struct snmp_pdu object.
This structure contains information that describes a transaction
that will be performed over an open session.
.PP
Consult snmp_api.h for the definitions of these structures.
.PP
.I Snmp_sess_select_info, snmp_sess_read,
and
.I snmp_sess_timeout
provide an interface for the use of the
.IR select (2)
system call so that SNMP transactions for a single session can occur asynchronously.
.PP
.I Snmp_sess_select_info
is given the information that would have been passed to
.I select
in the absence of SNMP.  For example, this might include window update information.
This information is modified so that SNMP will get the service it requires from the
call to
.I select.
In this case,
.I numfds, fdset,
and
.I timeout
correspond to the
.I nfds, readfds,
and
.I timeout
arguments to
.I select,
respectively.  The only exception is that timeout must always point to an allocated (but perhaps uninitialized)
.I struct timeval.
If
.I timeout
would have been passed as NULL,
.I block
is set to true, and
.I timeout
is treated as undefined.  This same rule applies upon return from
.I snmp_select_info.
.PP
After calling
.I snmp_sess_select_info, select
is called with the returned data.  When select returns,
.I snmp_sess_read
is called with the
.I fd_set
returned from
.I select.
This will read any input from this session's SNMP socket.
If
.I select
times out,
.I snmp_sess_timeout
should be called to see if the timeout was intended for SNMP.
.SH DIAGNOSTICS
.PP
Error return status from 
.I snmp_sess_open
is indicated by return of a null pointer.
Error return status from 
.I snmp_sess_close
and
.I snmp_sess_send
is indicated by return of 0.  A successful status will return a 1.
.PP
Further information can be obtained by using
.I snmp_sess_error
to see what type of error has occurred.
This function returns the SNMP "snmp_errno" variable,
the value of the system "errno" variable,
and a string interpretation of both variables.
The string must be freed after use by the caller.
.PP
For errors returned by
.I snmp_sess_open,
use the corresponding function
.I snmp_error
instead of
.I snmp_sess_error.
.PP
Consult snmp_api.h for the complete set of SNMP library
error values.
The SNMP library error value
.IR snmperr
can be one of the following values:
.RS 2n
.IP SNMPERR_GENERR \w'SNMPERR_BAD_REPETITIONS'u+2n
A generic error occurred.
.IP SNMPERR_BAD_LOCPORT \w'SNMPERR_BAD_REPETITIONS'u+2n
The local port was bad because it had already been
allocated or permission was denied.
.IP SNMPERR_BAD_ADDRESS \w'SNMPERR_BAD_REPETITIONS'u+2n
The host name or address given was not useable.
.IP SNMPERR_BAD_SESSION \w'SNMPERR_BAD_REPETITIONS'u+2n
The specified session was not open.
.IP SNMPERR_TOO_LONG \w'SNMPERR_BAD_REPETITIONS'u+2n
.IP SNMPERR_NO_SOCKET \w'SNMPERR_BAD_REPETITIONS'u+2n
.IP SNMPERR_V2_IN_V1 \w'SNMPERR_BAD_REPETITIONS'u+2n
.IP SNMPERR_V1_IN_V2 \w'SNMPERR_BAD_REPETITIONS'u+2n
.IP SNMPERR_BAD_REPEATERS \w'SNMPERR_BAD_REPETITIONS'u+2n
.IP SNMPERR_BAD_REPETITIONS \w'SNMPERR_BAD_REPETITIONS'u+2n
.IP SNMPERR_BAD_ASN1_BUILD \w'SNMPERR_BAD_REPETITIONS'u+2n
.IP SNMPERR_BAD_SENDTO \w'SNMPERR_BAD_REPETITIONS'u+2n
.IP SNMPERR_BAD_RCVFROM \w'SNMPERR_BAD_REPETITIONS'u+2n
.IP SNMPERR_BAD_PARSE \w'SNMPERR_BAD_REPETITIONS'u+2n
.IP SNMPERR_BAD_VERSION \w'SNMPERR_BAD_REPETITIONS'u+2n
.IP SNMPERR_BAD_COMMUNITY \w'SNMPERR_BAD_REPETITIONS'u+2n
.IP SNMPERR_NOAUTH_DESPRIV \w'SNMPERR_BAD_REPETITIONS'u+2n
.IP SNMPERR_ABORT \w'SNMPERR_BAD_REPETITIONS'u+2n
.IP SNMPERR_UNKNOWN_PDU \w'SNMPERR_BAD_REPETITIONS'u+2n
.IP SNMPERR_TIMEOUT \w'SNMPERR_BAD_REPETITIONS'u+2n
.RE
.PP
.SH "SEE ALSO"
select(2), snmp_api(3), snmp_api.h
