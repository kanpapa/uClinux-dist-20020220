This is zebra.info, produced by makeinfo version 4.0 from zebra.texi.

INFO-DIR-SECTION Routing Software
START-INFO-DIR-ENTRY
* Zebra: (zebra).		The GNU Zebra routing software.
END-INFO-DIR-ENTRY

   This file documents the GNU Zebra software which manages common
TCP/IP routing protocols.

   This is Edition 0.1, last updated 3 January 2000 of `The GNU Zebra
Manual', for Zebra Version 0.85.

   Copyright (C) 1999, 2000 Kunihiro Ishiguro

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by Kunihiro Ishiguro.


File: zebra.info,  Node: OSPF area,  Next: OSPF interface,  Prev: OSPF router,  Up: ospfd

OSPF area
=========

 - OSPF Command: area A.B.C.D range A.B.C.D/M
 - OSPF Command: area <0-4294967295> range A.B.C.D/M
 - OSPF Command: no area A.B.C.D range A.B.C.D/M
 - OSPF Command: no area <0-4294967295> range A.B.C.D/M

 - OSPF Command: area A.B.C.D range IPV4_PREFIX suppress
 - OSPF Command: no area A.B.C.D range IPV4_PREFIX suppress
 - OSPF Command: area A.B.C.D range IPV4_PREFIX substitute IPV4_PREFIX
 - OSPF Command: no area A.B.C.D range IPV4_PREFIX substitute
IPV4_PREFIX

 - OSPF Command: area A.B.C.D virtual-link A.B.C.D
 - OSPF Command: area <0-4294967295> virtual-link A.B.C.D
 - OSPF Command: no area A.B.C.D virtual-link A.B.C.D
 - OSPF Command: no area <0-4294967295> virtual-link A.B.C.D

 - OSPF Command: area A.B.C.D shortcut
 - OSPF Command: area <0-4294967295> shortcut
 - OSPF Command: no area A.B.C.D shortcut
 - OSPF Command: no area <0-4294967295> shortcut

 - OSPF Command: area A.B.C.D stub
 - OSPF Command: area <0-4294967295> stub
 - OSPF Command: no area A.B.C.D stub
 - OSPF Command: no area <0-4294967295> stub

 - OSPF Command: area A.B.C.D stub no-summary
 - OSPF Command: area <0-4294967295> stub no-summary
 - OSPF Command: no area A.B.C.D stub no-summary
 - OSPF Command: no area <0-4294967295> stub no-summary

 - OSPF Command: area A.B.C.D default-cost <0-16777215>
 - OSPF Command: no area A.B.C.D default-cost <0-16777215>

 - OSPF Command: area A.B.C.D export-list NAME
 - OSPF Command: area <0-4294967295> export-list NAME
 - OSPF Command: no area A.B.C.D export-list NAME
 - OSPF Command: no area <0-4294967295> export-list NAME

 - OSPF Command: area A.B.C.D import-list NAME
 - OSPF Command: area <0-4294967295> import-list NAME
 - OSPF Command: no area A.B.C.D import-list NAME
 - OSPF Command: no area <0-4294967295> import-list NAME

 - OSPF Command: area A.B.C.D authentication
 - OSPF Command: area <0-4294967295> authentication
 - OSPF Command: no area A.B.C.D authentication
 - OSPF Command: no area <0-4294967295> authentication

 - OSPF Command: area A.B.C.D authentication message-digest
 - OSPF Command: area <0-4294967295> authentication message-digest


File: zebra.info,  Node: OSPF interface,  Next: Redistribute routes to OSPF,  Prev: OSPF area,  Up: ospfd

OSPF interface
==============

 - Interface Command: ip ospf authentication-key AUTH_KEY
 - Interface Command: no ip ospf authentication-key
     Set OSPF authentication key for simple password.  With setting
     AUTH_KEY, all OSPF pakcets are authenticated. AUTH_KEY has length
     up to 8 chars.

 - Interface Command: ip ospf message-digest-key KEYID md5 KEY
 - Interface Command: no ip ospf message-digest-key
     Set OSPF authentication key for cryptographic password.  The
     cryptographic algorithm is MD5.  KEYID identifies secret key used
     to create the message digest.  KEY is the actual message digest
     key up to 16 chars.

 - Interface Command: ip ospf cost <1-65535>
 - Interface Command: no ip ospf cost
     Set link cost for specified interface.  The cost value is set to
     router-LSA's metric field and used for SPF calculation.

 - Interface Command: ip ospf dead-interval <1-65535>
 - Interface Command: no ip ospf dead-interval
     Set number of seconds for RouterDeadInterval timer value used for
     Wait Timer and Inactivity Timer.  This value must be the same for
     all routers attached to a common network.  The default value is 40
     seconds.

 - Interface Command: ip ospf hello-interval <1-65535>
 - Interface Command: no ip ospf hello-interval
     Set number of seconds for HelloInterval timer value.  Setting this
     value, Hello packet will be sent every timer value seconds on
     specified interface.  This value must be the same for all routers
     attached to a common network.  The default value is 10 seconds.

 - Interface Command: ip ospf network
(broadcast|non-broadcast|point-to-multipoint|point-to-point)
 - Interface Command: no ip ospf network
     Set explicitly network type for specifed interface.

 - Interface Command: ip ospf priority <0-255>
 - Interface Command: no ip ospf priority
     Set RouterPriority integer value.  Setting higher value, router
     will be more eligible to become Designated Router.  Setting the
     value to 0, router is no longer eligible to Designated Router.
     The default value is 1.

 - Interface Command: ip ospf retransmit-interval <1-65535>
 - Interface Command: no ip ospf retransmit interval
     Set number of seconds for RxmtInterval timer value.  This value is
     used when retransmitting Database Description and Link State
     Request packets.  The default value is 5 seconds.

 - Interface Command: ip ospf transmit-delay
 - Interface Command: no ip ospf transmit-delay
     Set nubmer of seconds for InfTransDelay value.  LSAs' age should be
     incremented by this value when transmitting.  The default value is
     1 seconds.


File: zebra.info,  Node: Redistribute routes to OSPF,  Next: Showing OSPF information,  Prev: OSPF interface,  Up: ospfd

Redistribute routes to OSPF
===========================

 - OSPF Command: redistribute (kernel|connected|static|rip|bgp)
 - OSPF Command: redistribute (kernel|connected|static|rip|bgp)
metric-type (1|2)
 - OSPF Command: redistribute (kernel|connected|static|rip|bgp) metric
<0-16777214>
 - OSPF Command: redistribute (kernel|connected|static|rip|bgp)
metric-type (1|2) metric <0-16777214>
 - OSPF Command: no redistribute (kernel|connected|static|rip|bgp)
 - OSPF Command: no redistribute (kernel|connected|static|rip|bgp)
metric-type (1|2)
 - OSPF Command: no redistribute (kernel|connected|static|rip|bgp)
metric <0-16777214>
 - OSPF Command: no redistribute (kernel|connected|static|rip|bgp)
metric-type (1|2) metric <0-16777214>

 - OSPF Command: distribute-list NAME out kernel
 - OSPF Command: no distribute-list NAME out kernel
 - OSPF Command: distribute-list NAME out connected
 - OSPF Command: no distribute-list NAME out connected
 - OSPF Command: distribute-list NAME out static
 - OSPF Command: no distribute-list NAME out static
 - OSPF Command: distribute-list NAME out rip
 - OSPF Command: no distribute-list NAME out rip
 - OSPF Command: distribute-list NAME out bgp
 - OSPF Command: no distribute-list NAME out bgp

 - Command: router zebra
 - Command: no router zebra


File: zebra.info,  Node: Showing OSPF information,  Next: Debugging OSPF,  Prev: Redistribute routes to OSPF,  Up: ospfd

Showing OSPF information
========================

 - Command: show ip ospf

 - Command: show ip ospf interface [INTERFACE]

 - Command: show ip ospf neighbor
 - Command: show ip ospf neighbor INTERFACE
 - Command: show ip ospf neighbor detail
 - Command: show ip ospf neighbor INTERFACE detail

 - Command: show ip ospf database

 - Command: show ip ospf database adbr-summary

 - Command: show ip ospf database external

 - Command: show ip ospf database max-age

 - Command: show ip ospf database network

 - Command: show ip ospf database router

 - Command: show ip ospf database self-originate

 - Command: show ip ospf database summary

 - Command: show ip ospf refresher

 - Command: show ip ospf route


File: zebra.info,  Node: Debugging OSPF,  Prev: Showing OSPF information,  Up: ospfd

Debugging OSPF
==============

 - Command: debug ospf packet
(hello|dd|ls-request|ls-update|ls-ack|all) (send|recv) [detail]
 - Command: no debug ospf packet
(hello|dd|ls-request|ls-update|ls-ack|all) (send|recv) [detail]

 - Command: debug ospf ism
 - Command: debug ospf ism (status|events|timers)
 - Command: no debug ospf ism
 - Command: no debug ospf ism (status|events|timers)

 - Command: debug ospf nsm
 - Command: debug ospf nsm (status|events|timers)
 - Command: no debug ospf nsm
 - Command: no debug ospf nsm (status|events|timers)

 - Command: show debugging ospf


File: zebra.info,  Node: ospf6d,  Next: bgpd,  Prev: ospfd,  Up: Top

ospf6d
******

   `ospf6d' is a daemon support OSPF version 3 for IPv6 network.  OSPF
for IPv6 is described in RFC2740.

* Menu:

* OSPF6 router::
* OSPF6 area::
* OSPF6 interface::
* Redistribute routes to OSPF6::
* Showing OSPF6 information::


File: zebra.info,  Node: OSPF6 router,  Next: OSPF6 area,  Prev: ospf6d,  Up: ospf6d

OSPF6 router
============

 - Command: router ospf6

 - OSPF6 Command: router-id A.B.C.D
     Set router's Router-ID.

 - OSPF6 Command: interface IFNAME area AREA
     Bind interface to specified area, and start OSPF packet.  AREA can
     be specified as 0.


File: zebra.info,  Node: OSPF6 area,  Next: OSPF6 interface,  Prev: OSPF6 router,  Up: ospf6d

OSPF6 area
==========

   Area support for OSPFv3 is not yet implemented.


File: zebra.info,  Node: OSPF6 interface,  Next: Redistribute routes to OSPF6,  Prev: OSPF6 area,  Up: ospf6d

OSPF6 interface
===============

 - Interface Command: ipv6 ospf6 cost COST
     Setting interface's output cost.  Default value is 1.

 - Interface Command: ipv6 ospf6 hello-interval HELLOINTERVAL
     Setting interface's Hello Interval.  Default 40

 - Interface Command: ipv6 ospf6 dead-interval DEADINTERVAL
     Setting interface's Router Dead Interval.  Default value is 40.

 - Interface Command: ipv6 ospf6 retransmit-interval RETRANSMITINTERVAL
     Setting interface's Rxmt Interval.  Default value is 5.

 - Interface Command: ipv6 ospf6 priority PRIORITY
     Setting interface's Router Priority.  Default value is 1.

 - Interface Command: ipv6 ospf6 transmit-delay TRANSMITDELAY
     Setting interface's Inf-Trans-Delay.  Default value is 1.


File: zebra.info,  Node: Redistribute routes to OSPF6,  Next: Showing OSPF6 information,  Prev: OSPF6 interface,  Up: ospf6d

Redistribute routes to OSPF6
============================

 - OSPF6 Command: redistribute static
 - OSPF6 Command: redistribute connected
 - OSPF6 Command: redistribute ripng


File: zebra.info,  Node: Showing OSPF6 information,  Prev: Redistribute routes to OSPF6,  Up: ospf6d

Showing OSPF6 information
=========================

 - Command: show ipv6 ospf6 [INSTANCE_ID]
     INSTANCE_ID is a optional OSPF instance ID. To see router ID and
     OSPF instance ID, simply type "show ipv6 ospf6 <cr>".

 - Command: show ipv6 ospf6 database
     This command shows LSA database summary.  You can specify type of
     LSA.

 - Command: show ipv6 ospf6 interface
     To see OSPF interface configuration like costs.

 - Command: show ipv6 ospf6 neighbor
     Shows state and choosed (Backup) DR of neighbor.

 - Command: show ipv6 ospf6 request-list A.B.C.D
     Shows requestlist of neighbor.

 - Command: show ipv6 route ospf6
     This command shows internal routing table.


File: zebra.info,  Node: bgpd,  Next: Filtering,  Prev: ospf6d,  Up: Top

bgpd
****

   `bgpd' is a Border Gateway Protocol 4 (BGP-4) protocol daemon.
BGP-4 is described in RFC1771.  bgpd also supports Multiprotocol
Extension for BGP-4 (sometimes known as BGP-4+ or MBGP) which is
described in RFC2283.

   BGP-4 is one of the EGPs (Exterior Gateway Protocols) and is used for
inter-domain routing.

* Menu:

* Configuring bgpd::
* BGP router::
* BGP peer::
* BGP network::
* Redistribute to BGP::
* Peer configuration::
* Peer filtering::
* BGP terminal mode commands::
* BGP Log Format::
* Multiple Protocol Extension for BGP::
* Route Reflector::
* Route Server::
* How to set up a 6-Bone connection::
* Dump BGP packet and table::


File: zebra.info,  Node: Configuring bgpd,  Next: BGP router,  Prev: bgpd,  Up: bgpd

Configuring bgpd
================

   Default configuration file of `bgpd' is `bgpd.conf'.  `bgpd' search
current directory first then search /usr/local/etc/bgpd.conf.  All of
bgpd's command must be configured in `bgpd.conf'.

   `bgpd' specific invocation options are described below.  Common
options may also be specified (*note Common Invocation Options::).

`-p PORT'
`--bgp_port=PORT'
     Set the bgp protocol's port number.

`-r'
`--retain'
     When program terminates, retain BGP routes added by zebra.


File: zebra.info,  Node: BGP router,  Next: BGP peer,  Prev: Configuring bgpd,  Up: bgpd

BGP router
==========

   First of all you must configure BGP router with `router bgp'
command.  To configure BGP router, you need AS number.  AS number is an
identification of autonomous system.  BGP protocol uses the AS number
for detecting the BGP connection is internal one or external one.

   AS number is a digit between 1 and 65535.  How to use AS number is
described in RFC1930.  AS number 64512 through 65535 are defined as
private AS number.  Private AS number must not to be advertised on the
global Internet.

 - Command: router bgp AS-NUMBER
     Enable a BGP protocol process with the specified AS-NUMBER.  After
     this statement you can input any `BGP Commands'.  You can not
     create different BGP process under different AS-NUMBER without
     specifying *Note Multiple instance::.

 - Command: no router bgp AS-NUMBER
     Destroy a BGP protocol process with the specified AS-NUMBER.

 - BGP Command: bgp router-id ROUTER-ID
     This command specifies the router-ID.  If bgpd connects to zebra
     it gets interface and address information.  In that case default
     router ID value is selected as the largest IP Address of the
     interfaces.  When `router zebra' is not enabled bgpd can't get
     interface information so `router-id' is set to 0.0.0.0.  So please
     set router-id by hand.


File: zebra.info,  Node: BGP peer,  Next: BGP network,  Prev: BGP router,  Up: bgpd

BGP peer
========

 - BGP Command: neighbor PEER remote-as AS-NUMBER
     Creates a new neighbor whose remote-as is AS-NUMBER.  PEER can be
     an IPv4 address or an IPv6 address.
          router bgp 1
           neighbor 10.0.0.1 remote-as 2
     In this case my router, in AS-1, is trying to peer with AS-2
     at 10.0.0.1.

     This command must be the first command used when configuring a
     neighbor.  If the remote-as is not specified, bgpd will complain
     like this:
          can't find neighbor 10.0.0.1


File: zebra.info,  Node: BGP network,  Next: Redistribute to BGP,  Prev: BGP peer,  Up: bgpd

BGP network
===========

 - BGP Command: network NETWORK
     This command adds the announcement network.
          router bgp 1
           network 10.0.0.0/8
     This configuration example says that network 10.0.0.0/8 will
     be announced to all neighbors.  Some vendor's routers don't
     advertise routes if they aren't present in its IGP routing tables;
     `bgp' doesn't care about IGP routes when announcing its routes.

 - BGP Command: no network NETWORK

 - BGP Command: aggregate-address NETWORK
     This command specifies an aggregate address.

 - BGP Command: no aggregate-address NETWORK


File: zebra.info,  Node: Redistribute to BGP,  Next: Peer configuration,  Prev: BGP network,  Up: bgpd

Redistribute to BGP
===================

 - BGP Command: redistribute kernel
     Redistribute kernel route to BGP process.

 - BGP Command: redistribute static
     Redistribute static route to BGP process.

 - BGP Command: redistribute connected
     Redistribute connected route to BGP process.

 - BGP Command: redistribute rip
     Redistribute RIP route to BGP process.

 - BGP Command: redistribute ospf
     Redistribute OSPF route to BGP process.


File: zebra.info,  Node: Peer configuration,  Next: Peer filtering,  Prev: Redistribute to BGP,  Up: bgpd

Peer configuration
==================

   In a `router bgp' clause there are neighbor specific configurations
required.

 - BGP Command: neighbor PEER shutdown
 - BGP Command: no neighbor PEER shutdown
     Shutdown the peer.  We can delete the neighbor's configuration by
     `no neighbor PEER remote-as AS-NUMBER' but all configuration of
     the neighbor will be deleted.  When you want to preserve the
     configuration, but want to drop the BGP peer, use this syntax.

 - BGP Command: neighbor PEER ebgp-multihop
 - BGP Command: no neighbor PEER ebgp-multihop

 - BGP Command: neighbor PEER description ...
 - BGP Command: no neighbor PEER description ...
     Set description of the peer.

 - BGP Command: neighbor PEER version VERSION
     Set up the neighbor's BGP version.  VERSION can be 4, 4+ or 4-.
     BGP version 4 is the default value used for BGP peering.  BGP
     version 4+ means that the neighbor supports Multiprotocol
     Extensions for BGP-4.  BGP version 4- is similar but the neighbor
     speaks the old Internet-Draft revision 00's Multiprotocol
     Extensions for BGP-4.  Some routing software is still using this
     version.

 - BGP Command: neighbor PEER interface IFNAME
 - BGP Command: no neighbor PEER interface IFNAME
     When you connect to a BGP peer over an IPv6 link-local address,
     you have to specify the ifname of the interface used for the
     connection.

 - BGP Command: neighbor PEER next-hop-self
 - BGP Command: no neighbor PEER next-hop-self
     This command specifies an announced route's nexthop as being
     equivalent to the address of the bgp beast.

 - BGP Command: neighbor PEER update-source
 - BGP Command: no neighbor PEER update-source

 - BGP Command: neighbor PEER default-originate
 - BGP Command: no neighbor PEER default-originate
     bgpd's default is to not announce the default route (0.0.0.0/0)
     even it is in routing table.  When you want to announce default
     routes to the peer, use this command.

 - BGP Command: neighbor PEER port PORT
 - BGP Command: neighbor PEER port PORT

 - BGP Command: neighbor PEER send-community
 - BGP Command: neighbor PEER send-community

 - BGP Command: neighbor PEER weight WEIGHT
 - BGP Command: no neighbor PEER weight WEIGHT
     This command specifies a default WEIGHT value for the neighbor's
     routes.

 - BGP Command: neighbor PEER maximum-prefix NUMBER
 - BGP Command: no neighbor PEER maximum-prefix NUMBER


File: zebra.info,  Node: Peer filtering,  Next: BGP terminal mode commands,  Prev: Peer configuration,  Up: bgpd

Peer filtering
==============

 - BGP Command: neighbor PEER distribute-list NAME [in|out]
     This command specifies a distribute-list for the peer.  DIRECT is
     `in' or `out'.

 - BGP command: neighbor PEER prefix-list NAME [in|out]

 - BGP command: neighbor PEER filter-list NAME [in|out]

 - BGP Command: neighbor PEER route-map NAME [in|out]
     Apply a route-map on the neighbor.  DIRECT must be `in' or `out'.


File: zebra.info,  Node: BGP terminal mode commands,  Next: BGP Log Format,  Prev: Peer filtering,  Up: bgpd

BGP terminal mode commands
==========================

 - Command: show ip bgp [NETWORK]
     Lists all BGPd routes.

 - Command: show ip bgp regexp AS-REGEXP

 - Command: show ip bgp summary

 - Command: show ip bgp neighbor [PEER]

 - Command: clear ip bgp PEER
     Clears peers which have addresses of X.X.X.X

 - Command: show debug

 - Command: debug event

 - Command: debug update

 - Command: debug keepalive

 - Command: no debug event

 - Command: no debug update

 - Command: no debug keepalive


File: zebra.info,  Node: BGP Log Format,  Next: Multiple Protocol Extension for BGP,  Prev: BGP terminal mode commands,  Up: bgpd

BGP Log Format
==============

   BGPd outputs logging information to a terminal or to the specified
file.  It includes routing updates and peer status change information.
It also includes date, time, packet type, the peer's IP address, and
other routing information.

     1999/03/29 17:42:18 Update:[202.216.226.1] 130.58.0.0/16 med: 0 lpref: 0 nexthop: 202.216.226.1 aspath: 4691 3561 5119 3576 3782 i


File: zebra.info,  Node: Multiple Protocol Extension for BGP,  Next: Route Reflector,  Prev: BGP Log Format,  Up: bgpd

Multiprotocol Extension for BGP
===============================

   When adding IPv6 routing information exchange feature to BGP.  There
was some proposals.  IETF IDR working group finally take a proposal
called Multiprotocol Extension for BGP.  The specification is described
in RFC2283.  The protocol does not define new protocol.  It defines new
attribute to existing BGP.  When it is used exchanging IPv6 routing
information it is called BGP-4+.  When it is used exchanging multicast
routing information it is called MBGP.

   bgpd supports Multiprotocol Extension for BGP.  So if remote peer
support the protocol, bgpd can exchange IPv6 and/or multicast routing
information.

   Traditional BGP does not have a feature to detect remote peer's
capability whether it can handle other than IPv4 unicast routes.  This
is a big problem using Multiprotocol Extension for BGP to operational
network.  `draft-ietf-idr-bgp4-cap-neg-04.txt' is proposing a feature
called Capability Negotiation.  bgpd use this Capability Negotiation to
detect remote peer's capability.  If the peer is only configured as
IPv4 unicast neighbor.  bgpd does not send this Capability Negotiation
packet.

   By default, Zebra will bring up peering with minimal common
capability of both sides.  For example, local router have capability of
unicast and multicast and remote router have capability of unicast.  In
this case, local router will establish the connection with unicast only
capability.  When there is no common capability Zebra send Unsupported
Capability error then reset connection.

   If you want to completely match capability with remote peer.  Please
use `strict-capability-match' command.

 - BGP Command: neighbor PEER strict-capability-match
 - BGP Command: no neighbor PEER strict-capability-match
     Strictly compare remote capability and local capability.  If
     capability is different, send Unsupported Capability error then
     reset connection.

   You may want to disable sending Capability Negotiation OPEN message
optional parameter to the peer when remote peer does not implement
Capability Negotiation.  Please use `dont-capability-negotiate' command
to disable the feature.

 - BGP Command: neighbor PEER dont-capability-negotiate
 - BGP Command: no neighbor PEER dont-capability-negotiate
     Suppress sending Capability Negotiation as OPEN message optional
     parameter to the peer.  This command only affects the peer is
     configured other than IPv4 unicast configuration.

   When remote peer does not have capability negotiation feature, remote
peer will not send any capability at all.  In that case, bgp configure
the peer with configured capability.

   You may prefer locally configured capability more than negotiated
capability even though remote peer send capability.  If the peer is
congiured by `override-capability', bgpd ignore received capability
then override negotiated capability with configured value.

 - BGP Command: neighbor PEER override-capability
 - BGP Command: no neighbor PEER override-capability
     Override the result of Capability Negotiation with local
     configuration.  Ignore remote peer's capability value.


File: zebra.info,  Node: Route Reflector,  Next: Route Server,  Prev: Multiple Protocol Extension for BGP,  Up: bgpd

Route Reflector
===============

 - BGP Command: bgp cluster-id A.B.C.D

 - BGP Command: neighbor PEER route-reflector-client
 - BGP Command: no neighbor PEER route-reflector-client


File: zebra.info,  Node: Route Server,  Next: How to set up a 6-Bone connection,  Prev: Route Reflector,  Up: bgpd

Route Server
============

   At the Internet Exchange point many ISPs are connected each other by
external BGP peering.  Normally these external BGP connection is done by
`full mesh' method.  As same as internal BGP full mesh formation, this
method has a scaling problem.

   This scaling problem is well known.  Route Server is a method to
resolve the problem.  Each ISP's BGP router only peer to Route Server.
Route Server serves BGP information exchange to other BGP routers.  By
applying this method, numbers of BGP connections is reduced from
O(n*(n-1)/2) to O(n).

   Unlike normal BGP router, Route Server must have several routing
table for managing different routing policy of each BGP speaker.  We
call the routing tables as different `view'.  `bgpd' can work as normal
BGP router or Route Server or both at the same time.

* Menu:

* Multiple instance::
* BGP instance and view::
* Routing policy::
* Viewing the view::


File: zebra.info,  Node: Multiple instance,  Next: BGP instance and view,  Prev: Route Server,  Up: Route Server

Multiple instance
-----------------

   To enable multiple view function of `bgpd', you must turn on
multiple instance feature beforehand.

 - Command: bgp multiple-instance
     Enable BGP multiple instance feature.  After this feature is
     enabled, you can make multiple BGP instance or multiple BGP view.

 - Command: no bgp multiple-instance
     Disable BGP multiple instance feature.  You can not disable this
     feature when BGP multiple instance or view exists.


File: zebra.info,  Node: BGP instance and view,  Next: Routing policy,  Prev: Multiple instance,  Up: Route Server

BGP instance and view
---------------------

   BGP instance is a normal BGP process.  The result of route selection
goes to the kernel routing table.  You can setup different AS at the
same time when BGP multiple instance feature is enabled.

 - Command: router bgp AS-NUMBER
     Make a new BGP instance.  You can use arbitrary word for the NAME.

     bgp multiple-instance
     !
     router bgp 1
      neighbor 10.0.0.1 remote-as 2
      neighbor 10.0.0.2 remote-as 3
     !
     router bgp 2
      neighbor 10.0.0.3 remote-as 4
      neighbor 10.0.0.4 remote-as 5

   BGP view is almost same as normal BGP process without the result of
route selection does not go to the kernel routing table.  BGP view is
only for exchanging BGP routing information.

 - Command: router bgp AS-NUMBER view NAME
     Make a new BGP view.  You can use arbitrary word for the NAME.
     This view's route selection result does not go to the kernel
     routing table.

   With this command, you can setup Route Server like below.

     bgp multiple-instance
     !
     router bgp 1 view 1
      neighbor 10.0.0.1 remote-as 2
      neighbor 10.0.0.2 remote-as 3
     !
     router bgp 2 view 2
      neighbor 10.0.0.3 remote-as 4
      neighbor 10.0.0.4 remote-as 5


File: zebra.info,  Node: Routing policy,  Next: Viewing the view,  Prev: BGP instance and view,  Up: Route Server

Routing policy
--------------

   You can set different routing policy for a peer.  For example, you
can set different filter for a peer.

     bgp multiple-instance
     !
     router bgp 1 view 1
      neighbor 10.0.0.1 remote-as 2
      neighbor 10.0.0.1 distribute-list 1 in
     !
     router bgp 1 view 2
      neighbor 10.0.0.1 remote-as 2
      neighbor 10.0.0.1 distribute-list 2 in

   This means BGP update from a peer 10.0.0.1 goes both BGP view 1 and
view 2.  When the update is inserted into view 1 distribute-list 1 is
applied.  The other hand, the update is inserted into view 2
distribute-list 2 is applied.


File: zebra.info,  Node: Viewing the view,  Prev: Routing policy,  Up: Route Server

Viewing the view
----------------

   To display routing table of BGP view, you must specify view name.

 - Command: show ip bgp view NAME
     Display routing table of BGP view NAME.


File: zebra.info,  Node: How to set up a 6-Bone connection,  Next: Dump BGP packet and table,  Prev: Route Server,  Up: bgpd

How to set up a 6-Bone connection
=================================

     zebra configuration
     ===================
     !
     ! Actually there is no need to configure zebra
     !
     
     bgpd configuration
     ==================
     !
     ! This means that routes go through zebra and into the kernel.
     !
     router zebra
     !
     ! BGP-4+ configuration
     !
     router bgp 7675
      bgp router-id 10.0.0.1
     !
     ipv6 bgp network 3ffe:506::/32
     ipv6 bgp neighbor 3ffe:1cfa:0:2:2a0:c9ff:fe9e:f56 remote-as AS-NUMBER
     ipv6 bgp neighbor 3ffe:1cfa:0:2:2a0:c9ff:fe9e:f56 route-map set-nexthop out
     ipv6 bgp neighbor 3ffe:1cfa:0:2:2c0:4fff:fe68:a231 remote-as AS-NUMBER
     ipv6 bgp neighbor 3ffe:1cfa:0:2:2c0:4fff:fe68:a231 route-map set-nexthop out
     !
     ipv6 access-list all permit any
     !
     ! Set output nexthop address.
     !
     route-map set-nexthop permit 10
      match ipv6 address all
      set ipv6 nexthop global 3ffe:1cfa:0:2:2c0:4fff:fe68:a225
      set ipv6 nexthop local fe80::2c0:4fff:fe68:a225
     !
     ! logfile FILENAME is obsolete.  Please use log file FILENAME
     !
     log file bgpd.log
     !


File: zebra.info,  Node: Dump BGP packet and table,  Prev: How to set up a 6-Bone connection,  Up: bgpd

Dump BGP packet and table
=========================


File: zebra.info,  Node: Filtering,  Next: Route Map,  Prev: bgpd,  Up: Top

Filtering
*********

   Zebra provides many very flexible filtering features.  Filtering is
used for both input and output of the routing information.  Once
filtering is defined, it can be applied in any direction.

* Menu:

* IP Access List::
* IP Prefix List::
* IP Community List::
* AS Path Access List::


File: zebra.info,  Node: IP Access List,  Next: IP Prefix List,  Prev: Filtering,  Up: Filtering

IP Access List
--------------

 - Command: access-list NAME permit IPV4-NETWORK
 - Command: access-list NAME deny IPV4-NETWORK

   Basic filtering is done by `access-list' as shown in the following
example.

     access-list filter deny 10.0.0.0/9
     access-list filter permit 10.0.0.0/8


File: zebra.info,  Node: IP Prefix List,  Next: IP Community List,  Prev: IP Access List,  Up: Filtering

IP Prefix List
--------------

   `ip prefix-list' provides the most powerful prefix based filtering
mechanism.  Adding to `access-list' functionality, `ip prefix-list' has
prefix length range specification and sequential number specification.
You can add or delete prefix based filter to arbitrary point of
prefix-list using sequential number.

   If no ip prefix-list is specified, it acts as permit.  Once ip
prefix-list is defined, then no match is performed, default deny is
applied.

 - Command: ip prefix-list NAME (permit|deny) PREFIX [le LEN] [ge LEN]
 - Command: ip prefix-list NAME seq NUMBER (permit|deny) PREFIX [le
LEN] [ge LEN]
     You can create `ip prefix-list' using above commands.

    seq
          seq NUMBER can be set either automatically or manually.  In
          the case that sequential numbers are set manually, the user
          may pick any number less than 4294967295.  In the case that
          sequential number are set automatically, the sequential
          number will increase by a unit of five (5) per list.  If a
          list with no specified sequential number is created after a
          list with a specified sequential number, the list will
          automatically pick the next multiple of five (5) as the list
          number.  For example, if a list with number 2 already exists
          and a new list with no specified number is created, the next
          list will be numbered 5.  If lists 2 and 7 already exist and
          a new list with no specified number is created, the new list
          will be numbered 10.

    le
          `le' command specify prefix length.  If the given prefix
          length is lesser than or equal to le prefix length.  Prefix
          Lists can be applied on the basis of prefix length.  The le
          command specifies prefix length.  The prefix list will be
          applied if the prefix length is lesser than or equal to the
          le prefix length.

    ge
          `ge' command specify prefix length.  If the given prefix
          length is lesser than or equal to ge prefix length.  The ge
          command specifies prefix length.  The prefix list will be
          applied if the prefix length is greater than or equal to the
          ge prefix length.


   Lesser than or equal to prefix numbers and greater than or equal to
prefix numbers can be used together.  The order of the le and ge
commands does not matter.

   If a prefix list with a different sequential number but with the
exact same rules as a previous list is created, an error will result.
However, in the case that the sequential number and the rules are
exactly similar, no error will result.

   If a list with the same sequential number as a previous list is
created, the new list will overwrite the old list.

   Matching of IP Prefix is performed from the smaller sequential
number to the larger.  The matching will stop once any rule has been
applied.

   In the case of no le or ge command,

   Version 0.85: the matching rule will apply to all prefix lengths that
matched the prefix list.

   Version 0.86 or later: In the case of no le or ge command, the prefix
length must match exactly the length specified in the prefix list.

 - Command: no ip prefix-list NAME

* Menu:

* ip prefix-list description::
* ip prefix-list sequential number control::
* Showing ip prefix-list::
* Clear counter of ip prefix-list::


File: zebra.info,  Node: ip prefix-list description,  Next: ip prefix-list sequential number control,  Prev: IP Prefix List,  Up: IP Prefix List

ip prefix-list description
..........................

 - Command: ip prefix-list NAME description DESC
     Descriptions may be added to prefix lists.  This command adds a
     description to the prefix list.

 - Command: no ip prefix-list NAME description [DESC]
     Deletes the description from a prefix list.  It is possible to use
     the command without the full description.


File: zebra.info,  Node: ip prefix-list sequential number control,  Next: Showing ip prefix-list,  Prev: ip prefix-list description,  Up: IP Prefix List

ip prefix-list sequential number control
........................................

 - Command: ip prefix-list sequence-number
     With this command, the IP prefix list sequential number is
     displayed.  This is the default behavior.

 - Command: no ip prefix-list sequence-number
     With this command, the IP prefix list sequential number is not
     displayed.


File: zebra.info,  Node: Showing ip prefix-list,  Next: Clear counter of ip prefix-list,  Prev: ip prefix-list sequential number control,  Up: IP Prefix List

Showing ip prefix-list
......................

 - Command: show ip prefix-list
     Display all IP prefix lists.

 - Command: show ip prefix-list NAME
     Show IP prefix list can be used with a prefix list name.

 - Command: show ip prefix-list NAME seq NUM
     Show IP prefix list can be used with a prefix list name and
     sequential number.

 - Command: show ip prefix-list NAME A.B.C.D/M
     If the command longer is used, all prefix lists with prefix
     lengths equal to or longer than the specified length will be
     displayed.  If the command first match is used, the first prefix
     length match will be displayed.

 - Command: show ip prefix-list NAME A.B.C.D/M longer

 - Command: show ip prefix-list NAME A.B.C.D/M first-match

 - Command: show ip prefix-list summary

 - Command: show ip prefix-list summary NAME

 - Command: show ip prefix-list detail

 - Command: show ip prefix-list detail NAME


File: zebra.info,  Node: Clear counter of ip prefix-list,  Prev: Showing ip prefix-list,  Up: IP Prefix List

Clear counter of ip prefix-list
...............................

 - Command: clear ip prefix-list
     Clears the counters of all IP prefix lists.  Clear IP Prefix List
     can be used with a specified name and prefix.

 - Command: clear ip prefix-list NAME

 - Command: clear ip prefix-list NAME A.B.C.D/M


File: zebra.info,  Node: IP Community List,  Next: AS Path Access List,  Prev: IP Prefix List,  Up: Filtering

IP Community List
-----------------

 - Command: ip community-list NAME TYPE COMMUNITY


File: zebra.info,  Node: AS Path Access List,  Prev: IP Community List,  Up: Filtering

AS Path Access List
-------------------

 - Command: ip as-path access-list NAME TYPE AS_PATH


File: zebra.info,  Node: Route Map,  Next: IPv6 Supports,  Prev: Filtering,  Up: Top

Route Map
*********

   Route map is a very useful function in zebra.  There is a match and
set statement permitted in a route map.

     route-map test permit 10
      match ip address 10
      set local-preference 200

   This means that if a route matches ip access-list number 10 it's
local-preference value is set to 200.

* Menu:

* Route Map Command::
* Route Map Match Command::
* Route Map Set Command::


File: zebra.info,  Node: Route Map Command,  Next: Route Map Match Command,  Prev: Route Map,  Up: Route Map

Route Map Command
-----------------

 - Command: route-map ROUTE-MAP-NAME permit PRIORITY


File: zebra.info,  Node: Route Map Match Command,  Next: Route Map Set Command,  Prev: Route Map Command,  Up: Route Map

Route Map Match Command
-----------------------

 - Route-map Command: match ip address ACCESS_LIST
     Matches the specified ACCESS_LIST

 - Route-map Command: match ip next-hop IPV4_ADDR
     Matches the specified IPV4_ADDR.

 - Route-map Command: match aspath AS_PATH
     Matches the specified AS_PATH.

 - Route-map Command: match metric METRIC
     Matches the specified METRIC.

 - Route-map Command: match community COMMUNITY_LIST
     Matches the specified  COMMUNITY_LIST


File: zebra.info,  Node: Route Map Set Command,  Prev: Route Map Match Command,  Up: Route Map

Route Map Set Command
---------------------

 - Route-map Command: set ip next-hop IPV4_ADDRESS
     Set the BGP nexthop address.

 - Route-map Command: set local-preference LOCAL_PREF
     Set the BGP local preference.

 - Route-map Command: set weight WEIGHT
     Set the route's weight.

 - Route-map Command: set metric METRIC
     Set the BGP attribute MED.

 - Route-map Command: set as-path prepend AS_PATH
     Set the BGP AS path to prepend.

 - Route-map Command: set community COMMUNITY
     Set the BGP community attribute.

 - Route-map Command: set ipv6 next-hop global IPV6_ADDRESS
     Set the BGP-4+ global IPv6 nexthop address.

 - Route-map Command: set ipv6 next-hop local IPV6_ADDRESS
     Set the BGP-4+ link local IPv6 nexthop address.


File: zebra.info,  Node: IPv6 Supports,  Next: Kernel Interface,  Prev: Route Map,  Up: Top

IPv6 Supports
*************

   Zebra fully supports IPv6 routing.  As described so far, Zebra
supports RIPng, OSPFv3 and BGP-4+.  You can give IPv6 addresses to an
interface and configure static IPv6 routing information.  Zebra-IPv6
also provides automatic address configuration via a feature called
`address auto configuration'.  To do it, the router must send router
advertisement messages to the all nodes that exist on the network.

* Menu:

* Router Advertisement::


File: zebra.info,  Node: Router Advertisement,  Prev: IPv6 Supports,  Up: IPv6 Supports

Router Advertisement
====================

 - Interface Command: ipv6 nd send-ra

 - Interface Command: ipv6 nd prefix-advertisement IPV6PREFIX

     interface eth0
      ipv6 nd send-ra
      ipv6 nd prefix-advertisement 3ffe:506:5009::/64


File: zebra.info,  Node: Kernel Interface,  Next: SNMP Support,  Prev: IPv6 Supports,  Up: Top

Kernel Interface
****************

   There are several different methods for reading kernel routing table
information, updating kernel routing tables, and for looking up
interfaces.

`ioctl'
     The `ioctl' method is a very traditional way for reading or writing
     kernel information.  `ioctl' can be used for looking up interfaces
     and for modifying interface addresses, flags, mtu settings and
     other types of information.  Also, `ioctl' can insert and delete
     kernel routing table entries.  It will soon be available on almost
     any platform which zebra supports, but it is a little bit ugly
     thus far, so if a better method is supported by the kernel zebra
     will use that.

`sysctl'
     `sysctl' can lookup kernel information using MIB (Management
     Information Base) syntax.  Normally, it only provides a way of
     getting information from the kernel.  So one would usually want to
     change kernel information using another method such as `ioctl'.

`proc filesystem'
     `proc filesystem' provides an easy way of getting kernel
     information.

`routing socket'

`netlink'

File: zebra.info,  Node: SNMP Support,  Next: Linux Netlink,  Prev: Kernel Interface,  Up: Top

SNMP Support
************

   SNMP (Simple Network Managing Protocol) is widely implemented feature
for collecting network information from router and/or host.  Zebra
itself does not support SNMP agent functionality.  But conjuction with
SNMP agent, Zebra provides routing protocol MIBs.

   Zebra uses SMUX protocol (RFC1227) for making communication with SNMP
agent.  There are several SNMP agent which support SMUX.  We recommend
to use the latest `ucd-snmp' software.

* Menu:

* How to get ucd-snmp::
* SMUX configuration::


File: zebra.info,  Node: How to get ucd-snmp,  Next: SMUX configuration,  Prev: SNMP Support,  Up: SNMP Support

How to get ucd-snmp
===================

   ucd-snmp is a free software which distributed so called "as is"
software license.  Please check the license which comes with
distribution of `ucd-snmp'.  The authors of ucd-snmp are the University
of California, the University of California at Davis, and the Electrical
Engineering department at the University of California at Davis.

   You can get ucd-snmp from <ftp://ucd-smp.ucdavis.edu/>.  As of this
writing we are testing with `ucd-snmp-4.1.pre1.tar.gz'.

   To enable SMUX protocol support, please configure `ucd-snmp' like
below.

     % configure --with-mib-modules=smux

   After compile and install `ucd-snmp', you will need to configure
smuxpeer.  I'm now using below configuration.  This means SMUX client
connect under MIB 1.3.6.1.6.3.1 with password test.

     /usr/local/share/snmp/snmpd.conf
     ================================
     smuxpeer 1.3.6.1.6.3.1 test


File: zebra.info,  Node: SMUX configuration,  Prev: How to get ucd-snmp,  Up: SNMP Support

SMUX configuration
==================

   To enable SNMP support of Zebra, you have to configure Zebra with
`--enable-snmp' (*note Configure the Software::).

 - Command: smux peer OID
 - Command: no smux peer OID

 - Command: smux peer OID PASSWORD
 - Command: no smux peer OID PASSWORD

     !
     smux peer .1.3.6.1.6.3.1 test
     !


File: zebra.info,  Node: Linux Netlink,  Next: Zebra Protocol,  Prev: SNMP Support,  Up: Top

Linux Netlink
*************

   On recent Linux kernels (2.0.x and 2.2.x), there is a kernel/user
communication support called `netlink'.  It makes asynchronous
communication between kernel and Zebra possible, similar to a routing
socket on BSD systems.

   Before you use this feature, be sure to select the kernel/netlink
support option 'Kernel/User network link driver' and 'Routing messages'.

   Today, the /dev/route special device file is obsolete.  Netlink
communication is done by reading/writing over netlink socket.

   After the kernel configuration, please reconfigure and rebuild Zebra.
You can use netlink as a dynamic routing update channel between Zebra
and the kernel.


File: zebra.info,  Node: Zebra Protocol,  Next: Packet Binary Dump Format,  Prev: Linux Netlink,  Up: Top

Zebra Protocol
**************

